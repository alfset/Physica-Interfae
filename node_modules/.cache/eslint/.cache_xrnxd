[{"/workspace/Physica-Interfae/src/index.tsx":"1","/workspace/Physica-Interfae/src/serviceWorkerRegistration.ts":"2","/workspace/Physica-Interfae/src/state/logs/updater.ts":"3","/workspace/Physica-Interfae/src/state/application/updater.ts":"4","/workspace/Physica-Interfae/src/state/lists/updater.ts":"5","/workspace/Physica-Interfae/src/theme/components/RadialGradientByChainUpdater.ts":"6","/workspace/Physica-Interfae/src/i18n.tsx":"7","/workspace/Physica-Interfae/src/pages/App.tsx":"8","/workspace/Physica-Interfae/src/state/transactions/updater.tsx":"9","/workspace/Physica-Interfae/src/state/index.ts":"10","/workspace/Physica-Interfae/src/polyfills.ts":"11","/workspace/Physica-Interfae/src/state/hooks.ts":"12","/workspace/Physica-Interfae/src/state/application/reducer.ts":"13","/workspace/Physica-Interfae/src/state/logs/slice.ts":"14","/workspace/Physica-Interfae/src/state/application/hooks.ts":"15","/workspace/Physica-Interfae/src/state/logs/utils.ts":"16","/workspace/Physica-Interfae/src/state/lists/actions.ts":"17","/workspace/Physica-Interfae/src/state/lists/utils.ts":"18","/workspace/Physica-Interfae/src/theme/colors.ts":"19","/workspace/Physica-Interfae/src/hooks/useFetchListCallback.ts":"20","/workspace/Physica-Interfae/src/hooks/useIsWindowVisible.ts":"21","/workspace/Physica-Interfae/src/theme/index.tsx":"22","/workspace/Physica-Interfae/src/components/Web3Provider/index.tsx":"23","/workspace/Physica-Interfae/src/state/transactions/reducer.ts":"24","/workspace/Physica-Interfae/src/theme/components/ThemeToggle.tsx":"25","/workspace/Physica-Interfae/src/graphql/data/apollo.ts":"26","/workspace/Physica-Interfae/src/constants/chains.ts":"27","/workspace/Physica-Interfae/src/lib/state/multicall.tsx":"28","/workspace/Physica-Interfae/src/lib/hooks/useBlockNumber.tsx":"29","/workspace/Physica-Interfae/src/pages/AddLiquidity/redirects.tsx":"30","/workspace/Physica-Interfae/src/theme/components/DarkModeQueryParamReader.tsx":"31","/workspace/Physica-Interfae/src/pages/MigrateV2/MigrateV2Pair.tsx":"32","/workspace/Physica-Interfae/src/state/user/hooks.tsx":"33","/workspace/Physica-Interfae/src/pages/AddLiquidityV2/redirects.tsx":"34","/workspace/Physica-Interfae/src/tracing/index.ts":"35","/workspace/Physica-Interfae/src/state/routing/slice.ts":"36","/workspace/Physica-Interfae/src/theme/utils.ts":"37","/workspace/Physica-Interfae/src/lib/hooks/useInterval.ts":"38","/workspace/Physica-Interfae/src/utils/env.ts":"39","/workspace/Physica-Interfae/src/utils/supportedChainId.ts":"40","/workspace/Physica-Interfae/src/hooks/useDebounce.ts":"41","/workspace/Physica-Interfae/src/hooks/useIsNftPage.ts":"42","/workspace/Physica-Interfae/src/state/reducer.ts":"43","/workspace/Physica-Interfae/src/constants/lists.ts":"44","/workspace/Physica-Interfae/src/state/lists/hooks.ts":"45","/workspace/Physica-Interfae/src/hooks/useActiveLocale.ts":"46","/workspace/Physica-Interfae/src/featureFlags/index.tsx":"47","/workspace/Physica-Interfae/src/components/analytics/index.ts":"48","/workspace/Physica-Interfae/src/hooks/useApeModeQueryParamReader.ts":"49","/workspace/Physica-Interfae/src/theme/zIndex.ts":"50","/workspace/Physica-Interfae/src/theme/styles.ts":"51","/workspace/Physica-Interfae/src/state/application/atoms.ts":"52","/workspace/Physica-Interfae/src/constants/misc.ts":"53","/workspace/Physica-Interfae/src/state/global/actions.ts":"54","/workspace/Physica-Interfae/src/lib/i18n.tsx":"55","/workspace/Physica-Interfae/src/theme/components/text.tsx":"56","/workspace/Physica-Interfae/src/components/ErrorBoundary/index.tsx":"57","/workspace/Physica-Interfae/src/components/Polling/index.tsx":"58","/workspace/Physica-Interfae/src/components/NavBar/index.tsx":"59","/workspace/Physica-Interfae/src/components/Popups/index.tsx":"60","/workspace/Physica-Interfae/src/pages/MigrateV2/index.tsx":"61","/workspace/Physica-Interfae/src/pages/AddLiquidity/index.tsx":"62","/workspace/Physica-Interfae/src/pages/Landing/index.tsx":"63","/workspace/Physica-Interfae/src/pages/NotFound/index.tsx":"64","/workspace/Physica-Interfae/src/nft/hooks/useBag.ts":"65","/workspace/Physica-Interfae/src/utils/getExplorerLink.ts":"66","/workspace/Physica-Interfae/src/utils/currencyId.ts":"67","/workspace/Physica-Interfae/src/state/user/reducer.ts":"68","/workspace/Physica-Interfae/src/hooks/Tokens.ts":"69","/workspace/Physica-Interfae/src/constants/routing.ts":"70","/workspace/Physica-Interfae/src/constants/addresses.ts":"71","/workspace/Physica-Interfae/src/components/Icons/LoadingSpinner.tsx":"72","/workspace/Physica-Interfae/src/theme/components/SegmentedControl.tsx":"73","/workspace/Physica-Interfae/src/lib/hooks/transactions/updater.tsx":"74","/workspace/Physica-Interfae/src/nft/pages/asset/Asset.tsx":"75","/workspace/Physica-Interfae/src/nft/pages/profile/profile.tsx":"76","/workspace/Physica-Interfae/src/pages/AppBody.tsx":"77","/workspace/Physica-Interfae/src/pages/Vote/index.tsx":"78","/workspace/Physica-Interfae/src/pages/AddLiquidityV2/index.tsx":"79","/workspace/Physica-Interfae/src/utils/calculateGasMargin.ts":"80","/workspace/Physica-Interfae/src/pages/TokenDetails/index.tsx":"81","/workspace/Physica-Interfae/src/tracing/trace.ts":"82","/workspace/Physica-Interfae/src/state/wallets/reducer.ts":"83","/workspace/Physica-Interfae/src/constants/providers.ts":"84","/workspace/Physica-Interfae/src/hooks/useParsedQueryString.ts":"85","/workspace/Physica-Interfae/src/state/mint/v3/reducer.ts":"86","/workspace/Physica-Interfae/src/theme/components/index.tsx":"87","/workspace/Physica-Interfae/src/lib/hooks/useTokenList/fetchTokenList.ts":"88","/workspace/Physica-Interfae/src/lib/utils/resolveENSContentHash.ts":"89","/workspace/Physica-Interfae/src/featureFlags/flags/featureFlags.ts":"90","/workspace/Physica-Interfae/src/hooks/useOrderedConnections.ts":"91","/workspace/Physica-Interfae/src/hooks/useEagerlyConnect.ts":"92","/workspace/Physica-Interfae/src/components/analytics/GoogleAnalyticsProvider.tsx":"93","/workspace/Physica-Interfae/src/state/connection/hooks.ts":"94","/workspace/Physica-Interfae/src/components/TopLevelModals/index.tsx":"95","/workspace/Physica-Interfae/src/state/lists/wrappedTokenInfo.ts":"96","/workspace/Physica-Interfae/src/constants/tokens.ts":"97","/workspace/Physica-Interfae/src/utils/constructSameAddressMap.ts":"98","/workspace/Physica-Interfae/src/types/tokens.ts":"99","/workspace/Physica-Interfae/src/pages/AddLiquidity/styled.tsx":"100","/workspace/Physica-Interfae/src/nft/pages/collection/index.tsx":"101","/workspace/Physica-Interfae/src/nft/pages/explore/index.tsx":"102","/workspace/Physica-Interfae/src/nft/pages/profile/shared.ts":"103","/workspace/Physica-Interfae/src/utils/maxAmountSpend.ts":"104","/workspace/Physica-Interfae/src/utils/calculateSlippageAmount.ts":"105","/workspace/Physica-Interfae/src/state/transactions/types.ts":"106","/workspace/Physica-Interfae/src/pages/AddLiquidityV2/PoolPriceBar.tsx":"107","/workspace/Physica-Interfae/src/pages/AddLiquidityV2/ConfirmAddModalBottom.tsx":"108","/workspace/Physica-Interfae/src/pages/Pool/styleds.tsx":"109","/workspace/Physica-Interfae/src/state/transactions/hooks.tsx":"110","/workspace/Physica-Interfae/src/utils/listSort.ts":"111","/workspace/Physica-Interfae/src/constants/networks.ts":"112","/workspace/Physica-Interfae/src/lib/hooks/routing/clientSideSmartOrderRouter.ts":"113","/workspace/Physica-Interfae/src/constants/chainInfo.ts":"114","/workspace/Physica-Interfae/src/state/mint/v3/actions.ts":"115","/workspace/Physica-Interfae/src/utils/anonymizeLink.ts":"116","/workspace/Physica-Interfae/src/utils/userAgent.ts":"117","/workspace/Physica-Interfae/src/constants/locales.ts":"118","/workspace/Physica-Interfae/src/components/Row/index.tsx":"119","/workspace/Physica-Interfae/src/utils/retry.ts":"120","/workspace/Physica-Interfae/src/utils/nativeTokens.ts":"121","/workspace/Physica-Interfae/src/state/mint/actions.ts":"122","/workspace/Physica-Interfae/src/lib/utils/uriToHttp.ts":"123","/workspace/Physica-Interfae/src/lib/utils/parseENSAddress.ts":"124","/workspace/Physica-Interfae/src/lib/utils/contenthashToUri.ts":"125","/workspace/Physica-Interfae/src/nft/hooks/index.ts":"126","/workspace/Physica-Interfae/src/hooks/useCopyClipboard.ts":"127","/workspace/Physica-Interfae/src/utils/index.ts":"128","/workspace/Physica-Interfae/src/nft/types/index.ts":"129","/workspace/Physica-Interfae/src/lib/hooks/useCurrencyBalance.ts":"130","/workspace/Physica-Interfae/src/components/Tokens/constants.ts":"131","/workspace/Physica-Interfae/src/hooks/useAccountRiskCheck.ts":"132","/workspace/Physica-Interfae/src/components/Button/index.tsx":"133","/workspace/Physica-Interfae/src/nft/components/collection/TransactionCompleteModal.tsx":"134","/workspace/Physica-Interfae/src/nft/components/bag/Bag.tsx":"135","/workspace/Physica-Interfae/src/nft/components/icons.tsx":"136","/workspace/Physica-Interfae/src/nft/components/collection/CollectionPageSkeleton.tsx":"137","/workspace/Physica-Interfae/src/nft/components/collection/CollectionNfts.tsx":"138","/workspace/Physica-Interfae/src/nft/components/explore/Banner.tsx":"139","/workspace/Physica-Interfae/src/nft/components/explore/TrendingCollections.tsx":"140","/workspace/Physica-Interfae/src/nft/components/bag/MobileHoverBag.tsx":"141","/workspace/Physica-Interfae/src/components/Loader/styled.tsx":"142","/workspace/Physica-Interfae/src/utils/transformSwapRouteToGetQuoteResult.ts":"143","/workspace/Physica-Interfae/src/connection/index.ts":"144","/workspace/Physica-Interfae/src/nft/hooks/useWalletCollections.ts":"145","/workspace/Physica-Interfae/src/hooks/useContract.ts":"146","/workspace/Physica-Interfae/src/components/AirdropModal/index.tsx":"147","/workspace/Physica-Interfae/src/nft/utils/index.ts":"148","/workspace/Physica-Interfae/src/nft/components/collection/index.ts":"149","/workspace/Physica-Interfae/src/components/FiatOnrampModal/index.tsx":"150","/workspace/Physica-Interfae/src/components/Button/LoadingButtonSpinner.tsx":"151","/workspace/Physica-Interfae/src/graphql/data/util.tsx":"152","/workspace/Physica-Interfae/src/nft/components/explore/CollectionTable.tsx":"153","/workspace/Physica-Interfae/src/nft/components/explore/CarouselCard.tsx":"154","/workspace/Physica-Interfae/src/nft/components/explore/Carousel.tsx":"155","/workspace/Physica-Interfae/src/nft/components/collection/TraitChip.tsx":"156","/workspace/Physica-Interfae/src/nft/components/collection/Sweep.tsx":"157","/workspace/Physica-Interfae/src/connection/WalletConnect.ts":"158","/workspace/Physica-Interfae/src/connection/utils.ts":"159","/workspace/Physica-Interfae/src/nft/components/collection/shared.tsx":"160","/workspace/Physica-Interfae/src/nft/components/collection/MarketplaceSelect.tsx":"161","/workspace/Physica-Interfae/src/nft/components/collection/CollectionAssetLoading.tsx":"162","/workspace/Physica-Interfae/src/nft/types/sell/index.ts":"163","/workspace/Physica-Interfae/src/lib/hooks/multicall.ts":"164","/workspace/Physica-Interfae/src/nft/types/discover/index.ts":"165","/workspace/Physica-Interfae/src/nft/types/common/index.ts":"166","/workspace/Physica-Interfae/src/nft/types/navbar/index.ts":"167","/workspace/Physica-Interfae/src/nft/utils/updatedAssets.ts":"168","/workspace/Physica-Interfae/src/nft/utils/transactionResponse.ts":"169","/workspace/Physica-Interfae/src/nft/types/collection/index.ts":"170","/workspace/Physica-Interfae/src/nft/types/checkout/index.ts":"171","/workspace/Physica-Interfae/src/nft/components/collection/Filters.tsx":"172","/workspace/Physica-Interfae/src/nft/components/collection/FilterButton.tsx":"173","/workspace/Physica-Interfae/src/nft/components/collection/CollectionStats.tsx":"174","/workspace/Physica-Interfae/src/nft/queries/index.ts":"175","/workspace/Physica-Interfae/src/nft/components/collection/CollectionSearch.tsx":"176","/workspace/Physica-Interfae/src/nft/components/collection/ActivitySwitcher.tsx":"177","/workspace/Physica-Interfae/src/nft/components/collection/Activity.tsx":"178","/workspace/Physica-Interfae/src/nft/hooks/useBagTotalEthPrice.ts":"179","/workspace/Physica-Interfae/src/nft/components/Box.ts":"180","/workspace/Physica-Interfae/src/featureFlags/flags/nftlGraphql.ts":"181","/workspace/Physica-Interfae/src/graphql/data/nft/TrendingCollections.ts":"182","/workspace/Physica-Interfae/src/nft/components/Flex.tsx":"183","/workspace/Physica-Interfae/src/nft/components/explore/Table.tsx":"184","/workspace/Physica-Interfae/src/nft/utils/urlParams.ts":"185","/workspace/Physica-Interfae/src/nft/components/explore/Cells/Cells.tsx":"186","/workspace/Physica-Interfae/src/nft/utils/scrollToTop.ts":"187","/workspace/Physica-Interfae/src/nft/types/sell/sell.ts":"188","/workspace/Physica-Interfae/src/nft/components/layout/Checkbox.tsx":"189","/workspace/Physica-Interfae/src/nft/types/common/common.ts":"190","/workspace/Physica-Interfae/src/nft/types/discover/discover.ts":"191","/workspace/Physica-Interfae/src/nft/types/navbar/navbar.ts":"192","/workspace/Physica-Interfae/src/nft/types/collection/collection.ts":"193","/workspace/Physica-Interfae/src/nft/types/checkout/checkout.ts":"194","/workspace/Physica-Interfae/src/nft/css/atoms.ts":"195","/workspace/Physica-Interfae/src/components/Modal/index.tsx":"196","/workspace/Physica-Interfae/src/nft/components/collection/TraitSelect.tsx":"197","/workspace/Physica-Interfae/src/nft/components/collection/ActivityLoader.tsx":"198","/workspace/Physica-Interfae/src/nft/components/collection/ActivityCells.tsx":"199","/workspace/Physica-Interfae/src/components/Common/index.tsx":"200","/workspace/Physica-Interfae/src/graphql/data/nft/Collection.ts":"201","/workspace/Physica-Interfae/src/graphql/data/nft/Asset.ts":"202","/workspace/Physica-Interfae/src/nft/utils/currency.ts":"203","/workspace/Physica-Interfae/src/nft/hooks/useCollectionFilters.ts":"204","/workspace/Physica-Interfae/src/nft/queries/x2y2/index.ts":"205","/workspace/Physica-Interfae/src/lib/utils/tryParseCurrencyAmount.ts":"206","/workspace/Physica-Interfae/src/hooks/useStablecoinPrice.ts":"207","/workspace/Physica-Interfae/src/nft/utils/fetchPrice.ts":"208","/workspace/Physica-Interfae/src/nft/components/collection/TraitsHeader.tsx":"209","/workspace/Physica-Interfae/src/nft/components/layout/Input.tsx":"210","/workspace/Physica-Interfae/src/hooks/useWindowSize.ts":"211","/workspace/Physica-Interfae/src/graphql/data/nft/NftActivity.ts":"212","/workspace/Physica-Interfae/src/nft/queries/openSea/index.ts":"213","/workspace/Physica-Interfae/src/components/Tokens/loading.tsx":"214","/workspace/Physica-Interfae/src/nft/queries/looksRare/index.ts":"215","/workspace/Physica-Interfae/src/nft/queries/genie/ActivityFetcher.ts":"216","/workspace/Physica-Interfae/src/nft/queries/genie/index.ts":"217","/workspace/Physica-Interfae/src/nft/utils/roundAndPluralize.ts":"218","/workspace/Physica-Interfae/src/nft/utils/putCommas.ts":"219","/workspace/Physica-Interfae/src/nft/utils/date.ts":"220","/workspace/Physica-Interfae/src/nft/utils/buildActivityAsset.ts":"221","/workspace/Physica-Interfae/src/nft/utils/address.ts":"222","/workspace/Physica-Interfae/src/nft/queries/openSea/PostOpenSeaSellOrder.ts":"223","/workspace/Physica-Interfae/src/nft/queries/openSea/OSCollectionsFetcher.ts":"224","/workspace/Physica-Interfae/src/nft/queries/looksRare/looksRareRewardsFetcher.ts":"225","/workspace/Physica-Interfae/src/nft/queries/looksRare/looksRareNonceFetcher.ts":"226","/workspace/Physica-Interfae/src/nft/queries/genie/TrendingCollectionsFetcher.ts":"227","/workspace/Physica-Interfae/src/nft/queries/genie/SearchCollectionsFetcher.ts":"228","/workspace/Physica-Interfae/src/nft/queries/genie/CollectionPreviewFetcher.ts":"229","/workspace/Physica-Interfae/src/nft/queries/genie/RouteFetcher.ts":"230","/workspace/Physica-Interfae/src/nft/queries/looksRare/createLooksRareOrder.ts":"231","/workspace/Physica-Interfae/src/nft/queries/openSea/constants.ts":"232","/workspace/Physica-Interfae/src/nft/queries/looksRare/constants.ts":"233","/workspace/Physica-Interfae/src/nft/utils/numbers.ts":"234","/workspace/Physica-Interfae/src/nft/css/reset.css.ts":"235","/workspace/Physica-Interfae/src/hooks/useScreenSize.ts":"236","/workspace/Physica-Interfae/src/nft/hooks/useIsCollectionLoading.ts":"237","/workspace/Physica-Interfae/src/state/routing/useRoutingAPITrade.ts":"238","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/PriceChart.tsx":"239","/workspace/Physica-Interfae/src/nft/hooks/useTraitsOpen.ts":"240","/workspace/Physica-Interfae/src/nft/components/bag/MobileHoverBag.css.ts":"241","/workspace/Physica-Interfae/src/nft/css/common.css.ts":"242","/workspace/Physica-Interfae/src/nft/components/collection/CollectionAssetLoading.css.ts":"243","/workspace/Physica-Interfae/src/nft/components/collection/CollectionStats.css.ts":"244","/workspace/Physica-Interfae/src/nft/css/loading.css.ts":"245","/workspace/Physica-Interfae/src/nft/css/sprinkles.css.ts":"246","/workspace/Physica-Interfae/src/nft/components/collection/ActivitySwitcher.css.ts":"247","/workspace/Physica-Interfae/src/nft/pages/collection/index.css.ts":"248","/workspace/Physica-Interfae/src/nft/components/explore/Explore.css.ts":"249","/workspace/Physica-Interfae/src/nft/components/layout/Checkbox.css.ts":"250","/workspace/Physica-Interfae/src/nft/components/collection/CollectionSearch.css.ts":"251","/workspace/Physica-Interfae/src/nft/components/explore/Cells/Cells.css.ts":"252","/workspace/Physica-Interfae/src/nft/components/collection/ActivityLoader.css.ts":"253","/workspace/Physica-Interfae/src/nft/components/collection/Filters.css.ts":"254","/workspace/Physica-Interfae/src/nft/components/collection/Activity.css.ts":"255","/workspace/Physica-Interfae/src/components/Tooltip/index.tsx":"256","/workspace/Physica-Interfae/src/nft/components/collection/FilterButton.css.ts":"257","/workspace/Physica-Interfae/src/state/routing/utils.ts":"258","/workspace/Physica-Interfae/src/state/routing/types.ts":"259","/workspace/Physica-Interfae/src/utils/formatNumbers.ts":"260","/workspace/Physica-Interfae/src/utils/formatChartTimes.ts":"261","/workspace/Physica-Interfae/src/components/Charts/FadeInLineChart.tsx":"262","/workspace/Physica-Interfae/src/components/Charts/AnimatedInLineChart.tsx":"263","/workspace/Physica-Interfae/src/lib/hooks/routing/useRoutingAPIArguments.ts":"264","/workspace/Physica-Interfae/src/utils/noop.ts":"265","/workspace/Physica-Interfae/src/components/Popover/index.tsx":"266","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/index.ts":"267","/workspace/Physica-Interfae/src/nft/components/collection/PriceRange.tsx":"268","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/SortDropdown.tsx":"269","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/FilterSortDropdown.tsx":"270","/workspace/Physica-Interfae/src/nft/components/collection/PriceRange.css.ts":"271","/workspace/Physica-Interfae/src/nft/hooks/usePriceRange.ts":"272","/workspace/Physica-Interfae/src/nft/utils/timeSince.ts":"273","/workspace/Physica-Interfae/src/nft/utils/pooledAssets.ts":"274","/workspace/Physica-Interfae/src/nft/utils/listNfts.ts":"275","/workspace/Physica-Interfae/src/nft/utils/isVideo.ts":"276","/workspace/Physica-Interfae/src/nft/utils/isAudio.ts":"277","/workspace/Physica-Interfae/src/nft/utils/formatEventProperties.ts":"278","/workspace/Physica-Interfae/src/nft/utils/collection.ts":"279","/workspace/Physica-Interfae/src/nft/utils/asset.ts":"280","/workspace/Physica-Interfae/src/nft/utils/buildSellObject.ts":"281","/workspace/Physica-Interfae/src/nft/utils/carousel.ts":"282","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/SortDropdown.css.ts":"283","/workspace/Physica-Interfae/src/hooks/useOnClickOutside.ts":"284","/workspace/Physica-Interfae/src/nft/components/bag/EmptyContent.tsx":"285","/workspace/Physica-Interfae/src/nft/components/bag/BagHeader.tsx":"286","/workspace/Physica-Interfae/src/nft/components/bag/BagContent.tsx":"287","/workspace/Physica-Interfae/src/nft/components/bag/profile/ProfileBagContent.tsx":"288","/workspace/Physica-Interfae/src/nft/hooks/useWalletBalance.ts":"289","/workspace/Physica-Interfae/src/nft/hooks/useTransactionResponse.ts":"290","/workspace/Physica-Interfae/src/nft/hooks/useSendTransaction.ts":"291","/workspace/Physica-Interfae/src/nft/hooks/useSelectAsset.ts":"292","/workspace/Physica-Interfae/src/nft/hooks/useSweep.ts":"293","/workspace/Physica-Interfae/src/nft/hooks/useSellAsset.ts":"294","/workspace/Physica-Interfae/src/nft/hooks/useProfilePageState.ts":"295","/workspace/Physica-Interfae/src/nft/hooks/useNFTSelect.ts":"296","/workspace/Physica-Interfae/src/nft/hooks/useMarketplaceSelect.ts":"297","/workspace/Physica-Interfae/src/nft/hooks/useNFTList.ts":"298","/workspace/Physica-Interfae/src/nft/hooks/useIsTablet.ts":"299","/workspace/Physica-Interfae/src/nft/hooks/useIsMobile.ts":"300","/workspace/Physica-Interfae/src/nft/hooks/useFiltersExpanded.ts":"301","/workspace/Physica-Interfae/src/nft/utils/x2y2.ts":"302","/workspace/Physica-Interfae/src/nft/queries/genie/GetAirdorpMerkle.ts":"303","/workspace/Physica-Interfae/src/nft/hooks/useIsNftClaimAvailable.ts":"304","/workspace/Physica-Interfae/src/nft/components/bag/Bag.css.ts":"305","/workspace/Physica-Interfae/src/nft/components/collection/TransactionCompleteModal.css.ts":"306","/workspace/Physica-Interfae/src/nft/components/collection/CollectionAsset.tsx":"307","/workspace/Physica-Interfae/src/nft/components/bag/BagFooter.tsx":"308","/workspace/Physica-Interfae/src/nft/components/modals/Overlay.tsx":"309","/workspace/Physica-Interfae/src/nft/utils/txRoute/combineItemsWithTxRoute.ts":"310","/workspace/Physica-Interfae/src/nft/components/bag/profile/ProfileAssetRow.tsx":"311","/workspace/Physica-Interfae/src/nft/types/airdrop/index.ts":"312","/workspace/Physica-Interfae/src/nft/components/collection/CollectionNfts.css.ts":"313","/workspace/Physica-Interfae/src/nft/components/common/Portal/index.ts":"314","/workspace/Physica-Interfae/src/components/Column/index.tsx":"315","/workspace/Physica-Interfae/src/nft/components/bag/BagRow.tsx":"316","/workspace/Physica-Interfae/src/nft/components/common/Portal/Portal.tsx":"317","/workspace/Physica-Interfae/src/utils/switchChain.ts":"318","/workspace/Physica-Interfae/src/nft/components/bag/BagRow.css.ts":"319","/workspace/Physica-Interfae/src/nft/components/card/icons.tsx":"320","/workspace/Physica-Interfae/src/nft/components/modals/Overlay.css.ts":"321","/workspace/Physica-Interfae/src/components/Logo/CurrencyLogo.tsx":"322","/workspace/Physica-Interfae/src/nft/hooks/useTokenInput.ts":"323","/workspace/Physica-Interfae/src/nft/hooks/useSubscribeTransactionState.ts":"324","/workspace/Physica-Interfae/src/nft/hooks/usePermit2Approval.ts":"325","/workspace/Physica-Interfae/src/nft/hooks/usePriceImpact.ts":"326","/workspace/Physica-Interfae/src/nft/hooks/usePayWithAnyTokenSwap.ts":"327","/workspace/Physica-Interfae/src/nft/hooks/useFetchAssets.ts":"328","/workspace/Physica-Interfae/src/nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts":"329","/workspace/Physica-Interfae/src/hooks/usePermit2Allowance.ts":"330","/workspace/Physica-Interfae/src/featureFlags/flags/payWithAnyToken.ts":"331","/workspace/Physica-Interfae/src/nft/components/card/index.tsx":"332","/workspace/Physica-Interfae/src/components/SearchModal/CurrencySearchModal.tsx":"333","/workspace/Physica-Interfae/src/nft/components/bag/TimedLoader.tsx":"334","/workspace/Physica-Interfae/src/components/claim/AddressClaimModal.tsx":"335","/workspace/Physica-Interfae/src/components/Logo/AssetLogo.tsx":"336","/workspace/Physica-Interfae/src/nft/hooks/usePurchaseAssets.ts":"337","/workspace/Physica-Interfae/src/hooks/useLast.ts":"338","/workspace/Physica-Interfae/src/components/AccountDrawer/index.tsx":"339","/workspace/Physica-Interfae/src/nft/components/card/utils.tsx":"340","/workspace/Physica-Interfae/src/components/SearchModal/CurrencySearch.tsx":"341","/workspace/Physica-Interfae/src/components/NumericalInput/index.tsx":"342","/workspace/Physica-Interfae/src/components/CurrencyInputPanel/index.tsx":"343","/workspace/Physica-Interfae/src/components/ConnectedAccountBlocked/index.tsx":"344","/workspace/Physica-Interfae/src/components/earn/styled.ts":"345","/workspace/Physica-Interfae/src/utils/prices.ts":"346","/workspace/Physica-Interfae/src/nft/utils/nftRoute.ts":"347","/workspace/Physica-Interfae/src/nft/utils/tokenRoutes.ts":"348","/workspace/Physica-Interfae/src/hooks/useBestTrade.ts":"349","/workspace/Physica-Interfae/src/nft/utils/bag.ts":"350","/workspace/Physica-Interfae/src/hooks/useAutoSlippageTolerance.ts":"351","/workspace/Physica-Interfae/src/hooks/useTokenAllowance.ts":"352","/workspace/Physica-Interfae/src/hooks/useENS.ts":"353","/workspace/Physica-Interfae/src/state/claim/hooks.ts":"354","/workspace/Physica-Interfae/src/nft/components/card/media.tsx":"355","/workspace/Physica-Interfae/src/nft/components/card/containers.tsx":"356","/workspace/Physica-Interfae/src/components/AccountDrawer/DefaultMenu.tsx":"357","/workspace/Physica-Interfae/src/components/SearchModal/styleds.tsx":"358","/workspace/Physica-Interfae/src/hooks/usePermitAllowance.ts":"359","/workspace/Physica-Interfae/src/components/SearchModal/CommonBases.tsx":"360","/workspace/Physica-Interfae/src/hooks/useAssetLogoSource.ts":"361","/workspace/Physica-Interfae/src/components/CurrencyInputPanel/FiatValue.tsx":"362","/workspace/Physica-Interfae/src/components/AccountDrawer/UniwalletModal.tsx":"363","/workspace/Physica-Interfae/src/hooks/useClientSideV3Trade.ts":"364","/workspace/Physica-Interfae/src/hooks/useGasPrice.ts":"365","/workspace/Physica-Interfae/src/hooks/useENSName.ts":"366","/workspace/Physica-Interfae/src/components/AddressInputPanel/index.tsx":"367","/workspace/Physica-Interfae/src/hooks/useENSAddress.ts":"368","/workspace/Physica-Interfae/src/hooks/useAutoRouterSupported.tsx":"369","/workspace/Physica-Interfae/src/components/AccountDrawer/SettingsMenu.tsx":"370","/workspace/Physica-Interfae/src/components/AccountDrawer/AuthenticatedHeader.tsx":"371","/workspace/Physica-Interfae/src/lib/hooks/useTokenList/sorting.ts":"372","/workspace/Physica-Interfae/src/components/TokenSafety/index.tsx":"373","/workspace/Physica-Interfae/src/lib/hooks/useTokenList/filtering.ts":"374","/workspace/Physica-Interfae/src/components/SearchModal/CurrencyList/index.tsx":"375","/workspace/Physica-Interfae/src/utils/formatCurrencyAmount.ts":"376","/workspace/Physica-Interfae/src/lib/hooks/useNativeCurrency.ts":"377","/workspace/Physica-Interfae/src/hooks/useToggle.ts":"378","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyIcon.tsx":"379","/workspace/Physica-Interfae/src/components/DoubleLogo/index.tsx":"380","/workspace/Physica-Interfae/src/hooks/useAllV3Routes.ts":"381","/workspace/Physica-Interfae/src/utils/isZero.ts":"382","/workspace/Physica-Interfae/src/components/AccountDrawer/DownloadButton.tsx":"383","/workspace/Physica-Interfae/src/components/AccountDrawer/SmallBalanceToggle.tsx":"384","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/PortfolioRow.tsx":"385","/workspace/Physica-Interfae/src/lib/utils/analytics.ts":"386","/workspace/Physica-Interfae/src/components/AccountDrawer/IconButton.tsx":"387","/workspace/Physica-Interfae/src/hooks/useTokenInfoFromActiveList.ts":"388","/workspace/Physica-Interfae/src/components/AccountDrawer/SlideOutMenu.tsx":"389","/workspace/Physica-Interfae/src/components/AccountDrawer/GitVersionRow.tsx":"390","/workspace/Physica-Interfae/src/components/Identicon/StatusIcon.tsx":"391","/workspace/Physica-Interfae/src/lib/hooks/useCurrencyLogoURIs.ts":"392","/workspace/Physica-Interfae/src/hooks/useV3SwapPools.ts":"393","/workspace/Physica-Interfae/src/constants/TokenLogoLookupTable.ts":"394","/workspace/Physica-Interfae/src/components/WalletModal/index.tsx":"395","/workspace/Physica-Interfae/src/hooks/useLocationLinkProps.ts":"396","/workspace/Physica-Interfae/src/lib/utils/formatLocaleNumber.ts":"397","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/index.tsx":"398","/workspace/Physica-Interfae/src/constants/tokenSafety.tsx":"399","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyLabel.tsx":"400","/workspace/Physica-Interfae/src/hooks/useAllCurrencyCombinations.ts":"401","/workspace/Physica-Interfae/src/hooks/usePools.ts":"402","/workspace/Physica-Interfae/src/hooks/useSocksBalance.ts":"403","/workspace/Physica-Interfae/src/components/SearchModal/CurrencyList/index.css.ts":"404","/workspace/Physica-Interfae/src/components/WalletModal/PrivacyPolicyNotice.tsx":"405","/workspace/Physica-Interfae/src/components/WalletModal/Option.tsx":"406","/workspace/Physica-Interfae/src/components/WalletModal/ConnectionErrorView.tsx":"407","/workspace/Physica-Interfae/src/constants/TokenSafetyLookupTable.ts":"408","/workspace/Physica-Interfae/src/hooks/useHttpLocations.ts":"409","/workspace/Physica-Interfae/src/hooks/useENSAvatar.ts":"410","/workspace/Physica-Interfae/src/components/Identicon/index.tsx":"411","/workspace/Physica-Interfae/src/hooks/useTokenWarningColor.ts":"412","/workspace/Physica-Interfae/src/state/wallets/hooks.tsx":"413","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Tokens/index.tsx":"414","/workspace/Physica-Interfae/src/components/WalletModal/NewBadge.tsx":"415","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/index.tsx":"416","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/NFTs/index.tsx":"417","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/index.tsx":"418","/workspace/Physica-Interfae/src/hooks/useENSContentHash.ts":"419","/workspace/Physica-Interfae/src/components/Unicon/index.tsx":"420","/workspace/Physica-Interfae/src/components/Toggle/index.tsx":"421","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/parseLocal.ts":"422","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/ExpandoRow.tsx":"423","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/PortfolioLogo.tsx":"424","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/parseRemote.tsx":"425","/workspace/Physica-Interfae/src/components/Unicon/utils.ts":"426","/workspace/Physica-Interfae/src/components/Unicon/types.ts":"427","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/constants.ts":"428","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/hooks.ts":"429","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/ActivityRow.tsx":"430","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/NFTs/NFTItem.tsx":"431","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/useMultiChainPositions.tsx":"432","/workspace/Physica-Interfae/src/components/Unicon/Emblem.ts":"433","/workspace/Physica-Interfae/src/components/Unicon/Container.ts":"434","/workspace/Physica-Interfae/src/graphql/data/nft/NftBalance.ts":"435","/workspace/Physica-Interfae/src/hooks/useFilterPossiblyMaliciousPositions.ts":"436","/workspace/Physica-Interfae/src/nft/components/profile/view/EmptyWalletContent.tsx":"437","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/getTokensAsync.ts":"438","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/cache.ts":"439","/workspace/Physica-Interfae/src/components/Badge/index.tsx":"440","/workspace/Physica-Interfae/src/utils/currencyKey.ts":"441","/workspace/Physica-Interfae/src/hooks/useTokenContractsConstant.ts":"442","/workspace/Physica-Interfae/src/components/Icons/AlertTriangleFilled.tsx":"443","/workspace/Physica-Interfae/src/nft/components/profile/view/icons.tsx":"444","/workspace/Physica-Interfae/src/utils/arrays.ts":"445","/workspace/Physica-Interfae/src/utils/urlChecks.ts":"446","/workspace/Physica-Interfae/src/components/Icons/shared.tsx":"447","/workspace/Physica-Interfae/src/hooks/useTransactionDeadline.ts":"448","/workspace/Physica-Interfae/src/hooks/useApproveCallback.ts":"449","/workspace/Physica-Interfae/src/hooks/useV2Pairs.ts":"450","/workspace/Physica-Interfae/src/hooks/useIsSwapUnsupported.ts":"451","/workspace/Physica-Interfae/src/state/mint/hooks.tsx":"452","/workspace/Physica-Interfae/src/pages/Vote/VotePage.tsx":"453","/workspace/Physica-Interfae/src/pages/Vote/Landing.tsx":"454","/workspace/Physica-Interfae/src/utils/approveAmountCalldata.ts":"455","/workspace/Physica-Interfae/src/hooks/useCurrentBlockTimestamp.ts":"456","/workspace/Physica-Interfae/src/pages/AddLiquidity/Review.tsx":"457","/workspace/Physica-Interfae/src/hooks/useV3Positions.ts":"458","/workspace/Physica-Interfae/src/hooks/useDerivedPositionInfo.ts":"459","/workspace/Physica-Interfae/src/hooks/useArgentWalletContract.ts":"460","/workspace/Physica-Interfae/src/components/TransactionConfirmationModal/index.tsx":"461","/workspace/Physica-Interfae/src/components/PositionCard/index.tsx":"462","/workspace/Physica-Interfae/src/components/Card/index.tsx":"463","/workspace/Physica-Interfae/src/components/NavigationTabs/index.tsx":"464","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/Skeleton.tsx":"465","/workspace/Physica-Interfae/src/hooks/useTotalSupply.ts":"466","/workspace/Physica-Interfae/src/components/swap/UnsupportedCurrencyFooter.tsx":"467","/workspace/Physica-Interfae/src/components/RangeSelector/PresetsButtons.tsx":"468","/workspace/Physica-Interfae/src/graphql/data/nft/Details.ts":"469","/workspace/Physica-Interfae/src/lib/hooks/useCurrency.ts":"470","/workspace/Physica-Interfae/src/featureFlags/flags/nftDetails.ts":"471","/workspace/Physica-Interfae/src/components/swap/styleds.tsx":"472","/workspace/Physica-Interfae/src/featureFlags/flags/swapWidget.ts":"473","/workspace/Physica-Interfae/src/nft/components/profile/view/ProfilePage.tsx":"474","/workspace/Physica-Interfae/src/nft/components/profile/list/ListPage.tsx":"475","/workspace/Physica-Interfae/src/nft/components/details/AssetPriceDetails.tsx":"476","/workspace/Physica-Interfae/src/nft/components/profile/view/ProfilePageLoadingSkeleton.tsx":"477","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/NftDetails.tsx":"478","/workspace/Physica-Interfae/src/nft/components/details/AssetDetails.tsx":"479","/workspace/Physica-Interfae/src/nft/components/details/AssetDetailsLoading.tsx":"480","/workspace/Physica-Interfae/src/pages/Vote/styled.tsx":"481","/workspace/Physica-Interfae/src/utils/chains.tsx":"482","/workspace/Physica-Interfae/src/state/governance/types.ts":"483","/workspace/Physica-Interfae/src/state/governance/hooks.ts":"484","/workspace/Physica-Interfae/src/constants/governance.ts":"485","/workspace/Physica-Interfae/src/components/About/ProtocolBanner.tsx":"486","/workspace/Physica-Interfae/src/components/About/constants.tsx":"487","/workspace/Physica-Interfae/src/components/About/Card.tsx":"488","/workspace/Physica-Interfae/src/components/About/AboutFooter.tsx":"489","/workspace/Physica-Interfae/src/components/vote/DelegateModal.tsx":"490","/workspace/Physica-Interfae/src/components/vote/VoteModal.tsx":"491","/workspace/Physica-Interfae/src/lib/hooks/useApproval.ts":"492","/workspace/Physica-Interfae/src/hooks/useIsArgentWallet.ts":"493","/workspace/Physica-Interfae/src/components/SwitchLocaleLink/index.tsx":"494","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/index.tsx":"495","/workspace/Physica-Interfae/src/utils/addressesAreEquivalent.ts":"496","/workspace/Physica-Interfae/src/components/RateToggle/index.tsx":"497","/workspace/Physica-Interfae/src/components/RangeSelector/index.tsx":"498","/workspace/Physica-Interfae/src/hooks/useColor.ts":"499","/workspace/Physica-Interfae/src/utils/unwrappedToken.ts":"500","/workspace/Physica-Interfae/src/hooks/usePrevious.ts":"501","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/StatsSection.tsx":"502","/workspace/Physica-Interfae/src/components/PositionPreview/index.tsx":"503","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/About.tsx":"504","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/BreadcrumbNavLink.tsx":"505","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/index.tsx":"506","/workspace/Physica-Interfae/src/components/HoverInlineText/index.tsx":"507","/workspace/Physica-Interfae/src/components/FeeSelector/index.tsx":"508","/workspace/Physica-Interfae/src/components/TransactionConfirmationModal/AnimatedConfirmation.tsx":"509","/workspace/Physica-Interfae/src/pages/Pool/PositionPage.tsx":"510","/workspace/Physica-Interfae/src/state/mint/v3/hooks.tsx":"511","/workspace/Physica-Interfae/src/components/AccountDetails/TransactionSummary.tsx":"512","/workspace/Physica-Interfae/src/components/addLiquidity/OwnershipWarning.tsx":"513","/workspace/Physica-Interfae/src/pages/CreateProposal/index.tsx":"514","/workspace/Physica-Interfae/src/components/QuestionHelper/index.tsx":"515","/workspace/Physica-Interfae/src/pages/Swap/index.tsx":"516","/workspace/Physica-Interfae/src/components/Popups/ClaimPopup.tsx":"517","/workspace/Physica-Interfae/src/components/Popups/PopupItem.tsx":"518","/workspace/Physica-Interfae/src/components/NavBar/Blur.tsx":"519","/workspace/Physica-Interfae/src/components/NavBar/MenuDropdown.tsx":"520","/workspace/Physica-Interfae/src/components/NavBar/SearchBar.tsx":"521","/workspace/Physica-Interfae/src/components/NavBar/Bag.tsx":"522","/workspace/Physica-Interfae/src/components/NavBar/ChainSelector.tsx":"523","/workspace/Physica-Interfae/src/state/logs/hooks.ts":"524","/workspace/Physica-Interfae/src/nft/components/details/TraitsContainer.tsx":"525","/workspace/Physica-Interfae/src/nft/components/details/AssetActivity.tsx":"526","/workspace/Physica-Interfae/src/nft/components/details/DetailsContainer.tsx":"527","/workspace/Physica-Interfae/src/nft/components/details/InfoContainer.tsx":"528","/workspace/Physica-Interfae/src/components/vote/ProposalEmptyState.tsx":"529","/workspace/Physica-Interfae/src/components/vote/QueueModal.tsx":"530","/workspace/Physica-Interfae/src/components/vote/ExecuteModal.tsx":"531","/workspace/Physica-Interfae/src/components/About/Icons.tsx":"532","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/InvalidTokenDetails.tsx":"533","/workspace/Physica-Interfae/src/components/Settings/index.tsx":"534","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/hooks.ts":"535","/workspace/Physica-Interfae/src/state/mint/v3/utils.ts":"536","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/TokenRow.tsx":"537","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/Resource.tsx":"538","/workspace/Physica-Interfae/src/components/FeeSelector/shared.tsx":"539","/workspace/Physica-Interfae/src/components/FeeSelector/FeeTierPercentageBadge.tsx":"540","/workspace/Physica-Interfae/src/components/FeeSelector/FeeOption.tsx":"541","/workspace/Physica-Interfae/src/components/PositionCard/V2.tsx":"542","/workspace/Physica-Interfae/src/components/PositionCard/Sushi.tsx":"543","/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalSubmissionModal.tsx":"544","/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalEditor.tsx":"545","/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalActionSelector.tsx":"546","/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalActionDetail.tsx":"547","/workspace/Physica-Interfae/src/constants/proposals/index.ts":"548","/workspace/Physica-Interfae/src/state/swap/reducer.ts":"549","/workspace/Physica-Interfae/src/state/swap/actions.ts":"550","/workspace/Physica-Interfae/src/components/FormattedCurrencyAmount/index.tsx":"551","/workspace/Physica-Interfae/src/utils/computeFiatValuePriceImpact.tsx":"552","/workspace/Physica-Interfae/src/components/Popups/TransactionPopup.tsx":"553","/workspace/Physica-Interfae/src/components/Popups/FailedNetworkSwitchPopup.tsx":"554","/workspace/Physica-Interfae/src/components/NavBar/NavDropdown.tsx":"555","/workspace/Physica-Interfae/src/components/NavBar/ChainSelectorRow.tsx":"556","/workspace/Physica-Interfae/src/state/swap/hooks.tsx":"557","/workspace/Physica-Interfae/src/nft/components/common/Loading/LoadingSparkle.tsx":"558","/workspace/Physica-Interfae/src/constants/proposals/uniswap_grants_proposal_description.ts":"559","/workspace/Physica-Interfae/src/constants/proposals/polygon_proposal_title.ts":"560","/workspace/Physica-Interfae/src/hooks/useGlobalChainSwitch.ts":"561","/workspace/Physica-Interfae/src/components/NavBar/NavIcon.tsx":"562","/workspace/Physica-Interfae/src/components/NavBar/SearchBarDropdown.tsx":"563","/workspace/Physica-Interfae/src/graphql/data/Token.ts":"564","/workspace/Physica-Interfae/src/components/ModalViews/index.tsx":"565","/workspace/Physica-Interfae/src/components/Widget/index.tsx":"566","/workspace/Physica-Interfae/src/utils/formatTickPrice.ts":"567","/workspace/Physica-Interfae/src/hooks/useFeeTierDistribution.ts":"568","/workspace/Physica-Interfae/src/components/Toggle/MultiToggle.tsx":"569","/workspace/Physica-Interfae/src/components/InputStepCounter/InputStepCounter.tsx":"570","/workspace/Physica-Interfae/src/utils/getTickToPrice.ts":"571","/workspace/Physica-Interfae/src/components/Tokens/state.ts":"572","/workspace/Physica-Interfae/src/hooks/useSelectChain.ts":"573","/workspace/Physica-Interfae/src/hooks/useSyncChainQuery.ts":"574","/workspace/Physica-Interfae/src/nft/components/common/Loading/LoadingSparkle.css.ts":"575","/workspace/Physica-Interfae/src/components/NavBar/RecentlySearchedAssets.ts":"576","/workspace/Physica-Interfae/src/components/NavBar/SuggestionRow.tsx":"577","/workspace/Physica-Interfae/src/components/Widget/transactions.ts":"578","/workspace/Physica-Interfae/src/components/Widget/theme.ts":"579","/workspace/Physica-Interfae/src/components/Widget/settings.ts":"580","/workspace/Physica-Interfae/src/components/swap/confirmPriceImpactWithoutFee.ts":"581","/workspace/Physica-Interfae/src/hooks/usePoolTickData.ts":"582","/workspace/Physica-Interfae/src/graphql/thegraph/FeeTierDistributionQuery.ts":"583","/workspace/Physica-Interfae/src/components/TransactionSettings/index.tsx":"584","/workspace/Physica-Interfae/src/components/Widget/inputs.tsx":"585","/workspace/Physica-Interfae/src/hooks/usePositionTokenURI.ts":"586","/workspace/Physica-Interfae/src/components/swap/ConfirmSwapModal.tsx":"587","/workspace/Physica-Interfae/src/hooks/useWrapCallback.tsx":"588","/workspace/Physica-Interfae/src/components/swap/SwapHeader.tsx":"589","/workspace/Physica-Interfae/src/components/CurrencyInputPanel/SwapCurrencyInputPanel.tsx":"590","/workspace/Physica-Interfae/src/components/Badge/RangeBadge.tsx":"591","/workspace/Physica-Interfae/src/nft/hooks/useIsNavSearchInputVisible.ts":"592","/workspace/Physica-Interfae/src/components/Logo/QueryTokenLogo.tsx":"593","/workspace/Physica-Interfae/src/lib/utils/searchBar.ts":"594","/workspace/Physica-Interfae/src/graphql/data/SearchTokens.ts":"595","/workspace/Physica-Interfae/src/graphql/data/nft/CollectionSearch.ts":"596","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Chart.tsx":"597","/workspace/Physica-Interfae/src/components/Charts/SparklineChart.tsx":"598","/workspace/Physica-Interfae/src/graphql/data/TrendingTokens.ts":"599","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPage.tsx":"600","/workspace/Physica-Interfae/src/nft/components/profile/list/SetDurationModal.tsx":"601","/workspace/Physica-Interfae/src/components/FeatureFlagModal/FeatureFlagModal.tsx":"602","/workspace/Physica-Interfae/src/nft/components/profile/list/NFTListingsGrid.tsx":"603","/workspace/Physica-Interfae/src/nft/components/profile/list/SelectMarketplacesDropdown.tsx":"604","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/ListModal.tsx":"605","/workspace/Physica-Interfae/src/hooks/useUSDPrice.ts":"606","/workspace/Physica-Interfae/src/graphql/thegraph/apollo.ts":"607","/workspace/Physica-Interfae/src/nft/components/profile/view/ViewMyNftsAsset.tsx":"608","/workspace/Physica-Interfae/src/hooks/useSwapCallback.tsx":"609","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyModal.tsx":"610","/workspace/Physica-Interfae/src/components/swap/SwapDetailsDropdown.tsx":"611","/workspace/Physica-Interfae/src/hooks/useV3PositionFees.ts":"612","/workspace/Physica-Interfae/src/components/swap/PriceImpactWarning.tsx":"613","/workspace/Physica-Interfae/src/components/PositionListItem/index.tsx":"614","/workspace/Physica-Interfae/src/hooks/useIsTickAtLimit.ts":"615","/workspace/Physica-Interfae/src/components/swap/SwapModalHeader.tsx":"616","/workspace/Physica-Interfae/src/components/swap/SwapModalFooter.tsx":"617","/workspace/Physica-Interfae/src/components/NetworkAlert/NetworkAlert.tsx":"618","/workspace/Physica-Interfae/src/state/connection/reducer.ts":"619","/workspace/Physica-Interfae/src/components/TextInput/index.tsx":"620","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyMessage.tsx":"621","/workspace/Physica-Interfae/src/components/Polling/ChainConnectivityWarning.tsx":"622","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/ShareButton.tsx":"623","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Zoom.tsx":"624","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/MobileBalanceSummaryFooter.tsx":"625","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/ChartSection.tsx":"626","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Line.tsx":"627","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Brush.tsx":"628","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/AxisBottom.tsx":"629","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Area.tsx":"630","/workspace/Physica-Interfae/src/state/mint/reducer.ts":"631","/workspace/Physica-Interfae/src/state/lists/reducer.ts":"632","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/BalanceSummary.tsx":"633","/workspace/Physica-Interfae/src/components/Charts/LineChart.tsx":"634","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/AddressSection.tsx":"635","/workspace/Physica-Interfae/src/state/burn/reducer.ts":"636","/workspace/Physica-Interfae/src/state/burn/v3/reducer.ts":"637","/workspace/Physica-Interfae/src/nft/components/profile/list/utils.ts":"638","/workspace/Physica-Interfae/src/components/PrivacyPolicy/index.tsx":"639","/workspace/Physica-Interfae/src/utils/computeSurroundingTicks.ts":"640","/workspace/Physica-Interfae/src/nft/components/profile/list/ListingButton.tsx":"641","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageTraits.tsx":"642","/workspace/Physica-Interfae/src/nft/components/profile/list/Dropdown.tsx":"643","/workspace/Physica-Interfae/src/nft/components/profile/list/shared.tsx":"644","/workspace/Physica-Interfae/src/featureFlags/flags/fiatOnRampButton.ts":"645","/workspace/Physica-Interfae/src/utils/tradeMeaningFullyDiffer.ts":"646","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/SuccessScreen.tsx":"647","/workspace/Physica-Interfae/src/hooks/useUniversalRouter.ts":"648","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/ListModalSection.tsx":"649","/workspace/Physica-Interfae/src/components/NavBar/ChainSelector.css.ts":"650","/workspace/Physica-Interfae/src/components/NavBar/style.css.ts":"651","/workspace/Physica-Interfae/src/components/NavBar/NavDropdown.css.ts":"652","/workspace/Physica-Interfae/src/components/NavBar/MenuDropdown.css.ts":"653","/workspace/Physica-Interfae/src/components/NavBar/NavIcon.css.ts":"654","/workspace/Physica-Interfae/src/nft/components/profile/list/NFTListRow.tsx":"655","/workspace/Physica-Interfae/src/components/swap/TradePrice.tsx":"656","/workspace/Physica-Interfae/src/components/swap/SwapRoute.tsx":"657","/workspace/Physica-Interfae/src/components/swap/FormattedPriceImpact.tsx":"658","/workspace/Physica-Interfae/src/nft/components/profile/view/ProfilePage.css.ts":"659","/workspace/Physica-Interfae/src/hooks/useIsPoolsPage.ts":"660","/workspace/Physica-Interfae/src/components/swap/AdvancedSwapDetails.tsx":"661","/workspace/Physica-Interfae/src/components/swap/GasEstimateBadge.tsx":"662","/workspace/Physica-Interfae/src/components/NavBar/SearchBar.css.ts":"663","/workspace/Physica-Interfae/src/nft/components/details/AssetDetails.css.ts":"664","/workspace/Physica-Interfae/src/nft/components/profile/view/FilterSidebar.tsx":"665","/workspace/Physica-Interfae/src/hooks/useMachineTime.ts":"666","/workspace/Physica-Interfae/src/hooks/useIsLandingPage.ts":"667","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageHeader.tsx":"668","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageTable.tsx":"669","/workspace/Physica-Interfae/src/lib/hooks/useTokenList/utils.ts":"670","/workspace/Physica-Interfae/src/state/burn/v3/actions.ts":"671","/workspace/Physica-Interfae/src/state/burn/actions.ts":"672","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageDescription.tsx":"673","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/TimeSelector.tsx":"674","/workspace/Physica-Interfae/src/tracing/errors.ts":"675","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/TabbedComponent.tsx":"676","/workspace/Physica-Interfae/src/featureFlags/flags/traceJsonRpc.ts":"677","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/ContentRow.tsx":"678","/workspace/Physica-Interfae/src/nft/components/profile/list/MarketplaceRow.tsx":"679","/workspace/Physica-Interfae/src/components/swap/RouterLabel.tsx":"680","/workspace/Physica-Interfae/src/theme/deprecatedColors.ts":"681","/workspace/Physica-Interfae/src/components/Web3Status/index.tsx":"682","/workspace/Physica-Interfae/src/state/logging.ts":"683","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/shared.ts":"684","/workspace/Physica-Interfae/src/featureFlags/flags/dummyFeatureGate.ts":"685","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/OffersTableContent.tsx":"686","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/svg.tsx":"687","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/ListingsTableContent.tsx":"688","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/ActivityTableContent.tsx":"689","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/TimeSelector.tsx":"690","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/BelowFloorWarningModal.tsx":"691","/workspace/Physica-Interfae/src/utils/swapErrorToUserReadableMessage.tsx":"692","/workspace/Physica-Interfae/src/hooks/useV2LiquidityTokenPermit.ts":"693","/workspace/Physica-Interfae/src/components/AnimatedDropdown/index.tsx":"694","/workspace/Physica-Interfae/src/nft/css/cssStringFromTheme.ts":"695","/workspace/Physica-Interfae/src/components/RoutingDiagram/RoutingDiagram.tsx":"696","/workspace/Physica-Interfae/src/nft/components/profile/list/RoyaltyTooltip.tsx":"697","/workspace/Physica-Interfae/src/components/swap/AutoRouterIcon.tsx":"698","/workspace/Physica-Interfae/src/nft/components/profile/list/PriceTextInput.tsx":"699","/workspace/Physica-Interfae/src/pages/Swap/redirects.tsx":"700","/workspace/Physica-Interfae/src/pages/RemoveLiquidity/V3.tsx":"701","/workspace/Physica-Interfae/src/pages/Pool/v2.tsx":"702","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/FilterOption.tsx":"703","/workspace/Physica-Interfae/src/hooks/useERC20Permit.ts":"704","/workspace/Physica-Interfae/src/nft/css/cssObjectFromTheme.ts":"705","/workspace/Physica-Interfae/src/components/AccountDrawer/PrefetchBalancesWrapper.tsx":"706","/workspace/Physica-Interfae/src/pages/Pool/index.tsx":"707","/workspace/Physica-Interfae/src/pages/Tokens/index.tsx":"708","/workspace/Physica-Interfae/src/pages/RemoveLiquidity/index.tsx":"709","/workspace/Physica-Interfae/src/pages/RemoveLiquidity/styled.ts":"710","/workspace/Physica-Interfae/src/pages/PoolFinder/index.tsx":"711","/workspace/Physica-Interfae/src/state/stake/hooks.tsx":"712","/workspace/Physica-Interfae/src/nft/themes/darkTheme.ts":"713","/workspace/Physica-Interfae/src/nft/themes/lightTheme.ts":"714","/workspace/Physica-Interfae/src/pages/Pool/CTACards.tsx":"715","/workspace/Physica-Interfae/src/hooks/useDebouncedChangeHandler.tsx":"716","/workspace/Physica-Interfae/src/state/burn/hooks.tsx":"717","/workspace/Physica-Interfae/src/state/burn/v3/hooks.tsx":"718","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/NetworkFilter.tsx":"719","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/TokenTable.tsx":"720","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/SearchBar.tsx":"721","/workspace/Physica-Interfae/src/components/Slider/index.tsx":"722","/workspace/Physica-Interfae/src/components/Menu/index.tsx":"723","/workspace/Physica-Interfae/src/components/PositionList/index.tsx":"724","/workspace/Physica-Interfae/src/graphql/data/TopTokens.ts":"725"},{"size":2553,"mtime":1701061257000,"results":"726","hashOfConfig":"727"},{"size":5259,"mtime":1701061257000,"results":"728","hashOfConfig":"727"},{"size":2693,"mtime":1701061257000,"results":"729","hashOfConfig":"727"},{"size":1318,"mtime":1701061257000,"results":"730","hashOfConfig":"727"},{"size":3225,"mtime":1701061257000,"results":"731","hashOfConfig":"727"},{"size":5055,"mtime":1701061257000,"results":"732","hashOfConfig":"727"},{"size":861,"mtime":1701061257000,"results":"733","hashOfConfig":"727"},{"size":13588,"mtime":1701061257000,"results":"734","hashOfConfig":"727"},{"size":2092,"mtime":1701061257000,"results":"735","hashOfConfig":"727"},{"size":918,"mtime":1701061257000,"results":"736","hashOfConfig":"727"},{"size":152,"mtime":1701061257000,"results":"737","hashOfConfig":"727"},{"size":279,"mtime":1701061257000,"results":"738","hashOfConfig":"727"},{"size":2301,"mtime":1701061257000,"results":"739","hashOfConfig":"727"},{"size":2762,"mtime":1701061257000,"results":"740","hashOfConfig":"727"},{"size":5502,"mtime":1701061257000,"results":"741","hashOfConfig":"727"},{"size":1636,"mtime":1701061257000,"results":"742","hashOfConfig":"727"},{"size":871,"mtime":1701061257000,"results":"743","hashOfConfig":"727"},{"size":671,"mtime":1701061257000,"results":"744","hashOfConfig":"727"},{"size":7200,"mtime":1701077199386,"results":"745","hashOfConfig":"727"},{"size":1387,"mtime":1701061257000,"results":"746","hashOfConfig":"727"},{"size":834,"mtime":1701061257000,"results":"747","hashOfConfig":"727"},{"size":3115,"mtime":1701061257000,"results":"748","hashOfConfig":"727"},{"size":1785,"mtime":1701061257000,"results":"749","hashOfConfig":"727"},{"size":2278,"mtime":1701061257000,"results":"750","hashOfConfig":"727"},{"size":2633,"mtime":1701061257000,"results":"751","hashOfConfig":"727"},{"size":1967,"mtime":1701061257000,"results":"752","hashOfConfig":"727"},{"size":3304,"mtime":1701061257000,"results":"753","hashOfConfig":"727"},{"size":1223,"mtime":1701061257000,"results":"754","hashOfConfig":"727"},{"size":2815,"mtime":1701061257000,"results":"755","hashOfConfig":"727"},{"size":944,"mtime":1701061257000,"results":"756","hashOfConfig":"727"},{"size":776,"mtime":1701061257000,"results":"757","hashOfConfig":"727"},{"size":28923,"mtime":1701061257000,"results":"758","hashOfConfig":"727"},{"size":10961,"mtime":1701061257000,"results":"759","hashOfConfig":"727"},{"size":432,"mtime":1701061257000,"results":"760","hashOfConfig":"727"},{"size":1429,"mtime":1701061257000,"results":"761","hashOfConfig":"727"},{"size":4986,"mtime":1701061257000,"results":"762","hashOfConfig":"727"},{"size":698,"mtime":1701061257000,"results":"763","hashOfConfig":"727"},{"size":1042,"mtime":1701061257000,"results":"764","hashOfConfig":"727"},{"size":984,"mtime":1701061257000,"results":"765","hashOfConfig":"727"},{"size":428,"mtime":1701061257000,"results":"766","hashOfConfig":"727"},{"size":864,"mtime":1701061257000,"results":"767","hashOfConfig":"727"},{"size":408,"mtime":1701061257000,"results":"768","hashOfConfig":"727"},{"size":739,"mtime":1701061257000,"results":"769","hashOfConfig":"727"},{"size":2167,"mtime":1701061257000,"results":"770","hashOfConfig":"727"},{"size":2975,"mtime":1701061257000,"results":"771","hashOfConfig":"727"},{"size":2041,"mtime":1701061257000,"results":"772","hashOfConfig":"727"},{"size":2239,"mtime":1701061257000,"results":"773","hashOfConfig":"727"},{"size":2897,"mtime":1701061257000,"results":"774","hashOfConfig":"727"},{"size":614,"mtime":1701061257000,"results":"775","hashOfConfig":"727"},{"size":405,"mtime":1701061257000,"results":"776","hashOfConfig":"727"},{"size":781,"mtime":1701061257000,"results":"777","hashOfConfig":"727"},{"size":794,"mtime":1701061257000,"results":"778","hashOfConfig":"727"},{"size":1335,"mtime":1701061257000,"results":"779","hashOfConfig":"727"},{"size":258,"mtime":1701061257000,"results":"780","hashOfConfig":"727"},{"size":2900,"mtime":1701061257000,"results":"781","hashOfConfig":"727"},{"size":4607,"mtime":1701061257000,"results":"782","hashOfConfig":"727"},{"size":7509,"mtime":1701061257000,"results":"783","hashOfConfig":"727"},{"size":5075,"mtime":1701061257000,"results":"784","hashOfConfig":"727"},{"size":4792,"mtime":1701075244202,"results":"785","hashOfConfig":"727"},{"size":2637,"mtime":1701061257000,"results":"786","hashOfConfig":"727"},{"size":7734,"mtime":1701061257000,"results":"787","hashOfConfig":"727"},{"size":39129,"mtime":1701061257000,"results":"788","hashOfConfig":"727"},{"size":13192,"mtime":1701061257000,"results":"789","hashOfConfig":"727"},{"size":1869,"mtime":1701061257000,"results":"790","hashOfConfig":"727"},{"size":5491,"mtime":1701061257000,"results":"791","hashOfConfig":"727"},{"size":2673,"mtime":1701061257000,"results":"792","hashOfConfig":"727"},{"size":231,"mtime":1701061257000,"results":"793","hashOfConfig":"727"},{"size":5861,"mtime":1701061257000,"results":"794","hashOfConfig":"727"},{"size":6446,"mtime":1701061257000,"results":"795","hashOfConfig":"727"},{"size":5991,"mtime":1701061257000,"results":"796","hashOfConfig":"727"},{"size":8549,"mtime":1701061257000,"results":"797","hashOfConfig":"727"},{"size":2420,"mtime":1701061257000,"results":"798","hashOfConfig":"727"},{"size":2485,"mtime":1701061257000,"results":"799","hashOfConfig":"727"},{"size":3702,"mtime":1701061257000,"results":"800","hashOfConfig":"727"},{"size":2140,"mtime":1701061257000,"results":"801","hashOfConfig":"727"},{"size":4014,"mtime":1701061257000,"results":"802","hashOfConfig":"727"},{"size":937,"mtime":1701061257000,"results":"803","hashOfConfig":"727"},{"size":424,"mtime":1701061257000,"results":"804","hashOfConfig":"727"},{"size":21138,"mtime":1701061257000,"results":"805","hashOfConfig":"727"},{"size":276,"mtime":1701061257000,"results":"806","hashOfConfig":"727"},{"size":2725,"mtime":1701061257000,"results":"807","hashOfConfig":"727"},{"size":3677,"mtime":1701061257000,"results":"808","hashOfConfig":"727"},{"size":1045,"mtime":1701061257000,"results":"809","hashOfConfig":"727"},{"size":3290,"mtime":1701061257000,"results":"810","hashOfConfig":"727"},{"size":606,"mtime":1701061257000,"results":"811","hashOfConfig":"727"},{"size":2145,"mtime":1701061257000,"results":"812","hashOfConfig":"727"},{"size":13866,"mtime":1701061257000,"results":"813","hashOfConfig":"727"},{"size":2760,"mtime":1701061257000,"results":"814","hashOfConfig":"727"},{"size":1709,"mtime":1701061257000,"results":"815","hashOfConfig":"727"},{"size":453,"mtime":1701061257000,"results":"816","hashOfConfig":"727"},{"size":1269,"mtime":1701061257000,"results":"817","hashOfConfig":"727"},{"size":1345,"mtime":1701061257000,"results":"818","hashOfConfig":"727"},{"size":1271,"mtime":1701061257000,"results":"819","hashOfConfig":"727"},{"size":963,"mtime":1701061257000,"results":"820","hashOfConfig":"727"},{"size":1499,"mtime":1701067647000,"results":"821","hashOfConfig":"727"},{"size":2154,"mtime":1701061257000,"results":"822","hashOfConfig":"727"},{"size":14731,"mtime":1701061257000,"results":"823","hashOfConfig":"727"},{"size":442,"mtime":1701061257000,"results":"824","hashOfConfig":"727"},{"size":88,"mtime":1701061257000,"results":"825","hashOfConfig":"727"},{"size":3068,"mtime":1701061257000,"results":"826","hashOfConfig":"727"},{"size":10007,"mtime":1701061257000,"results":"827","hashOfConfig":"727"},{"size":1175,"mtime":1701061257000,"results":"828","hashOfConfig":"727"},{"size":77,"mtime":1701061257000,"results":"829","hashOfConfig":"727"},{"size":878,"mtime":1701061257000,"results":"830","hashOfConfig":"727"},{"size":446,"mtime":1701061257000,"results":"831","hashOfConfig":"727"},{"size":5072,"mtime":1701061257000,"results":"832","hashOfConfig":"727"},{"size":2081,"mtime":1701061257000,"results":"833","hashOfConfig":"727"},{"size":2910,"mtime":1701061257000,"results":"834","hashOfConfig":"727"},{"size":1683,"mtime":1701061257000,"results":"835","hashOfConfig":"727"},{"size":3510,"mtime":1701061257000,"results":"836","hashOfConfig":"727"},{"size":504,"mtime":1701061257000,"results":"837","hashOfConfig":"727"},{"size":4895,"mtime":1701061257000,"results":"838","hashOfConfig":"727"},{"size":3132,"mtime":1701061257000,"results":"839","hashOfConfig":"727"},{"size":9852,"mtime":1701061257000,"results":"840","hashOfConfig":"727"},{"size":765,"mtime":1701061257000,"results":"841","hashOfConfig":"727"},{"size":964,"mtime":1701063284000,"results":"842","hashOfConfig":"727"},{"size":331,"mtime":1701061257000,"results":"843","hashOfConfig":"727"},{"size":1468,"mtime":1701061257000,"results":"844","hashOfConfig":"727"},{"size":1180,"mtime":1701061257000,"results":"845","hashOfConfig":"727"},{"size":1973,"mtime":1701061257000,"results":"846","hashOfConfig":"727"},{"size":632,"mtime":1701061257000,"results":"847","hashOfConfig":"727"},{"size":322,"mtime":1701061257000,"results":"848","hashOfConfig":"727"},{"size":954,"mtime":1701061257000,"results":"849","hashOfConfig":"727"},{"size":356,"mtime":1701061257000,"results":"850","hashOfConfig":"727"},{"size":1411,"mtime":1701061257000,"results":"851","hashOfConfig":"727"},{"size":582,"mtime":1701061257000,"results":"852","hashOfConfig":"727"},{"size":641,"mtime":1701061257000,"results":"853","hashOfConfig":"727"},{"size":1837,"mtime":1701061257000,"results":"854","hashOfConfig":"727"},{"size":156,"mtime":1701061257000,"results":"855","hashOfConfig":"727"},{"size":5164,"mtime":1701061257000,"results":"856","hashOfConfig":"727"},{"size":487,"mtime":1701061257000,"results":"857","hashOfConfig":"727"},{"size":1653,"mtime":1701061257000,"results":"858","hashOfConfig":"727"},{"size":14006,"mtime":1701061257000,"results":"859","hashOfConfig":"727"},{"size":17777,"mtime":1701061257000,"results":"860","hashOfConfig":"727"},{"size":7188,"mtime":1701061257000,"results":"861","hashOfConfig":"727"},{"size":89575,"mtime":1701061257000,"results":"862","hashOfConfig":"727"},{"size":1638,"mtime":1701061257000,"results":"863","hashOfConfig":"727"},{"size":21775,"mtime":1701061257000,"results":"864","hashOfConfig":"727"},{"size":5465,"mtime":1701061257000,"results":"865","hashOfConfig":"727"},{"size":5734,"mtime":1701061257000,"results":"866","hashOfConfig":"727"},{"size":2288,"mtime":1701061257000,"results":"867","hashOfConfig":"727"},{"size":1015,"mtime":1701061257000,"results":"868","hashOfConfig":"727"},{"size":4444,"mtime":1701061257000,"results":"869","hashOfConfig":"727"},{"size":6825,"mtime":1701061257000,"results":"870","hashOfConfig":"727"},{"size":2528,"mtime":1701061257000,"results":"871","hashOfConfig":"727"},{"size":6116,"mtime":1701061257000,"results":"872","hashOfConfig":"727"},{"size":9713,"mtime":1701061257000,"results":"873","hashOfConfig":"727"},{"size":545,"mtime":1701061257000,"results":"874","hashOfConfig":"727"},{"size":330,"mtime":1701061257000,"results":"875","hashOfConfig":"727"},{"size":4601,"mtime":1701061257000,"results":"876","hashOfConfig":"727"},{"size":1339,"mtime":1701061257000,"results":"877","hashOfConfig":"727"},{"size":5778,"mtime":1701073344087,"results":"878","hashOfConfig":"727"},{"size":6207,"mtime":1701061257000,"results":"879","hashOfConfig":"727"},{"size":10220,"mtime":1701061257000,"results":"880","hashOfConfig":"727"},{"size":4030,"mtime":1701061257000,"results":"881","hashOfConfig":"727"},{"size":807,"mtime":1701061257000,"results":"882","hashOfConfig":"727"},{"size":16151,"mtime":1701061257000,"results":"883","hashOfConfig":"727"},{"size":2225,"mtime":1701061257000,"results":"884","hashOfConfig":"727"},{"size":1204,"mtime":1701061257000,"results":"885","hashOfConfig":"727"},{"size":277,"mtime":1701061257000,"results":"886","hashOfConfig":"727"},{"size":5901,"mtime":1701061257000,"results":"887","hashOfConfig":"727"},{"size":1313,"mtime":1701061257000,"results":"888","hashOfConfig":"727"},{"size":23,"mtime":1701061257000,"results":"889","hashOfConfig":"727"},{"size":1749,"mtime":1701061257000,"results":"890","hashOfConfig":"727"},{"size":27,"mtime":1701061257000,"results":"891","hashOfConfig":"727"},{"size":25,"mtime":1701061257000,"results":"892","hashOfConfig":"727"},{"size":25,"mtime":1701061257000,"results":"893","hashOfConfig":"727"},{"size":1296,"mtime":1701061257000,"results":"894","hashOfConfig":"727"},{"size":2349,"mtime":1701061257000,"results":"895","hashOfConfig":"727"},{"size":29,"mtime":1701061257000,"results":"896","hashOfConfig":"727"},{"size":27,"mtime":1701061257000,"results":"897","hashOfConfig":"727"},{"size":3152,"mtime":1701061257000,"results":"898","hashOfConfig":"727"},{"size":1391,"mtime":1701061257000,"results":"899","hashOfConfig":"727"},{"size":16738,"mtime":1701061257000,"results":"900","hashOfConfig":"727"},{"size":101,"mtime":1701061257000,"results":"901","hashOfConfig":"727"},{"size":1307,"mtime":1701061257000,"results":"902","hashOfConfig":"727"},{"size":1913,"mtime":1701061257000,"results":"903","hashOfConfig":"727"},{"size":8220,"mtime":1701061257000,"results":"904","hashOfConfig":"727"},{"size":1413,"mtime":1701061257000,"results":"905","hashOfConfig":"727"},{"size":1496,"mtime":1701061257000,"results":"906","hashOfConfig":"727"},{"size":315,"mtime":1701061257000,"results":"907","hashOfConfig":"727"},{"size":2749,"mtime":1701061257000,"results":"908","hashOfConfig":"727"},{"size":714,"mtime":1701061257000,"results":"909","hashOfConfig":"727"},{"size":10195,"mtime":1701061257000,"results":"910","hashOfConfig":"727"},{"size":6258,"mtime":1701061257000,"results":"911","hashOfConfig":"727"},{"size":5177,"mtime":1701061257000,"results":"912","hashOfConfig":"727"},{"size":427,"mtime":1701061257000,"results":"913","hashOfConfig":"727"},{"size":2438,"mtime":1701061257000,"results":"914","hashOfConfig":"727"},{"size":1150,"mtime":1701061257000,"results":"915","hashOfConfig":"727"},{"size":4023,"mtime":1701061257000,"results":"916","hashOfConfig":"727"},{"size":1538,"mtime":1701061257000,"results":"917","hashOfConfig":"727"},{"size":125,"mtime":1701061257000,"results":"918","hashOfConfig":"727"},{"size":2391,"mtime":1701061257000,"results":"919","hashOfConfig":"727"},{"size":2160,"mtime":1701061257000,"results":"920","hashOfConfig":"727"},{"size":618,"mtime":1701061257000,"results":"921","hashOfConfig":"727"},{"size":4563,"mtime":1701061257000,"results":"922","hashOfConfig":"727"},{"size":6236,"mtime":1701061257000,"results":"923","hashOfConfig":"727"},{"size":1260,"mtime":1701061257000,"results":"924","hashOfConfig":"727"},{"size":12370,"mtime":1701061257000,"results":"925","hashOfConfig":"727"},{"size":1087,"mtime":1701061257000,"results":"926","hashOfConfig":"727"},{"size":4486,"mtime":1701061257000,"results":"927","hashOfConfig":"727"},{"size":7217,"mtime":1701061257000,"results":"928","hashOfConfig":"727"},{"size":2634,"mtime":1701061257000,"results":"929","hashOfConfig":"727"},{"size":3724,"mtime":1701061257000,"results":"930","hashOfConfig":"727"},{"size":1321,"mtime":1701061257000,"results":"931","hashOfConfig":"727"},{"size":871,"mtime":1701061257000,"results":"932","hashOfConfig":"727"},{"size":3669,"mtime":1701061257000,"results":"933","hashOfConfig":"727"},{"size":848,"mtime":1701061257000,"results":"934","hashOfConfig":"727"},{"size":2484,"mtime":1701061257000,"results":"935","hashOfConfig":"727"},{"size":1355,"mtime":1701061257000,"results":"936","hashOfConfig":"727"},{"size":676,"mtime":1701061257000,"results":"937","hashOfConfig":"727"},{"size":3740,"mtime":1701061257000,"results":"938","hashOfConfig":"727"},{"size":106,"mtime":1701061257000,"results":"939","hashOfConfig":"727"},{"size":1027,"mtime":1701061257000,"results":"940","hashOfConfig":"727"},{"size":149,"mtime":1701061257000,"results":"941","hashOfConfig":"727"},{"size":841,"mtime":1701061257000,"results":"942","hashOfConfig":"727"},{"size":196,"mtime":1701061257000,"results":"943","hashOfConfig":"727"},{"size":228,"mtime":1701061257000,"results":"944","hashOfConfig":"727"},{"size":190,"mtime":1701061257000,"results":"945","hashOfConfig":"727"},{"size":778,"mtime":1701061257000,"results":"946","hashOfConfig":"727"},{"size":1350,"mtime":1701061257000,"results":"947","hashOfConfig":"727"},{"size":586,"mtime":1701061257000,"results":"948","hashOfConfig":"727"},{"size":720,"mtime":1701061257000,"results":"949","hashOfConfig":"727"},{"size":854,"mtime":1701061257000,"results":"950","hashOfConfig":"727"},{"size":461,"mtime":1701061257000,"results":"951","hashOfConfig":"727"},{"size":428,"mtime":1701061257000,"results":"952","hashOfConfig":"727"},{"size":744,"mtime":1701061257000,"results":"953","hashOfConfig":"727"},{"size":1858,"mtime":1701061257000,"results":"954","hashOfConfig":"727"},{"size":651,"mtime":1701061257000,"results":"955","hashOfConfig":"727"},{"size":1613,"mtime":1701061257000,"results":"956","hashOfConfig":"727"},{"size":421,"mtime":1701061257000,"results":"957","hashOfConfig":"727"},{"size":539,"mtime":1701061257000,"results":"958","hashOfConfig":"727"},{"size":191,"mtime":1701061257000,"results":"959","hashOfConfig":"727"},{"size":2794,"mtime":1701061257000,"results":"960","hashOfConfig":"727"},{"size":1684,"mtime":1701061257000,"results":"961","hashOfConfig":"727"},{"size":1329,"mtime":1701061257000,"results":"962","hashOfConfig":"727"},{"size":816,"mtime":1701061257000,"results":"963","hashOfConfig":"727"},{"size":4391,"mtime":1701061257000,"results":"964","hashOfConfig":"727"},{"size":14480,"mtime":1701061257000,"results":"965","hashOfConfig":"727"},{"size":634,"mtime":1701061257000,"results":"966","hashOfConfig":"727"},{"size":651,"mtime":1701061257000,"results":"967","hashOfConfig":"727"},{"size":2209,"mtime":1701061257000,"results":"968","hashOfConfig":"727"},{"size":467,"mtime":1701061257000,"results":"969","hashOfConfig":"727"},{"size":2223,"mtime":1701061257000,"results":"970","hashOfConfig":"727"},{"size":766,"mtime":1701061257000,"results":"971","hashOfConfig":"727"},{"size":9660,"mtime":1701061257000,"results":"972","hashOfConfig":"727"},{"size":1032,"mtime":1701061257000,"results":"973","hashOfConfig":"727"},{"size":1458,"mtime":1701061257000,"results":"974","hashOfConfig":"727"},{"size":2379,"mtime":1701061257000,"results":"975","hashOfConfig":"727"},{"size":945,"mtime":1701061257000,"results":"976","hashOfConfig":"727"},{"size":249,"mtime":1701061257000,"results":"977","hashOfConfig":"727"},{"size":829,"mtime":1701061257000,"results":"978","hashOfConfig":"727"},{"size":432,"mtime":1701061257000,"results":"979","hashOfConfig":"727"},{"size":2160,"mtime":1701061257000,"results":"980","hashOfConfig":"727"},{"size":3918,"mtime":1701061257000,"results":"981","hashOfConfig":"727"},{"size":3501,"mtime":1701061257000,"results":"982","hashOfConfig":"727"},{"size":520,"mtime":1701061257000,"results":"983","hashOfConfig":"727"},{"size":4954,"mtime":1701061257000,"results":"984","hashOfConfig":"727"},{"size":2672,"mtime":1701061257000,"results":"985","hashOfConfig":"727"},{"size":4910,"mtime":1701061257000,"results":"986","hashOfConfig":"727"},{"size":1898,"mtime":1701061257000,"results":"987","hashOfConfig":"727"},{"size":2410,"mtime":1701061257000,"results":"988","hashOfConfig":"727"},{"size":2704,"mtime":1701061257000,"results":"989","hashOfConfig":"727"},{"size":1504,"mtime":1701061257000,"results":"990","hashOfConfig":"727"},{"size":118,"mtime":1701061257000,"results":"991","hashOfConfig":"727"},{"size":3555,"mtime":1701061257000,"results":"992","hashOfConfig":"727"},{"size":68,"mtime":1701061257000,"results":"993","hashOfConfig":"727"},{"size":7070,"mtime":1701061257000,"results":"994","hashOfConfig":"727"},{"size":7804,"mtime":1701061257000,"results":"995","hashOfConfig":"727"},{"size":1545,"mtime":1701061257000,"results":"996","hashOfConfig":"727"},{"size":334,"mtime":1701061257000,"results":"997","hashOfConfig":"727"},{"size":939,"mtime":1701061257000,"results":"998","hashOfConfig":"727"},{"size":1274,"mtime":1701061257000,"results":"999","hashOfConfig":"727"},{"size":8226,"mtime":1701061257000,"results":"1000","hashOfConfig":"727"},{"size":10315,"mtime":1701061257000,"results":"1001","hashOfConfig":"727"},{"size":157,"mtime":1701061257000,"results":"1002","hashOfConfig":"727"},{"size":206,"mtime":1701061257000,"results":"1003","hashOfConfig":"727"},{"size":282,"mtime":1701061257000,"results":"1004","hashOfConfig":"727"},{"size":1159,"mtime":1701061257000,"results":"1005","hashOfConfig":"727"},{"size":3588,"mtime":1701061257000,"results":"1006","hashOfConfig":"727"},{"size":1513,"mtime":1701061257000,"results":"1007","hashOfConfig":"727"},{"size":500,"mtime":1701061257000,"results":"1008","hashOfConfig":"727"},{"size":404,"mtime":1701061257000,"results":"1009","hashOfConfig":"727"},{"size":996,"mtime":1701061257000,"results":"1010","hashOfConfig":"727"},{"size":1319,"mtime":1701061257000,"results":"1011","hashOfConfig":"727"},{"size":2656,"mtime":1701061257000,"results":"1012","hashOfConfig":"727"},{"size":4514,"mtime":1701061257000,"results":"1013","hashOfConfig":"727"},{"size":399,"mtime":1701061257000,"results":"1014","hashOfConfig":"727"},{"size":925,"mtime":1701061257000,"results":"1015","hashOfConfig":"727"},{"size":649,"mtime":1701061257000,"results":"1016","hashOfConfig":"727"},{"size":6014,"mtime":1701061257000,"results":"1017","hashOfConfig":"727"},{"size":1273,"mtime":1701061257000,"results":"1018","hashOfConfig":"727"},{"size":1110,"mtime":1701061257000,"results":"1019","hashOfConfig":"727"},{"size":5015,"mtime":1701061257000,"results":"1020","hashOfConfig":"727"},{"size":578,"mtime":1701061257000,"results":"1021","hashOfConfig":"727"},{"size":1659,"mtime":1701061257000,"results":"1022","hashOfConfig":"727"},{"size":650,"mtime":1701061257000,"results":"1023","hashOfConfig":"727"},{"size":5349,"mtime":1701061257000,"results":"1024","hashOfConfig":"727"},{"size":256,"mtime":1701061257000,"results":"1025","hashOfConfig":"727"},{"size":234,"mtime":1701061257000,"results":"1026","hashOfConfig":"727"},{"size":751,"mtime":1701061257000,"results":"1027","hashOfConfig":"727"},{"size":3671,"mtime":1701061257000,"results":"1028","hashOfConfig":"727"},{"size":631,"mtime":1701061257000,"results":"1029","hashOfConfig":"727"},{"size":472,"mtime":1701061257000,"results":"1030","hashOfConfig":"727"},{"size":798,"mtime":1701061257000,"results":"1031","hashOfConfig":"727"},{"size":9779,"mtime":1701061257000,"results":"1032","hashOfConfig":"727"},{"size":4115,"mtime":1701061257000,"results":"1033","hashOfConfig":"727"},{"size":19763,"mtime":1701061257000,"results":"1034","hashOfConfig":"727"},{"size":434,"mtime":1701061257000,"results":"1035","hashOfConfig":"727"},{"size":3592,"mtime":1701061257000,"results":"1036","hashOfConfig":"727"},{"size":1943,"mtime":1701061257000,"results":"1037","hashOfConfig":"727"},{"size":335,"mtime":1701061257000,"results":"1038","hashOfConfig":"727"},{"size":1453,"mtime":1701061257000,"results":"1039","hashOfConfig":"727"},{"size":25,"mtime":1701061257000,"results":"1040","hashOfConfig":"727"},{"size":790,"mtime":1701061257000,"results":"1041","hashOfConfig":"727"},{"size":11228,"mtime":1701061257000,"results":"1042","hashOfConfig":"727"},{"size":179,"mtime":1701061257000,"results":"1043","hashOfConfig":"727"},{"size":1647,"mtime":1701061257000,"results":"1044","hashOfConfig":"727"},{"size":2038,"mtime":1701061257000,"results":"1045","hashOfConfig":"727"},{"size":3872,"mtime":1701061257000,"results":"1046","hashOfConfig":"727"},{"size":432,"mtime":1701061257000,"results":"1047","hashOfConfig":"727"},{"size":606,"mtime":1701061257000,"results":"1048","hashOfConfig":"727"},{"size":919,"mtime":1701061257000,"results":"1049","hashOfConfig":"727"},{"size":1511,"mtime":1701061257000,"results":"1050","hashOfConfig":"727"},{"size":2193,"mtime":1701061257000,"results":"1051","hashOfConfig":"727"},{"size":1725,"mtime":1701061257000,"results":"1052","hashOfConfig":"727"},{"size":2695,"mtime":1701061257000,"results":"1053","hashOfConfig":"727"},{"size":3179,"mtime":1701061257000,"results":"1054","hashOfConfig":"727"},{"size":1234,"mtime":1701061257000,"results":"1055","hashOfConfig":"727"},{"size":5101,"mtime":1701061257000,"results":"1056","hashOfConfig":"727"},{"size":361,"mtime":1701061257000,"results":"1057","hashOfConfig":"727"},{"size":4741,"mtime":1701061257000,"results":"1058","hashOfConfig":"727"},{"size":3435,"mtime":1701061257000,"results":"1059","hashOfConfig":"727"},{"size":905,"mtime":1701061257000,"results":"1060","hashOfConfig":"727"},{"size":7784,"mtime":1701061257000,"results":"1061","hashOfConfig":"727"},{"size":2825,"mtime":1701061257000,"results":"1062","hashOfConfig":"727"},{"size":1547,"mtime":1701061257000,"results":"1063","hashOfConfig":"727"},{"size":719,"mtime":1701061257000,"results":"1064","hashOfConfig":"727"},{"size":6697,"mtime":1701061257000,"results":"1065","hashOfConfig":"727"},{"size":5986,"mtime":1701061257000,"results":"1066","hashOfConfig":"727"},{"size":10570,"mtime":1701061257000,"results":"1067","hashOfConfig":"727"},{"size":2742,"mtime":1701061257000,"results":"1068","hashOfConfig":"727"},{"size":11846,"mtime":1701061257000,"results":"1069","hashOfConfig":"727"},{"size":1987,"mtime":1701061257000,"results":"1070","hashOfConfig":"727"},{"size":1663,"mtime":1701061257000,"results":"1071","hashOfConfig":"727"},{"size":4262,"mtime":1701061257000,"results":"1072","hashOfConfig":"727"},{"size":1728,"mtime":1701061257000,"results":"1073","hashOfConfig":"727"},{"size":4730,"mtime":1701061257000,"results":"1074","hashOfConfig":"727"},{"size":2924,"mtime":1701061257000,"results":"1075","hashOfConfig":"727"},{"size":2375,"mtime":1701061257000,"results":"1076","hashOfConfig":"727"},{"size":5497,"mtime":1701061257000,"results":"1077","hashOfConfig":"727"},{"size":2641,"mtime":1701061257000,"results":"1078","hashOfConfig":"727"},{"size":964,"mtime":1701061257000,"results":"1079","hashOfConfig":"727"},{"size":6792,"mtime":1701061257000,"results":"1080","hashOfConfig":"727"},{"size":7426,"mtime":1701061257000,"results":"1081","hashOfConfig":"727"},{"size":7405,"mtime":1701061257000,"results":"1082","hashOfConfig":"727"},{"size":1153,"mtime":1701061257000,"results":"1083","hashOfConfig":"727"},{"size":2296,"mtime":1701061257000,"results":"1084","hashOfConfig":"727"},{"size":3531,"mtime":1701061257000,"results":"1085","hashOfConfig":"727"},{"size":3633,"mtime":1701061257000,"results":"1086","hashOfConfig":"727"},{"size":2906,"mtime":1701061257000,"results":"1087","hashOfConfig":"727"},{"size":1953,"mtime":1701061257000,"results":"1088","hashOfConfig":"727"},{"size":3914,"mtime":1701061257000,"results":"1089","hashOfConfig":"727"},{"size":4980,"mtime":1701061257000,"results":"1090","hashOfConfig":"727"},{"size":920,"mtime":1701061257000,"results":"1091","hashOfConfig":"727"},{"size":2057,"mtime":1701061257000,"results":"1092","hashOfConfig":"727"},{"size":4143,"mtime":1701061257000,"results":"1093","hashOfConfig":"727"},{"size":1365,"mtime":1701061257000,"results":"1094","hashOfConfig":"727"},{"size":267,"mtime":1701061257000,"results":"1095","hashOfConfig":"727"},{"size":2476,"mtime":1701061257000,"results":"1096","hashOfConfig":"727"},{"size":13081,"mtime":1701061257000,"results":"1097","hashOfConfig":"727"},{"size":2058,"mtime":1701061257000,"results":"1098","hashOfConfig":"727"},{"size":7696,"mtime":1701061257000,"results":"1099","hashOfConfig":"727"},{"size":1124,"mtime":1701061257000,"results":"1100","hashOfConfig":"727"},{"size":9406,"mtime":1701061257000,"results":"1101","hashOfConfig":"727"},{"size":752,"mtime":1701061257000,"results":"1102","hashOfConfig":"727"},{"size":541,"mtime":1701061257000,"results":"1103","hashOfConfig":"727"},{"size":274,"mtime":1701061257000,"results":"1104","hashOfConfig":"727"},{"size":1103,"mtime":1701061257000,"results":"1105","hashOfConfig":"727"},{"size":1275,"mtime":1701061257000,"results":"1106","hashOfConfig":"727"},{"size":2351,"mtime":1701061257000,"results":"1107","hashOfConfig":"727"},{"size":185,"mtime":1701061257000,"results":"1108","hashOfConfig":"727"},{"size":2334,"mtime":1701061257000,"results":"1109","hashOfConfig":"727"},{"size":881,"mtime":1701061257000,"results":"1110","hashOfConfig":"727"},{"size":2408,"mtime":1701061257000,"results":"1111","hashOfConfig":"727"},{"size":3881,"mtime":1701061257000,"results":"1112","hashOfConfig":"727"},{"size":1999,"mtime":1701061257000,"results":"1113","hashOfConfig":"727"},{"size":701,"mtime":1701061257000,"results":"1114","hashOfConfig":"727"},{"size":1159,"mtime":1701061257000,"results":"1115","hashOfConfig":"727"},{"size":823,"mtime":1701061257000,"results":"1116","hashOfConfig":"727"},{"size":2867,"mtime":1701061257000,"results":"1117","hashOfConfig":"727"},{"size":3023,"mtime":1701061257000,"results":"1118","hashOfConfig":"727"},{"size":1930,"mtime":1701061257000,"results":"1119","hashOfConfig":"727"},{"size":1177,"mtime":1701061257000,"results":"1120","hashOfConfig":"727"},{"size":7923,"mtime":1701061257000,"results":"1121","hashOfConfig":"727"},{"size":1059,"mtime":1701061257000,"results":"1122","hashOfConfig":"727"},{"size":1415,"mtime":1701061257000,"results":"1123","hashOfConfig":"727"},{"size":3653,"mtime":1701061257000,"results":"1124","hashOfConfig":"727"},{"size":3057,"mtime":1701061257000,"results":"1125","hashOfConfig":"727"},{"size":1170,"mtime":1701061257000,"results":"1126","hashOfConfig":"727"},{"size":3108,"mtime":1701061257000,"results":"1127","hashOfConfig":"727"},{"size":5642,"mtime":1701061257000,"results":"1128","hashOfConfig":"727"},{"size":756,"mtime":1701061257000,"results":"1129","hashOfConfig":"727"},{"size":526,"mtime":1701061257000,"results":"1130","hashOfConfig":"727"},{"size":1027,"mtime":1701061257000,"results":"1131","hashOfConfig":"727"},{"size":3095,"mtime":1701061257000,"results":"1132","hashOfConfig":"727"},{"size":1541,"mtime":1701061257000,"results":"1133","hashOfConfig":"727"},{"size":1852,"mtime":1701061257000,"results":"1134","hashOfConfig":"727"},{"size":731,"mtime":1701061257000,"results":"1135","hashOfConfig":"727"},{"size":6026,"mtime":1701061257000,"results":"1136","hashOfConfig":"727"},{"size":1654,"mtime":1701061257000,"results":"1137","hashOfConfig":"727"},{"size":746,"mtime":1701061257000,"results":"1138","hashOfConfig":"727"},{"size":547,"mtime":1701061257000,"results":"1139","hashOfConfig":"727"},{"size":5528,"mtime":1701061257000,"results":"1140","hashOfConfig":"727"},{"size":277,"mtime":1701061257000,"results":"1141","hashOfConfig":"727"},{"size":7422,"mtime":1701061257000,"results":"1142","hashOfConfig":"727"},{"size":2302,"mtime":1701061257000,"results":"1143","hashOfConfig":"727"},{"size":5819,"mtime":1701061257000,"results":"1144","hashOfConfig":"727"},{"size":1233,"mtime":1701061257000,"results":"1145","hashOfConfig":"727"},{"size":4917,"mtime":1701061257000,"results":"1146","hashOfConfig":"727"},{"size":2440,"mtime":1701061257000,"results":"1147","hashOfConfig":"727"},{"size":7810,"mtime":1701061257000,"results":"1148","hashOfConfig":"727"},{"size":1971,"mtime":1701061257000,"results":"1149","hashOfConfig":"727"},{"size":4511,"mtime":1701061257000,"results":"1150","hashOfConfig":"727"},{"size":12290,"mtime":1701061257000,"results":"1151","hashOfConfig":"727"},{"size":1771,"mtime":1701061257000,"results":"1152","hashOfConfig":"727"},{"size":1592,"mtime":1701061257000,"results":"1153","hashOfConfig":"727"},{"size":5898,"mtime":1701061257000,"results":"1154","hashOfConfig":"727"},{"size":4478,"mtime":1701061257000,"results":"1155","hashOfConfig":"727"},{"size":2531,"mtime":1701061257000,"results":"1156","hashOfConfig":"727"},{"size":3054,"mtime":1701061257000,"results":"1157","hashOfConfig":"727"},{"size":9600,"mtime":1701061257000,"results":"1158","hashOfConfig":"727"},{"size":62650,"mtime":1701061257000,"results":"1159","hashOfConfig":"727"},{"size":33992,"mtime":1701061257000,"results":"1160","hashOfConfig":"727"},{"size":5414,"mtime":1701061257000,"results":"1161","hashOfConfig":"727"},{"size":3339,"mtime":1701061257000,"results":"1162","hashOfConfig":"727"},{"size":3419,"mtime":1701061257000,"results":"1163","hashOfConfig":"727"},{"size":5434,"mtime":1701061257000,"results":"1164","hashOfConfig":"727"},{"size":5425,"mtime":1701061257000,"results":"1165","hashOfConfig":"727"},{"size":2574,"mtime":1701061257000,"results":"1166","hashOfConfig":"727"},{"size":1141,"mtime":1701061257000,"results":"1167","hashOfConfig":"727"},{"size":499,"mtime":1701061257000,"results":"1168","hashOfConfig":"727"},{"size":648,"mtime":1701061257000,"results":"1169","hashOfConfig":"727"},{"size":7440,"mtime":1701061257000,"results":"1170","hashOfConfig":"727"},{"size":403,"mtime":1701061257000,"results":"1171","hashOfConfig":"727"},{"size":379,"mtime":1701061257000,"results":"1172","hashOfConfig":"727"},{"size":638,"mtime":1701061257000,"results":"1173","hashOfConfig":"727"},{"size":965,"mtime":1701061257000,"results":"1174","hashOfConfig":"727"},{"size":1233,"mtime":1701061257000,"results":"1175","hashOfConfig":"727"},{"size":2332,"mtime":1701061257000,"results":"1176","hashOfConfig":"727"},{"size":889,"mtime":1701061257000,"results":"1177","hashOfConfig":"727"},{"size":7585,"mtime":1701061257000,"results":"1178","hashOfConfig":"727"},{"size":18935,"mtime":1701061257000,"results":"1179","hashOfConfig":"727"},{"size":11278,"mtime":1701061257000,"results":"1180","hashOfConfig":"727"},{"size":973,"mtime":1701061257000,"results":"1181","hashOfConfig":"727"},{"size":616,"mtime":1701061257000,"results":"1182","hashOfConfig":"727"},{"size":1049,"mtime":1701061257000,"results":"1183","hashOfConfig":"727"},{"size":3683,"mtime":1701061257000,"results":"1184","hashOfConfig":"727"},{"size":885,"mtime":1701061257000,"results":"1185","hashOfConfig":"727"},{"size":573,"mtime":1701061257000,"results":"1186","hashOfConfig":"727"},{"size":11866,"mtime":1701061257000,"results":"1187","hashOfConfig":"727"},{"size":13616,"mtime":1701061257000,"results":"1188","hashOfConfig":"727"},{"size":1347,"mtime":1701061257000,"results":"1189","hashOfConfig":"727"},{"size":3650,"mtime":1701061257000,"results":"1190","hashOfConfig":"727"},{"size":6237,"mtime":1701061257000,"results":"1191","hashOfConfig":"727"},{"size":791,"mtime":1701061257000,"results":"1192","hashOfConfig":"727"},{"size":4165,"mtime":1701061257000,"results":"1193","hashOfConfig":"727"},{"size":765,"mtime":1701061257000,"results":"1194","hashOfConfig":"727"},{"size":5025,"mtime":1701061257000,"results":"1195","hashOfConfig":"727"},{"size":5309,"mtime":1701061257000,"results":"1196","hashOfConfig":"727"},{"size":310,"mtime":1701061257000,"results":"1197","hashOfConfig":"727"},{"size":4410,"mtime":1701061257000,"results":"1198","hashOfConfig":"727"},{"size":336,"mtime":1701061257000,"results":"1199","hashOfConfig":"727"},{"size":11395,"mtime":1701061257000,"results":"1200","hashOfConfig":"727"},{"size":9537,"mtime":1701061257000,"results":"1201","hashOfConfig":"727"},{"size":13758,"mtime":1701061257000,"results":"1202","hashOfConfig":"727"},{"size":2320,"mtime":1701061257000,"results":"1203","hashOfConfig":"727"},{"size":523,"mtime":1701061257000,"results":"1204","hashOfConfig":"727"},{"size":16006,"mtime":1701061257000,"results":"1205","hashOfConfig":"727"},{"size":3070,"mtime":1701061257000,"results":"1206","hashOfConfig":"727"},{"size":1984,"mtime":1701061257000,"results":"1207","hashOfConfig":"727"},{"size":304,"mtime":1701061257000,"results":"1208","hashOfConfig":"727"},{"size":56,"mtime":1701061257000,"results":"1209","hashOfConfig":"727"},{"size":20530,"mtime":1701061257000,"results":"1210","hashOfConfig":"727"},{"size":1335,"mtime":1701061257000,"results":"1211","hashOfConfig":"727"},{"size":2534,"mtime":1701061257000,"results":"1212","hashOfConfig":"727"},{"size":2618,"mtime":1701061257000,"results":"1213","hashOfConfig":"727"},{"size":4127,"mtime":1701061257000,"results":"1214","hashOfConfig":"727"},{"size":5865,"mtime":1701061257000,"results":"1215","hashOfConfig":"727"},{"size":5117,"mtime":1701061257000,"results":"1216","hashOfConfig":"727"},{"size":5738,"mtime":1701061257000,"results":"1217","hashOfConfig":"727"},{"size":4334,"mtime":1701061257000,"results":"1218","hashOfConfig":"727"},{"size":576,"mtime":1701061257000,"results":"1219","hashOfConfig":"727"},{"size":1409,"mtime":1701061257000,"results":"1220","hashOfConfig":"727"},{"size":10679,"mtime":1701061257000,"results":"1221","hashOfConfig":"727"},{"size":152,"mtime":1701061257000,"results":"1222","hashOfConfig":"727"},{"size":1156,"mtime":1701061257000,"results":"1223","hashOfConfig":"727"},{"size":2882,"mtime":1701061257000,"results":"1224","hashOfConfig":"727"},{"size":2218,"mtime":1701061257000,"results":"1225","hashOfConfig":"727"},{"size":494,"mtime":1701061257000,"results":"1226","hashOfConfig":"727"},{"size":545,"mtime":1701061257000,"results":"1227","hashOfConfig":"727"},{"size":3737,"mtime":1701061257000,"results":"1228","hashOfConfig":"727"},{"size":7225,"mtime":1701061257000,"results":"1229","hashOfConfig":"727"},{"size":3699,"mtime":1701061257000,"results":"1230","hashOfConfig":"727"},{"size":484,"mtime":1701061257000,"results":"1231","hashOfConfig":"727"},{"size":6505,"mtime":1701061257000,"results":"1232","hashOfConfig":"727"},{"size":1606,"mtime":1701061257000,"results":"1233","hashOfConfig":"727"},{"size":6453,"mtime":1701061257000,"results":"1234","hashOfConfig":"727"},{"size":1521,"mtime":1701061257000,"results":"1235","hashOfConfig":"727"},{"size":37894,"mtime":1701061257000,"results":"1236","hashOfConfig":"727"},{"size":19965,"mtime":1701061257000,"results":"1237","hashOfConfig":"727"},{"size":10421,"mtime":1701061257000,"results":"1238","hashOfConfig":"727"},{"size":1245,"mtime":1701061257000,"results":"1239","hashOfConfig":"727"},{"size":10359,"mtime":1701061257000,"results":"1240","hashOfConfig":"727"},{"size":1300,"mtime":1701061257000,"results":"1241","hashOfConfig":"727"},{"size":30359,"mtime":1701061257000,"results":"1242","hashOfConfig":"727"},{"size":4521,"mtime":1701061257000,"results":"1243","hashOfConfig":"727"},{"size":2533,"mtime":1701061257000,"results":"1244","hashOfConfig":"727"},{"size":788,"mtime":1701061257000,"results":"1245","hashOfConfig":"727"},{"size":7290,"mtime":1701061257000,"results":"1246","hashOfConfig":"727"},{"size":8751,"mtime":1701061257000,"results":"1247","hashOfConfig":"727"},{"size":1680,"mtime":1701061257000,"results":"1248","hashOfConfig":"727"},{"size":3762,"mtime":1701061257000,"results":"1249","hashOfConfig":"727"},{"size":2324,"mtime":1701061257000,"results":"1250","hashOfConfig":"727"},{"size":2080,"mtime":1701061257000,"results":"1251","hashOfConfig":"727"},{"size":5096,"mtime":1701061257000,"results":"1252","hashOfConfig":"727"},{"size":2794,"mtime":1701061257000,"results":"1253","hashOfConfig":"727"},{"size":2313,"mtime":1701061257000,"results":"1254","hashOfConfig":"727"},{"size":1745,"mtime":1701061257000,"results":"1255","hashOfConfig":"727"},{"size":4919,"mtime":1701061257000,"results":"1256","hashOfConfig":"727"},{"size":4923,"mtime":1701061257000,"results":"1257","hashOfConfig":"727"},{"size":1010,"mtime":1701061257000,"results":"1258","hashOfConfig":"727"},{"size":2420,"mtime":1701061257000,"results":"1259","hashOfConfig":"727"},{"size":8333,"mtime":1701061257000,"results":"1260","hashOfConfig":"727"},{"size":1192,"mtime":1701061257000,"results":"1261","hashOfConfig":"727"},{"size":1713,"mtime":1701061257000,"results":"1262","hashOfConfig":"727"},{"size":14841,"mtime":1701061257000,"results":"1263","hashOfConfig":"727"},{"size":625,"mtime":1701061257000,"results":"1264","hashOfConfig":"727"},{"size":1188,"mtime":1701061257000,"results":"1265","hashOfConfig":"727"},{"size":960,"mtime":1701061257000,"results":"1266","hashOfConfig":"727"},{"size":1730,"mtime":1701061257000,"results":"1267","hashOfConfig":"727"},{"size":7845,"mtime":1701061257000,"results":"1268","hashOfConfig":"727"},{"size":2430,"mtime":1701061257000,"results":"1269","hashOfConfig":"727"},{"size":1920,"mtime":1701061257000,"results":"1270","hashOfConfig":"727"},{"size":1589,"mtime":1701061257000,"results":"1271","hashOfConfig":"727"},{"size":3417,"mtime":1701061257000,"results":"1272","hashOfConfig":"727"},{"size":2355,"mtime":1701061257000,"results":"1273","hashOfConfig":"727"},{"size":226,"mtime":1701061257000,"results":"1274","hashOfConfig":"727"},{"size":2523,"mtime":1701061257000,"results":"1275","hashOfConfig":"727"},{"size":671,"mtime":1701061257000,"results":"1276","hashOfConfig":"727"},{"size":613,"mtime":1701061257000,"results":"1277","hashOfConfig":"727"},{"size":483,"mtime":1701061257000,"results":"1278","hashOfConfig":"727"},{"size":2244,"mtime":1701061257000,"results":"1279","hashOfConfig":"727"},{"size":1229,"mtime":1701061257000,"results":"1280","hashOfConfig":"727"},{"size":574,"mtime":1701061257000,"results":"1281","hashOfConfig":"727"},{"size":2854,"mtime":1701061257000,"results":"1282","hashOfConfig":"727"},{"size":9080,"mtime":1701061257000,"results":"1283","hashOfConfig":"727"},{"size":5490,"mtime":1701061257000,"results":"1284","hashOfConfig":"727"},{"size":9801,"mtime":1701061257000,"results":"1285","hashOfConfig":"727"},{"size":82,"mtime":1701061257000,"results":"1286","hashOfConfig":"727"},{"size":693,"mtime":1701061257000,"results":"1287","hashOfConfig":"727"},{"size":755,"mtime":1701061257000,"results":"1288","hashOfConfig":"727"},{"size":13648,"mtime":1701061257000,"results":"1289","hashOfConfig":"727"},{"size":2441,"mtime":1701061257000,"results":"1290","hashOfConfig":"727"},{"size":2281,"mtime":1701061257000,"results":"1291","hashOfConfig":"727"},{"size":7439,"mtime":1701075698114,"results":"1292","hashOfConfig":"727"},{"size":701,"mtime":1701061257000,"results":"1293","hashOfConfig":"727"},{"size":5636,"mtime":1701061257000,"results":"1294","hashOfConfig":"727"},{"size":1038,"mtime":1701061257000,"results":"1295","hashOfConfig":"727"},{"size":5066,"mtime":1701061257000,"results":"1296","hashOfConfig":"727"},{"size":356,"mtime":1701061257000,"results":"1297","hashOfConfig":"727"},{"size":1077,"mtime":1701061257000,"results":"1298","hashOfConfig":"727"},{"size":1190,"mtime":1701061257000,"results":"1299","hashOfConfig":"727"},{"size":1854,"mtime":1701061257000,"results":"1300","hashOfConfig":"727"},{"size":697,"mtime":1701061257000,"results":"1301","hashOfConfig":"727"},{"size":4105,"mtime":1701061257000,"results":"1302","hashOfConfig":"727"},{"size":8315,"mtime":1701061257000,"results":"1303","hashOfConfig":"727"},{"size":6434,"mtime":1701061257000,"results":"1304","hashOfConfig":"727"},{"size":1865,"mtime":1701061257000,"results":"1305","hashOfConfig":"727"},{"size":2492,"mtime":1701061257000,"results":"1306","hashOfConfig":"727"},{"size":1003,"mtime":1701061257000,"results":"1307","hashOfConfig":"727"},{"size":9459,"mtime":1701061257000,"results":"1308","hashOfConfig":"727"},{"size":1402,"mtime":1701061257000,"results":"1309","hashOfConfig":"727"},{"size":8966,"mtime":1701061257000,"results":"1310","hashOfConfig":"727"},{"size":6686,"mtime":1701061257000,"results":"1311","hashOfConfig":"727"},{"size":1846,"mtime":1701061257000,"results":"1312","hashOfConfig":"727"},{"size":4296,"mtime":1701061257000,"results":"1313","hashOfConfig":"727"},{"size":7055,"mtime":1701061257000,"results":"1314","hashOfConfig":"727"},{"size":1337,"mtime":1701061257000,"results":"1315","hashOfConfig":"727"},{"size":11466,"mtime":1701061257000,"results":"1316","hashOfConfig":"727"},{"size":2258,"mtime":1701061257000,"results":"1317","hashOfConfig":"727"},{"size":238,"mtime":1701061257000,"results":"1318","hashOfConfig":"727"},{"size":1105,"mtime":1701061257000,"results":"1319","hashOfConfig":"727"},{"size":1050,"mtime":1701061257000,"results":"1320","hashOfConfig":"727"},{"size":3178,"mtime":1701061257000,"results":"1321","hashOfConfig":"727"},{"size":2553,"mtime":1701061257000,"results":"1322","hashOfConfig":"727"},{"size":4590,"mtime":1701061257000,"results":"1323","hashOfConfig":"727"},{"size":2153,"mtime":1701061257000,"results":"1324","hashOfConfig":"727"},{"size":1140,"mtime":1701061257000,"results":"1325","hashOfConfig":"727"},{"size":1239,"mtime":1701061257000,"results":"1326","hashOfConfig":"727"},{"size":6259,"mtime":1701061257000,"results":"1327","hashOfConfig":"727"},{"size":7083,"mtime":1701061257000,"results":"1328","hashOfConfig":"727"},{"size":6744,"mtime":1701061257000,"results":"1329","hashOfConfig":"727"},{"size":5495,"mtime":1701061257000,"results":"1330","hashOfConfig":"727"},{"size":5684,"mtime":1701061257000,"results":"1331","hashOfConfig":"727"},{"size":4073,"mtime":1701061257000,"results":"1332","hashOfConfig":"727"},{"size":1629,"mtime":1701061257000,"results":"1333","hashOfConfig":"727"},{"size":3257,"mtime":1701061257000,"results":"1334","hashOfConfig":"727"},{"size":2864,"mtime":1701061257000,"results":"1335","hashOfConfig":"727"},{"size":645,"mtime":1701061257000,"results":"1336","hashOfConfig":"727"},{"size":5682,"mtime":1701061257000,"results":"1337","hashOfConfig":"727"},{"size":2180,"mtime":1701061257000,"results":"1338","hashOfConfig":"727"},{"size":1696,"mtime":1701061257000,"results":"1339","hashOfConfig":"727"},{"size":7584,"mtime":1701061257000,"results":"1340","hashOfConfig":"727"},{"size":751,"mtime":1701061257000,"results":"1341","hashOfConfig":"727"},{"size":8534,"mtime":1701061257000,"results":"1342","hashOfConfig":"727"},{"size":6059,"mtime":1701061257000,"results":"1343","hashOfConfig":"727"},{"size":7646,"mtime":1701061257000,"results":"1344","hashOfConfig":"727"},{"size":971,"mtime":1701061257000,"results":"1345","hashOfConfig":"727"},{"size":3528,"mtime":1701061257000,"results":"1346","hashOfConfig":"727"},{"size":2045,"mtime":1701061257000,"results":"1347","hashOfConfig":"727"},{"size":2296,"mtime":1701061257000,"results":"1348","hashOfConfig":"727"},{"size":3853,"mtime":1701061257000,"results":"1349","hashOfConfig":"727"},{"size":3208,"mtime":1701061257000,"results":"1350","hashOfConfig":"727"},{"size":3396,"mtime":1701061257000,"results":"1351","hashOfConfig":"727"},{"size":2429,"mtime":1701061257000,"results":"1352","hashOfConfig":"727"},{"size":529,"mtime":1701061257000,"results":"1353","hashOfConfig":"727"},{"size":8865,"mtime":1701061257000,"results":"1354","hashOfConfig":"727"},{"size":976,"mtime":1701061257000,"results":"1355","hashOfConfig":"727"},{"size":1235,"mtime":1701061257000,"results":"1356","hashOfConfig":"727"},{"size":1544,"mtime":1701061257000,"results":"1357","hashOfConfig":"727"},{"size":4609,"mtime":1701061257000,"results":"1358","hashOfConfig":"727"},{"size":3313,"mtime":1701061257000,"results":"1359","hashOfConfig":"727"},{"size":1021,"mtime":1701061257000,"results":"1360","hashOfConfig":"727"},{"size":908,"mtime":1701061257000,"results":"1361","hashOfConfig":"727"},{"size":523,"mtime":1701061257000,"results":"1362","hashOfConfig":"727"},{"size":398,"mtime":1701061257000,"results":"1363","hashOfConfig":"727"},{"size":10198,"mtime":1701061257000,"results":"1364","hashOfConfig":"727"},{"size":5659,"mtime":1701061257000,"results":"1365","hashOfConfig":"727"},{"size":2255,"mtime":1701061257000,"results":"1366","hashOfConfig":"727"},{"size":3579,"mtime":1701061257000,"results":"1367","hashOfConfig":"727"},{"size":525,"mtime":1701061257000,"results":"1368","hashOfConfig":"727"},{"size":1371,"mtime":1701061257000,"results":"1369","hashOfConfig":"727"},{"size":558,"mtime":1701061257000,"results":"1370","hashOfConfig":"727"},{"size":293,"mtime":1701061257000,"results":"1371","hashOfConfig":"727"},{"size":754,"mtime":1701061257000,"results":"1372","hashOfConfig":"727"},{"size":4265,"mtime":1701061257000,"results":"1373","hashOfConfig":"727"},{"size":4981,"mtime":1701061257000,"results":"1374","hashOfConfig":"727"},{"size":5291,"mtime":1701061257000,"results":"1375","hashOfConfig":"727"},{"size":474,"mtime":1701061257000,"results":"1376","hashOfConfig":"727"},{"size":1796,"mtime":1701061257000,"results":"1377","hashOfConfig":"727"},{"size":838,"mtime":1701061257000,"results":"1378","hashOfConfig":"727"},{"size":1126,"mtime":1701061257000,"results":"1379","hashOfConfig":"727"},{"size":534,"mtime":1701061257000,"results":"1380","hashOfConfig":"727"},{"size":5327,"mtime":1701061257000,"results":"1381","hashOfConfig":"727"},{"size":2333,"mtime":1701061257000,"results":"1382","hashOfConfig":"727"},{"size":5735,"mtime":1701061257000,"results":"1383","hashOfConfig":"727"},{"size":580,"mtime":1701061257000,"results":"1384","hashOfConfig":"727"},{"size":1111,"mtime":1701061257000,"results":"1385","hashOfConfig":"727"},{"size":320,"mtime":1701061257000,"results":"1386","hashOfConfig":"727"},{"size":6130,"mtime":1701061257000,"results":"1387","hashOfConfig":"727"},{"size":3400,"mtime":1701061257000,"results":"1388","hashOfConfig":"727"},{"size":4690,"mtime":1701061257000,"results":"1389","hashOfConfig":"727"},{"size":2814,"mtime":1701061257000,"results":"1390","hashOfConfig":"727"},{"size":10906,"mtime":1701061257000,"results":"1391","hashOfConfig":"727"},{"size":351,"mtime":1701061257000,"results":"1392","hashOfConfig":"727"},{"size":156,"mtime":1701061257000,"results":"1393","hashOfConfig":"727"},{"size":298,"mtime":1701061257000,"results":"1394","hashOfConfig":"727"},{"size":1021,"mtime":1701061257000,"results":"1395","hashOfConfig":"727"},{"size":1265,"mtime":1701061257000,"results":"1396","hashOfConfig":"727"},{"size":140,"mtime":1701061257000,"results":"1397","hashOfConfig":"727"},{"size":298,"mtime":1701061257000,"results":"1398","hashOfConfig":"727"},{"size":860,"mtime":1701061257000,"results":"1399","hashOfConfig":"727"},{"size":2041,"mtime":1701061257000,"results":"1400","hashOfConfig":"727"},{"size":4283,"mtime":1701061257000,"results":"1401","hashOfConfig":"727"},{"size":1649,"mtime":1701061257000,"results":"1402","hashOfConfig":"727"},{"size":215,"mtime":1701061257000,"results":"1403","hashOfConfig":"727"},{"size":5071,"mtime":1701061257000,"results":"1404","hashOfConfig":"727"},{"size":8850,"mtime":1701061257000,"results":"1405","hashOfConfig":"727"},{"size":1551,"mtime":1701061257000,"results":"1406","hashOfConfig":"727"},{"size":1528,"mtime":1701061257000,"results":"1407","hashOfConfig":"727"},{"size":7818,"mtime":1701061257000,"results":"1408","hashOfConfig":"727"},{"size":2071,"mtime":1701061257000,"results":"1409","hashOfConfig":"727"},{"size":228,"mtime":1701061257000,"results":"1410","hashOfConfig":"727"},{"size":262,"mtime":1701061257000,"results":"1411","hashOfConfig":"727"},{"size":79,"mtime":1701061257000,"results":"1412","hashOfConfig":"727"},{"size":1334,"mtime":1701061257000,"results":"1413","hashOfConfig":"727"},{"size":83,"mtime":1701061257000,"results":"1414","hashOfConfig":"727"},{"size":83,"mtime":1701061257000,"results":"1415","hashOfConfig":"727"},{"size":4047,"mtime":1701061257000,"results":"1416","hashOfConfig":"727"},{"size":3425,"mtime":1701061257000,"results":"1417","hashOfConfig":"727"},{"size":3337,"mtime":1701061257000,"results":"1418","hashOfConfig":"727"},{"size":624,"mtime":1701061257000,"results":"1419","hashOfConfig":"727"},{"size":784,"mtime":1701061257000,"results":"1420","hashOfConfig":"727"},{"size":575,"mtime":1701061257000,"results":"1421","hashOfConfig":"727"},{"size":4417,"mtime":1701061257000,"results":"1422","hashOfConfig":"727"},{"size":2560,"mtime":1701061257000,"results":"1423","hashOfConfig":"727"},{"size":1279,"mtime":1701061257000,"results":"1424","hashOfConfig":"727"},{"size":5624,"mtime":1701061257000,"results":"1425","hashOfConfig":"727"},{"size":257,"mtime":1701061257000,"results":"1426","hashOfConfig":"727"},{"size":17381,"mtime":1701061257000,"results":"1427","hashOfConfig":"727"},{"size":11658,"mtime":1701061257000,"results":"1428","hashOfConfig":"727"},{"size":1045,"mtime":1701061257000,"results":"1429","hashOfConfig":"727"},{"size":7464,"mtime":1701061257000,"results":"1430","hashOfConfig":"727"},{"size":769,"mtime":1701061257000,"results":"1431","hashOfConfig":"727"},{"size":2801,"mtime":1701061257000,"results":"1432","hashOfConfig":"727"},{"size":10521,"mtime":1701061257000,"results":"1433","hashOfConfig":"727"},{"size":3040,"mtime":1701061257000,"results":"1434","hashOfConfig":"727"},{"size":28135,"mtime":1701061257000,"results":"1435","hashOfConfig":"727"},{"size":586,"mtime":1701061257000,"results":"1436","hashOfConfig":"727"},{"size":8672,"mtime":1701061257000,"results":"1437","hashOfConfig":"727"},{"size":8087,"mtime":1701061257000,"results":"1438","hashOfConfig":"727"},{"size":1572,"mtime":1701061257000,"results":"1439","hashOfConfig":"727"},{"size":1498,"mtime":1701061257000,"results":"1440","hashOfConfig":"727"},{"size":2602,"mtime":1701061257000,"results":"1441","hashOfConfig":"727"},{"size":1143,"mtime":1701061257000,"results":"1442","hashOfConfig":"727"},{"size":5601,"mtime":1701061257000,"results":"1443","hashOfConfig":"727"},{"size":3312,"mtime":1701061257000,"results":"1444","hashOfConfig":"727"},{"size":5340,"mtime":1701061257000,"results":"1445","hashOfConfig":"727"},{"size":3324,"mtime":1701061257000,"results":"1446","hashOfConfig":"727"},{"size":3123,"mtime":1701061257000,"results":"1447","hashOfConfig":"727"},{"size":3175,"mtime":1701061257000,"results":"1448","hashOfConfig":"727"},{"size":3636,"mtime":1701061257000,"results":"1449","hashOfConfig":"727"},{"size":2802,"mtime":1701061257000,"results":"1450","hashOfConfig":"727"},{"size":5722,"mtime":1701061257000,"results":"1451","hashOfConfig":"727"},{"filePath":"1452","messages":"1453","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1454","usedDeprecatedRules":"1455"},"1yuoytt",{"filePath":"1456","messages":"1457","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1458","usedDeprecatedRules":"1455"},{"filePath":"1459","messages":"1460","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1461","usedDeprecatedRules":"1455"},{"filePath":"1462","messages":"1463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1464","messages":"1465","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1466","usedDeprecatedRules":"1455"},{"filePath":"1467","messages":"1468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1469","messages":"1470","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1471","usedDeprecatedRules":"1455"},{"filePath":"1472","messages":"1473","errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":12,"fixableWarningCount":0,"source":"1474","usedDeprecatedRules":"1455"},{"filePath":"1475","messages":"1476","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1477","usedDeprecatedRules":"1455"},{"filePath":"1478","messages":"1479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1480","messages":"1481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1482","messages":"1483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1484","messages":"1485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1486","messages":"1487","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1488","usedDeprecatedRules":"1455"},{"filePath":"1489","messages":"1490","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1491","usedDeprecatedRules":"1455"},{"filePath":"1492","messages":"1493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1494","messages":"1495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1496","messages":"1497","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1498","usedDeprecatedRules":"1455"},{"filePath":"1499","messages":"1500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1501","messages":"1502","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1503","usedDeprecatedRules":"1455"},{"filePath":"1504","messages":"1505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1506","messages":"1507","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1508","usedDeprecatedRules":"1455"},{"filePath":"1509","messages":"1510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1511","messages":"1512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1513","messages":"1514","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1515","usedDeprecatedRules":"1455"},{"filePath":"1516","messages":"1517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1518","messages":"1519","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1520","usedDeprecatedRules":"1455"},{"filePath":"1521","messages":"1522","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1523","usedDeprecatedRules":"1455"},{"filePath":"1524","messages":"1525","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1526","usedDeprecatedRules":"1455"},{"filePath":"1527","messages":"1528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1529","messages":"1530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1531","messages":"1532","errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"1533","usedDeprecatedRules":"1455"},{"filePath":"1534","messages":"1535","errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"1536","usedDeprecatedRules":"1455"},{"filePath":"1537","messages":"1538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1539","messages":"1540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1541","messages":"1542","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1543","usedDeprecatedRules":"1455"},{"filePath":"1544","messages":"1545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1546","messages":"1547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1548","messages":"1549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1550","messages":"1551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1552","messages":"1553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1554","messages":"1555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1556","messages":"1557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1558","messages":"1559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1560","messages":"1561","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1562","usedDeprecatedRules":"1455"},{"filePath":"1563","messages":"1564","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1565","usedDeprecatedRules":"1455"},{"filePath":"1566","messages":"1567","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1568","usedDeprecatedRules":"1455"},{"filePath":"1569","messages":"1570","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1571","usedDeprecatedRules":"1455"},{"filePath":"1572","messages":"1573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1574","messages":"1575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1576","messages":"1577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1578","messages":"1579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1580","messages":"1581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1582","messages":"1583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1584","messages":"1585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1586","messages":"1587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1588","messages":"1589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1590","messages":"1591","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1592","usedDeprecatedRules":"1455"},{"filePath":"1593","messages":"1594","errorCount":7,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1595","messages":"1596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1597","messages":"1598","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1599","usedDeprecatedRules":"1455"},{"filePath":"1600","messages":"1601","errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":14,"fixableWarningCount":0,"source":"1602","usedDeprecatedRules":"1455"},{"filePath":"1603","messages":"1604","errorCount":51,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":51,"fixableWarningCount":0,"source":"1605","usedDeprecatedRules":"1455"},{"filePath":"1606","messages":"1607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1608","messages":"1609","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"1610","usedDeprecatedRules":"1455"},{"filePath":"1611","messages":"1612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1613","messages":"1614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1615","messages":"1616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1617","messages":"1618","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1619","usedDeprecatedRules":"1455"},{"filePath":"1620","messages":"1621","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1622","usedDeprecatedRules":"1455"},{"filePath":"1623","messages":"1624","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1625","usedDeprecatedRules":"1455"},{"filePath":"1626","messages":"1627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1628","messages":"1629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1630","messages":"1631","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1632","usedDeprecatedRules":"1455"},{"filePath":"1633","messages":"1634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1635","messages":"1636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1637","messages":"1638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1639","messages":"1640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1641","messages":"1642","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"1643","usedDeprecatedRules":"1455"},{"filePath":"1644","messages":"1645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1646","messages":"1647","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1648","usedDeprecatedRules":"1455"},{"filePath":"1649","messages":"1650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1651","messages":"1652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1653","messages":"1654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1655","messages":"1656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1657","messages":"1658","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1659","usedDeprecatedRules":"1455"},{"filePath":"1660","messages":"1661","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1662","usedDeprecatedRules":"1455"},{"filePath":"1663","messages":"1664","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1665","usedDeprecatedRules":"1455"},{"filePath":"1666","messages":"1667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1668","messages":"1669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1670","messages":"1671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1672","messages":"1673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1674","messages":"1675","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1676","usedDeprecatedRules":"1455"},{"filePath":"1677","messages":"1678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1679","messages":"1680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1681","messages":"1682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1683","messages":"1684","errorCount":61,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":59,"fixableWarningCount":0,"source":"1685","usedDeprecatedRules":"1455"},{"filePath":"1686","messages":"1687","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1688","usedDeprecatedRules":"1455"},{"filePath":"1689","messages":"1690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1691","messages":"1692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1693","messages":"1694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1695","messages":"1696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1697","messages":"1698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1699","messages":"1700","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1701","usedDeprecatedRules":"1455"},{"filePath":"1702","messages":"1703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1704","messages":"1705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1706","messages":"1707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1708","messages":"1709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1710","messages":"1711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1712","messages":"1713","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1714","usedDeprecatedRules":"1455"},{"filePath":"1715","messages":"1716","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1717","usedDeprecatedRules":"1455"},{"filePath":"1718","messages":"1719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1720","messages":"1721","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1722","usedDeprecatedRules":"1455"},{"filePath":"1723","messages":"1724","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1725","usedDeprecatedRules":"1455"},{"filePath":"1726","messages":"1727","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1728","usedDeprecatedRules":"1455"},{"filePath":"1729","messages":"1730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1731","messages":"1732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1733","messages":"1734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1735","messages":"1736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1737","messages":"1738","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1739","usedDeprecatedRules":"1455"},{"filePath":"1740","messages":"1741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1742","messages":"1743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1744","messages":"1745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1746","messages":"1747","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1748","usedDeprecatedRules":"1455"},{"filePath":"1749","messages":"1750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1751","messages":"1752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1753","messages":"1754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1755","messages":"1756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1757","messages":"1758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1759","messages":"1760","errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"1761","usedDeprecatedRules":"1455"},{"filePath":"1762","messages":"1763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1764","messages":"1765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1766","messages":"1767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1768","messages":"1769","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1770","usedDeprecatedRules":"1455"},{"filePath":"1771","messages":"1772","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1773","usedDeprecatedRules":"1455"},{"filePath":"1774","messages":"1775","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"1776","usedDeprecatedRules":"1455"},{"filePath":"1777","messages":"1778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1779","messages":"1780","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"1781","usedDeprecatedRules":"1455"},{"filePath":"1782","messages":"1783","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1784","usedDeprecatedRules":"1455"},{"filePath":"1785","messages":"1786","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1787","usedDeprecatedRules":"1455"},{"filePath":"1788","messages":"1789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1790","messages":"1791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1792","messages":"1793","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1794","usedDeprecatedRules":"1455"},{"filePath":"1795","messages":"1796","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"1797","usedDeprecatedRules":"1455"},{"filePath":"1798","messages":"1799","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1800","usedDeprecatedRules":"1455"},{"filePath":"1801","messages":"1802","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1803","usedDeprecatedRules":"1455"},{"filePath":"1804","messages":"1805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1806","messages":"1807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1808","messages":"1809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1810","messages":"1811","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1812","usedDeprecatedRules":"1455"},{"filePath":"1813","messages":"1814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1815","messages":"1816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1817","messages":"1818","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1819","usedDeprecatedRules":"1455"},{"filePath":"1820","messages":"1821","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1822","usedDeprecatedRules":"1455"},{"filePath":"1823","messages":"1824","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1825","usedDeprecatedRules":"1455"},{"filePath":"1826","messages":"1827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1828","messages":"1829","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"1830","usedDeprecatedRules":"1455"},{"filePath":"1831","messages":"1832","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1833","usedDeprecatedRules":"1455"},{"filePath":"1834","messages":"1835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1836","messages":"1837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1838","messages":"1839","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1840","usedDeprecatedRules":"1455"},{"filePath":"1841","messages":"1842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1843","messages":"1844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1845","messages":"1846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1847","messages":"1848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1849","messages":"1850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1851","messages":"1852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1853","messages":"1854","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1855","usedDeprecatedRules":"1455"},{"filePath":"1856","messages":"1857","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1858","usedDeprecatedRules":"1455"},{"filePath":"1859","messages":"1860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1861","messages":"1862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1863","messages":"1864","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1865","usedDeprecatedRules":"1455"},{"filePath":"1866","messages":"1867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1868","messages":"1869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1870","messages":"1871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1872","messages":"1873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1874","messages":"1875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1876","messages":"1877","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"1878","usedDeprecatedRules":"1455"},{"filePath":"1879","messages":"1880","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1881","usedDeprecatedRules":"1455"},{"filePath":"1882","messages":"1883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1884","messages":"1885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1886","messages":"1887","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1888","usedDeprecatedRules":"1455"},{"filePath":"1889","messages":"1890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1891","messages":"1892","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1893","usedDeprecatedRules":"1455"},{"filePath":"1894","messages":"1895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1896","messages":"1897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1898","messages":"1899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1900","messages":"1901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1902","messages":"1903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1904","messages":"1905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1906","messages":"1907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1908","messages":"1909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1910","messages":"1911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1912","messages":"1913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1914","messages":"1915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1916","messages":"1917","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1918","usedDeprecatedRules":"1455"},{"filePath":"1919","messages":"1920","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1921","usedDeprecatedRules":"1455"},{"filePath":"1922","messages":"1923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1924","messages":"1925","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1926","usedDeprecatedRules":"1455"},{"filePath":"1927","messages":"1928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1929","messages":"1930","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1931","usedDeprecatedRules":"1455"},{"filePath":"1932","messages":"1933","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"1934","usedDeprecatedRules":"1455"},{"filePath":"1935","messages":"1936","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1937","usedDeprecatedRules":"1455"},{"filePath":"1938","messages":"1939","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1940","usedDeprecatedRules":"1455"},{"filePath":"1941","messages":"1942","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1943","messages":"1944","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1945","usedDeprecatedRules":"1455"},{"filePath":"1946","messages":"1947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1948","messages":"1949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1950","messages":"1951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1952","messages":"1953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1954","messages":"1955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1956","messages":"1957","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"1958","usedDeprecatedRules":"1455"},{"filePath":"1959","messages":"1960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1961","messages":"1962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1963","messages":"1964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1965","messages":"1966","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"1967","usedDeprecatedRules":"1455"},{"filePath":"1968","messages":"1969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1970","messages":"1971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1972","messages":"1973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1974","messages":"1975","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1976","messages":"1977","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1978","usedDeprecatedRules":"1455"},{"filePath":"1979","messages":"1980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1981","messages":"1982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1983","messages":"1984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1985","messages":"1986","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1987","messages":"1988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1989","messages":"1990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1991","messages":"1992","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1993","messages":"1994","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1995","usedDeprecatedRules":"1455"},{"filePath":"1996","messages":"1997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"1998","messages":"1999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2000","messages":"2001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2002","messages":"2003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2004","messages":"2005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2006","messages":"2007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2008","messages":"2009","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2010","usedDeprecatedRules":"1455"},{"filePath":"2011","messages":"2012","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2013","usedDeprecatedRules":"1455"},{"filePath":"2014","messages":"2015","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2016","usedDeprecatedRules":"1455"},{"filePath":"2017","messages":"2018","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2019","usedDeprecatedRules":"1455"},{"filePath":"2020","messages":"2021","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2022","usedDeprecatedRules":"1455"},{"filePath":"2023","messages":"2024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2025","messages":"2026","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2027","messages":"2028","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2029","messages":"2030","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2031","messages":"2032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2033","messages":"2034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2035","messages":"2036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2037","messages":"2038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2039","messages":"2040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2041","messages":"2042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2043","messages":"2044","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2045","messages":"2046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2047","messages":"2048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2049","messages":"2050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2051","messages":"2052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2053","messages":"2054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2055","messages":"2056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2057","messages":"2058","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2059","usedDeprecatedRules":"1455"},{"filePath":"2060","messages":"2061","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2062","usedDeprecatedRules":"1455"},{"filePath":"2063","messages":"2064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2065","messages":"2066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2067","messages":"2068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2069","messages":"2070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2071","messages":"2072","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2073","usedDeprecatedRules":"1455"},{"filePath":"2074","messages":"2075","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2076","messages":"2077","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2078","usedDeprecatedRules":"1455"},{"filePath":"2079","messages":"2080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2081","messages":"2082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2083","messages":"2084","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2085","usedDeprecatedRules":"1455"},{"filePath":"2086","messages":"2087","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2088","messages":"2089","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2090","messages":"2091","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2092","usedDeprecatedRules":"1455"},{"filePath":"2093","messages":"2094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2095","messages":"2096","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2097","usedDeprecatedRules":"1455"},{"filePath":"2098","messages":"2099","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2100","usedDeprecatedRules":"1455"},{"filePath":"2101","messages":"2102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2103","messages":"2104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2105","messages":"2106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2107","messages":"2108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2109","messages":"2110","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2111","usedDeprecatedRules":"1455"},{"filePath":"2112","messages":"2113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2114","messages":"2115","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2116","usedDeprecatedRules":"1455"},{"filePath":"2117","messages":"2118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2119","messages":"2120","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2121","usedDeprecatedRules":"1455"},{"filePath":"2122","messages":"2123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2124","messages":"2125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2126","messages":"2127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2128","messages":"2129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2130","messages":"2131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2132","messages":"2133","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2134","usedDeprecatedRules":"1455"},{"filePath":"2135","messages":"2136","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"2137","usedDeprecatedRules":"1455"},{"filePath":"2138","messages":"2139","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2140","usedDeprecatedRules":"1455"},{"filePath":"2141","messages":"2142","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2143","usedDeprecatedRules":"1455"},{"filePath":"2144","messages":"2145","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"2146","usedDeprecatedRules":"1455"},{"filePath":"2147","messages":"2148","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2149","usedDeprecatedRules":"1455"},{"filePath":"2150","messages":"2151","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2152","usedDeprecatedRules":"1455"},{"filePath":"2153","messages":"2154","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2155","usedDeprecatedRules":"1455"},{"filePath":"2156","messages":"2157","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2158","usedDeprecatedRules":"1455"},{"filePath":"2159","messages":"2160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2161","messages":"2162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2163","messages":"2164","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2165","usedDeprecatedRules":"1455"},{"filePath":"2166","messages":"2167","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2168","usedDeprecatedRules":"1455"},{"filePath":"2169","messages":"2170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2171","messages":"2172","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2173","usedDeprecatedRules":"1455"},{"filePath":"2174","messages":"2175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2176","messages":"2177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2178","messages":"2179","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2180","usedDeprecatedRules":"1455"},{"filePath":"2181","messages":"2182","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2183","usedDeprecatedRules":"1455"},{"filePath":"2184","messages":"2185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2186","messages":"2187","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2188","usedDeprecatedRules":"1455"},{"filePath":"2189","messages":"2190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2191","messages":"2192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2193","messages":"2194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2195","messages":"2196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2197","messages":"2198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2199","messages":"2200","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2201","usedDeprecatedRules":"1455"},{"filePath":"2202","messages":"2203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2204","messages":"2205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2206","messages":"2207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2208","messages":"2209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2210","messages":"2211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2212","messages":"2213","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2214","usedDeprecatedRules":"1455"},{"filePath":"2215","messages":"2216","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2217","usedDeprecatedRules":"1455"},{"filePath":"2218","messages":"2219","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2220","usedDeprecatedRules":"1455"},{"filePath":"2221","messages":"2222","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2223","usedDeprecatedRules":"1455"},{"filePath":"2224","messages":"2225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2226","messages":"2227","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2228","usedDeprecatedRules":"1455"},{"filePath":"2229","messages":"2230","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2231","usedDeprecatedRules":"1455"},{"filePath":"2232","messages":"2233","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2234","usedDeprecatedRules":"1455"},{"filePath":"2235","messages":"2236","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2237","usedDeprecatedRules":"1455"},{"filePath":"2238","messages":"2239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2240","messages":"2241","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2242","usedDeprecatedRules":"1455"},{"filePath":"2243","messages":"2244","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2245","usedDeprecatedRules":"1455"},{"filePath":"2246","messages":"2247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2248","messages":"2249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2250","messages":"2251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2252","messages":"2253","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2254","usedDeprecatedRules":"1455"},{"filePath":"2255","messages":"2256","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2257","usedDeprecatedRules":"1455"},{"filePath":"2258","messages":"2259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2260","messages":"2261","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2262","usedDeprecatedRules":"1455"},{"filePath":"2263","messages":"2264","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2265","usedDeprecatedRules":"1455"},{"filePath":"2266","messages":"2267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2268","messages":"2269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2270","messages":"2271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2272","messages":"2273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2274","messages":"2275","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2276","usedDeprecatedRules":"1455"},{"filePath":"2277","messages":"2278","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2279","usedDeprecatedRules":"1455"},{"filePath":"2280","messages":"2281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2282","messages":"2283","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2284","usedDeprecatedRules":"1455"},{"filePath":"2285","messages":"2286","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2287","usedDeprecatedRules":"1455"},{"filePath":"2288","messages":"2289","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2290","usedDeprecatedRules":"1455"},{"filePath":"2291","messages":"2292","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2293","usedDeprecatedRules":"1455"},{"filePath":"2294","messages":"2295","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2296","usedDeprecatedRules":"1455"},{"filePath":"2297","messages":"2298","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2299","usedDeprecatedRules":"1455"},{"filePath":"2300","messages":"2301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2302","messages":"2303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2304","messages":"2305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2306","messages":"2307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2308","messages":"2309","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2310","usedDeprecatedRules":"1455"},{"filePath":"2311","messages":"2312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2313","messages":"2314","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2315","usedDeprecatedRules":"1455"},{"filePath":"2316","messages":"2317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2318","messages":"2319","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2320","usedDeprecatedRules":"1455"},{"filePath":"2321","messages":"2322","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2323","usedDeprecatedRules":"1455"},{"filePath":"2324","messages":"2325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2326","messages":"2327","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2328","usedDeprecatedRules":"1455"},{"filePath":"2329","messages":"2330","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2331","usedDeprecatedRules":"1455"},{"filePath":"2332","messages":"2333","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2334","usedDeprecatedRules":"1455"},{"filePath":"2335","messages":"2336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2337","messages":"2338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2339","messages":"2340","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2341","usedDeprecatedRules":"1455"},{"filePath":"2342","messages":"2343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2344","messages":"2345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2346","messages":"2347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2348","messages":"2349","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2350","usedDeprecatedRules":"1455"},{"filePath":"2351","messages":"2352","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2353","usedDeprecatedRules":"1455"},{"filePath":"2354","messages":"2355","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2356","usedDeprecatedRules":"1455"},{"filePath":"2357","messages":"2358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2359","messages":"2360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2361","messages":"2362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2363","messages":"2364","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2365","usedDeprecatedRules":"1455"},{"filePath":"2366","messages":"2367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2368","messages":"2369","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2370","usedDeprecatedRules":"1455"},{"filePath":"2371","messages":"2372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2373","messages":"2374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2375","messages":"2376","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2377","usedDeprecatedRules":"1455"},{"filePath":"2378","messages":"2379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2380","messages":"2381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2382","messages":"2383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2384","messages":"2385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2386","messages":"2387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2388","messages":"2389","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2390","usedDeprecatedRules":"1455"},{"filePath":"2391","messages":"2392","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2393","usedDeprecatedRules":"1455"},{"filePath":"2394","messages":"2395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2396","messages":"2397","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2398","usedDeprecatedRules":"1455"},{"filePath":"2399","messages":"2400","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2401","usedDeprecatedRules":"1455"},{"filePath":"2402","messages":"2403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2404","messages":"2405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2406","messages":"2407","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2408","usedDeprecatedRules":"1455"},{"filePath":"2409","messages":"2410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2411","messages":"2412","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2413","usedDeprecatedRules":"1455"},{"filePath":"2414","messages":"2415","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"2416","usedDeprecatedRules":"1455"},{"filePath":"2417","messages":"2418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2419","messages":"2420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2421","messages":"2422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2423","messages":"2424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2425","messages":"2426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2427","messages":"2428","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2429","usedDeprecatedRules":"1455"},{"filePath":"2430","messages":"2431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2432","messages":"2433","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"2434","usedDeprecatedRules":"1455"},{"filePath":"2435","messages":"2436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2437","messages":"2438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2439","messages":"2440","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2441","usedDeprecatedRules":"1455"},{"filePath":"2442","messages":"2443","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2444","usedDeprecatedRules":"1455"},{"filePath":"2445","messages":"2446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2447","messages":"2448","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2449","usedDeprecatedRules":"1455"},{"filePath":"2450","messages":"2451","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2452","usedDeprecatedRules":"1455"},{"filePath":"2453","messages":"2454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2455","messages":"2456","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2457","usedDeprecatedRules":"1455"},{"filePath":"2458","messages":"2459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2460","messages":"2461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2462","messages":"2463","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2464","usedDeprecatedRules":"1455"},{"filePath":"2465","messages":"2466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2467","messages":"2468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2469","messages":"2470","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2471","usedDeprecatedRules":"1455"},{"filePath":"2472","messages":"2473","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2474","usedDeprecatedRules":"1455"},{"filePath":"2475","messages":"2476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2477","messages":"2478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2479","messages":"2480","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2481","usedDeprecatedRules":"1455"},{"filePath":"2482","messages":"2483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2484","messages":"2485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2486","messages":"2487","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":10,"fixableWarningCount":0,"source":"2488","usedDeprecatedRules":"1455"},{"filePath":"2489","messages":"2490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2491","messages":"2492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2493","messages":"2494","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2495","usedDeprecatedRules":"1455"},{"filePath":"2496","messages":"2497","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2498","usedDeprecatedRules":"1455"},{"filePath":"2499","messages":"2500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2501","messages":"2502","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2503","usedDeprecatedRules":"1455"},{"filePath":"2504","messages":"2505","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"2506","usedDeprecatedRules":"1455"},{"filePath":"2507","messages":"2508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2509","messages":"2510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2511","messages":"2512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2513","messages":"2514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2515","messages":"2516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2517","messages":"2518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2519","messages":"2520","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2521","usedDeprecatedRules":"1455"},{"filePath":"2522","messages":"2523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2524","messages":"2525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2526","messages":"2527","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2528","usedDeprecatedRules":"1455"},{"filePath":"2529","messages":"2530","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2531","usedDeprecatedRules":"1455"},{"filePath":"2532","messages":"2533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2534","messages":"2535","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"2536","usedDeprecatedRules":"1455"},{"filePath":"2537","messages":"2538","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2539","usedDeprecatedRules":"1455"},{"filePath":"2540","messages":"2541","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2542","usedDeprecatedRules":"1455"},{"filePath":"2543","messages":"2544","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2545","usedDeprecatedRules":"1455"},{"filePath":"2546","messages":"2547","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2548","usedDeprecatedRules":"1455"},{"filePath":"2549","messages":"2550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2551","messages":"2552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2553","messages":"2554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2555","messages":"2556","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2557","usedDeprecatedRules":"1455"},{"filePath":"2558","messages":"2559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2560","messages":"2561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2562","messages":"2563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2564","messages":"2565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2566","messages":"2567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2568","messages":"2569","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2570","usedDeprecatedRules":"1455"},{"filePath":"2571","messages":"2572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2573","messages":"2574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2575","messages":"2576","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2577","usedDeprecatedRules":"1455"},{"filePath":"2578","messages":"2579","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2580","usedDeprecatedRules":"1455"},{"filePath":"2581","messages":"2582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2583","messages":"2584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2585","messages":"2586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2587","messages":"2588","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2589","usedDeprecatedRules":"1455"},{"filePath":"2590","messages":"2591","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2592","usedDeprecatedRules":"1455"},{"filePath":"2593","messages":"2594","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2595","usedDeprecatedRules":"1455"},{"filePath":"2596","messages":"2597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2598","messages":"2599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2600","messages":"2601","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"2602","usedDeprecatedRules":"1455"},{"filePath":"2603","messages":"2604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2605","messages":"2606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2607","messages":"2608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2609","messages":"2610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2611","messages":"2612","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"2613","usedDeprecatedRules":"1455"},{"filePath":"2614","messages":"2615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2616","messages":"2617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2618","messages":"2619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2620","messages":"2621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2622","messages":"2623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2624","messages":"2625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2626","messages":"2627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2628","messages":"2629","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2630","usedDeprecatedRules":"1455"},{"filePath":"2631","messages":"2632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2633","messages":"2634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2635","messages":"2636","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":10,"fixableWarningCount":0,"source":"2637","usedDeprecatedRules":"1455"},{"filePath":"2638","messages":"2639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2640","messages":"2641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2642","messages":"2643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2644","messages":"2645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2646","messages":"2647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2648","messages":"2649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2650","messages":"2651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2652","messages":"2653","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2654","usedDeprecatedRules":"1455"},{"filePath":"2655","messages":"2656","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2657","usedDeprecatedRules":"1455"},{"filePath":"2658","messages":"2659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2660","messages":"2661","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2662","usedDeprecatedRules":"1455"},{"filePath":"2663","messages":"2664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2665","messages":"2666","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2667","usedDeprecatedRules":"1455"},{"filePath":"2668","messages":"2669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2670","messages":"2671","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2672","usedDeprecatedRules":"1455"},{"filePath":"2673","messages":"2674","errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":20,"fixableWarningCount":0,"source":"2675","usedDeprecatedRules":"1455"},{"filePath":"2676","messages":"2677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2678","messages":"2679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2680","messages":"2681","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":10,"fixableWarningCount":0,"source":"2682","usedDeprecatedRules":"1455"},{"filePath":"2683","messages":"2684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2685","messages":"2686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2687","messages":"2688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2689","messages":"2690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2691","messages":"2692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2693","messages":"2694","errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2695","usedDeprecatedRules":"1455"},{"filePath":"2696","messages":"2697","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2698","usedDeprecatedRules":"1455"},{"filePath":"2699","messages":"2700","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2701","usedDeprecatedRules":"1455"},{"filePath":"2702","messages":"2703","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2704","usedDeprecatedRules":"1455"},{"filePath":"2705","messages":"2706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2707","messages":"2708","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2709","usedDeprecatedRules":"1455"},{"filePath":"2710","messages":"2711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2712","messages":"2713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2714","messages":"2715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2716","messages":"2717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2718","messages":"2719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2720","messages":"2721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2722","messages":"2723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2724","messages":"2725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2726","messages":"2727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2728","messages":"2729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2730","messages":"2731","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2732","usedDeprecatedRules":"1455"},{"filePath":"2733","messages":"2734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2735","messages":"2736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2737","messages":"2738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2739","messages":"2740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2741","messages":"2742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2743","messages":"2744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2745","messages":"2746","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2747","messages":"2748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2749","messages":"2750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2751","messages":"2752","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2753","usedDeprecatedRules":"1455"},{"filePath":"2754","messages":"2755","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2756","usedDeprecatedRules":"1455"},{"filePath":"2757","messages":"2758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2759","messages":"2760","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2761","usedDeprecatedRules":"1455"},{"filePath":"2762","messages":"2763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2764","messages":"2765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2766","messages":"2767","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2768","usedDeprecatedRules":"1455"},{"filePath":"2769","messages":"2770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2771","messages":"2772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2773","messages":"2774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2775","messages":"2776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2777","messages":"2778","errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"2779","usedDeprecatedRules":"1455"},{"filePath":"2780","messages":"2781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2782","messages":"2783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2784","messages":"2785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2786","messages":"2787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2788","messages":"2789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2790","messages":"2791","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2792","usedDeprecatedRules":"1455"},{"filePath":"2793","messages":"2794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2795","messages":"2796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2797","messages":"2798","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":null},{"filePath":"2799","messages":"2800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2801","messages":"2802","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"2803","usedDeprecatedRules":"1455"},{"filePath":"2804","messages":"2805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2806","messages":"2807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2808","messages":"2809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2810","messages":"2811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2812","messages":"2813","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2814","usedDeprecatedRules":"1455"},{"filePath":"2815","messages":"2816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2817","messages":"2818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2819","messages":"2820","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2821","usedDeprecatedRules":"1455"},{"filePath":"2822","messages":"2823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2824","messages":"2825","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2826","usedDeprecatedRules":"1455"},{"filePath":"2827","messages":"2828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2829","messages":"2830","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2831","usedDeprecatedRules":"1455"},{"filePath":"2832","messages":"2833","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2834","usedDeprecatedRules":"1455"},{"filePath":"2835","messages":"2836","errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"2837","usedDeprecatedRules":"1455"},{"filePath":"2838","messages":"2839","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2840","usedDeprecatedRules":"1455"},{"filePath":"2841","messages":"2842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2843","messages":"2844","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2845","usedDeprecatedRules":"1455"},{"filePath":"2846","messages":"2847","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2848","usedDeprecatedRules":"1455"},{"filePath":"2849","messages":"2850","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2851","usedDeprecatedRules":"1455"},{"filePath":"2852","messages":"2853","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2854","usedDeprecatedRules":"1455"},{"filePath":"2855","messages":"2856","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2857","usedDeprecatedRules":"1455"},{"filePath":"2858","messages":"2859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2860","messages":"2861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2862","messages":"2863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2864","messages":"2865","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2866","usedDeprecatedRules":"1455"},{"filePath":"2867","messages":"2868","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2869","usedDeprecatedRules":"1455"},{"filePath":"2870","messages":"2871","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2872","usedDeprecatedRules":"1455"},{"filePath":"2873","messages":"2874","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2875","usedDeprecatedRules":"1455"},{"filePath":"2876","messages":"2877","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2878","usedDeprecatedRules":"1455"},{"filePath":"2879","messages":"2880","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2881","usedDeprecatedRules":"1455"},{"filePath":"2882","messages":"2883","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2884","usedDeprecatedRules":"1455"},{"filePath":"2885","messages":"2886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2887","messages":"2888","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2889","usedDeprecatedRules":"1455"},{"filePath":"2890","messages":"2891","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2892","usedDeprecatedRules":"1455"},{"filePath":"2893","messages":"2894","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2895","usedDeprecatedRules":"1455"},{"filePath":"2896","messages":"2897","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2898","usedDeprecatedRules":"1455"},{"filePath":"2899","messages":"2900","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2901","usedDeprecatedRules":"1455"},{"filePath":"2902","messages":"2903","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2904","usedDeprecatedRules":"1455"},{"filePath":"2905","messages":"2906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2907","messages":"2908","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2909","usedDeprecatedRules":"1455"},{"filePath":"2910","messages":"2911","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2912","usedDeprecatedRules":"1455"},{"filePath":"2913","messages":"2914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2915","messages":"2916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2917","messages":"2918","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2919","usedDeprecatedRules":"1455"},{"filePath":"2920","messages":"2921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2922","messages":"2923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2924","messages":"2925","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2926","usedDeprecatedRules":"1455"},{"filePath":"2927","messages":"2928","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2929","usedDeprecatedRules":"1455"},{"filePath":"2930","messages":"2931","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"2932","usedDeprecatedRules":"1455"},{"filePath":"2933","messages":"2934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2935","messages":"2936","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2937","usedDeprecatedRules":"1455"},{"filePath":"2938","messages":"2939","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2940","usedDeprecatedRules":"1455"},{"filePath":"2941","messages":"2942","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2943","messages":"2944","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2945","messages":"2946","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2947","usedDeprecatedRules":"1455"},{"filePath":"2948","messages":"2949","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2950","usedDeprecatedRules":"1455"},{"filePath":"2951","messages":"2952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2953","messages":"2954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2955","messages":"2956","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2957","usedDeprecatedRules":"1455"},{"filePath":"2958","messages":"2959","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2960","usedDeprecatedRules":"1455"},{"filePath":"2961","messages":"2962","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2963","usedDeprecatedRules":"1455"},{"filePath":"2964","messages":"2965","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2966","usedDeprecatedRules":"1455"},{"filePath":"2967","messages":"2968","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2969","usedDeprecatedRules":"1455"},{"filePath":"2970","messages":"2971","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"2972","usedDeprecatedRules":"1455"},{"filePath":"2973","messages":"2974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2975","messages":"2976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2977","messages":"2978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2979","messages":"2980","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2981","usedDeprecatedRules":"1455"},{"filePath":"2982","messages":"2983","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2984","usedDeprecatedRules":"1455"},{"filePath":"2985","messages":"2986","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":10,"fixableWarningCount":0,"source":"2987","usedDeprecatedRules":"1455"},{"filePath":"2988","messages":"2989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2990","messages":"2991","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"2992","usedDeprecatedRules":"1455"},{"filePath":"2993","messages":"2994","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"2995","usedDeprecatedRules":"1455"},{"filePath":"2996","messages":"2997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"2998","messages":"2999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3000","messages":"3001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3002","messages":"3003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3004","messages":"3005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3006","messages":"3007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3008","messages":"3009","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"3010","usedDeprecatedRules":"1455"},{"filePath":"3011","messages":"3012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3013","messages":"3014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3015","messages":"3016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3017","messages":"3018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3019","messages":"3020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3021","messages":"3022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3023","messages":"3024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3025","messages":"3026","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3027","messages":"3028","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3029","messages":"3030","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3031","messages":"3032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3033","messages":"3034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3035","messages":"3036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3037","messages":"3038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3039","messages":"3040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3041","messages":"3042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3043","messages":"3044","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"3045","usedDeprecatedRules":"1455"},{"filePath":"3046","messages":"3047","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3048","usedDeprecatedRules":"1455"},{"filePath":"3049","messages":"3050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3051","messages":"3052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3053","messages":"3054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3055","messages":"3056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3057","messages":"3058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3059","messages":"3060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3061","messages":"3062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3063","messages":"3064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3065","messages":"3066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3067","messages":"3068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3069","messages":"3070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3071","messages":"3072","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3073","messages":"3074","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"3075","usedDeprecatedRules":"1455"},{"filePath":"3076","messages":"3077","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3078","messages":"3079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3080","messages":"3081","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"3082","usedDeprecatedRules":"1455"},{"filePath":"3083","messages":"3084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3085","messages":"3086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3087","messages":"3088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3089","messages":"3090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3091","messages":"3092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3093","messages":"3094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3095","messages":"3096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3097","messages":"3098","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3099","messages":"3100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3101","messages":"3102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3103","messages":"3104","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3105","usedDeprecatedRules":"1455"},{"filePath":"3106","messages":"3107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3108","messages":"3109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3110","messages":"3111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3112","messages":"3113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3114","messages":"3115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3116","messages":"3117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3118","messages":"3119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3120","messages":"3121","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3122","usedDeprecatedRules":"1455"},{"filePath":"3123","messages":"3124","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"3125","usedDeprecatedRules":"1455"},{"filePath":"3126","messages":"3127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3128","messages":"3129","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3130","usedDeprecatedRules":"1455"},{"filePath":"3131","messages":"3132","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"3133","usedDeprecatedRules":"1455"},{"filePath":"3134","messages":"3135","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3136","usedDeprecatedRules":"1455"},{"filePath":"3137","messages":"3138","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"3139","usedDeprecatedRules":"1455"},{"filePath":"3140","messages":"3141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3142","messages":"3143","errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"3144","usedDeprecatedRules":"1455"},{"filePath":"3145","messages":"3146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3147","messages":"3148","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"3149","usedDeprecatedRules":"1455"},{"filePath":"3150","messages":"3151","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":10,"fixableWarningCount":0,"source":"3152","usedDeprecatedRules":"1455"},{"filePath":"3153","messages":"3154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3155","messages":"3156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3157","messages":"3158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3159","messages":"3160","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"3161","usedDeprecatedRules":"1455"},{"filePath":"3162","messages":"3163","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"3164","usedDeprecatedRules":"1455"},{"filePath":"3165","messages":"3166","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"3167","usedDeprecatedRules":"1455"},{"filePath":"3168","messages":"3169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3170","messages":"3171","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3172","usedDeprecatedRules":"1455"},{"filePath":"3173","messages":"3174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3175","messages":"3176","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3177","usedDeprecatedRules":"1455"},{"filePath":"3178","messages":"3179","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"3180","usedDeprecatedRules":"1455"},{"filePath":"3181","messages":"3182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1455"},{"filePath":"3183","messages":"3184","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"3185","usedDeprecatedRules":"1455"},"/workspace/Physica-Interfae/src/index.tsx",["3186"],"import '@reach/dialog/styles.css'\nimport 'inter-ui'\nimport 'polyfills'\nimport 'tracing'\n\nimport { ApolloProvider } from '@apollo/client'\nimport { FeatureFlagsProvider } from 'featureFlags'\nimport { apolloClient } from 'graphql/data/apollo'\nimport { BlockNumberProvider } from 'lib/hooks/useBlockNumber'\nimport { MulticallUpdater } from 'lib/state/multicall'\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\nimport { SystemThemeUpdater } from 'theme/components/ThemeToggle'\n\nimport Web3Provider from './components/Web3Provider'\nimport { LanguageProvider } from './i18n'\nimport App from './pages/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport store from './state'\nimport ApplicationUpdater from './state/application/updater'\nimport ListsUpdater from './state/lists/updater'\nimport LogsUpdater from './state/logs/updater'\nimport TransactionUpdater from './state/transactions/updater'\nimport ThemeProvider, { ThemedGlobalStyle } from './theme'\nimport RadialGradientByChainUpdater from './theme/components/RadialGradientByChainUpdater'\n\nif (window.ethereum) {\n  window.ethereum.autoRefreshOnNetworkChange = false\n}\n\nfunction Updaters() {\n  return (\n    <>\n      <RadialGradientByChainUpdater />\n      <ListsUpdater />\n      <SystemThemeUpdater />\n      <ApplicationUpdater />\n      <TransactionUpdater />\n      <MulticallUpdater />\n      <LogsUpdater />\n    </>\n  )\n}\n\nconst queryClient = new QueryClient()\n\nconst container = document.getElementById('root') as HTMLElement\n\ncreateRoot(container).render(\n  <StrictMode>\n    <Provider store={store}>\n      <FeatureFlagsProvider>\n        <QueryClientProvider client={queryClient}>\n          <HashRouter>\n            <LanguageProvider>\n              <Web3Provider>\n                <ApolloProvider client={apolloClient}>\n                  <BlockNumberProvider>\n                    <Updaters />\n                    <ThemeProvider>\n                      <ThemedGlobalStyle />\n                      <App />\n                    </ThemeProvider>\n                  </BlockNumberProvider>\n                </ApolloProvider>\n              </Web3Provider>\n            </LanguageProvider>\n          </HashRouter>\n        </QueryClientProvider>\n      </FeatureFlagsProvider>\n    </Provider>\n  </StrictMode>\n)\n\nif (process.env.REACT_APP_SERVICE_WORKER !== 'false') {\n  serviceWorkerRegistration.register()\n}\n",[],"/workspace/Physica-Interfae/src/serviceWorkerRegistration.ts",["3187","3188","3189"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\nimport { isProductionEnv, isStagingEnv } from 'utils/env'\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function register(config?: Config) {\n  if ((isProductionEnv() || isStagingEnv()) && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","/workspace/Physica-Interfae/src/state/logs/updater.ts",["3190","3191"],"import type { Filter } from '@ethersproject/providers'\nimport { useWeb3React } from '@web3-react/core'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport { useEffect, useMemo } from 'react'\n\nimport { useAppDispatch, useAppSelector } from '../hooks'\nimport { fetchedLogs, fetchedLogsError, fetchingLogs } from './slice'\nimport { isHistoricalLog, keyToFilter } from './utils'\n\nexport default function Updater(): null {\n  const dispatch = useAppDispatch()\n  const state = useAppSelector((state) => state.logs)\n  const { chainId, provider } = useWeb3React()\n\n  const blockNumber = useBlockNumber()\n\n  const filtersNeedFetch: Filter[] = useMemo(() => {\n    if (!chainId || typeof blockNumber !== 'number') return []\n\n    const active = state[chainId]\n    if (!active) return []\n\n    return Object.keys(active)\n      .filter((key) => {\n        const { fetchingBlockNumber, results, listeners } = active[key]\n        if (listeners === 0) return false\n        if (typeof fetchingBlockNumber === 'number' && fetchingBlockNumber >= blockNumber) return false\n        if (results && typeof results.blockNumber === 'number' && results.blockNumber >= blockNumber) return false\n        // this condition ensures that if a log is historical, and it's already fetched, we don't re-fetch it\n        if (isHistoricalLog(keyToFilter(key), blockNumber) && results?.logs !== undefined) return false\n        return true\n      })\n      .map((key) => keyToFilter(key))\n  }, [blockNumber, chainId, state])\n\n  useEffect(() => {\n    if (!provider || !chainId || typeof blockNumber !== 'number' || filtersNeedFetch.length === 0) return\n\n    dispatch(fetchingLogs({ chainId, filters: filtersNeedFetch, blockNumber }))\n    filtersNeedFetch.forEach((filter) => {\n      // provide defaults if {from,to}Block are missing\n      let fromBlock = filter.fromBlock ?? 0\n      let toBlock = filter.toBlock ?? blockNumber\n      if (typeof fromBlock === 'string') fromBlock = Number.parseInt(fromBlock)\n      if (typeof toBlock === 'string') toBlock = Number.parseInt(toBlock)\n      provider\n        .getLogs({\n          ...filter,\n          fromBlock,\n          toBlock,\n        })\n        .then((logs) => {\n          dispatch(\n            fetchedLogs({\n              chainId,\n              filter,\n              results: { logs, blockNumber },\n            })\n          )\n        })\n        .catch((error) => {\n          console.error('Failed to get logs', filter, error)\n          dispatch(\n            fetchedLogsError({\n              chainId,\n              filter,\n              blockNumber,\n            })\n          )\n        })\n    })\n  }, [blockNumber, chainId, dispatch, filtersNeedFetch, provider])\n\n  return null\n}\n","/workspace/Physica-Interfae/src/state/application/updater.ts",[],"/workspace/Physica-Interfae/src/state/lists/updater.ts",["3192"],"import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { useWeb3React } from '@web3-react/core'\nimport { DEFAULT_LIST_OF_LISTS, UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport useInterval from 'lib/hooks/useInterval'\nimport ms from 'ms.macro'\nimport { useCallback, useEffect } from 'react'\nimport { useAppDispatch } from 'state/hooks'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { acceptListUpdate } from './actions'\nimport { shouldAcceptVersionUpdate } from './utils'\n\nexport default function Updater(): null {\n  const { provider } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    DEFAULT_LIST_OF_LISTS.forEach((url) => {\n      // Skip validation on unsupported lists\n      const isUnsupportedList = UNSUPPORTED_LIST_URLS.includes(url)\n      fetchList(url, isUnsupportedList).catch((error) => console.debug('interval list fetching error', error))\n    })\n  }, [fetchList, isWindowVisible])\n\n  // fetch all lists every 10 minutes, but only after we initialize provider\n  useInterval(fetchAllListsCallback, provider ? ms`10m` : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl, /* isUnsupportedList= */ true).catch((error) =>\n          console.debug('list added fetching error', error)\n        )\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR: {\n            if (shouldAcceptVersionUpdate(listUrl, list.current, list.pendingUpdate, bump)) {\n              dispatch(acceptListUpdate(listUrl))\n            }\n            break\n          }\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n","/workspace/Physica-Interfae/src/theme/components/RadialGradientByChainUpdater.ts",[],"/workspace/Physica-Interfae/src/i18n.tsx",["3193"],"import { SupportedLocale } from 'constants/locales'\nimport { initialLocale, useActiveLocale } from 'hooks/useActiveLocale'\nimport { dynamicActivate, Provider } from 'lib/i18n'\nimport { ReactNode, useCallback } from 'react'\nimport { useUserLocaleManager } from 'state/user/hooks'\n\ndynamicActivate(initialLocale)\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const locale = useActiveLocale()\n  const [, setUserLocale] = useUserLocaleManager()\n\n  const onActivate = useCallback(\n    (locale: SupportedLocale) => {\n      document.documentElement.setAttribute('lang', locale)\n      setUserLocale(locale) // stores the selected locale to persist across sessions\n    },\n    [setUserLocale]\n  )\n\n  return (\n    <Provider locale={locale} forceRenderAfterLocaleChange={false} onActivate={onActivate}>\n      {children}\n    </Provider>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/App.tsx",["3194","3195","3196","3197","3198","3199","3200","3201","3202","3203","3204","3205","3206","3207"],"import { getDeviceId, sendAnalyticsEvent, Trace, user } from '@uniswap/analytics'\nimport { CustomUserProperties, getBrowser, InterfacePageName, SharedEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport TopLevelModals from 'components/TopLevelModals'\nimport { useFeatureFlagsIsLoaded } from 'featureFlags'\nimport ApeModeQueryParamReader from 'hooks/useApeModeQueryParamReader'\nimport { useAtom } from 'jotai'\nimport { useBag } from 'nft/hooks/useBag'\nimport { lazy, Suspense, useEffect, useMemo, useState } from 'react'\nimport { Navigate, Route, Routes, useLocation, useSearchParams } from 'react-router-dom'\nimport { shouldDisableNFTRoutesAtom } from 'state/application/atoms'\nimport { StatsigProvider, StatsigUser } from 'statsig-react'\nimport styled from 'styled-components/macro'\nimport { SpinnerSVG } from 'theme/components'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\nimport { flexRowNoWrap } from 'theme/styles'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { STATSIG_DUMMY_KEY } from 'tracing'\nimport { getEnvName } from 'utils/env'\nimport { getCLS, getFCP, getFID, getLCP, Metric } from 'web-vitals'\n\nimport { useAnalyticsReporter } from '../components/analytics'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport { PageTabs } from '../components/NavBar'\nimport NavBar from '../components/NavBar'\nimport Polling from '../components/Polling'\nimport Popups from '../components/Popups'\nimport { useIsExpertMode } from '../state/user/hooks'\nimport DarkModeQueryParamReader from '../theme/components/DarkModeQueryParamReader'\nimport AddLiquidity from './AddLiquidity'\nimport { RedirectDuplicateTokenIds } from './AddLiquidity/redirects'\nimport { RedirectDuplicateTokenIdsV2 } from './AddLiquidityV2/redirects'\nimport Landing from './Landing'\nimport MigrateV2 from './MigrateV2'\nimport MigrateV2Pair from './MigrateV2/MigrateV2Pair'\nimport NotFound from './NotFound'\nimport Pool from './Pool'\nimport PositionPage from './Pool/PositionPage'\nimport PoolV2 from './Pool/v2'\nimport PoolFinder from './PoolFinder'\nimport RemoveLiquidity from './RemoveLiquidity'\nimport RemoveLiquidityV3 from './RemoveLiquidity/V3'\nimport Swap from './Swap'\nimport { RedirectPathToSwapOnly } from './Swap/redirects'\nimport Tokens from './Tokens'\n\nconst TokenDetails = lazy(() => import('./TokenDetails'))\nconst Vote = lazy(() => import('./Vote'))\nconst NftExplore = lazy(() => import('nft/pages/explore'))\nconst Collection = lazy(() => import('nft/pages/collection'))\nconst Profile = lazy(() => import('nft/pages/profile/profile'))\nconst Asset = lazy(() => import('nft/pages/asset/Asset'))\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 100vh;\n  padding: ${({ theme }) => theme.navHeight}px 0px 5rem 0px;\n  align-items: center;\n  flex: 1;\n`\n\nconst MobileBottomBar = styled.div`\n  z-index: ${Z_INDEX.sticky};\n  position: fixed;\n  display: flex;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  width: 100vw;\n  justify-content: space-between;\n  padding: 4px 8px;\n  height: ${({ theme }) => theme.mobileBottomBarHeight}px;\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    display: none;\n  }\n`\n\nconst HeaderWrapper = styled.div<{ transparent?: boolean }>`\n  ${flexRowNoWrap};\n  background-color: ${({ theme, transparent }) => !transparent && theme.backgroundSurface};\n  // border-bottom: ${({ theme, transparent }) => !transparent && `1px solid ${theme.backgroundOutline}`};\n  box-shadow: ${({ theme, transparent }) => !transparent && `0px 34px 94px 0px #141251`};\n  width: 100%;\n  justify-content: space-between;\n  position: fixed;\n  top: 0;\n  z-index: ${Z_INDEX.dropdown};\n`\n\nfunction getCurrentPageFromLocation(locationPathname: string): InterfacePageName | undefined {\n  switch (true) {\n    case locationPathname.startsWith('/swap'):\n      return InterfacePageName.SWAP_PAGE\n    case locationPathname.startsWith('/vote'):\n      return InterfacePageName.VOTE_PAGE\n    case locationPathname.startsWith('/pools'):\n    case locationPathname.startsWith('/pool'):\n      return InterfacePageName.POOL_PAGE\n    case locationPathname.startsWith('/tokens'):\n      return InterfacePageName.TOKENS_PAGE\n    case locationPathname.startsWith('/nfts/profile'):\n      return InterfacePageName.NFT_PROFILE_PAGE\n    case locationPathname.startsWith('/nfts/asset'):\n      return InterfacePageName.NFT_DETAILS_PAGE\n    case locationPathname.startsWith('/nfts/collection'):\n      return InterfacePageName.NFT_COLLECTION_PAGE\n    case locationPathname.startsWith('/nfts'):\n      return InterfacePageName.NFT_EXPLORE_PAGE\n    default:\n      return undefined\n  }\n}\n\n// this is the same svg defined in assets/images/blue-loader.svg\n// it is defined here because the remote asset may not have had time to load when this file is executing\nconst LazyLoadSpinner = () => (\n  <SpinnerSVG width=\"94\" height=\"94\" viewBox=\"0 0 94 94\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M92 47C92 22.1472 71.8528 2 47 2C22.1472 2 2 22.1472 2 47C2 71.8528 22.1472 92 47 92\"\n      stroke=\"#2172E5\"\n      strokeWidth=\"3\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SpinnerSVG>\n)\n\nexport default function App() {\n  const isLoaded = useFeatureFlagsIsLoaded()\n  const [shouldDisableNFTRoutes, setShouldDisableNFTRoutes] = useAtom(shouldDisableNFTRoutesAtom)\n\n  const { pathname } = useLocation()\n  const currentPage = getCurrentPageFromLocation(pathname)\n  const isDarkMode = useIsDarkMode()\n  const isExpertMode = useIsExpertMode()\n  const [scrolledState, setScrolledState] = useState(false)\n\n  useAnalyticsReporter()\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    setScrolledState(false)\n  }, [pathname])\n\n  const [searchParams] = useSearchParams()\n  useEffect(() => {\n    if (searchParams.get('disableNFTs') === 'true') {\n      setShouldDisableNFTRoutes(true)\n    } else if (searchParams.get('disableNFTs') === 'false') {\n      setShouldDisableNFTRoutes(false)\n    }\n  }, [searchParams, setShouldDisableNFTRoutes])\n\n  useEffect(() => {\n    // User properties *must* be set before sending corresponding event properties,\n    // so that the event contains the correct and up-to-date user properties.\n    user.set(CustomUserProperties.USER_AGENT, navigator.userAgent)\n    user.set(CustomUserProperties.BROWSER, getBrowser())\n    user.set(CustomUserProperties.SCREEN_RESOLUTION_HEIGHT, window.screen.height)\n    user.set(CustomUserProperties.SCREEN_RESOLUTION_WIDTH, window.screen.width)\n\n    sendAnalyticsEvent(SharedEventName.APP_LOADED)\n    getCLS(({ delta }: Metric) => sendAnalyticsEvent(SharedEventName.WEB_VITALS, { cumulative_layout_shift: delta }))\n    getFCP(({ delta }: Metric) => sendAnalyticsEvent(SharedEventName.WEB_VITALS, { first_contentful_paint_ms: delta }))\n    getFID(({ delta }: Metric) => sendAnalyticsEvent(SharedEventName.WEB_VITALS, { first_input_delay_ms: delta }))\n    getLCP(({ delta }: Metric) =>\n      sendAnalyticsEvent(SharedEventName.WEB_VITALS, { largest_contentful_paint_ms: delta })\n    )\n  }, [])\n\n  useEffect(() => {\n    user.set(CustomUserProperties.DARK_MODE, isDarkMode)\n  }, [isDarkMode])\n\n  useEffect(() => {\n    user.set(CustomUserProperties.EXPERT_MODE, isExpertMode)\n  }, [isExpertMode])\n\n  useEffect(() => {\n    const scrollListener = () => {\n      setScrolledState(window.scrollY > 0)\n    }\n    window.addEventListener('scroll', scrollListener)\n    return () => window.removeEventListener('scroll', scrollListener)\n  }, [])\n\n  const isBagExpanded = useBag((state) => state.bagExpanded)\n  const isHeaderTransparent = !scrolledState && !isBagExpanded\n\n  const { account } = useWeb3React()\n  const statsigUser: StatsigUser = useMemo(\n    () => ({\n      userID: getDeviceId(),\n      customIDs: { address: account ?? '' },\n    }),\n    [account]\n  )\n\n  return (\n    <ErrorBoundary>\n      <DarkModeQueryParamReader />\n      <ApeModeQueryParamReader />\n      <Trace page={currentPage}>\n        <StatsigProvider\n          user={statsigUser}\n          // TODO: replace with proxy and cycle key\n          sdkKey={STATSIG_DUMMY_KEY}\n          waitForInitialization={false}\n          options={{\n            environment: { tier: getEnvName() },\n            api: process.env.REACT_APP_STATSIG_PROXY_URL,\n          }}\n        >\n          <HeaderWrapper transparent={isHeaderTransparent}>\n            <NavBar blur={isHeaderTransparent} />\n          </HeaderWrapper>\n          <BodyWrapper>\n            <Popups />\n            <Polling />\n            <TopLevelModals />\n            <Suspense fallback={<Loader />}>\n              {isLoaded ? (\n                <Routes>\n                 // <Route path=\"/\" element={<Landing />} />\n\n                  <Route path=\"tokens\" element={<Tokens />}>\n                    <Route path=\":chainName\" />\n                  </Route>\n                  <Route path=\"tokens/:chainName/:tokenAddress\" element={<TokenDetails />} />\n                  <Route\n                    path=\"vote/*\"\n                    element={\n                      <Suspense fallback={<LazyLoadSpinner />}>\n                        <Vote />\n                      </Suspense>\n                    }\n                  />\n                  <Route path=\"create-proposal\" element={<Navigate to=\"/vote/create-proposal\" replace />} />\n                  <Route path=\"send\" element={<RedirectPathToSwapOnly />} />\n                  <Route path=\"swap\" element={<Swap />} />\n\n                  <Route path=\"pool/v2/find\" element={<PoolFinder />} />\n                  <Route path=\"pool/v2\" element={<PoolV2 />} />\n                  <Route path=\"pool\" element={<Pool />} />\n                  <Route path=\"pool/:tokenId\" element={<PositionPage />} />\n\n                  <Route path=\"pools/v2/find\" element={<PoolFinder />} />\n                  <Route path=\"pools/v2\" element={<PoolV2 />} />\n                  <Route path=\"pools\" element={<Pool />} />\n                  <Route path=\"pools/:tokenId\" element={<PositionPage />} />\n\n                  <Route path=\"add/v2\" element={<RedirectDuplicateTokenIdsV2 />}>\n                    <Route path=\":currencyIdA\" />\n                    <Route path=\":currencyIdA/:currencyIdB\" />\n                  </Route>\n                  <Route path=\"add\" element={<RedirectDuplicateTokenIds />}>\n                    {/* this is workaround since react-router-dom v6 doesn't support optional parameters any more */}\n                    <Route path=\":currencyIdA\" />\n                    <Route path=\":currencyIdA/:currencyIdB\" />\n                    <Route path=\":currencyIdA/:currencyIdB/:feeAmount\" />\n                  </Route>\n\n                  <Route path=\"increase\" element={<AddLiquidity />}>\n                    <Route path=\":currencyIdA\" />\n                    <Route path=\":currencyIdA/:currencyIdB\" />\n                    <Route path=\":currencyIdA/:currencyIdB/:feeAmount\" />\n                    <Route path=\":currencyIdA/:currencyIdB/:feeAmount/:tokenId\" />\n                  </Route>\n\n                  <Route path=\"remove/v2/:currencyIdA/:currencyIdB\" element={<RemoveLiquidity />} />\n                  <Route path=\"remove/:tokenId\" element={<RemoveLiquidityV3 />} />\n\n                  <Route path=\"migrate/v2\" element={<MigrateV2 />} />\n                  <Route path=\"migrate/v2/:address\" element={<MigrateV2Pair />} />\n\n                  {!shouldDisableNFTRoutes && (\n                    <>\n                      <Route\n                        path=\"/nfts\"\n                        element={\n                          <Suspense fallback={null}>\n                            <NftExplore />\n                          </Suspense>\n                        }\n                      />\n\n                      <Route\n                        path=\"/nfts/asset/:contractAddress/:tokenId\"\n                        element={\n                          <Suspense fallback={null}>\n                            <Asset />\n                          </Suspense>\n                        }\n                      />\n\n                      <Route\n                        path=\"/nfts/profile\"\n                        element={\n                          <Suspense fallback={null}>\n                            <Profile />\n                          </Suspense>\n                        }\n                      />\n\n                      <Route\n                        path=\"/nfts/collection/:contractAddress\"\n                        element={\n                          <Suspense fallback={null}>\n                            <Collection />\n                          </Suspense>\n                        }\n                      />\n\n                      <Route\n                        path=\"/nfts/collection/:contractAddress/activity\"\n                        element={\n                          <Suspense fallback={null}>\n                            <Collection />\n                          </Suspense>\n                        }\n                      />\n                    </>\n                  )}\n\n                  <Route path=\"*\" element={<Navigate to=\"/not-found\" replace />} />\n                  <Route path=\"/not-found\" element={<NotFound />} />\n                </Routes>\n              ) : (\n                <Loader />\n              )}\n            </Suspense>\n          </BodyWrapper>\n          <MobileBottomBar>\n            <PageTabs />\n          </MobileBottomBar>\n        </StatsigProvider>\n      </Trace>\n    </ErrorBoundary>\n  )\n}\n","/workspace/Physica-Interfae/src/state/transactions/updater.tsx",["3208","3209","3210","3211"],"import { useWeb3React } from '@web3-react/core'\nimport { DEFAULT_TXN_DISMISS_MS, L2_TXN_DISMISS_MS } from 'constants/misc'\nimport LibUpdater from 'lib/hooks/transactions/updater'\nimport { useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { L2_CHAIN_IDS } from '../../constants/chains'\nimport { useAddPopup } from '../application/hooks'\nimport { checkedTransaction, finalizeTransaction } from './reducer'\nimport { SerializableTransactionReceipt } from './types'\n\nexport default function Updater() {\n  const { chainId } = useWeb3React()\n  const addPopup = useAddPopup()\n  // speed up popup dismisall time if on L2\n  const isL2 = Boolean(chainId && L2_CHAIN_IDS.includes(chainId))\n  const transactions = useAppSelector((state) => state.transactions)\n\n  const dispatch = useAppDispatch()\n  const onCheck = useCallback(\n    ({ chainId, hash, blockNumber }: { chainId: number; hash: string; blockNumber: number }) =>\n      dispatch(checkedTransaction({ chainId, hash, blockNumber })),\n    [dispatch]\n  )\n  const onReceipt = useCallback(\n    ({ chainId, hash, receipt }: { chainId: number; hash: string; receipt: SerializableTransactionReceipt }) => {\n      dispatch(\n        finalizeTransaction({\n          chainId,\n          hash,\n          receipt: {\n            blockHash: receipt.blockHash,\n            blockNumber: receipt.blockNumber,\n            contractAddress: receipt.contractAddress,\n            from: receipt.from,\n            status: receipt.status,\n            to: receipt.to,\n            transactionHash: receipt.transactionHash,\n            transactionIndex: receipt.transactionIndex,\n          },\n        })\n      )\n\n      addPopup(\n        {\n          txn: { hash },\n        },\n        hash,\n        isL2 ? L2_TXN_DISMISS_MS : DEFAULT_TXN_DISMISS_MS\n      )\n    },\n    [addPopup, dispatch, isL2]\n  )\n\n  const pendingTransactions = useMemo(() => (chainId ? transactions[chainId] ?? {} : {}), [chainId, transactions])\n\n  return <LibUpdater pendingTransactions={pendingTransactions} onCheck={onCheck} onReceipt={onReceipt} />\n}\n","/workspace/Physica-Interfae/src/state/index.ts",[],"/workspace/Physica-Interfae/src/polyfills.ts",[],"/workspace/Physica-Interfae/src/state/hooks.ts",[],"/workspace/Physica-Interfae/src/state/application/reducer.ts",[],"/workspace/Physica-Interfae/src/state/logs/slice.ts",["3212","3213","3214"],"import type { Filter } from '@ethersproject/providers'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { filterToKey, Log } from './utils'\n\ninterface LogsState {\n  [chainId: number]: {\n    [filterKey: string]: {\n      listeners: number\n      fetchingBlockNumber?: number\n      results?:\n        | {\n            blockNumber: number\n            logs: Log[]\n            error?: undefined\n          }\n        | {\n            blockNumber: number\n            logs?: undefined\n            error: true\n          }\n    }\n  }\n}\n\nconst slice = createSlice({\n  name: 'logs',\n  initialState: {} as LogsState,\n  reducers: {\n    addListener(state, { payload: { chainId, filter } }: PayloadAction<{ chainId: number; filter: Filter }>) {\n      if (!state[chainId]) state[chainId] = {}\n      const key = filterToKey(filter)\n      if (!state[chainId][key])\n        state[chainId][key] = {\n          listeners: 1,\n        }\n      else state[chainId][key].listeners++\n    },\n    fetchingLogs(\n      state,\n      {\n        payload: { chainId, filters, blockNumber },\n      }: PayloadAction<{ chainId: number; filters: Filter[]; blockNumber: number }>\n    ) {\n      if (!state[chainId]) return\n      for (const filter of filters) {\n        const key = filterToKey(filter)\n        if (!state[chainId][key]) continue\n        state[chainId][key].fetchingBlockNumber = blockNumber\n      }\n    },\n    fetchedLogs(\n      state,\n      {\n        payload: { chainId, filter, results },\n      }: PayloadAction<{ chainId: number; filter: Filter; results: { blockNumber: number; logs: Log[] } }>\n    ) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      const fetchState = state[chainId][key]\n      if (!fetchState || (fetchState.results && fetchState.results.blockNumber > results.blockNumber)) return\n      fetchState.results = results\n    },\n    fetchedLogsError(\n      state,\n      {\n        payload: { chainId, filter, blockNumber },\n      }: PayloadAction<{ chainId: number; blockNumber: number; filter: Filter }>\n    ) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      const fetchState = state[chainId][key]\n      if (!fetchState || (fetchState.results && fetchState.results.blockNumber > blockNumber)) return\n      fetchState.results = {\n        blockNumber,\n        error: true,\n      }\n    },\n    removeListener(state, { payload: { chainId, filter } }: PayloadAction<{ chainId: number; filter: Filter }>) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      if (!state[chainId][key]) return\n      state[chainId][key].listeners--\n    },\n  },\n})\n\nexport default slice.reducer\nexport const { addListener, removeListener, fetchedLogs, fetchedLogsError, fetchingLogs } = slice.actions\n","/workspace/Physica-Interfae/src/state/application/hooks.ts",["3215","3216"],"import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { MoonpayEventName } from '@uniswap/analytics-events'\nimport { DEFAULT_TXN_DISMISS_MS } from 'constants/misc'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { AppState } from '../types'\nimport {\n  addPopup,\n  ApplicationModal,\n  PopupContent,\n  removePopup,\n  setFiatOnrampAvailability,\n  setOpenModal,\n} from './reducer'\n\nexport function useModalIsOpen(modal: ApplicationModal): boolean {\n  const openModal = useAppSelector((state: AppState) => state.application.openModal)\n  return openModal === modal\n}\n\n/** @ref https://dashboard.moonpay.com/api_reference/client_side_api#ip_addresses */\ninterface MoonpayIPAddressesResponse {\n  alpha3?: string\n  isAllowed?: boolean\n  isBuyAllowed?: boolean\n  isSellAllowed?: boolean\n}\n\nasync function getMoonpayAvailability(): Promise<boolean> {\n  const moonpayPublishableKey = process.env.REACT_APP_MOONPAY_PUBLISHABLE_KEY\n  if (!moonpayPublishableKey) {\n    throw new Error('Must provide a publishable key for moonpay.')\n  }\n  const moonpayApiURI = process.env.REACT_APP_MOONPAY_API\n  if (!moonpayApiURI) {\n    throw new Error('Must provide an api endpoint for moonpay.')\n  }\n  const res = await fetch(`${moonpayApiURI}/v4/ip_address?apiKey=${moonpayPublishableKey}`)\n  const data = await (res.json() as Promise<MoonpayIPAddressesResponse>)\n  return data.isBuyAllowed ?? false\n}\n\nexport function useFiatOnrampAvailability(shouldCheck: boolean, callback?: () => void) {\n  const dispatch = useAppDispatch()\n  const { available, availabilityChecked } = useAppSelector((state: AppState) => state.application.fiatOnramp)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    async function checkAvailability() {\n      setError(null)\n      setLoading(true)\n      try {\n        const result = await getMoonpayAvailability()\n        sendAnalyticsEvent(MoonpayEventName.MOONPAY_GEOCHECK_COMPLETED, { success: result })\n        if (stale) return\n        dispatch(setFiatOnrampAvailability(result))\n        if (result && callback) {\n          callback()\n        }\n      } catch (e) {\n        console.error('Error checking onramp availability', e.toString())\n        if (stale) return\n        setError('Error, try again later.')\n        dispatch(setFiatOnrampAvailability(false))\n      } finally {\n        if (!stale) setLoading(false)\n      }\n    }\n\n    if (!availabilityChecked && shouldCheck) {\n      checkAvailability()\n    }\n\n    let stale = false\n    return () => {\n      stale = true\n    }\n  }, [availabilityChecked, callback, dispatch, shouldCheck])\n\n  return { available, availabilityChecked, loading, error }\n}\n\nexport function useToggleModal(modal: ApplicationModal): () => void {\n  const isOpen = useModalIsOpen(modal)\n  const dispatch = useAppDispatch()\n  return useCallback(() => dispatch(setOpenModal(isOpen ? null : modal)), [dispatch, modal, isOpen])\n}\n\nexport function useCloseModal(): () => void {\n  const dispatch = useAppDispatch()\n  return useCallback(() => dispatch(setOpenModal(null)), [dispatch])\n}\n\nexport function useOpenModal(modal: ApplicationModal): () => void {\n  const dispatch = useAppDispatch()\n  return useCallback(() => dispatch(setOpenModal(modal)), [dispatch, modal])\n}\n\nexport function useToggleUniwalletModal(): () => void {\n  return useToggleModal(ApplicationModal.UNIWALLET_CONNECT)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  return useToggleModal(ApplicationModal.SETTINGS)\n}\n\nexport function useShowClaimPopup(): boolean {\n  return useModalIsOpen(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleShowClaimPopup(): () => void {\n  return useToggleModal(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleSelfClaimModal(): () => void {\n  return useToggleModal(ApplicationModal.SELF_CLAIM)\n}\n\nexport function useToggleDelegateModal(): () => void {\n  return useToggleModal(ApplicationModal.DELEGATE)\n}\n\nexport function useToggleVoteModal(): () => void {\n  return useToggleModal(ApplicationModal.VOTE)\n}\n\nexport function useToggleQueueModal(): () => void {\n  return useToggleModal(ApplicationModal.QUEUE)\n}\n\nexport function useToggleExecuteModal(): () => void {\n  return useToggleModal(ApplicationModal.EXECUTE)\n}\n\nexport function useTogglePrivacyPolicy(): () => void {\n  return useToggleModal(ApplicationModal.PRIVACY_POLICY)\n}\n\nexport function useToggleFeatureFlags(): () => void {\n  return useToggleModal(ApplicationModal.FEATURE_FLAGS)\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string, removeAfterMs?: number) => void {\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string, removeAfterMs?: number) => {\n      dispatch(addPopup({ content, key, removeAfterMs: removeAfterMs ?? DEFAULT_TXN_DISMISS_MS }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useAppDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useAppSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter((item) => item.show), [list])\n}\n","/workspace/Physica-Interfae/src/state/logs/utils.ts",[],"/workspace/Physica-Interfae/src/state/lists/actions.ts",[],"/workspace/Physica-Interfae/src/state/lists/utils.ts",["3217","3218"],"import { minVersionBump, TokenList, VersionUpgrade } from '@uniswap/token-lists'\n\nexport function shouldAcceptVersionUpdate(\n  listUrl: string,\n  current: TokenList,\n  update: TokenList,\n  targetBump: VersionUpgrade.PATCH | VersionUpgrade.MINOR\n): boolean {\n  const min = minVersionBump(current.tokens, update.tokens)\n  // Automatically update minor/patch as long as bump matches the min update.\n  if (targetBump >= min) {\n    return true\n  } else {\n    console.debug(\n      `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n    )\n    return false\n  }\n}\n","/workspace/Physica-Interfae/src/theme/colors.ts",[],"/workspace/Physica-Interfae/src/hooks/useFetchListCallback.ts",["3219","3220"],"import { nanoid } from '@reduxjs/toolkit'\nimport { TokenList } from '@uniswap/token-lists'\nimport { SupportedChainId } from 'constants/chains'\nimport { RPC_PROVIDERS } from 'constants/providers'\nimport getTokenList from 'lib/hooks/useTokenList/fetchTokenList'\nimport resolveENSContentHash from 'lib/utils/resolveENSContentHash'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state/hooks'\n\nimport { fetchTokenList } from '../state/lists/actions'\n\nexport function useFetchListCallback(): (listUrl: string, skipValidation?: boolean) => Promise<TokenList> {\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    async (listUrl: string, skipValidation?: boolean) => {\n      const requestId = nanoid()\n      dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      return getTokenList(\n        listUrl,\n        (ensName: string) => resolveENSContentHash(ensName, RPC_PROVIDERS[SupportedChainId.MAINNET]),\n        skipValidation\n      )\n        .then((tokenList) => {\n          dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch]\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useIsWindowVisible.ts",[],"/workspace/Physica-Interfae/src/theme/index.tsx",["3221"],"import { rootCssString } from 'nft/css/cssStringFromTheme'\nimport React, { useMemo } from 'react'\nimport { createGlobalStyle, css, ThemeProvider as StyledComponentsThemeProvider } from 'styled-components/macro'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\n\nimport { darkTheme, lightTheme } from './colors'\nimport { darkDeprecatedTheme, lightDeprecatedTheme } from './deprecatedColors'\n\n// todo - remove and replace imports with a new path\nexport * from './components'\nexport * from './components/text'\n\nexport const MEDIA_WIDTHS = {\n  deprecated_upToExtraSmall: 500,\n  deprecated_upToSmall: 720,\n  deprecated_upToMedium: 960,\n  deprecated_upToLarge: 1280,\n}\n\nconst MAX_CONTENT_WIDTH = '1200px'\n\nconst deprecated_mediaWidthTemplates: { [width in keyof typeof MEDIA_WIDTHS]: typeof css } = Object.keys(\n  MEDIA_WIDTHS\n).reduce((acc, size) => {\n  acc[size] = (a: any, b: any, c: any) => css`\n    @media (max-width: ${(MEDIA_WIDTHS as any)[size]}px) {\n      ${css(a, b, c)}\n    }\n  `\n  return acc\n}, {} as any)\n\nexport const BREAKPOINTS = {\n  xs: 396,\n  sm: 640,\n  md: 768,\n  lg: 1024,\n  navSearchInputVisible: 1100,\n  xl: 1280,\n  xxl: 1536,\n  xxxl: 1920,\n}\n\n// deprecated - please use the ones in styles.ts file\nconst transitions = {\n  duration: {\n    slow: '500ms',\n    medium: '250ms',\n    fast: '125ms',\n  },\n  timing: {\n    ease: 'ease',\n    in: 'ease-in',\n    out: 'ease-out',\n    inOut: 'ease-in-out',\n  },\n}\n\nconst opacities = {\n  hover: 0.6,\n  click: 0.4,\n  disabled: 0.5,\n  enabled: 1,\n}\n\nconst fonts = {\n  code: 'courier, courier new, serif',\n}\n\nfunction getSettings(darkMode: boolean) {\n  return {\n    grids: {\n      xs: '4px',\n      sm: '8px',\n      md: '12px',\n      lg: '24px',\n      xl: '32px',\n    },\n    fonts,\n\n    // shadows\n    shadow1: darkMode ? '#000' : '#2F80ED',\n\n    // media queries\n    deprecated_mediaWidth: deprecated_mediaWidthTemplates,\n\n    navHeight: 72,\n    mobileBottomBarHeight: 52,\n    maxWidth: MAX_CONTENT_WIDTH,\n\n    // deprecated - please use hardcoded exported values instead of\n    // adding to the theme object\n    breakpoint: BREAKPOINTS,\n    transition: transitions,\n    opacity: opacities,\n  }\n}\n\n// eslint-disable-next-line import/no-unused-modules -- used in styled.d.ts\nexport function getTheme(darkMode: boolean) {\n  return {\n    darkMode,\n    ...(darkMode ? darkTheme : lightTheme),\n    ...(darkMode ? darkDeprecatedTheme : lightDeprecatedTheme),\n    ...getSettings(darkMode),\n  }\n}\n\nexport default function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const darkMode = useIsDarkMode()\n  const themeObject = useMemo(() => getTheme(darkMode), [darkMode])\n  return <StyledComponentsThemeProvider theme={themeObject}>{children}</StyledComponentsThemeProvider>\n}\n\nexport const ThemedGlobalStyle = createGlobalStyle`\n  html {\n    color: ${({ theme }) => theme.textPrimary};\n    background-color: ${({ theme }) => theme.background} !important;\n  }\n\n  summary::-webkit-details-marker {\n    display:none;\n  }\n\n  a {\n    color: ${({ theme }) => theme.accentAction}; \n  }\n\n  :root {\n    ${({ theme }) => rootCssString(theme.darkMode)}\n  }\n`\n","/workspace/Physica-Interfae/src/components/Web3Provider/index.tsx",[],"/workspace/Physica-Interfae/src/state/transactions/reducer.ts",[],"/workspace/Physica-Interfae/src/theme/components/ThemeToggle.tsx",["3222","3223"],"import { Trans } from '@lingui/macro'\nimport Row from 'components/Row'\nimport { atom, useAtom } from 'jotai'\nimport { atomWithStorage, useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport ms from 'ms.macro'\nimport { useCallback, useEffect, useMemo } from 'react'\nimport { Moon, Sun } from 'react-feather'\n\nimport { Segment, SegmentedControl } from './SegmentedControl'\nimport { ThemedText } from './text'\n\nconst THEME_UPDATE_DELAY = ms`0.1s`\nconst DARKMODE_MEDIA_QUERY = window.matchMedia('(prefers-color-scheme: dark)')\n\nexport enum ThemeMode {\n  LIGHT,\n  DARK,\n  AUTO,\n}\n\n// Tracks the device theme\nconst systemThemeAtom = atom<ThemeMode.LIGHT | ThemeMode.DARK>(\n  DARKMODE_MEDIA_QUERY.matches ? ThemeMode.DARK : ThemeMode.LIGHT\n)\n\n// Tracks the user's selected theme mode\nconst themeModeAtom = atomWithStorage<ThemeMode>('interface_color_theme', ThemeMode.AUTO)\n\nexport function SystemThemeUpdater() {\n  const setSystemTheme = useUpdateAtom(systemThemeAtom)\n\n  useEffect(() => {\n    DARKMODE_MEDIA_QUERY.addEventListener('change', (event) => {\n      setSystemTheme(event.matches ? ThemeMode.DARK : ThemeMode.LIGHT)\n    })\n  }, [setSystemTheme])\n\n  return null\n}\n\nexport function useIsDarkMode(): boolean {\n  const mode = useAtomValue(themeModeAtom)\n  const systemTheme = useAtomValue(systemThemeAtom)\n\n  return (mode === ThemeMode.AUTO ? systemTheme : mode) === ThemeMode.DARK\n}\n\nexport function useDarkModeManager(): [boolean, (mode: ThemeMode) => void] {\n  const isDarkMode = useIsDarkMode()\n  const setMode = useUpdateAtom(themeModeAtom)\n\n  return useMemo(() => {\n    return [isDarkMode, setMode]\n  }, [isDarkMode, setMode])\n}\n\nexport default function ThemeToggle({ disabled }: { disabled?: boolean }) {\n  const [mode, setMode] = useAtom(themeModeAtom)\n  const switchMode = useCallback(\n    (mode: ThemeMode) => {\n      // Switch feels less jittery with short delay\n      !disabled && setTimeout(() => setMode(mode), THEME_UPDATE_DELAY)\n    },\n    [disabled, setMode]\n  )\n\n  return (\n    <Row align=\"center\">\n      <Row width=\"30%\">\n        <ThemedText.SubHeaderSmall color=\"primary\">\n          <Trans>Theme</Trans>\n        </ThemedText.SubHeaderSmall>\n      </Row>\n      <Row flexGrow={1} justify=\"flex-end\" width=\"70%\">\n        <SegmentedControl selected={mode} onSelect={switchMode}>\n          <Segment value={ThemeMode.AUTO} testId=\"theme-auto\">\n            <Trans>Auto</Trans>\n          </Segment>\n          <Segment value={ThemeMode.LIGHT} Icon={Sun} testId=\"theme-lightmode\" />\n          <Segment value={ThemeMode.DARK} Icon={Moon} testId=\"theme-darkmode\" />\n        </SegmentedControl>\n      </Row>\n    </Row>\n  )\n}\n","/workspace/Physica-Interfae/src/graphql/data/apollo.ts",[],"/workspace/Physica-Interfae/src/constants/chains.ts",["3224"],"/*\n * SupportedChainId must be defined inline, without using @uniswap/sdk-core, so that its members are their own types\n * {@see https://www.typescriptlang.org/docs/handbook/enums.html#union-enums-and-enum-member-types}. This allows the\n * derived const arrays and their types (eg {@link L1_CHAIN_IDS}, {@link SupportedL1ChainId}) to be narrowed and used\n * to enforce chain typing.\n *\n * Because this is not explicitly derived from @uniswap/sdk-core, there is a unit test to enforce conformance.\n */\nexport enum SupportedChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n\n  BNB = 56,\n  PLANQ = 7070,\n}\n\nexport const CHAIN_IDS_TO_NAMES = {\n  [SupportedChainId.PLANQ]: 'PLANQ',\n  [SupportedChainId.MAINNET]: 'mainnet',\n  [SupportedChainId.GOERLI]: 'goerli',\n  [SupportedChainId.POLYGON]: 'polygon',\n  [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai',\n  [SupportedChainId.CELO]: 'celo',\n  [SupportedChainId.CELO_ALFAJORES]: 'celo_alfajores',\n  [SupportedChainId.ARBITRUM_ONE]: 'arbitrum',\n  [SupportedChainId.ARBITRUM_GOERLI]: 'arbitrum_goerli',\n  [SupportedChainId.OPTIMISM]: 'optimism',\n  [SupportedChainId.OPTIMISM_GOERLI]: 'optimism_goerli',\n  [SupportedChainId.BNB]: 'bnb',\n}\n\n/**\n * Array of all the supported chain IDs\n */\nexport const ALL_SUPPORTED_CHAIN_IDS: SupportedChainId[] = Object.values(SupportedChainId).filter(\n  (id) => typeof id === 'number'\n) as SupportedChainId[]\n\nexport function isSupportedChain(chainId: number | null | undefined): chainId is SupportedChainId {\n  return !!chainId && !!SupportedChainId[chainId]\n}\n\nexport const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [\n  SupportedChainId.MAINNET,\n  SupportedChainId.POLYGON,\n  SupportedChainId.CELO,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.BNB,\n  SupportedChainId.PLANQ,\n] as const\n\n/**\n * Unsupported networks for V2 pool behavior.\n */\nexport const UNSUPPORTED_V2POOL_CHAIN_IDS = [\n  SupportedChainId.POLYGON,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.BNB,\n  SupportedChainId.ARBITRUM_GOERLI,\n] as const\n\nexport const TESTNET_CHAIN_IDS = [\n  SupportedChainId.GOERLI,\n  SupportedChainId.POLYGON_MUMBAI,\n  SupportedChainId.ARBITRUM_GOERLI,\n  SupportedChainId.OPTIMISM_GOERLI,\n] as const\n\nexport type SupportedTestnetChainId = typeof TESTNET_CHAIN_IDS[number]\n\n/**\n * All the chain IDs that are running the Ethereum protocol.\n */\nexport const L1_CHAIN_IDS = [\n  SupportedChainId.MAINNET,\n  SupportedChainId.GOERLI,\n  SupportedChainId.POLYGON,\n  SupportedChainId.POLYGON_MUMBAI,\n  SupportedChainId.CELO,\n  SupportedChainId.CELO_ALFAJORES,\n  SupportedChainId.BNB,\n  SupportedChainId.PLANQ,\n] as const\n\nexport type SupportedL1ChainId = typeof L1_CHAIN_IDS[number]\n\n/**\n * Controls some L2 specific behavior, e.g. slippage tolerance, special UI behavior.\n * The expectation is that all of these networks have immediate transaction confirmation.\n */\nexport const L2_CHAIN_IDS = [\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.ARBITRUM_GOERLI,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.OPTIMISM_GOERLI,\n] as const\n\nexport type SupportedL2ChainId = typeof L2_CHAIN_IDS[number]\n","/workspace/Physica-Interfae/src/lib/state/multicall.tsx",["3225"],"import { createMulticall, ListenerOptions } from '@uniswap/redux-multicall'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport { useInterfaceMulticall } from 'hooks/useContract'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport { useMemo } from 'react'\n\nconst multicall = createMulticall()\n\nexport default multicall\n\nfunction getBlocksPerFetchForChainId(chainId: number | undefined): number {\n  switch (chainId) {\n    case SupportedChainId.ARBITRUM_ONE:\n    case SupportedChainId.OPTIMISM:\n      return 15\n    case SupportedChainId.BNB:\n    case SupportedChainId.CELO:\n    case SupportedChainId.CELO_ALFAJORES:\n      return 5\n    default:\n      return 1\n  }\n}\n\nexport function MulticallUpdater() {\n  const { chainId } = useWeb3React()\n  const latestBlockNumber = useBlockNumber()\n  const contract = useInterfaceMulticall()\n  const listenerOptions: ListenerOptions = useMemo(\n    () => ({\n      blocksPerFetch: getBlocksPerFetchForChainId(chainId),\n    }),\n    [chainId]\n  )\n\n  return (\n    <multicall.Updater\n      chainId={chainId}\n      latestBlockNumber={latestBlockNumber}\n      contract={contract}\n      listenerOptions={listenerOptions}\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/lib/hooks/useBlockNumber.tsx",["3226","3227"],"import { useWeb3React } from '@web3-react/core'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\nimport { createContext, ReactNode, useCallback, useContext, useEffect, useMemo, useState } from 'react'\n\nconst MISSING_PROVIDER = Symbol()\nconst BlockNumberContext = createContext<\n  | {\n      value?: number\n      fastForward(block: number): void\n    }\n  | typeof MISSING_PROVIDER\n>(MISSING_PROVIDER)\n\nfunction useBlockNumberContext() {\n  const blockNumber = useContext(BlockNumberContext)\n  if (blockNumber === MISSING_PROVIDER) {\n    throw new Error('BlockNumber hooks must be wrapped in a <BlockNumberProvider>')\n  }\n  return blockNumber\n}\n\n/** Requires that BlockUpdater be installed in the DOM tree. */\nexport default function useBlockNumber(): number | undefined {\n  return useBlockNumberContext().value\n}\n\nexport function useFastForwardBlockNumber(): (block: number) => void {\n  return useBlockNumberContext().fastForward\n}\n\nexport function BlockNumberProvider({ children }: { children: ReactNode }) {\n  const { chainId: activeChainId, provider } = useWeb3React()\n  const [{ chainId, block }, setChainBlock] = useState<{ chainId?: number; block?: number }>({ chainId: activeChainId })\n\n  const onBlock = useCallback(\n    (block: number) => {\n      setChainBlock((chainBlock) => {\n        if (chainBlock.chainId === activeChainId) {\n          if (!chainBlock.block || chainBlock.block < block) {\n            return { chainId: activeChainId, block }\n          }\n        }\n        return chainBlock\n      })\n    },\n    [activeChainId, setChainBlock]\n  )\n\n  const windowVisible = useIsWindowVisible()\n  useEffect(() => {\n    let stale = false\n\n    if (provider && activeChainId && windowVisible) {\n      // If chainId hasn't changed, don't clear the block. This prevents re-fetching still valid data.\n      setChainBlock((chainBlock) => (chainBlock.chainId === activeChainId ? chainBlock : { chainId: activeChainId }))\n\n      provider\n        .getBlockNumber()\n        .then((block) => {\n          if (!stale) onBlock(block)\n        })\n        .catch((error) => {\n          console.error(`Failed to get block number for chainId ${activeChainId}`, error)\n        })\n\n      provider.on('block', onBlock)\n      return () => {\n        stale = true\n        provider.removeListener('block', onBlock)\n      }\n    }\n\n    return void 0\n  }, [activeChainId, provider, onBlock, setChainBlock, windowVisible])\n\n  const value = useMemo(\n    () => ({\n      value: chainId === activeChainId ? block : undefined,\n      fastForward: (update: number) => {\n        if (block && update > block) {\n          setChainBlock({ chainId: activeChainId, block: update })\n        }\n      },\n    }),\n    [activeChainId, block, chainId]\n  )\n  return <BlockNumberContext.Provider value={value}>{children}</BlockNumberContext.Provider>\n}\n","/workspace/Physica-Interfae/src/pages/AddLiquidity/redirects.tsx",[],"/workspace/Physica-Interfae/src/theme/components/DarkModeQueryParamReader.tsx",[],"/workspace/Physica-Interfae/src/pages/MigrateV2/MigrateV2Pair.tsx",["3228","3229","3230","3231","3232","3233","3234","3235","3236","3237","3238","3239","3240","3241","3242","3243"],"import { Contract } from '@ethersproject/contracts'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { CurrencyAmount, Fraction, Percent, Price, Token } from '@uniswap/sdk-core'\nimport { FeeAmount, Pool, Position, priceToClosestTick, TickMath } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendEvent } from 'components/analytics'\nimport Badge, { BadgeVariant } from 'components/Badge'\nimport { ButtonConfirmed } from 'components/Button'\nimport { BlueCard, DarkGrayCard, LightCard, YellowCard } from 'components/Card'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport FeeSelector from 'components/FeeSelector'\nimport RangeSelector from 'components/RangeSelector'\nimport RateToggle from 'components/RateToggle'\nimport SettingsTab from 'components/Settings'\nimport { Dots } from 'components/swap/styleds'\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { PoolState, usePool } from 'hooks/usePools'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport { useV2LiquidityTokenPermit } from 'hooks/useV2LiquidityTokenPermit'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport { ReactNode, useCallback, useEffect, useMemo, useState } from 'react'\nimport { AlertCircle, AlertTriangle, ArrowDown } from 'react-feather'\nimport { Navigate, useParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { useAppDispatch } from 'state/hooks'\nimport { Bound, resetMintState } from 'state/mint/v3/actions'\nimport { useRangeHopCallbacks, useV3DerivedMintInfo, useV3MintActionHandlers } from 'state/mint/v3/hooks'\nimport { useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\nimport { useUserSlippageToleranceWithDefault } from 'state/user/hooks'\nimport { useTheme } from 'styled-components/macro'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { AutoColumn } from '../../components/Column'\nimport FormattedCurrencyAmount from '../../components/FormattedCurrencyAmount'\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\nimport { AutoRow, RowBetween, RowFixed } from '../../components/Row'\nimport { V2_FACTORY_ADDRESSES } from '../../constants/addresses'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useToken } from '../../hooks/Tokens'\nimport { usePairContract, useV2MigratorContract } from '../../hooks/useContract'\nimport useIsArgentWallet from '../../hooks/useIsArgentWallet'\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { useTokenBalance } from '../../state/connection/hooks'\nimport { TransactionType } from '../../state/transactions/types'\nimport { BackArrow, ExternalLink, ThemedText } from '../../theme'\nimport { isAddress } from '../../utils'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { currencyId } from '../../utils/currencyId'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { BodyWrapper } from '../AppBody'\n\nconst ZERO = JSBI.BigInt(0)\n\nconst DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE = new Percent(75, 10_000)\n\nfunction EmptyState({ message }: { message: ReactNode }) {\n  return (\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\n    </AutoColumn>\n  )\n}\n\nfunction LiquidityInfo({\n  token0Amount,\n  token1Amount,\n}: {\n  token0Amount: CurrencyAmount<Token>\n  token1Amount: CurrencyAmount<Token>\n}) {\n  const currency0 = unwrappedToken(token0Amount.currency)\n  const currency1 = unwrappedToken(token1Amount.currency)\n\n  return (\n    <AutoColumn gap=\"sm\">\n      <RowBetween>\n        <RowFixed>\n          <CurrencyLogo size=\"20px\" style={{ marginRight: '8px' }} currency={currency0} />\n          <Text fontSize={16} fontWeight={500}>\n            {currency0.symbol}\n          </Text>\n        </RowFixed>\n        <Text fontSize={16} fontWeight={500}>\n          <FormattedCurrencyAmount currencyAmount={token0Amount} />\n        </Text>\n      </RowBetween>\n      <RowBetween>\n        <RowFixed>\n          <CurrencyLogo size=\"20px\" style={{ marginRight: '8px' }} currency={currency1} />\n          <Text fontSize={16} fontWeight={500}>\n            {currency1.symbol}\n          </Text>\n        </RowFixed>\n\n        <Text fontSize={16} fontWeight={500}>\n          <FormattedCurrencyAmount currencyAmount={token1Amount} />\n        </Text>\n      </RowBetween>\n    </AutoColumn>\n  )\n}\n\n// hard-code this for now\nconst percentageToMigrate = 100\n\nfunction V2PairMigration({\n  pair,\n  pairBalance,\n  totalSupply,\n  reserve0,\n  reserve1,\n  token0,\n  token1,\n}: {\n  pair: Contract\n  pairBalance: CurrencyAmount<Token>\n  totalSupply: CurrencyAmount<Token>\n  reserve0: CurrencyAmount<Token>\n  reserve1: CurrencyAmount<Token>\n  token0: Token\n  token1: Token\n}) {\n  const { chainId, account } = useWeb3React()\n  const theme = useTheme()\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\n\n  const pairFactory = useSingleCallResult(pair, 'factory')\n  const isNotUniswap = pairFactory.result?.[0] && pairFactory.result[0] !== v2FactoryAddress\n\n  const deadline = useTransactionDeadline() // custom from users settings\n  const blockTimestamp = useCurrentBlockTimestamp()\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE) // custom from users\n\n  const currency0 = unwrappedToken(token0)\n  const currency1 = unwrappedToken(token1)\n\n  // this is just getLiquidityValue with the fee off, but for the passed pair\n  const token0Value = useMemo(\n    () =>\n      CurrencyAmount.fromRawAmount(\n        token0,\n        JSBI.divide(JSBI.multiply(pairBalance.quotient, reserve0.quotient), totalSupply.quotient)\n      ),\n    [token0, pairBalance, reserve0, totalSupply]\n  )\n  const token1Value = useMemo(\n    () =>\n      CurrencyAmount.fromRawAmount(\n        token1,\n        JSBI.divide(JSBI.multiply(pairBalance.quotient, reserve1.quotient), totalSupply.quotient)\n      ),\n    [token1, pairBalance, reserve1, totalSupply]\n  )\n\n  // set up v3 pool\n  const [feeAmount, setFeeAmount] = useState(FeeAmount.MEDIUM)\n  const [poolState, pool] = usePool(token0, token1, feeAmount)\n  const noLiquidity = poolState === PoolState.NOT_EXISTS\n\n  // get spot prices + price difference\n  const v2SpotPrice = useMemo(\n    () => new Price(token0, token1, reserve0.quotient, reserve1.quotient),\n    [token0, token1, reserve0, reserve1]\n  )\n  const v3SpotPrice = poolState === PoolState.EXISTS ? pool?.token0Price : undefined\n\n  let priceDifferenceFraction: Fraction | undefined =\n    v2SpotPrice && v3SpotPrice ? v3SpotPrice.divide(v2SpotPrice).subtract(1).multiply(100) : undefined\n  if (priceDifferenceFraction?.lessThan(ZERO)) {\n    priceDifferenceFraction = priceDifferenceFraction.multiply(-1)\n  }\n\n  const largePriceDifference = priceDifferenceFraction && !priceDifferenceFraction?.lessThan(JSBI.BigInt(2))\n\n  // the following is a small hack to get access to price range data/input handlers\n  const [baseToken, setBaseToken] = useState(token0)\n  const { ticks, pricesAtTicks, invertPrice, invalidRange, outOfRange, ticksAtLimit } = useV3DerivedMintInfo(\n    token0,\n    token1,\n    feeAmount,\n    baseToken\n  )\n\n  // get value and prices at ticks\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks\n  const { [Bound.LOWER]: priceLower, [Bound.UPPER]: priceUpper } = pricesAtTicks\n\n  const { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper } = useRangeHopCallbacks(\n    baseToken,\n    baseToken.equals(token0) ? token1 : token0,\n    feeAmount,\n    tickLower,\n    tickUpper\n  )\n\n  const { onLeftRangeInput, onRightRangeInput } = useV3MintActionHandlers(noLiquidity)\n\n  // the v3 tick is either the pool's tickCurrent, or the tick closest to the v2 spot price\n  const tick = pool?.tickCurrent ?? priceToClosestTick(v2SpotPrice)\n  // the price is either the current v3 price, or the price at the tick\n  const sqrtPrice = pool?.sqrtRatioX96 ?? TickMath.getSqrtRatioAtTick(tick)\n  const position =\n    typeof tickLower === 'number' && typeof tickUpper === 'number' && !invalidRange\n      ? Position.fromAmounts({\n          pool: pool ?? new Pool(token0, token1, feeAmount, sqrtPrice, 0, tick, []),\n          tickLower,\n          tickUpper,\n          amount0: token0Value.quotient,\n          amount1: token1Value.quotient,\n          useFullPrecision: true, // we want full precision for the theoretical position\n        })\n      : undefined\n\n  const { amount0: v3Amount0Min, amount1: v3Amount1Min } = useMemo(\n    () => (position ? position.mintAmountsWithSlippage(allowedSlippage) : { amount0: undefined, amount1: undefined }),\n    [position, allowedSlippage]\n  )\n\n  const refund0 = useMemo(\n    () =>\n      position && CurrencyAmount.fromRawAmount(token0, JSBI.subtract(token0Value.quotient, position.amount0.quotient)),\n    [token0Value, position, token0]\n  )\n  const refund1 = useMemo(\n    () =>\n      position && CurrencyAmount.fromRawAmount(token1, JSBI.subtract(token1Value.quotient, position.amount1.quotient)),\n    [token1Value, position, token1]\n  )\n\n  const [confirmingMigration, setConfirmingMigration] = useState<boolean>(false)\n  const [pendingMigrationHash, setPendingMigrationHash] = useState<string | null>(null)\n\n  const migrator = useV2MigratorContract()\n\n  // approvals\n  const [approval, approveManually] = useApproveCallback(pairBalance, migrator?.address)\n  const { signatureData, gatherPermitSignature } = useV2LiquidityTokenPermit(pairBalance, migrator?.address)\n\n  const isArgentWallet = useIsArgentWallet()\n\n  const approve = useCallback(async () => {\n    if (isNotUniswap || isArgentWallet) {\n      // sushi has to be manually approved\n      await approveManually()\n    } else if (gatherPermitSignature) {\n      try {\n        await gatherPermitSignature()\n      } catch (error) {\n        // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\n        if (error?.code !== 4001) {\n          await approveManually()\n        }\n      }\n    } else {\n      await approveManually()\n    }\n  }, [isNotUniswap, isArgentWallet, gatherPermitSignature, approveManually])\n\n  const addTransaction = useTransactionAdder()\n  const isMigrationPending = useIsTransactionPending(pendingMigrationHash ?? undefined)\n\n  const migrate = useCallback(() => {\n    if (\n      !migrator ||\n      !account ||\n      !deadline ||\n      !blockTimestamp ||\n      typeof tickLower !== 'number' ||\n      typeof tickUpper !== 'number' ||\n      !v3Amount0Min ||\n      !v3Amount1Min ||\n      !chainId\n    )\n      return\n\n    const deadlineToUse = signatureData?.deadline ?? deadline\n\n    const data: string[] = []\n\n    // permit if necessary\n    if (signatureData) {\n      data.push(\n        migrator.interface.encodeFunctionData('selfPermit', [\n          pair.address,\n          `0x${pairBalance.quotient.toString(16)}`,\n          deadlineToUse,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ])\n      )\n    }\n\n    // create/initialize pool if necessary\n    if (noLiquidity) {\n      data.push(\n        migrator.interface.encodeFunctionData('createAndInitializePoolIfNecessary', [\n          token0.address,\n          token1.address,\n          feeAmount,\n          `0x${sqrtPrice.toString(16)}`,\n        ])\n      )\n    }\n\n    // TODO could save gas by not doing this in multicall\n    data.push(\n      migrator.interface.encodeFunctionData('migrate', [\n        {\n          pair: pair.address,\n          liquidityToMigrate: `0x${pairBalance.quotient.toString(16)}`,\n          percentageToMigrate,\n          token0: token0.address,\n          token1: token1.address,\n          fee: feeAmount,\n          tickLower,\n          tickUpper,\n          amount0Min: `0x${v3Amount0Min.toString(16)}`,\n          amount1Min: `0x${v3Amount1Min.toString(16)}`,\n          recipient: account,\n          deadline: deadlineToUse,\n          refundAsETH: true, // hard-code this for now\n        },\n      ])\n    )\n\n    setConfirmingMigration(true)\n\n    migrator.estimateGas\n      .multicall(data)\n      .then((gasEstimate) => {\n        return migrator\n          .multicall(data, { gasLimit: calculateGasMargin(gasEstimate) })\n          .then((response: TransactionResponse) => {\n            sendEvent({\n              category: 'Migrate',\n              action: `${isNotUniswap ? 'SushiSwap' : 'V2'}->V3`,\n              label: `${currency0.symbol}/${currency1.symbol}`,\n            })\n\n            addTransaction(response, {\n              type: TransactionType.MIGRATE_LIQUIDITY_V3,\n              baseCurrencyId: currencyId(currency0),\n              quoteCurrencyId: currencyId(currency1),\n              isFork: isNotUniswap,\n            })\n            setPendingMigrationHash(response.hash)\n          })\n      })\n      .catch(() => {\n        setConfirmingMigration(false)\n      })\n  }, [\n    chainId,\n    isNotUniswap,\n    migrator,\n    noLiquidity,\n    blockTimestamp,\n    token0,\n    token1,\n    feeAmount,\n    pairBalance,\n    tickLower,\n    tickUpper,\n    sqrtPrice,\n    v3Amount0Min,\n    v3Amount1Min,\n    account,\n    deadline,\n    signatureData,\n    addTransaction,\n    pair,\n    currency0,\n    currency1,\n  ])\n\n  const isSuccessfullyMigrated = !!pendingMigrationHash && JSBI.equal(pairBalance.quotient, ZERO)\n\n  return (\n    <AutoColumn gap=\"20px\">\n      <ThemedText.DeprecatedBody my={9} style={{ fontWeight: 400 }}>\n        <Trans>\n          This tool will safely migrate your {isNotUniswap ? 'SushiSwap' : 'V2'} liquidity to V3. The process is\n          completely trustless thanks to the{' '}\n        </Trans>\n        {chainId && migrator && (\n          <ExternalLink href={getExplorerLink(chainId, migrator.address, ExplorerDataType.ADDRESS)}>\n            <ThemedText.DeprecatedBlue display=\"inline\">\n              <Trans>Uniswap migration contract↗</Trans>\n            </ThemedText.DeprecatedBlue>\n          </ExternalLink>\n        )}\n        .\n      </ThemedText.DeprecatedBody>\n\n      <LightCard>\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed style={{ marginLeft: '8px' }}>\n              <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin={false} size={20} />\n              <ThemedText.DeprecatedMediumHeader style={{ marginLeft: '8px' }}>\n                <Trans>\n                  {currency0.symbol}/{currency1.symbol} LP Tokens\n                </Trans>\n              </ThemedText.DeprecatedMediumHeader>\n            </RowFixed>\n            <Badge variant={BadgeVariant.WARNING}>{isNotUniswap ? 'Sushi' : 'V2'}</Badge>\n          </RowBetween>\n          <LiquidityInfo token0Amount={token0Value} token1Amount={token1Value} />\n        </AutoColumn>\n      </LightCard>\n\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <ArrowDown size={24} />\n      </div>\n\n      <LightCard>\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed style={{ marginLeft: '8px' }}>\n              <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin={false} size={20} />\n              <ThemedText.DeprecatedMediumHeader style={{ marginLeft: '8px' }}>\n                <Trans>\n                  {currency0.symbol}/{currency1.symbol} LP NFT\n                </Trans>\n              </ThemedText.DeprecatedMediumHeader>\n            </RowFixed>\n            <Badge variant={BadgeVariant.PRIMARY}>V3</Badge>\n          </RowBetween>\n\n          <FeeSelector feeAmount={feeAmount} handleFeePoolSelect={setFeeAmount} />\n          {noLiquidity && (\n            <BlueCard style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <AlertCircle color={theme.textPrimary} style={{ marginBottom: '12px', opacity: 0.8 }} />\n              <ThemedText.DeprecatedBody\n                fontSize={14}\n                style={{ marginBottom: 8, fontWeight: 500, opacity: 0.8 }}\n                textAlign=\"center\"\n              >\n                <Trans>\n                  You are the first liquidity provider for this Uniswap V3 pool. Your liquidity will migrate at the\n                  current {isNotUniswap ? 'SushiSwap' : 'V2'} price.\n                </Trans>\n              </ThemedText.DeprecatedBody>\n\n              <ThemedText.DeprecatedBody\n                fontWeight={500}\n                textAlign=\"center\"\n                fontSize={14}\n                style={{ marginTop: '8px', opacity: 0.8 }}\n              >\n                <Trans>Your transaction cost will be much higher as it includes the gas to create the pool.</Trans>\n              </ThemedText.DeprecatedBody>\n\n              {v2SpotPrice && (\n                <AutoColumn gap=\"sm\" style={{ marginTop: '12px' }}>\n                  <RowBetween>\n                    <ThemedText.DeprecatedBody fontWeight={500} fontSize={14}>\n                      <Trans>\n                        {isNotUniswap ? 'SushiSwap' : 'V2'} {invertPrice ? currency1.symbol : currency0.symbol} Price:\n                      </Trans>{' '}\n                      {invertPrice\n                        ? `${v2SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                        : `${v2SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n                    </ThemedText.DeprecatedBody>\n                  </RowBetween>\n                </AutoColumn>\n              )}\n            </BlueCard>\n          )}\n\n          {largePriceDifference ? (\n            <YellowCard>\n              <AutoColumn gap=\"sm\">\n                <RowBetween>\n                  <ThemedText.DeprecatedBody fontSize={14}>\n                    <Trans>\n                      {isNotUniswap ? 'SushiSwap' : 'V2'} {invertPrice ? currency1.symbol : currency0.symbol} Price:\n                    </Trans>\n                  </ThemedText.DeprecatedBody>\n                  <ThemedText.DeprecatedBlack fontSize={14}>\n                    {invertPrice\n                      ? `${v2SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                      : `${v2SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n                  </ThemedText.DeprecatedBlack>\n                </RowBetween>\n\n                <RowBetween>\n                  <ThemedText.DeprecatedBody fontSize={14}>\n                    <Trans>V3 {invertPrice ? currency1.symbol : currency0.symbol} Price:</Trans>\n                  </ThemedText.DeprecatedBody>\n                  <ThemedText.DeprecatedBlack fontSize={14}>\n                    {invertPrice\n                      ? `${v3SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                      : `${v3SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n                  </ThemedText.DeprecatedBlack>\n                </RowBetween>\n\n                <RowBetween>\n                  <ThemedText.DeprecatedBody fontSize={14} color=\"inherit\">\n                    <Trans>Price Difference:</Trans>\n                  </ThemedText.DeprecatedBody>\n                  <ThemedText.DeprecatedBlack fontSize={14} color=\"inherit\">\n                    <Trans>{priceDifferenceFraction?.toSignificant(4)}%</Trans>\n                  </ThemedText.DeprecatedBlack>\n                </RowBetween>\n              </AutoColumn>\n              <ThemedText.DeprecatedBody fontSize={14} style={{ marginTop: 8, fontWeight: 400 }}>\n                <Trans>\n                  You should only deposit liquidity into Uniswap V3 at a price you believe is correct. <br />\n                  If the price seems incorrect, you can either make a swap to move the price or wait for someone else to\n                  do so.\n                </Trans>\n              </ThemedText.DeprecatedBody>\n            </YellowCard>\n          ) : !noLiquidity && v3SpotPrice ? (\n            <RowBetween>\n              <ThemedText.DeprecatedBody fontSize={14}>\n                <Trans>V3 {invertPrice ? currency1.symbol : currency0.symbol} Price:</Trans>\n              </ThemedText.DeprecatedBody>\n              <ThemedText.DeprecatedBlack fontSize={14}>\n                {invertPrice\n                  ? `${v3SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                  : `${v3SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n              </ThemedText.DeprecatedBlack>\n            </RowBetween>\n          ) : null}\n\n          <RowBetween>\n            <ThemedText.DeprecatedLabel>\n              <Trans>Set Price Range</Trans>\n            </ThemedText.DeprecatedLabel>\n            <RateToggle\n              currencyA={invertPrice ? currency1 : currency0}\n              currencyB={invertPrice ? currency0 : currency1}\n              handleRateToggle={() => {\n                onLeftRangeInput('')\n                onRightRangeInput('')\n                setBaseToken((base) => (base.equals(token0) ? token1 : token0))\n              }}\n            />\n          </RowBetween>\n\n          <RangeSelector\n            priceLower={priceLower}\n            priceUpper={priceUpper}\n            getDecrementLower={getDecrementLower}\n            getIncrementLower={getIncrementLower}\n            getDecrementUpper={getDecrementUpper}\n            getIncrementUpper={getIncrementUpper}\n            onLeftRangeInput={onLeftRangeInput}\n            onRightRangeInput={onRightRangeInput}\n            currencyA={invertPrice ? currency1 : currency0}\n            currencyB={invertPrice ? currency0 : currency1}\n            feeAmount={feeAmount}\n            ticksAtLimit={ticksAtLimit}\n          />\n\n          {outOfRange ? (\n            <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n              <RowBetween>\n                <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                  <Trans>\n                    Your position will not earn fees or be used in trades until the market price moves into your range.\n                  </Trans>\n                </ThemedText.DeprecatedYellow>\n              </RowBetween>\n            </YellowCard>\n          ) : null}\n\n          {invalidRange ? (\n            <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n              <RowBetween>\n                <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                  <Trans>Invalid range selected. The min price must be lower than the max price.</Trans>\n                </ThemedText.DeprecatedYellow>\n              </RowBetween>\n            </YellowCard>\n          ) : null}\n\n          {position ? (\n            <DarkGrayCard>\n              <AutoColumn gap=\"md\">\n                <LiquidityInfo token0Amount={position.amount0} token1Amount={position.amount1} />\n                {chainId && refund0 && refund1 ? (\n                  <ThemedText.DeprecatedBlack fontSize={12}>\n                    <Trans>\n                      At least {formatCurrencyAmount(refund0, 4)}{' '}\n                      {chainId && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(token0) ? 'ETH' : token0.symbol} and{' '}\n                      {formatCurrencyAmount(refund1, 4)}{' '}\n                      {chainId && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(token1) ? 'ETH' : token1.symbol} will be\n                      refunded to your wallet due to selected price range.\n                    </Trans>\n                  </ThemedText.DeprecatedBlack>\n                ) : null}\n              </AutoColumn>\n            </DarkGrayCard>\n          ) : null}\n\n          <AutoColumn gap=\"md\">\n            {!isSuccessfullyMigrated && !isMigrationPending ? (\n              <AutoColumn gap=\"md\" style={{ flex: '1' }}>\n                <ButtonConfirmed\n                  confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n                  disabled={\n                    approval !== ApprovalState.NOT_APPROVED ||\n                    signatureData !== null ||\n                    !v3Amount0Min ||\n                    !v3Amount1Min ||\n                    invalidRange ||\n                    confirmingMigration\n                  }\n                  onClick={approve}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>\n                      <Trans>Approving</Trans>\n                    </Dots>\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                    <Trans>Allowed</Trans>\n                  ) : (\n                    <Trans>Allow LP token migration</Trans>\n                  )}\n                </ButtonConfirmed>\n              </AutoColumn>\n            ) : null}\n            <AutoColumn gap=\"md\" style={{ flex: '1' }}>\n              <ButtonConfirmed\n                confirmed={isSuccessfullyMigrated}\n                disabled={\n                  !v3Amount0Min ||\n                  !v3Amount1Min ||\n                  invalidRange ||\n                  (approval !== ApprovalState.APPROVED && signatureData === null) ||\n                  confirmingMigration ||\n                  isMigrationPending ||\n                  isSuccessfullyMigrated\n                }\n                onClick={migrate}\n              >\n                {isSuccessfullyMigrated ? (\n                  'Success!'\n                ) : isMigrationPending ? (\n                  <Dots>\n                    <Trans>Migrating</Trans>\n                  </Dots>\n                ) : (\n                  <Trans>Migrate</Trans>\n                )}\n              </ButtonConfirmed>\n            </AutoColumn>\n          </AutoColumn>\n        </AutoColumn>\n      </LightCard>\n    </AutoColumn>\n  )\n}\n\nexport default function MigrateV2Pair() {\n  const { address } = useParams<{ address: string }>()\n  // reset mint state on component mount, and as a cleanup (on unmount)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(resetMintState())\n    return () => {\n      dispatch(resetMintState())\n    }\n  }, [dispatch])\n\n  const { chainId, account } = useWeb3React()\n\n  // get pair contract\n  const validatedAddress = isAddress(address)\n  const pair = usePairContract(validatedAddress ? validatedAddress : undefined)\n\n  // get token addresses from pair contract\n  const token0AddressCallState = useSingleCallResult(pair, 'token0', undefined, NEVER_RELOAD)\n  const token0Address = token0AddressCallState?.result?.[0]\n  const token1Address = useSingleCallResult(pair, 'token1', undefined, NEVER_RELOAD)?.result?.[0]\n\n  // get tokens\n  const token0 = useToken(token0Address)\n  const token1 = useToken(token1Address)\n\n  // get liquidity token balance\n  const liquidityToken: Token | undefined = useMemo(\n    () => (chainId && validatedAddress ? new Token(chainId, validatedAddress, 18) : undefined),\n    [chainId, validatedAddress]\n  )\n\n  // get data required for V2 pair migration\n  const pairBalance = useTokenBalance(account ?? undefined, liquidityToken)\n  const totalSupply = useTotalSupply(liquidityToken)\n  const [reserve0Raw, reserve1Raw] = useSingleCallResult(pair, 'getReserves')?.result ?? []\n  const reserve0 = useMemo(\n    () => (token0 && reserve0Raw ? CurrencyAmount.fromRawAmount(token0, reserve0Raw) : undefined),\n    [token0, reserve0Raw]\n  )\n  const reserve1 = useMemo(\n    () => (token1 && reserve1Raw ? CurrencyAmount.fromRawAmount(token1, reserve1Raw) : undefined),\n    [token1, reserve1Raw]\n  )\n\n  // redirect for invalid url params\n  if (\n    !validatedAddress ||\n    !pair ||\n    (pair &&\n      token0AddressCallState?.valid &&\n      !token0AddressCallState?.loading &&\n      !token0AddressCallState?.error &&\n      !token0Address)\n  ) {\n    console.error('Invalid pair address')\n    return <Navigate to=\"/migrate/v2\" replace />\n  }\n\n  return (\n    <BodyWrapper style={{ padding: 24 }}>\n      <AutoColumn gap=\"16px\">\n        <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n          <BackArrow to=\"/migrate/v2\" />\n          <ThemedText.DeprecatedMediumHeader>\n            <Trans>Migrate V2 Liquidity</Trans>\n          </ThemedText.DeprecatedMediumHeader>\n          <SettingsTab placeholderSlippage={DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE} />\n        </AutoRow>\n\n        {!account ? (\n          <ThemedText.DeprecatedLargeHeader>\n            <Trans>You must connect an account.</Trans>\n          </ThemedText.DeprecatedLargeHeader>\n        ) : pairBalance && totalSupply && reserve0 && reserve1 && token0 && token1 ? (\n          <V2PairMigration\n            pair={pair}\n            pairBalance={pairBalance}\n            totalSupply={totalSupply}\n            reserve0={reserve0}\n            reserve1={reserve1}\n            token0={token0}\n            token1={token1}\n          />\n        ) : (\n          <EmptyState message={<Trans>Loading</Trans>} />\n        )}\n      </AutoColumn>\n    </BodyWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/state/user/hooks.tsx",["3244","3245","3246","3247","3248","3249","3250","3251","3252","3253","3254","3255","3256","3257","3258","3259","3260"],"import { Percent, Token } from '@uniswap/sdk-core'\nimport { computePairAddress, Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport { SupportedLocale } from 'constants/locales'\nimport { L2_DEADLINE_FROM_NOW } from 'constants/misc'\nimport JSBI from 'jsbi'\nimport { useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { UserAddedToken } from 'types/tokens'\n\nimport { V2_FACTORY_ADDRESSES } from '../../constants/addresses'\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../constants/routing'\nimport { useDefaultActiveTokens } from '../../hooks/Tokens'\nimport { AppState } from '../types'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  updateHideClosedPositions,\n  updateHideUniswapWalletBanner,\n  updateUserBuyFiatFlowCompleted,\n  updateUserClientSideRouter,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserLocale,\n  updateUserSlippageTolerance,\n} from './reducer'\nimport { SerializedPair, SerializedToken } from './types'\n\nexport function serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name,\n  }\n}\n\nexport function deserializeToken(serializedToken: SerializedToken, Class: typeof Token = Token): Token {\n  return new Class(\n    serializedToken.chainId,\n    serializedToken.address,\n    serializedToken.decimals,\n    serializedToken.symbol,\n    serializedToken.name\n  )\n}\n\nexport function useUserLocale(): SupportedLocale | null {\n  return useAppSelector((state) => state.user.userLocale)\n}\n\nexport function useUserLocaleManager(): [SupportedLocale | null, (newLocale: SupportedLocale) => void] {\n  const dispatch = useAppDispatch()\n  const locale = useUserLocale()\n\n  const setLocale = useCallback(\n    (newLocale: SupportedLocale) => {\n      dispatch(updateUserLocale({ userLocale: newLocale }))\n    },\n    [dispatch]\n  )\n\n  return [locale, setLocale]\n}\n\nexport function useIsExpertMode(): boolean {\n  return useAppSelector((state) => state.user.userExpertMode)\n}\n\nexport function useBuyFiatFlowCompleted(): [boolean | undefined, (buyFiatFlowCompleted: boolean) => void] {\n  const dispatch = useAppDispatch()\n  const buyFiatFlowCompleted = useAppSelector((state) => state.user.buyFiatFlowCompleted)\n  const setBuyFiatFlowCompleted = useCallback(\n    (buyFiatFlowCompleted: boolean) => {\n      dispatch(updateUserBuyFiatFlowCompleted(buyFiatFlowCompleted))\n    },\n    [dispatch]\n  )\n  return [buyFiatFlowCompleted, setBuyFiatFlowCompleted]\n}\n\nexport function useExpertModeManager(): [boolean, () => void] {\n  const dispatch = useAppDispatch()\n  const expertMode = useIsExpertMode()\n\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\n  }, [expertMode, dispatch])\n\n  return [expertMode, toggleSetExpertMode]\n}\n\nexport function useClientSideRouter(): [boolean, (userClientSideRouter: boolean) => void] {\n  const dispatch = useAppDispatch()\n\n  const clientSideRouter = useAppSelector((state) => Boolean(state.user.userClientSideRouter))\n\n  const setClientSideRouter = useCallback(\n    (newClientSideRouter: boolean) => {\n      dispatch(updateUserClientSideRouter({ userClientSideRouter: newClientSideRouter }))\n    },\n    [dispatch]\n  )\n\n  return [clientSideRouter, setClientSideRouter]\n}\n\n/**\n * Return the user's slippage tolerance, from the redux store, and a function to update the slippage tolerance\n */\nexport function useUserSlippageTolerance(): [Percent | 'auto', (slippageTolerance: Percent | 'auto') => void] {\n  const userSlippageToleranceRaw = useAppSelector((state) => {\n    return state.user.userSlippageTolerance\n  })\n  const userSlippageTolerance = useMemo(\n    () => (userSlippageToleranceRaw === 'auto' ? 'auto' : new Percent(userSlippageToleranceRaw, 10_000)),\n    [userSlippageToleranceRaw]\n  )\n\n  const dispatch = useAppDispatch()\n  const setUserSlippageTolerance = useCallback(\n    (userSlippageTolerance: Percent | 'auto') => {\n      let value: 'auto' | number\n      try {\n        value =\n          userSlippageTolerance === 'auto' ? 'auto' : JSBI.toNumber(userSlippageTolerance.multiply(10_000).quotient)\n      } catch (error) {\n        value = 'auto'\n      }\n      dispatch(\n        updateUserSlippageTolerance({\n          userSlippageTolerance: value,\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  return useMemo(\n    () => [userSlippageTolerance, setUserSlippageTolerance],\n    [setUserSlippageTolerance, userSlippageTolerance]\n  )\n}\n\nexport function useUserHideClosedPositions(): [boolean, (newHideClosedPositions: boolean) => void] {\n  const dispatch = useAppDispatch()\n\n  const hideClosedPositions = useAppSelector((state) => state.user.userHideClosedPositions)\n\n  const setHideClosedPositions = useCallback(\n    (newHideClosedPositions: boolean) => {\n      dispatch(updateHideClosedPositions({ userHideClosedPositions: newHideClosedPositions }))\n    },\n    [dispatch]\n  )\n\n  return [hideClosedPositions, setHideClosedPositions]\n}\n\n/**\n * Same as above but replaces the auto with a default value\n * @param defaultSlippageTolerance the default value to replace auto with\n */\nexport function useUserSlippageToleranceWithDefault(defaultSlippageTolerance: Percent): Percent {\n  const allowedSlippage = useUserSlippageTolerance()[0]\n  return useMemo(\n    () => (allowedSlippage === 'auto' ? defaultSlippageTolerance : allowedSlippage),\n    [allowedSlippage, defaultSlippageTolerance]\n  )\n}\n\nexport function useUserTransactionTTL(): [number, (slippage: number) => void] {\n  const { chainId } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const userDeadline = useAppSelector((state) => state.user.userDeadline)\n  const onL2 = Boolean(chainId && L2_CHAIN_IDS.includes(chainId))\n  const deadline = onL2 ? L2_DEADLINE_FROM_NOW : userDeadline\n\n  const setUserDeadline = useCallback(\n    (userDeadline: number) => {\n      dispatch(updateUserDeadline({ userDeadline }))\n    },\n    [dispatch]\n  )\n\n  return [deadline, setUserDeadline]\n}\n\nexport function useAddUserToken(): (token: Token) => void {\n  const dispatch = useAppDispatch()\n  return useCallback(\n    (token: Token) => {\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\n    },\n    [dispatch]\n  )\n}\n\nexport function useUserAddedTokensOnChain(chainId: number | undefined | null): Token[] {\n  const serializedTokensMap = useAppSelector(({ user: { tokens } }) => tokens)\n\n  return useMemo(() => {\n    if (!chainId) return []\n    const tokenMap: Token[] = serializedTokensMap?.[chainId]\n      ? Object.values(serializedTokensMap[chainId]).map((value) => deserializeToken(value, UserAddedToken))\n      : []\n    return tokenMap\n  }, [serializedTokensMap, chainId])\n}\n\nexport function useUserAddedTokens(): Token[] {\n  return useUserAddedTokensOnChain(useWeb3React().chainId)\n}\n\nfunction serializePair(pair: Pair): SerializedPair {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1),\n  }\n}\n\nexport function usePairAdder(): (pair: Pair) => void {\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    (pair: Pair) => {\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\n    },\n    [dispatch]\n  )\n}\n\nexport function useURLWarningVisible(): boolean {\n  return useAppSelector((state: AppState) => state.user.URLWarningVisible)\n}\n\nexport function useHideUniswapWalletBanner(): [boolean, () => void] {\n  const dispatch = useAppDispatch()\n  const hideUniswapWalletBanner = useAppSelector((state) => state.user.hideUniswapWalletBanner)\n\n  const toggleHideUniswapWalletBanner = useCallback(() => {\n    dispatch(updateHideUniswapWalletBanner({ hideUniswapWalletBanner: true }))\n  }, [dispatch])\n\n  return [hideUniswapWalletBanner, toggleHideUniswapWalletBanner]\n}\n\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  if (tokenA.chainId !== tokenB.chainId) throw new Error('Not matching chain IDs')\n  if (tokenA.equals(tokenB)) throw new Error('Tokens cannot be equal')\n  if (!V2_FACTORY_ADDRESSES[tokenA.chainId]) throw new Error('No V2 factory address on this chain')\n\n  return new Token(\n    tokenA.chainId,\n    computePairAddress({ factoryAddress: V2_FACTORY_ADDRESSES[tokenA.chainId], tokenA, tokenB }),\n    18,\n    'UNI-V2',\n    'Uniswap V2'\n  )\n}\n\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\nexport function useTrackedTokenPairs(): [Token, Token][] {\n  const { chainId } = useWeb3React()\n  const tokens = useDefaultActiveTokens()\n\n  // pinned pairs\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\n\n  // pairs for every token against every base\n  const generatedPairs: [Token, Token][] = useMemo(\n    () =>\n      chainId\n        ? Object.keys(tokens).flatMap((tokenAddress) => {\n            const token = tokens[tokenAddress]\n            // for each token on the current chain,\n            return (\n              // loop though all bases on the current chain\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\n                // to construct pairs of the given token with each base\n                .map((base) => {\n                  if (base.address === token.address) {\n                    return null\n                  } else {\n                    return [base, token]\n                  }\n                })\n                .filter((p): p is [Token, Token] => p !== null)\n            )\n          })\n        : [],\n    [tokens, chainId]\n  )\n\n  // pairs saved by users\n  const savedSerializedPairs = useAppSelector(({ user: { pairs } }) => pairs)\n\n  const userPairs: [Token, Token][] = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return []\n    const forChain = savedSerializedPairs[chainId]\n    if (!forChain) return []\n\n    return Object.keys(forChain).map((pairId) => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\n    })\n  }, [savedSerializedPairs, chainId])\n\n  const combinedList = useMemo(\n    () => userPairs.concat(generatedPairs).concat(pinnedPairs),\n    [generatedPairs, pinnedPairs, userPairs]\n  )\n\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB)\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\n      if (memo[key]) return memo\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\n      return memo\n    }, {})\n\n    return Object.keys(keyed).map((key) => keyed[key])\n  }, [combinedList])\n}\n","/workspace/Physica-Interfae/src/pages/AddLiquidityV2/redirects.tsx",[],"/workspace/Physica-Interfae/src/tracing/index.ts",[],"/workspace/Physica-Interfae/src/state/routing/slice.ts",["3261","3262"],"import { createApi, fetchBaseQuery, FetchBaseQueryError } from '@reduxjs/toolkit/query/react'\nimport { Protocol } from '@uniswap/router-sdk'\nimport { AlphaRouter, ChainId } from '@uniswap/smart-order-router'\nimport { RPC_PROVIDERS } from 'constants/providers'\nimport { getClientSideQuote, toSupportedChainId } from 'lib/hooks/routing/clientSideSmartOrderRouter'\nimport ms from 'ms.macro'\nimport qs from 'qs'\nimport { trace } from 'tracing'\n\nimport { GetQuoteResult } from './types'\n\nexport enum RouterPreference {\n  API = 'api',\n  CLIENT = 'client',\n  PRICE = 'price',\n}\n\nconst routers = new Map<ChainId, AlphaRouter>()\nfunction getRouter(chainId: ChainId): AlphaRouter {\n  const router = routers.get(chainId)\n  if (router) return router\n\n  const supportedChainId = toSupportedChainId(chainId)\n  if (supportedChainId) {\n    const provider = RPC_PROVIDERS[supportedChainId]\n    const router = new AlphaRouter({ chainId, provider })\n    routers.set(chainId, router)\n    return router\n  }\n\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`)\n}\n\n// routing API quote params: https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/schema/quote-schema.ts\nconst API_QUERY_PARAMS = {\n  protocols: 'v2,v3,mixed',\n}\nconst CLIENT_PARAMS = {\n  protocols: [Protocol.V2, Protocol.V3, Protocol.MIXED],\n}\n// Price queries are tuned down to minimize the required RPCs to respond to them.\n// TODO(zzmp): This will be used after testing router caching.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PRICE_PARAMS = {\n  protocols: [Protocol.V2, Protocol.V3],\n  v2PoolSelection: {\n    topN: 2,\n    topNDirectSwaps: 1,\n    topNTokenInOut: 2,\n    topNSecondHop: 1,\n    topNWithEachBaseToken: 2,\n    topNWithBaseToken: 2,\n  },\n  v3PoolSelection: {\n    topN: 2,\n    topNDirectSwaps: 1,\n    topNTokenInOut: 2,\n    topNSecondHop: 1,\n    topNWithEachBaseToken: 2,\n    topNWithBaseToken: 2,\n  },\n  maxSwapsPerPath: 2,\n  minSplits: 1,\n  maxSplits: 1,\n  distributionPercent: 100,\n}\n\ninterface GetQuoteArgs {\n  tokenInAddress: string\n  tokenInChainId: ChainId\n  tokenInDecimals: number\n  tokenInSymbol?: string\n  tokenOutAddress: string\n  tokenOutChainId: ChainId\n  tokenOutDecimals: number\n  tokenOutSymbol?: string\n  amount: string\n  routerPreference: RouterPreference\n  type: 'exactIn' | 'exactOut'\n}\n\nexport const routingApi = createApi({\n  reducerPath: 'routingApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.uniswap.org/v1/',\n  }),\n  endpoints: (build) => ({\n    getQuote: build.query<GetQuoteResult, GetQuoteArgs>({\n      async onQueryStarted(args: GetQuoteArgs, { queryFulfilled }) {\n        trace(\n          'quote',\n          async ({ setTraceError, setTraceStatus }) => {\n            try {\n              await queryFulfilled\n            } catch (error: unknown) {\n              if (error && typeof error === 'object' && 'error' in error) {\n                const queryError = (error as Record<'error', FetchBaseQueryError>).error\n                if (typeof queryError.status === 'number') {\n                  setTraceStatus(queryError.status)\n                }\n                setTraceError(queryError)\n              } else {\n                throw error\n              }\n            }\n          },\n          {\n            data: {\n              ...args,\n              isPrice: args.routerPreference === RouterPreference.PRICE,\n              isAutoRouter: args.routerPreference === RouterPreference.API,\n            },\n            tags: { is_widget: false },\n          }\n        )\n      },\n      async queryFn(args, _api, _extraOptions, fetch) {\n        const { tokenInAddress, tokenInChainId, tokenOutAddress, tokenOutChainId, amount, routerPreference, type } =\n          args\n\n        try {\n          if (routerPreference === RouterPreference.API) {\n            const query = qs.stringify({\n              ...API_QUERY_PARAMS,\n              tokenInAddress,\n              tokenInChainId,\n              tokenOutAddress,\n              tokenOutChainId,\n              amount,\n              type,\n            })\n            return (await fetch(`quote?${query}`)) as { data: GetQuoteResult } | { error: FetchBaseQueryError }\n          } else {\n            const router = getRouter(args.tokenInChainId)\n            return await getClientSideQuote(\n              args,\n              router,\n              // TODO(zzmp): Use PRICE_PARAMS for RouterPreference.PRICE.\n              // This change is intentionally being deferred to first see what effect router caching has.\n              CLIENT_PARAMS\n            )\n          }\n        } catch (error) {\n          // TODO: fall back to client-side quoter when auto router fails.\n          // deprecate 'legacy' v2/v3 routers first.\n          return { error: { status: 'CUSTOM_ERROR', error: error.toString(), data: error } }\n        }\n      },\n      keepUnusedDataFor: ms`10s`,\n      extraOptions: {\n        maxRetries: 0,\n      },\n    }),\n  }),\n})\n\nexport const { useGetQuoteQuery } = routingApi\n","/workspace/Physica-Interfae/src/theme/utils.ts",[],"/workspace/Physica-Interfae/src/lib/hooks/useInterval.ts",[],"/workspace/Physica-Interfae/src/utils/env.ts",[],"/workspace/Physica-Interfae/src/utils/supportedChainId.ts",[],"/workspace/Physica-Interfae/src/hooks/useDebounce.ts",[],"/workspace/Physica-Interfae/src/hooks/useIsNftPage.ts",[],"/workspace/Physica-Interfae/src/state/reducer.ts",[],"/workspace/Physica-Interfae/src/constants/lists.ts",[],"/workspace/Physica-Interfae/src/state/lists/hooks.ts",["3263"],"import { ChainTokenMap, tokensToChainTokenMap } from 'lib/hooks/useTokenList/utils'\nimport { useMemo } from 'react'\nimport { useAppSelector } from 'state/hooks'\nimport sortByListPriority from 'utils/listSort'\n\nimport BROKEN_LIST from '../../constants/tokenLists/broken.tokenlist.json'\nimport { AppState } from '../types'\nimport { DEFAULT_ACTIVE_LIST_URLS, UNSUPPORTED_LIST_URLS } from './../../constants/lists'\n\nexport type TokenAddressMap = ChainTokenMap\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: Mutable<T[P]>\n}\n\nexport function useAllLists(): AppState['lists']['byUrl'] {\n  return useAppSelector((state) => state.lists.byUrl)\n}\n\n/**\n * Combine the tokens in map2 with the tokens on map1, where tokens on map1 take precedence\n * @param map1 the base token map\n * @param map2 the map of additioanl tokens to add to the base map\n */\nfunction combineMaps(map1: TokenAddressMap, map2: TokenAddressMap): TokenAddressMap {\n  const chainIds = Object.keys(\n    Object.keys(map1)\n      .concat(Object.keys(map2))\n      .reduce<{ [chainId: string]: true }>((memo, value) => {\n        memo[value] = true\n        return memo\n      }, {})\n  ).map((id) => parseInt(id))\n\n  return chainIds.reduce<Mutable<TokenAddressMap>>((memo, chainId) => {\n    memo[chainId] = {\n      ...map2[chainId],\n      // map1 takes precedence\n      ...map1[chainId],\n    }\n    return memo\n  }, {}) as TokenAddressMap\n}\n\n// merge tokens contained within lists from urls\nexport function useCombinedTokenMapFromUrls(urls: string[] | undefined): TokenAddressMap {\n  const lists = useAllLists()\n  return useMemo(() => {\n    if (!urls) return {}\n    return (\n      urls\n        .slice()\n        // sort by priority so top priority goes last\n        .sort(sortByListPriority)\n        .reduce((allTokens, currentUrl) => {\n          const current = lists[currentUrl]?.current\n          if (!current) return allTokens\n          try {\n            return combineMaps(allTokens, tokensToChainTokenMap(current))\n          } catch (error) {\n            console.error('Could not show token list due to error', error)\n            return allTokens\n          }\n        }, {})\n    )\n  }, [lists, urls])\n}\n\n// get all the tokens from active lists, combine with local default tokens\nexport function useCombinedActiveList(): TokenAddressMap {\n  const activeTokens = useCombinedTokenMapFromUrls(DEFAULT_ACTIVE_LIST_URLS)\n  return activeTokens\n}\n\n// list of tokens not supported on interface for various reasons, used to show warnings and prevent swaps and adds\nexport function useUnsupportedTokenList(): TokenAddressMap {\n  // get hard-coded broken tokens\n  const brokenListMap = useMemo(() => tokensToChainTokenMap(BROKEN_LIST), [])\n\n  // get dynamic list of unsupported tokens\n  const loadedUnsupportedListMap = useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS)\n\n  // format into one token address map\n  return useMemo(() => combineMaps(brokenListMap, loadedUnsupportedListMap), [brokenListMap, loadedUnsupportedListMap])\n}\n","/workspace/Physica-Interfae/src/hooks/useActiveLocale.ts",["3264"],"import { DEFAULT_LOCALE, SUPPORTED_LOCALES, SupportedLocale } from 'constants/locales'\nimport { useMemo } from 'react'\nimport store from 'state'\nimport { useUserLocale } from 'state/user/hooks'\n\nimport useParsedQueryString from './useParsedQueryString'\nimport { parsedQueryString } from './useParsedQueryString'\n\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\nfunction parseLocale(maybeSupportedLocale: unknown): SupportedLocale | undefined {\n  if (typeof maybeSupportedLocale !== 'string') return undefined\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase()\n  return SUPPORTED_LOCALES.find(\n    (locale) => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale\n  )\n}\n\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\nexport function navigatorLocale(): SupportedLocale | undefined {\n  if (!navigator.language) return undefined\n\n  const [language, region] = navigator.language.split('-')\n\n  if (region) {\n    return parseLocale(`${language}-${region.toUpperCase()}`) ?? parseLocale(language)\n  }\n\n  return parseLocale(language)\n}\n\nfunction storeLocale(): SupportedLocale | undefined {\n  return store.getState().user.userLocale ?? undefined\n}\n\nexport const initialLocale =\n  parseLocale(parsedQueryString().lng) ?? storeLocale() ?? navigatorLocale() ?? DEFAULT_LOCALE\n\nfunction useUrlLocale() {\n  const parsed = useParsedQueryString()\n  return parseLocale(parsed.lng)\n}\n\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */\nexport function useActiveLocale(): SupportedLocale {\n  const urlLocale = useUrlLocale()\n  const userLocale = useUserLocale()\n  return useMemo(() => urlLocale ?? userLocale ?? navigatorLocale() ?? DEFAULT_LOCALE, [urlLocale, userLocale])\n}\n","/workspace/Physica-Interfae/src/featureFlags/index.tsx",["3265"],"import { atomWithStorage, useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { createContext, ReactNode, useCallback, useContext } from 'react'\nimport { useGate } from 'statsig-react'\nexport { FeatureFlag } from './flags/featureFlags'\n\ninterface FeatureFlagsContextType {\n  isLoaded: boolean\n  flags: Record<string, string>\n}\n\nconst FeatureFlagContext = createContext<FeatureFlagsContextType>({ isLoaded: false, flags: {} })\n\nfunction useFeatureFlagsContext(): FeatureFlagsContextType {\n  const context = useContext(FeatureFlagContext)\n  if (!context) {\n    throw Error('Feature flag hooks can only be used by children of FeatureFlagProvider.')\n  } else {\n    return context\n  }\n}\n\n/* update and save feature flag settings */\nexport const featureFlagSettings = atomWithStorage<Record<string, string>>('featureFlags', {})\n\nexport function useUpdateFlag() {\n  const setFeatureFlags = useUpdateAtom(featureFlagSettings)\n\n  return useCallback(\n    (featureFlag: string, option: string) => {\n      setFeatureFlags((featureFlags) => ({\n        ...featureFlags,\n        [featureFlag]: option,\n      }))\n    },\n    [setFeatureFlags]\n  )\n}\n\nexport function FeatureFlagsProvider({ children }: { children: ReactNode }) {\n  // TODO(vm): `isLoaded` to `true` so `App.tsx` will render. Later, this will be dependent on\n  // flags loading from Amplitude, with a timeout.\n  const featureFlags = useAtomValue(featureFlagSettings)\n  const value = {\n    isLoaded: true,\n    flags: featureFlags,\n  }\n  return <FeatureFlagContext.Provider value={value}>{children}</FeatureFlagContext.Provider>\n}\n\nexport function useFeatureFlagsIsLoaded(): boolean {\n  return useFeatureFlagsContext().isLoaded\n}\n\nexport enum BaseVariant {\n  Control = 'control',\n  Enabled = 'enabled',\n}\n\nexport function useBaseFlag(flag: string, defaultValue = BaseVariant.Control): BaseVariant {\n  const { value: statsigValue } = useGate(flag) // non-existent gates return false\n  const featureFlagsContext = useFeatureFlagsContext()\n  if (statsigValue) {\n    return BaseVariant.Enabled\n  }\n  switch (featureFlagsContext.flags[flag]) {\n    case 'enabled':\n      return BaseVariant.Enabled\n    case 'control':\n      return BaseVariant.Control\n    default:\n      return defaultValue\n  }\n}\n","/workspace/Physica-Interfae/src/components/analytics/index.ts",["3266"],"import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { UaEventOptions } from 'react-ga4/types/ga4'\nimport { useLocation } from 'react-router-dom'\nimport { isMobile } from 'utils/userAgent'\nimport { getCLS, getFCP, getFID, getLCP, Metric } from 'web-vitals'\n\nimport GoogleAnalyticsProvider from './GoogleAnalyticsProvider'\n\nconst GOOGLE_ANALYTICS_CLIENT_ID_STORAGE_KEY = 'ga_client_id'\nconst GOOGLE_ANALYTICS_ID: string | undefined = process.env.REACT_APP_GOOGLE_ANALYTICS_ID\n\nconst storedClientId = window.localStorage.getItem(GOOGLE_ANALYTICS_CLIENT_ID_STORAGE_KEY)\n\nconst googleAnalytics = new GoogleAnalyticsProvider()\n\nexport function sendEvent(event: string | UaEventOptions, params?: any) {\n  return googleAnalytics.sendEvent(event, params)\n}\n\nexport function outboundLink(\n  {\n    label,\n  }: {\n    label: string\n  },\n  hitCallback: () => unknown\n) {\n  return googleAnalytics.outboundLink({ label }, hitCallback)\n}\n\nexport function sendTiming(timingCategory: any, timingVar: any, timingValue: any, timingLabel: any) {\n  return googleAnalytics.gaCommandSendTiming(timingCategory, timingVar, timingValue, timingLabel)\n}\n\nif (typeof GOOGLE_ANALYTICS_ID === 'string') {\n  googleAnalytics.initialize(GOOGLE_ANALYTICS_ID, {\n    gaOptions: {\n      storage: 'none',\n      storeGac: false,\n      clientId: storedClientId ?? undefined,\n    },\n  })\n  googleAnalytics.set({\n    anonymizeIp: true,\n    customBrowserType: !isMobile\n      ? 'desktop'\n      : 'web3' in window || 'ethereum' in window\n      ? 'mobileWeb3'\n      : 'mobileRegular',\n  })\n} else {\n  googleAnalytics.initialize('test', { gtagOptions: { debug_mode: true } })\n}\n\nconst installed = Boolean(window.navigator.serviceWorker?.controller)\nconst hit = Boolean((window as any).__isDocumentCached)\nconst action = installed ? (hit ? 'Cache hit' : 'Cache miss') : 'Not installed'\nsendEvent({ category: 'Service Worker', action, nonInteraction: true })\n\nfunction reportWebVitals({ name, delta, id }: Metric) {\n  sendTiming('Web Vitals', name, Math.round(name === 'CLS' ? delta * 1000 : delta), id)\n}\n\n// tracks web vitals and pageviews\nexport function useAnalyticsReporter() {\n  const { pathname, search } = useLocation()\n  useEffect(() => {\n    getFCP(reportWebVitals)\n    getFID(reportWebVitals)\n    getLCP(reportWebVitals)\n    getCLS(reportWebVitals)\n  }, [])\n\n  const { chainId } = useWeb3React()\n  useEffect(() => {\n    // cd1 - custom dimension 1 - chainId\n    googleAnalytics.set({ cd1: chainId ?? 0 })\n  }, [chainId])\n\n  useEffect(() => {\n    googleAnalytics.pageview(`${pathname}${search}`)\n  }, [pathname, search])\n\n  useEffect(() => {\n    // typed as 'any' in react-ga4 -.-\n    googleAnalytics.ga((tracker: any) => {\n      if (!tracker) return\n\n      const clientId = tracker.get('clientId')\n      window.localStorage.setItem(GOOGLE_ANALYTICS_CLIENT_ID_STORAGE_KEY, clientId)\n    })\n  }, [])\n}\n","/workspace/Physica-Interfae/src/hooks/useApeModeQueryParamReader.ts",[],"/workspace/Physica-Interfae/src/theme/zIndex.ts",[],"/workspace/Physica-Interfae/src/theme/styles.ts",[],"/workspace/Physica-Interfae/src/state/application/atoms.ts",[],"/workspace/Physica-Interfae/src/constants/misc.ts",[],"/workspace/Physica-Interfae/src/state/global/actions.ts",[],"/workspace/Physica-Interfae/src/lib/i18n.tsx",[],"/workspace/Physica-Interfae/src/theme/components/text.tsx",[],"/workspace/Physica-Interfae/src/components/ErrorBoundary/index.tsx",[],"/workspace/Physica-Interfae/src/components/Polling/index.tsx",["3267"],"import { Trans } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { RowFixed } from 'components/Row'\nimport { getChainInfo } from 'constants/chainInfo'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { useIsLandingPage } from 'hooks/useIsLandingPage'\nimport { useIsNftPage } from 'hooks/useIsNftPage'\nimport useMachineTimeMs from 'hooks/useMachineTime'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport ms from 'ms.macro'\nimport { useEffect, useMemo, useState } from 'react'\nimport styled, { keyframes } from 'styled-components/macro'\nimport { ExternalLink, ThemedText } from 'theme'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nimport { MouseoverTooltip } from '../Tooltip'\nimport { ChainConnectivityWarning } from './ChainConnectivityWarning'\n\nconst StyledPolling = styled.div`\n  align-items: center;\n  bottom: 0;\n  color: ${({ theme }) => theme.textTertiary};\n  display: none;\n  padding: 1rem;\n  position: fixed;\n  right: 0;\n  transition: 250ms ease color;\n\n  a {\n    color: unset;\n  }\n  a:hover {\n    color: unset;\n    text-decoration: none;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    display: flex;\n  }\n`\nconst StyledPollingBlockNumber = styled(ThemedText.DeprecatedSmall)<{\n  breathe: boolean\n  hovering: boolean\n  warning: boolean\n}>`\n  color: ${({ theme, warning }) => (warning ? theme.deprecated_yellow3 : theme.accentSuccess)};\n  transition: opacity 0.25s ease;\n  opacity: ${({ breathe, hovering }) => (hovering ? 0.7 : breathe ? 1 : 0.5)};\n  :hover {\n    opacity: 1;\n  }\n\n  a {\n    color: unset;\n  }\n  a:hover {\n    text-decoration: none;\n    color: unset;\n  }\n`\nconst StyledPollingDot = styled.div<{ warning: boolean }>`\n  width: 8px;\n  height: 8px;\n  min-height: 8px;\n  min-width: 8px;\n  border-radius: 50%;\n  position: relative;\n  background-color: ${({ theme, warning }) => (warning ? theme.deprecated_yellow3 : theme.accentSuccess)};\n  transition: 250ms ease background-color;\n`\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Spinner = styled.div<{ warning: boolean }>`\n  animation: ${rotate360} 1s cubic-bezier(0.83, 0, 0.17, 1) infinite;\n  transform: translateZ(0);\n\n  border-top: 1px solid transparent;\n  border-right: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  border-left: 2px solid ${({ theme, warning }) => (warning ? theme.deprecated_yellow3 : theme.accentSuccess)};\n  background: transparent;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  position: relative;\n  transition: 250ms ease border-color;\n\n  left: -3px;\n  top: -3px;\n`\n\nconst DEFAULT_MS_BEFORE_WARNING = ms`10m`\nconst NETWORK_HEALTH_CHECK_MS = ms`10s`\n\nexport default function Polling() {\n  const { chainId } = useWeb3React()\n  const blockNumber = useBlockNumber()\n  const [isMounting, setIsMounting] = useState(false)\n  const [isHover, setIsHover] = useState(false)\n  const machineTime = useMachineTimeMs(NETWORK_HEALTH_CHECK_MS)\n  const blockTime = useCurrentBlockTimestamp()\n  const isNftPage = useIsNftPage()\n  const isLandingPage = useIsLandingPage()\n\n  const waitMsBeforeWarning =\n    (chainId ? getChainInfo(chainId)?.blockWaitMsBeforeWarning : DEFAULT_MS_BEFORE_WARNING) ?? DEFAULT_MS_BEFORE_WARNING\n\n  const warning = Boolean(!!blockTime && machineTime - blockTime.mul(1000).toNumber() > waitMsBeforeWarning)\n\n  useEffect(\n    () => {\n      if (!blockNumber) {\n        return\n      }\n\n      setIsMounting(true)\n      const mountingTimer = setTimeout(() => setIsMounting(false), 1000)\n\n      // this will clear Timeout when component unmount like in willComponentUnmount\n      return () => {\n        clearTimeout(mountingTimer)\n      }\n    },\n    [blockNumber] //useEffect will run only one time\n    //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n  )\n\n  //TODO - chainlink gas oracle is really slow. Can we get a better data source?\n\n  const blockExternalLinkHref = useMemo(() => {\n    if (!chainId || !blockNumber) return ''\n    return getExplorerLink(chainId, blockNumber.toString(), ExplorerDataType.BLOCK)\n  }, [blockNumber, chainId])\n\n  if (isNftPage || isLandingPage) {\n    return null\n  }\n\n  return (\n    <RowFixed>\n      <StyledPolling onMouseEnter={() => setIsHover(true)} onMouseLeave={() => setIsHover(false)}>\n        <StyledPollingBlockNumber breathe={isMounting} hovering={isHover} warning={warning}>\n          <ExternalLink href={blockExternalLinkHref}>\n            <MouseoverTooltip\n              text={<Trans>The most recent block number on this network. Prices update on every block.</Trans>}\n            >\n              {blockNumber}&ensp;\n            </MouseoverTooltip>\n          </ExternalLink>\n        </StyledPollingBlockNumber>\n        <StyledPollingDot warning={warning}>{isMounting && <Spinner warning={warning} />}</StyledPollingDot>{' '}\n      </StyledPolling>\n      {warning && <ChainConnectivityWarning />}\n    </RowFixed>\n  )\n}\n","/workspace/Physica-Interfae/src/components/NavBar/index.tsx",["3268","3269","3270","3271","3272","3273","3274","3275","3276","3277","3278","3279","3280"],"/workspace/Physica-Interfae/src/components/Popups/index.tsx",[],"/workspace/Physica-Interfae/src/pages/MigrateV2/index.tsx",["3281","3282","3283","3284"],"import { getCreate2Address } from '@ethersproject/address'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { Trans } from '@lingui/macro'\nimport { Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport MigrateSushiPositionCard from 'components/PositionCard/Sushi'\nimport MigrateV2PositionCard from 'components/PositionCard/V2'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport { PairState, useV2Pairs } from 'hooks/useV2Pairs'\nimport { ReactNode, useMemo } from 'react'\nimport { Text } from 'rebass'\nimport { useTheme } from 'styled-components/macro'\n\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport { AutoRow } from '../../components/Row'\nimport { Dots } from '../../components/swap/styleds'\nimport { V2_FACTORY_ADDRESSES } from '../../constants/addresses'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport { BackArrow, StyledInternalLink, ThemedText } from '../../theme'\nimport { BodyWrapper } from '../AppBody'\n\nfunction EmptyState({ message }: { message: ReactNode }) {\n  return (\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\n    </AutoColumn>\n  )\n}\n\n// quick hack because sushi init code hash is different\nconst computeSushiPairAddress = ({ tokenA, tokenB }: { tokenA: Token; tokenB: Token }): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  )\n}\n\n/**\n * Given two tokens return the sushiswap liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nfunction toSushiLiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(tokenA.chainId, computeSushiPairAddress({ tokenA, tokenB }), 18, 'SLP', 'SushiSwap LP Token')\n}\n\nexport default function MigrateV2() {\n  const theme = useTheme()\n  const { account, chainId } = useWeb3React()\n\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n\n  // calculate v2 + sushi pair contract addresses for all token pairs\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () =>\n      trackedTokenPairs.map((tokens) => {\n        // sushi liquidity token or null\n        const sushiLiquidityToken = chainId === 1 ? toSushiLiquidityToken(tokens) : null\n        return {\n          v2liquidityToken: v2FactoryAddress ? toV2LiquidityToken(tokens) : undefined,\n          sushiLiquidityToken,\n          tokens,\n        }\n      }),\n    [trackedTokenPairs, chainId, v2FactoryAddress]\n  )\n\n  //  get pair liquidity token addresses for balance-fetching purposes\n  const allLiquidityTokens = useMemo(() => {\n    const v2 = tokenPairsWithLiquidityTokens.map(({ v2liquidityToken }) => v2liquidityToken)\n    const sushi = tokenPairsWithLiquidityTokens\n      .map(({ sushiLiquidityToken }) => sushiLiquidityToken)\n      .filter((token): token is Token => !!token)\n\n    return [...v2, ...sushi]\n  }, [tokenPairsWithLiquidityTokens])\n\n  // fetch pair balances\n  const [pairBalances, fetchingPairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    allLiquidityTokens\n  )\n\n  // filter for v2 liquidity tokens that the user has a balance in\n  const tokenPairsWithV2Balance = useMemo(() => {\n    if (fetchingPairBalances) return []\n\n    return tokenPairsWithLiquidityTokens\n      .filter(({ v2liquidityToken }) => v2liquidityToken && pairBalances[v2liquidityToken.address]?.greaterThan(0))\n      .map((tokenPairsWithLiquidityTokens) => tokenPairsWithLiquidityTokens.tokens)\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\n\n  // filter for v2 liquidity tokens that the user has a balance in\n  const tokenPairsWithSushiBalance = useMemo(() => {\n    if (fetchingPairBalances) return []\n\n    return tokenPairsWithLiquidityTokens.filter(\n      ({ sushiLiquidityToken }) => !!sushiLiquidityToken && pairBalances[sushiLiquidityToken.address]?.greaterThan(0)\n    )\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\n\n  const v2Pairs = useV2Pairs(tokenPairsWithV2Balance)\n  const v2IsLoading = fetchingPairBalances || v2Pairs.some(([pairState]) => pairState === PairState.LOADING)\n\n  return (\n    <>\n      <BodyWrapper style={{ padding: 24 }}>\n        <AutoColumn gap=\"16px\">\n          <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n            <BackArrow to=\"/pools\" />\n            <ThemedText.DeprecatedMediumHeader>\n              <Trans>Migrate V2 Liquidity</Trans>\n            </ThemedText.DeprecatedMediumHeader>\n            <div>\n              <QuestionHelper text={<Trans>Migrate your liquidity tokens from Uniswap V2 to Uniswap V3.</Trans>} />\n            </div>\n          </AutoRow>\n\n          <ThemedText.DeprecatedBody style={{ marginBottom: 8, fontWeight: 400 }}>\n            <Trans>\n              For each pool shown below, click migrate to remove your liquidity from Uniswap V2 and deposit it into\n              Uniswap V3.\n            </Trans>\n          </ThemedText.DeprecatedBody>\n\n          {!account ? (\n            <LightCard padding=\"40px\">\n              <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                <Trans>Connect to a wallet to view your V2 liquidity.</Trans>\n              </ThemedText.DeprecatedBody>\n            </LightCard>\n          ) : v2IsLoading ? (\n            <LightCard padding=\"40px\">\n              <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              </ThemedText.DeprecatedBody>\n            </LightCard>\n          ) : v2Pairs.filter(([, pair]) => !!pair).length > 0 ? (\n            <>\n              {v2Pairs\n                .filter(([, pair]) => !!pair)\n                .map(([, pair]) => (\n                  <MigrateV2PositionCard key={(pair as Pair).liquidityToken.address} pair={pair as Pair} />\n                ))}\n\n              {tokenPairsWithSushiBalance.map(({ sushiLiquidityToken, tokens }) => {\n                return (\n                  <MigrateSushiPositionCard\n                    key={(sushiLiquidityToken as Token).address}\n                    tokenA={tokens[0]}\n                    tokenB={tokens[1]}\n                    liquidityToken={sushiLiquidityToken as Token}\n                  />\n                )\n              })}\n            </>\n          ) : (\n            <EmptyState message={<Trans>No V2 Liquidity found.</Trans>} />\n          )}\n\n          <AutoColumn justify=\"center\" gap=\"md\">\n            <Text textAlign=\"center\" fontSize={14} style={{ padding: '.5rem 0 .5rem 0' }}>\n              <Trans>\n                Don’t see one of your v2 positions?{' '}\n                <StyledInternalLink id=\"import-pool-link\" to=\"/pools/v2/find\">\n                  Import it.\n                </StyledInternalLink>\n              </Trans>\n            </Text>\n          </AutoColumn>\n        </AutoColumn>\n      </BodyWrapper>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/AddLiquidity/index.tsx",["3285","3286","3287","3288","3289","3290","3291","3292","3293","3294","3295","3296","3297","3298"],"import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { FeeAmount, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport OwnershipWarning from 'components/addLiquidity/OwnershipWarning'\nimport { sendEvent } from 'components/analytics'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { isSupportedChain } from 'constants/chains'\nimport usePrevious from 'hooks/usePrevious'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { PositionPageUnsupportedContent } from 'pages/Pool/PositionPage'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport {\n  useRangeHopCallbacks,\n  useV3DerivedMintInfo,\n  useV3MintActionHandlers,\n  useV3MintState,\n} from 'state/mint/v3/hooks'\nimport { useTheme } from 'styled-components/macro'\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\n\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonText } from '../../components/Button'\nimport { BlueCard, OutlineCard, YellowCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport FeeSelector from '../../components/FeeSelector'\nimport HoverInlineText from '../../components/HoverInlineText'\nimport LiquidityChartRangeInput from '../../components/LiquidityChartRangeInput'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { PositionPreview } from '../../components/PositionPreview'\nimport RangeSelector from '../../components/RangeSelector'\nimport PresetsButtons from '../../components/RangeSelector/PresetsButtons'\nimport RateToggle from '../../components/RateToggle'\nimport Row, { AutoRow, RowBetween, RowFixed } from '../../components/Row'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport { NONFUNGIBLE_POSITION_MANAGER_ADDRESSES } from '../../constants/addresses'\nimport { ZERO_PERCENT } from '../../constants/misc'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useArgentWalletContract } from '../../hooks/useArgentWalletContract'\nimport { useV3NFTPositionManagerContract } from '../../hooks/useContract'\nimport { useDerivedPositionInfo } from '../../hooks/useDerivedPositionInfo'\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\nimport { useStablecoinValue } from '../../hooks/useStablecoinPrice'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { useV3PositionFromTokenId } from '../../hooks/useV3Positions'\nimport { Bound, Field } from '../../state/mint/v3/actions'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { TransactionType } from '../../state/transactions/types'\nimport { useIsExpertMode, useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\nimport { ThemedText } from '../../theme'\nimport approveAmountCalldata from '../../utils/approveAmountCalldata'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { currencyId } from '../../utils/currencyId'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { Dots } from '../Pool/styleds'\nimport { Review } from './Review'\nimport {\n  CurrencyDropdown,\n  DynamicSection,\n  HideMedium,\n  MediumOnly,\n  PageWrapper,\n  ResponsiveTwoColumns,\n  RightContainer,\n  ScrollablePage,\n  StackedContainer,\n  StackedItem,\n  StyledInput,\n  Wrapper,\n} from './styled'\n\nconst DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE = new Percent(50, 10_000)\n\nexport default function AddLiquidityWrapper() {\n  const { chainId } = useWeb3React()\n  if (isSupportedChain(chainId)) {\n    return <AddLiquidity />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\n\nfunction AddLiquidity() {\n  const navigate = useNavigate()\n  const {\n    currencyIdA,\n    currencyIdB,\n    feeAmount: feeAmountFromUrl,\n    tokenId,\n  } = useParams<{ currencyIdA?: string; currencyIdB?: string; feeAmount?: string; tokenId?: string }>()\n  const { account, chainId, provider } = useWeb3React()\n  const theme = useTheme()\n\n  const toggleWalletDrawer = useToggleAccountDrawer() // toggle wallet when disconnected\n  const expertMode = useIsExpertMode()\n  const addTransaction = useTransactionAdder()\n  const positionManager = useV3NFTPositionManagerContract()\n\n  // check for existing position if tokenId in url\n  const { position: existingPositionDetails, loading: positionLoading } = useV3PositionFromTokenId(\n    tokenId ? BigNumber.from(tokenId) : undefined\n  )\n  const hasExistingPosition = !!existingPositionDetails && !positionLoading\n  const { position: existingPosition } = useDerivedPositionInfo(existingPositionDetails)\n\n  // fee selection from url\n  const feeAmount: FeeAmount | undefined =\n    feeAmountFromUrl && Object.values(FeeAmount).includes(parseFloat(feeAmountFromUrl))\n      ? parseFloat(feeAmountFromUrl)\n      : undefined\n\n  const baseCurrency = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n  // prevent an error if they input ETH/WETH\n  const quoteCurrency =\n    baseCurrency && currencyB && baseCurrency.wrapped.equals(currencyB.wrapped) ? undefined : currencyB\n\n  // mint state\n  const { independentField, typedValue, startPriceTypedValue } = useV3MintState()\n\n  const {\n    pool,\n    ticks,\n    dependentField,\n    price,\n    pricesAtTicks,\n    pricesAtLimit,\n    parsedAmounts,\n    currencyBalances,\n    position,\n    noLiquidity,\n    currencies,\n    errorMessage,\n    invalidPool,\n    invalidRange,\n    outOfRange,\n    depositADisabled,\n    depositBDisabled,\n    invertPrice,\n    ticksAtLimit,\n  } = useV3DerivedMintInfo(\n    baseCurrency ?? undefined,\n    quoteCurrency ?? undefined,\n    feeAmount,\n    baseCurrency ?? undefined,\n    existingPosition\n  )\n\n  const { onFieldAInput, onFieldBInput, onLeftRangeInput, onRightRangeInput, onStartPriceInput } =\n    useV3MintActionHandlers(noLiquidity)\n\n  const isValid = !errorMessage && !invalidRange\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const usdcValues = {\n    [Field.CURRENCY_A]: useStablecoinValue(parsedAmounts[Field.CURRENCY_A]),\n    [Field.CURRENCY_B]: useStablecoinValue(parsedAmounts[Field.CURRENCY_B]),\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {}\n  )\n\n  const argentWalletContract = useArgentWalletContract()\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(\n    argentWalletContract ? undefined : parsedAmounts[Field.CURRENCY_A],\n    chainId ? NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId] : undefined\n  )\n  const [approvalB, approveBCallback] = useApproveCallback(\n    argentWalletContract ? undefined : parsedAmounts[Field.CURRENCY_B],\n    chainId ? NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId] : undefined\n  )\n\n  const allowedSlippage = useUserSlippageToleranceWithDefault(\n    outOfRange ? ZERO_PERCENT : DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE\n  )\n\n  async function onAdd() {\n    if (!chainId || !provider || !account) return\n\n    if (!positionManager || !baseCurrency || !quoteCurrency) {\n      return\n    }\n\n    if (position && account && deadline) {\n      const useNative = baseCurrency.isNative ? baseCurrency : quoteCurrency.isNative ? quoteCurrency : undefined\n      const { calldata, value } =\n        hasExistingPosition && tokenId\n          ? NonfungiblePositionManager.addCallParameters(position, {\n              tokenId,\n              slippageTolerance: allowedSlippage,\n              deadline: deadline.toString(),\n              useNative,\n            })\n          : NonfungiblePositionManager.addCallParameters(position, {\n              slippageTolerance: allowedSlippage,\n              recipient: account,\n              deadline: deadline.toString(),\n              useNative,\n              createPool: noLiquidity,\n            })\n\n      let txn: { to: string; data: string; value: string } = {\n        to: NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId],\n        data: calldata,\n        value,\n      }\n\n      if (argentWalletContract) {\n        const amountA = parsedAmounts[Field.CURRENCY_A]\n        const amountB = parsedAmounts[Field.CURRENCY_B]\n        const batch = [\n          ...(amountA && amountA.currency.isToken\n            ? [approveAmountCalldata(amountA, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId])]\n            : []),\n          ...(amountB && amountB.currency.isToken\n            ? [approveAmountCalldata(amountB, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[chainId])]\n            : []),\n          {\n            to: txn.to,\n            data: txn.data,\n            value: txn.value,\n          },\n        ]\n        const data = argentWalletContract.interface.encodeFunctionData('wc_multiCall', [batch])\n        txn = {\n          to: argentWalletContract.address,\n          data,\n          value: '0x0',\n        }\n      }\n\n      setAttemptingTxn(true)\n\n      provider\n        .getSigner()\n        .estimateGas(txn)\n        .then((estimate) => {\n          const newTxn = {\n            ...txn,\n            gasLimit: calculateGasMargin(estimate),\n          }\n\n          return provider\n            .getSigner()\n            .sendTransaction(newTxn)\n            .then((response: TransactionResponse) => {\n              setAttemptingTxn(false)\n              addTransaction(response, {\n                type: TransactionType.ADD_LIQUIDITY_V3_POOL,\n                baseCurrencyId: currencyId(baseCurrency),\n                quoteCurrencyId: currencyId(quoteCurrency),\n                createPool: Boolean(noLiquidity),\n                expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient?.toString() ?? '0',\n                expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient?.toString() ?? '0',\n                feeAmount: position.pool.fee,\n              })\n              setTxHash(response.hash)\n              sendEvent({\n                category: 'Liquidity',\n                action: 'Add',\n                label: [currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol].join('/'),\n              })\n            })\n        })\n        .catch((error) => {\n          console.error('Failed to send transaction', error)\n          setAttemptingTxn(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          if (error?.code !== 4001) {\n            console.error(error)\n          }\n        })\n    } else {\n      return\n    }\n  }\n\n  const handleCurrencySelect = useCallback(\n    (currencyNew: Currency, currencyIdOther?: string): (string | undefined)[] => {\n      const currencyIdNew = currencyId(currencyNew)\n\n      if (currencyIdNew === currencyIdOther) {\n        // not ideal, but for now clobber the other if the currency ids are equal\n        return [currencyIdNew, undefined]\n      } else {\n        // prevent weth + eth\n        const isETHOrWETHNew =\n          currencyIdNew === 'ETH' ||\n          (chainId !== undefined && currencyIdNew === WRAPPED_NATIVE_CURRENCY[chainId]?.address)\n        const isETHOrWETHOther =\n          currencyIdOther !== undefined &&\n          (currencyIdOther === 'ETH' ||\n            (chainId !== undefined && currencyIdOther === WRAPPED_NATIVE_CURRENCY[chainId]?.address))\n\n        if (isETHOrWETHNew && isETHOrWETHOther) {\n          return [currencyIdNew, undefined]\n        } else {\n          return [currencyIdNew, currencyIdOther]\n        }\n      }\n    },\n    [chainId]\n  )\n\n  const handleCurrencyASelect = useCallback(\n    (currencyANew: Currency) => {\n      const [idA, idB] = handleCurrencySelect(currencyANew, currencyIdB)\n      if (idB === undefined) {\n        navigate(`/add/${idA}`)\n      } else {\n        navigate(`/add/${idA}/${idB}`)\n      }\n    },\n    [handleCurrencySelect, currencyIdB, navigate]\n  )\n\n  const handleCurrencyBSelect = useCallback(\n    (currencyBNew: Currency) => {\n      const [idB, idA] = handleCurrencySelect(currencyBNew, currencyIdA)\n      if (idA === undefined) {\n        navigate(`/add/${idB}`)\n      } else {\n        navigate(`/add/${idA}/${idB}`)\n      }\n    },\n    [handleCurrencySelect, currencyIdA, navigate]\n  )\n\n  const handleFeePoolSelect = useCallback(\n    (newFeeAmount: FeeAmount) => {\n      onLeftRangeInput('')\n      onRightRangeInput('')\n      navigate(`/add/${currencyIdA}/${currencyIdB}/${newFeeAmount}`)\n    },\n    [currencyIdA, currencyIdB, navigate, onLeftRangeInput, onRightRangeInput]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n      // dont jump to pool page if creating\n      navigate('/pools')\n    }\n    setTxHash('')\n  }, [navigate, onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsSwapUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const clearAll = useCallback(() => {\n    onFieldAInput('')\n    onFieldBInput('')\n    onLeftRangeInput('')\n    onRightRangeInput('')\n    navigate(`/add`)\n  }, [navigate, onFieldAInput, onFieldBInput, onLeftRangeInput, onRightRangeInput])\n\n  // get value and prices at ticks\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks\n  const { [Bound.LOWER]: priceLower, [Bound.UPPER]: priceUpper } = pricesAtTicks\n\n  const { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper, getSetFullRange } =\n    useRangeHopCallbacks(baseCurrency ?? undefined, quoteCurrency ?? undefined, feeAmount, tickLower, tickUpper, pool)\n\n  // we need an existence check on parsed amounts for single-asset deposits\n  const showApprovalA =\n    !argentWalletContract && approvalA !== ApprovalState.APPROVED && !!parsedAmounts[Field.CURRENCY_A]\n  const showApprovalB =\n    !argentWalletContract && approvalB !== ApprovalState.APPROVED && !!parsedAmounts[Field.CURRENCY_B]\n\n  const pendingText = `Supplying ${!depositADisabled ? parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) : ''} ${\n    !depositADisabled ? currencies[Field.CURRENCY_A]?.symbol : ''\n  } ${!outOfRange ? 'and' : ''} ${!depositBDisabled ? parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) : ''} ${\n    !depositBDisabled ? currencies[Field.CURRENCY_B]?.symbol : ''\n  }`\n\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  const handleSetFullRange = useCallback(() => {\n    getSetFullRange()\n\n    const minPrice = pricesAtLimit[Bound.LOWER]\n    if (minPrice) searchParams.set('minPrice', minPrice.toSignificant(5))\n    const maxPrice = pricesAtLimit[Bound.UPPER]\n    if (maxPrice) searchParams.set('maxPrice', maxPrice.toSignificant(5))\n    setSearchParams(searchParams)\n\n    sendEvent({\n      category: 'Liquidity',\n      action: 'Full Range Clicked',\n    })\n  }, [getSetFullRange, pricesAtLimit, searchParams, setSearchParams])\n\n  // START: sync values with query string\n  const oldSearchParams = usePrevious(searchParams)\n  // use query string as an input to onInput handlers\n  useEffect(() => {\n    const minPrice = searchParams.get('minPrice')\n    const oldMinPrice = oldSearchParams?.get('minPrice')\n    if (\n      minPrice &&\n      typeof minPrice === 'string' &&\n      !isNaN(minPrice as any) &&\n      (!oldMinPrice || oldMinPrice !== minPrice)\n    ) {\n      onLeftRangeInput(minPrice)\n    }\n    // disable eslint rule because this hook only cares about the url->input state data flow\n    // input state -> url updates are handled in the input handlers\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchParams])\n  useEffect(() => {\n    const maxPrice = searchParams.get('maxPrice')\n    const oldMaxPrice = oldSearchParams?.get('maxPrice')\n    if (\n      maxPrice &&\n      typeof maxPrice === 'string' &&\n      !isNaN(maxPrice as any) &&\n      (!oldMaxPrice || oldMaxPrice !== maxPrice)\n    ) {\n      onRightRangeInput(maxPrice)\n    }\n    // disable eslint rule because this hook only cares about the url->input state data flow\n    // input state -> url updates are handled in the input handlers\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchParams])\n  // END: sync values with query string\n\n  const Buttons = () =>\n    addIsUnsupported ? (\n      <ButtonPrimary disabled={true} $borderRadius=\"12px\" padding=\"12px\">\n        <ThemedText.DeprecatedMain mb=\"4px\">\n          <Trans>Unsupported Asset</Trans>\n        </ThemedText.DeprecatedMain>\n      </ButtonPrimary>\n    ) : !account ? (\n      <TraceEvent\n        events={[BrowserEvent.onClick]}\n        name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\n        properties={{ received_swap_quote: false }}\n        element={InterfaceElementName.CONNECT_WALLET_BUTTON}\n      >\n        <ButtonLight onClick={toggleWalletDrawer} $borderRadius=\"12px\" padding=\"12px\">\n          <Trans>Connect Wallet</Trans>\n        </ButtonLight>\n      </TraceEvent>\n    ) : (\n      <AutoColumn gap=\"md\">\n        {(approvalA === ApprovalState.NOT_APPROVED ||\n          approvalA === ApprovalState.PENDING ||\n          approvalB === ApprovalState.NOT_APPROVED ||\n          approvalB === ApprovalState.PENDING) &&\n          isValid && (\n            <RowBetween>\n              {showApprovalA && (\n                <ButtonPrimary\n                  onClick={approveACallback}\n                  disabled={approvalA === ApprovalState.PENDING}\n                  width={showApprovalB ? '48%' : '100%'}\n                >\n                  {approvalA === ApprovalState.PENDING ? (\n                    <Dots>\n                      <Trans>Approving {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                    </Dots>\n                  ) : (\n                    <Trans>Approve {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                  )}\n                </ButtonPrimary>\n              )}\n              {showApprovalB && (\n                <ButtonPrimary\n                  onClick={approveBCallback}\n                  disabled={approvalB === ApprovalState.PENDING}\n                  width={showApprovalA ? '48%' : '100%'}\n                >\n                  {approvalB === ApprovalState.PENDING ? (\n                    <Dots>\n                      <Trans>Approving {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                    </Dots>\n                  ) : (\n                    <Trans>Approve {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                  )}\n                </ButtonPrimary>\n              )}\n            </RowBetween>\n          )}\n        <ButtonError\n          onClick={() => {\n            expertMode ? onAdd() : setShowConfirm(true)\n          }}\n          disabled={\n            !isValid ||\n            (!argentWalletContract && approvalA !== ApprovalState.APPROVED && !depositADisabled) ||\n            (!argentWalletContract && approvalB !== ApprovalState.APPROVED && !depositBDisabled)\n          }\n          error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n        >\n          <Text fontWeight={500}>{errorMessage ? errorMessage : <Trans>Preview</Trans>}</Text>\n        </ButtonError>\n      </AutoColumn>\n    )\n\n  const usdcValueCurrencyA = usdcValues[Field.CURRENCY_A]\n  const usdcValueCurrencyB = usdcValues[Field.CURRENCY_B]\n  const currencyAFiat = useMemo(\n    () => ({\n      data: usdcValueCurrencyA ? parseFloat(usdcValueCurrencyA.toSignificant()) : undefined,\n      isLoading: false,\n    }),\n    [usdcValueCurrencyA]\n  )\n  const currencyBFiat = useMemo(\n    () => ({\n      data: usdcValueCurrencyB ? parseFloat(usdcValueCurrencyB.toSignificant()) : undefined,\n      isLoading: false,\n    }),\n    [usdcValueCurrencyB]\n  )\n\n  const owner = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result?.[0]\n  const ownsNFT =\n    addressesAreEquivalent(owner, account) || addressesAreEquivalent(existingPositionDetails?.operator, account)\n  const showOwnershipWarning = Boolean(hasExistingPosition && account && !ownsNFT)\n\n  return (\n    <>\n      <ScrollablePage>\n        <TransactionConfirmationModal\n          isOpen={showConfirm}\n          onDismiss={handleDismissConfirmation}\n          attemptingTxn={attemptingTxn}\n          hash={txHash}\n          content={() => (\n            <ConfirmationModalContent\n              title={<Trans>Add Liquidity</Trans>}\n              onDismiss={handleDismissConfirmation}\n              topContent={() => (\n                <Review\n                  parsedAmounts={parsedAmounts}\n                  position={position}\n                  existingPosition={existingPosition}\n                  priceLower={priceLower}\n                  priceUpper={priceUpper}\n                  outOfRange={outOfRange}\n                  ticksAtLimit={ticksAtLimit}\n                />\n              )}\n              bottomContent={() => (\n                <ButtonPrimary style={{ marginTop: '1rem' }} onClick={onAdd}>\n                  <Text fontWeight={500} fontSize={20}>\n                    <Trans>Add</Trans>\n                  </Text>\n                </ButtonPrimary>\n              )}\n            />\n          )}\n          pendingText={pendingText}\n        />\n        <PageWrapper wide={!hasExistingPosition}>\n          <AddRemoveTabs\n            creating={false}\n            adding={true}\n            positionID={tokenId}\n            defaultSlippage={DEFAULT_ADD_IN_RANGE_SLIPPAGE_TOLERANCE}\n            showBackLink={!hasExistingPosition}\n          >\n            {!hasExistingPosition && (\n              <Row justifyContent=\"flex-end\" style={{ width: 'fit-content', minWidth: 'fit-content' }}>\n                <MediumOnly>\n                  <ButtonText onClick={clearAll} margin=\"0 15px 0 0\">\n                    <ThemedText.DeprecatedBlue fontSize=\"12px\">\n                      <Trans>Clear All</Trans>\n                    </ThemedText.DeprecatedBlue>\n                  </ButtonText>\n                </MediumOnly>\n                {baseCurrency && quoteCurrency ? (\n                  <RateToggle\n                    currencyA={baseCurrency}\n                    currencyB={quoteCurrency}\n                    handleRateToggle={() => {\n                      if (!ticksAtLimit[Bound.LOWER] && !ticksAtLimit[Bound.UPPER]) {\n                        onLeftRangeInput((invertPrice ? priceLower : priceUpper?.invert())?.toSignificant(6) ?? '')\n                        onRightRangeInput((invertPrice ? priceUpper : priceLower?.invert())?.toSignificant(6) ?? '')\n                        onFieldAInput(formattedAmounts[Field.CURRENCY_B] ?? '')\n                      }\n                      navigate(\n                        `/add/${currencyIdB as string}/${currencyIdA as string}${feeAmount ? '/' + feeAmount : ''}`\n                      )\n                    }}\n                  />\n                ) : null}\n              </Row>\n            )}\n          </AddRemoveTabs>\n          <Wrapper>\n            <ResponsiveTwoColumns wide={!hasExistingPosition}>\n              <AutoColumn gap=\"lg\">\n                {!hasExistingPosition && (\n                  <>\n                    <AutoColumn gap=\"md\">\n                      <RowBetween paddingBottom=\"20px\">\n                        <ThemedText.DeprecatedLabel>\n                          <Trans>Select Pair</Trans>\n                        </ThemedText.DeprecatedLabel>\n                      </RowBetween>\n                      <RowBetween>\n                        <CurrencyDropdown\n                          value={formattedAmounts[Field.CURRENCY_A]}\n                          onUserInput={onFieldAInput}\n                          hideInput={true}\n                          onMax={() => {\n                            onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                          }}\n                          onCurrencySelect={handleCurrencyASelect}\n                          showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                          currency={currencies[Field.CURRENCY_A] ?? null}\n                          id=\"add-liquidity-input-tokena\"\n                          showCommonBases\n                        />\n\n                        <div style={{ width: '12px' }} />\n\n                        <CurrencyDropdown\n                          value={formattedAmounts[Field.CURRENCY_B]}\n                          hideInput={true}\n                          onUserInput={onFieldBInput}\n                          onCurrencySelect={handleCurrencyBSelect}\n                          onMax={() => {\n                            onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                          }}\n                          showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                          currency={currencies[Field.CURRENCY_B] ?? null}\n                          id=\"add-liquidity-input-tokenb\"\n                          showCommonBases\n                        />\n                      </RowBetween>\n\n                      <FeeSelector\n                        disabled={!quoteCurrency || !baseCurrency}\n                        feeAmount={feeAmount}\n                        handleFeePoolSelect={handleFeePoolSelect}\n                        currencyA={baseCurrency ?? undefined}\n                        currencyB={quoteCurrency ?? undefined}\n                      />\n                    </AutoColumn>{' '}\n                  </>\n                )}\n                {hasExistingPosition && existingPosition && (\n                  <PositionPreview\n                    position={existingPosition}\n                    title={<Trans>Selected Range</Trans>}\n                    inRange={!outOfRange}\n                    ticksAtLimit={ticksAtLimit}\n                  />\n                )}\n              </AutoColumn>\n              <div>\n                <DynamicSection\n                  disabled={tickLower === undefined || tickUpper === undefined || invalidPool || invalidRange}\n                >\n                  <AutoColumn gap=\"md\">\n                    <ThemedText.DeprecatedLabel>\n                      {hasExistingPosition ? <Trans>Add more liquidity</Trans> : <Trans>Deposit Amounts</Trans>}\n                    </ThemedText.DeprecatedLabel>\n\n                    <CurrencyInputPanel\n                      value={formattedAmounts[Field.CURRENCY_A]}\n                      onUserInput={onFieldAInput}\n                      onMax={() => {\n                        onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                      }}\n                      showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                      currency={currencies[Field.CURRENCY_A] ?? null}\n                      id=\"add-liquidity-input-tokena\"\n                      fiatValue={currencyAFiat}\n                      showCommonBases\n                      locked={depositADisabled}\n                    />\n\n                    <CurrencyInputPanel\n                      value={formattedAmounts[Field.CURRENCY_B]}\n                      onUserInput={onFieldBInput}\n                      onMax={() => {\n                        onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                      }}\n                      showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                      fiatValue={currencyBFiat}\n                      currency={currencies[Field.CURRENCY_B] ?? null}\n                      id=\"add-liquidity-input-tokenb\"\n                      showCommonBases\n                      locked={depositBDisabled}\n                    />\n                  </AutoColumn>\n                </DynamicSection>\n              </div>\n\n              {!hasExistingPosition ? (\n                <>\n                  <HideMedium>\n                    <Buttons />\n                  </HideMedium>\n                  <RightContainer gap=\"lg\">\n                    <DynamicSection gap=\"md\" disabled={!feeAmount || invalidPool}>\n                      {!noLiquidity ? (\n                        <>\n                          <RowBetween>\n                            <ThemedText.DeprecatedLabel>\n                              <Trans>Set Price Range</Trans>\n                            </ThemedText.DeprecatedLabel>\n                          </RowBetween>\n\n                          {price && baseCurrency && quoteCurrency && !noLiquidity && (\n                            <AutoRow gap=\"4px\" justify=\"center\" style={{ marginTop: '0.5rem' }}>\n                              <Trans>\n                                <ThemedText.DeprecatedMain\n                                  fontWeight={500}\n                                  textAlign=\"center\"\n                                  fontSize={12}\n                                  color=\"text1\"\n                                >\n                                  Current Price:\n                                </ThemedText.DeprecatedMain>\n                                <ThemedText.DeprecatedBody\n                                  fontWeight={500}\n                                  textAlign=\"center\"\n                                  fontSize={12}\n                                  color=\"text1\"\n                                >\n                                  <HoverInlineText\n                                    maxCharacters={20}\n                                    text={invertPrice ? price.invert().toSignificant(6) : price.toSignificant(6)}\n                                  />\n                                </ThemedText.DeprecatedBody>\n                                <ThemedText.DeprecatedBody color=\"text2\" fontSize={12}>\n                                  {quoteCurrency?.symbol} per {baseCurrency.symbol}\n                                </ThemedText.DeprecatedBody>\n                              </Trans>\n                            </AutoRow>\n                          )}\n\n                          <LiquidityChartRangeInput\n                            currencyA={baseCurrency ?? undefined}\n                            currencyB={quoteCurrency ?? undefined}\n                            feeAmount={feeAmount}\n                            ticksAtLimit={ticksAtLimit}\n                            price={\n                              price ? parseFloat((invertPrice ? price.invert() : price).toSignificant(8)) : undefined\n                            }\n                            priceLower={priceLower}\n                            priceUpper={priceUpper}\n                            onLeftRangeInput={onLeftRangeInput}\n                            onRightRangeInput={onRightRangeInput}\n                            interactive={!hasExistingPosition}\n                          />\n                        </>\n                      ) : (\n                        <AutoColumn gap=\"md\">\n                          <RowBetween>\n                            <ThemedText.DeprecatedLabel>\n                              <Trans>Set Starting Price</Trans>\n                            </ThemedText.DeprecatedLabel>\n                          </RowBetween>\n                          {noLiquidity && (\n                            <BlueCard\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'row',\n                                alignItems: 'center',\n                                padding: '1rem 1rem',\n                              }}\n                            >\n                              <ThemedText.DeprecatedBody\n                                fontSize={14}\n                                style={{ fontWeight: 500 }}\n                                textAlign=\"left\"\n                                color={theme.accentAction}\n                              >\n                                <Trans>\n                                  This pool must be initialized before you can add liquidity. To initialize, select a\n                                  starting price for the pool. Then, enter your liquidity price range and deposit\n                                  amount. Gas fees will be higher than usual due to the initialization transaction.\n                                </Trans>\n                              </ThemedText.DeprecatedBody>\n                            </BlueCard>\n                          )}\n                          <OutlineCard padding=\"12px\">\n                            <StyledInput\n                              className=\"start-price-input\"\n                              value={startPriceTypedValue}\n                              onUserInput={onStartPriceInput}\n                            />\n                          </OutlineCard>\n                          <RowBetween\n                            style={{ backgroundColor: theme.deprecated_bg1, padding: '12px', borderRadius: '12px' }}\n                          >\n                            <ThemedText.DeprecatedMain>\n                              <Trans>Current {baseCurrency?.symbol} Price:</Trans>\n                            </ThemedText.DeprecatedMain>\n                            <ThemedText.DeprecatedMain>\n                              {price ? (\n                                <ThemedText.DeprecatedMain>\n                                  <RowFixed>\n                                    <HoverInlineText\n                                      maxCharacters={20}\n                                      text={invertPrice ? price?.invert()?.toSignificant(5) : price?.toSignificant(5)}\n                                    />{' '}\n                                    <span style={{ marginLeft: '4px' }}>{quoteCurrency?.symbol}</span>\n                                  </RowFixed>\n                                </ThemedText.DeprecatedMain>\n                              ) : (\n                                '-'\n                              )}\n                            </ThemedText.DeprecatedMain>\n                          </RowBetween>\n                        </AutoColumn>\n                      )}\n                    </DynamicSection>\n\n                    <DynamicSection\n                      gap=\"md\"\n                      disabled={!feeAmount || invalidPool || (noLiquidity && !startPriceTypedValue)}\n                    >\n                      <StackedContainer>\n                        <StackedItem>\n                          <AutoColumn gap=\"md\">\n                            {noLiquidity && (\n                              <RowBetween>\n                                <ThemedText.DeprecatedLabel>\n                                  <Trans>Set Price Range</Trans>\n                                </ThemedText.DeprecatedLabel>\n                              </RowBetween>\n                            )}\n                            <RangeSelector\n                              priceLower={priceLower}\n                              priceUpper={priceUpper}\n                              getDecrementLower={getDecrementLower}\n                              getIncrementLower={getIncrementLower}\n                              getDecrementUpper={getDecrementUpper}\n                              getIncrementUpper={getIncrementUpper}\n                              onLeftRangeInput={onLeftRangeInput}\n                              onRightRangeInput={onRightRangeInput}\n                              currencyA={baseCurrency}\n                              currencyB={quoteCurrency}\n                              feeAmount={feeAmount}\n                              ticksAtLimit={ticksAtLimit}\n                            />\n                            {!noLiquidity && <PresetsButtons onSetFullRange={handleSetFullRange} />}\n                          </AutoColumn>\n                        </StackedItem>\n                      </StackedContainer>\n\n                      {outOfRange ? (\n                        <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n                          <RowBetween>\n                            <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                            <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                              <Trans>\n                                Your position will not earn fees or be used in trades until the market price moves into\n                                your range.\n                              </Trans>\n                            </ThemedText.DeprecatedYellow>\n                          </RowBetween>\n                        </YellowCard>\n                      ) : null}\n\n                      {invalidRange ? (\n                        <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n                          <RowBetween>\n                            <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                            <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                              <Trans>Invalid range selected. The min price must be lower than the max price.</Trans>\n                            </ThemedText.DeprecatedYellow>\n                          </RowBetween>\n                        </YellowCard>\n                      ) : null}\n                    </DynamicSection>\n\n                    <MediumOnly>\n                      <Buttons />\n                    </MediumOnly>\n                  </RightContainer>\n                </>\n              ) : (\n                <Buttons />\n              )}\n            </ResponsiveTwoColumns>\n          </Wrapper>\n        </PageWrapper>\n        {showOwnershipWarning && <OwnershipWarning ownerAddress={owner} />}\n        {addIsUnsupported && (\n          <UnsupportedCurrencyFooter\n            show={addIsUnsupported}\n            currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\n          />\n        )}\n      </ScrollablePage>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/Landing/index.tsx",["3299","3300","3301","3302","3303","3304","3305","3306","3307","3308","3309","3310","3311","3312","3313","3314","3315","3316","3317","3318","3319","3320","3321","3322","3323","3324","3325","3326","3327","3328","3329","3330","3331","3332","3333","3334","3335","3336","3337","3338","3339","3340","3341","3342","3343","3344","3345","3346","3347","3348","3349","3350","3351","3352","3353","3354","3355","3356","3357","3358"],"import { Trans } from '@lingui/macro'\nimport { Trace, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfacePageName, SharedEventName } from '@uniswap/analytics-events'\nimport { AboutFooter } from 'components/About/AboutFooter'\nimport Card, { CardType } from 'components/About/Card'\nimport { MAIN_CARDS, MORE_CARDS } from 'components/About/constants'\nimport ProtocolBanner from 'components/About/ProtocolBanner'\nimport { BaseButton } from 'components/Button'\nimport { useSwapWidgetEnabled } from 'featureFlags/flags/swapWidget'\nimport { useAtomValue } from 'jotai/utils'\nimport Swap from 'pages/Swap'\nimport { parse } from 'qs'\nimport { useEffect, useRef, useState } from 'react'\nimport { ArrowDownCircle } from 'react-feather'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { Link as NativeLink } from 'react-router-dom'\nimport { shouldDisableNFTRoutesAtom } from 'state/application/atoms'\nimport { useAppSelector } from 'state/hooks'\nimport styled, { css } from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\nimport { Z_INDEX } from 'theme/zIndex'\nimport darkImage from '../../assets/images/img-hero.svg'\nimport lightImage from '../../assets/images/img-hero.svg'\n\nconst Image = styled.img`\n  max-width: 500px;\n  width: 100%;\n  height: 100%;\n  max-height : 100vh;\n  // padding: 0 75px;\n  // margin-left: 30px;\n`\n\nconst PageContainer = styled.div<{ isDarkMode: boolean }>`\n  position: absolute;\n  top: 0;\n  padding: ${({ theme }) => theme.navHeight}px 0px 0px 0px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  scroll-behavior: smooth;\n  overflow-x: hidden;\n\n  background: ${({ isDarkMode }) =>\n    isDarkMode\n      ? 'linear-gradient(rgba(8, 10, 24, 0) 0%, rgb(8 10 24 / 100%) 45%)'\n      : 'linear-gradient(rgba(255, 255, 255, 0) 0%, rgb(255 255 255 /100%) 45%)'};\n`\n\nconst Gradient = styled.div<{ isDarkMode: boolean }>`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  min-height: 550px;\n  background: ${({ isDarkMode }) =>\n    isDarkMode\n      ? 'linear-gradient(rgba(8, 10, 24, 0) 0%, rgb(8 10 24 / 100%) 45%)'\n      : 'linear-gradient(rgba(255, 255, 255, 0) 0%, rgb(255 255 255 /100%) 45%)'};\n  z-index: ${Z_INDEX.under_dropdown};\n  pointer-events: none;\n  height: ${({ theme }) => `calc(100vh - ${theme.mobileBottomBarHeight}px)`};\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    height: 100vh;\n  }\n`\n\nconst GlowContainer = styled.div`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  overflow-y: hidden;\n  height: ${({ theme }) => `calc(100vh - ${theme.mobileBottomBarHeight}px)`};\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    height: 100vh;\n  }\n`\n\nconst Glow = styled.div`\n  position: absolute;\n  top: 68px;\n  bottom: 0;\n  background: radial-gradient(72.04% 72.04% at 50% 3.99%, #ff37eb 0%, rgba(166, 151, 255, 0) 100%);\n  filter: blur(72px);\n  border-radius: 24px;\n  max-width: 200px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContentContainer = styled.div<{ isDarkMode: boolean }>`\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0 50px;\n  // max-width: min(720px, 90%);\n  z-index: ${Z_INDEX.under_dropdown};\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease} opacity`};\n  height: ${({ theme }) => `calc(100vh - ${theme.navHeight + theme.mobileBottomBarHeight}px)`};\n  pointer-events: none;\n  * {\n    pointer-events: auto;\n  }\n`\n\nconst ChildContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n  padding: 0;\n  // max-width: min(720px, 90%);\n  z-index: ${Z_INDEX.under_dropdown};\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease} opacity`};\n  height: ${({ theme }) => `calc(100vh - ${theme.navHeight + theme.mobileBottomBarHeight}px)`};\n  pointer-events: none;\n  * {\n    pointer-events: auto;\n  }\n`\n\nconst TitleText = styled.h1<{ isDarkMode: boolean }>`\n  color: transparent;\n  font-size: 36px;\n  line-height: 44px;\n  font-weight: 700;\n  text-align: left;\n  margin: 0 0 24px;\n  background: ${({ isDarkMode }) =>\n    isDarkMode\n      ? '#FFF'\n      : '#AEF'};\n  background-clip: text;\n  -webkit-background-clip: text;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    font-size: 48px;\n    line-height: 56px;\n  }\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    font-size: 64px;\n    line-height: 72px;\n  }\n`\n\nconst SubText = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 500;\n  text-align: left;\n  max-width: 600px;\n  margin: 0 0 32px;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst SubTextContainer = styled.div`\n  display: flex;\n  justify-content: left;\n`\n\nconst LandingButton = styled(BaseButton)`\n  padding: 16px 0px;\n  border-radius: 30px;\n`\n\nconst ButtonCTA = styled(LandingButton)`\n  background: #3671E9;\n  box-shadow: 0px 3px 4px 0px rgba(54, 113, 233, 0.50);\n  border: none;\n  width: 60%;\n  color: ${({ theme }) => theme.white};\n  transition: ${({ theme }) => `all ${theme.transition.duration.medium} ${theme.transition.timing.ease}`};\n\n  &:hover {\n    box-shadow: 0px 0px 16px 0px rgba(54, 113, 233, 0.50);\n  }\n`\n\nconst ButtonCTAText = styled.p`\n  margin: 0px;\n  font-size: 16px;\n  font-weight: 600;\n  white-space: nowrap;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    font-size: 20px;\n  }\n`\n\nconst ActionsContainer = styled.span`\n  max-width: 200px;\n  width: 100%;\n  pointer-events: auto;\n`\n\nconst LearnMoreContainer = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.textTertiary};\n  cursor: pointer;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 36px 0 0;\n  display: flex;\n  visibility: hidden;\n  pointer-events: auto;\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    visibility: visible;\n  }\n\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease} opacity`};\n\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nconst LearnMoreArrow = styled(ArrowDownCircle)`\n  margin-left: 14px;\n  size: 20px;\n`\n\nconst AboutContentContainer = styled.div<{ isDarkMode: boolean }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0 24px 5rem;\n  width: 100%;\n  background: ${({ isDarkMode }) =>\n    isDarkMode\n      ? 'linear-gradient(179.82deg, rgba(0, 0, 0, 0) 0.16%, #050026 99.85%)'\n      : 'linear-gradient(179.82deg, rgba(255, 255, 255, 0) 0.16%, #eaeaea 99.85%)'};\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    padding: 0 96px 5rem;\n  }\n`\n\nconst CardGrid = styled.div<{ cols: number }>`\n  display: grid;\n  gap: 12px;\n  width: 100%;\n  padding: 24px 0 0;\n  max-width: 1440px;\n  scroll-margin: ${({ theme }) => `${theme.navHeight}px 0 0`};\n\n  grid-template-columns: 1fr;\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    // At this screen size, we show up to 2 columns.\n    grid-template-columns: ${({ cols }) =>\n      Array.from(Array(cols === 2 ? 2 : 1))\n        .map(() => '1fr')\n        .join(' ')};\n    gap: 32px;\n  }\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    // at this screen size, always show the max number of columns\n    grid-template-columns: ${({ cols }) =>\n      Array.from(Array(cols))\n        .map(() => '1fr')\n        .join(' ')};\n    gap: 32px;\n  }\n`\n\nconst LandingSwapContainer = styled.div`\n  height: ${({ theme }) => `calc(100vh - ${theme.mobileBottomBarHeight}px)`};\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  z-index: 1;\n`\n\nconst SwapCss = css`\n  * {\n    pointer-events: none;\n  }\n\n  &:hover {\n    transform: translateY(-4px);\n    transition: ${({ theme }) => `transform ${theme.transition.duration.medium} ${theme.transition.timing.ease}`};\n  }\n`\n\nconst LinkCss = css`\n  text-decoration: none;\n  max-width: 480px;\n  width: 100%;\n`\n\nconst LandingSwap = styled(Swap)`\n  ${SwapCss}\n  &:hover {\n    border: 1px solid ${({ theme }) => theme.accentAction};\n  }\n`\n\nconst Link = styled(NativeLink)`\n  ${LinkCss}\n`\n\nconst WidgetLandingLink = styled(NativeLink)`\n  ${LinkCss}\n  ${SwapCss}\n`\n\nexport default function Landing() {\n  const isDarkMode = useIsDarkMode()\n\n  const cardsRef = useRef<HTMLDivElement>(null)\n\n  const [showContent, setShowContent] = useState(false)\n  const selectedWallet = useAppSelector((state) => state.user.selectedWallet)\n  const navigate = useNavigate()\n  const location = useLocation()\n  const queryParams = parse(location.search, {\n    ignoreQueryPrefix: true,\n  })\n\n  const swapWidgetEnabled = useSwapWidgetEnabled()\n\n  // This can be simplified significantly once the flag is removed! For now being explicit is clearer.\n  useEffect(() => {\n    if (queryParams.intro || !selectedWallet) {\n      setShowContent(true)\n    } else {\n      navigate('/swap')\n    }\n  }, [navigate, selectedWallet, queryParams.intro])\n\n  const shouldDisableNFTRoutes = useAtomValue(shouldDisableNFTRoutesAtom)\n\n  return (\n    <Trace page={InterfacePageName.LANDING_PAGE} shouldLogImpression>\n      {showContent && (\n        <PageContainer isDarkMode={isDarkMode} data-testid=\"landing-page\">\n          <LandingSwapContainer>\n            {/* <TraceEvent\n              events={[BrowserEvent.onClick]}\n              name={SharedEventName.ELEMENT_CLICKED}\n              element={InterfaceElementName.LANDING_PAGE_SWAP_ELEMENT}\n            >\n              {swapWidgetEnabled ? (\n                <WidgetLandingLink to=\"/swap\">\n                  <Swap />\n                </WidgetLandingLink>\n              ) : (\n                <Link to=\"/swap\">\n                  <LandingSwap />\n                </Link>\n              )}\n            </TraceEvent> */}\n          </LandingSwapContainer>\n          <Gradient isDarkMode={isDarkMode} />\n          {/* <GlowContainer> */}\n            {/* <Glow /> */}\n          {/* </GlowContainer> */}\n          <ContentContainer isDarkMode={isDarkMode}>\n            <ChildContainer>\n            <TitleText isDarkMode={isDarkMode}>\n              {shouldDisableNFTRoutes ? (\n                <>\n                  <span style={{ color: '#FFF' }}>\n                    <Trans>Physica</Trans>\n                  </span>{' '}\n                  <span style={{ color: '#AEF' }}>\n                    <Trans>Finance</Trans>\n                  </span>\n                </>\n              ) : (\n                <>\n                  <span style={{ color: '#FFF' }}>\n                    <Trans>Physica</Trans>\n                  </span>{' '}\n                  <span style={{ color: '#AEF' }}>\n                    <Trans>Finance</Trans>\n                  </span>\n                </>\n              )}\n            </TitleText>\n            <SubTextContainer>\n              <SubText>\n                {shouldDisableNFTRoutes ? (\n                  <Trans>The all-in-one DeFi hub on Planq</Trans>\n                ) : (\n                  <Trans>The all-in-one DeFi hub on Planq</Trans>\n                )}\n              </SubText>\n            </SubTextContainer>\n            <ActionsContainer>\n              <TraceEvent\n                events={[BrowserEvent.onClick]}\n                name={SharedEventName.ELEMENT_CLICKED}\n                element={InterfaceElementName.CONTINUE_BUTTON}\n              >\n                <ButtonCTA as={Link} to=\"/swap\">\n                  <ButtonCTAText>\n                    <Trans>Get Started</Trans>\n                  </ButtonCTAText>\n                </ButtonCTA>\n              </TraceEvent>\n            </ActionsContainer>\n            </ChildContainer>\n            <Image src={isDarkMode ? darkImage : lightImage} alt=\"Liluni\" />\n            {/* <LearnMoreContainer\n              onClick={() => {\n                cardsRef?.current?.scrollIntoView({ behavior: 'smooth' })\n              }}\n            >\n              <Trans>Learn more</Trans>\n              <LearnMoreArrow />\n            </LearnMoreContainer> */}\n          </ContentContainer>\n          <AboutContentContainer isDarkMode={isDarkMode}>\n            {/* <CardGrid cols={2} ref={cardsRef}>\n              {MAIN_CARDS.map(({ darkBackgroundImgSrc, lightBackgroundImgSrc, ...card }) => (\n                <Card\n                  {...card}\n                  backgroundImgSrc={isDarkMode ? darkBackgroundImgSrc : lightBackgroundImgSrc}\n                  key={card.title}\n                />\n              ))}\n            </CardGrid> */}\n            <CardGrid cols={3}>\n              {MORE_CARDS.map(({ darkIcon, lightIcon, ...card }) => (\n                <Card {...card} icon={isDarkMode ? darkIcon : lightIcon} key={card.title} type={CardType.Secondary} />\n              ))}\n            </CardGrid>\n            <ProtocolBanner />\n            <AboutFooter />\n          </AboutContentContainer>\n        </PageContainer>\n      )}\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/NotFound/index.tsx",[],"/workspace/Physica-Interfae/src/nft/hooks/useBag.ts",["3359","3360","3361","3362","3363","3364"],"import { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagItem, BagItemStatus, BagStatus, UpdatedGenieAsset } from 'nft/types'\nimport { v4 as uuidv4 } from 'uuid'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface BagState {\n  bagStatus: BagStatus\n  bagManuallyClosed: boolean\n  setBagExpanded: ({ bagExpanded, manualClose }: { bagExpanded: boolean; manualClose?: boolean }) => void\n  setBagStatus: (state: BagStatus) => void\n  itemsInBag: BagItem[]\n  setItemsInBag: (items: BagItem[]) => void\n  addAssetsToBag: (asset: UpdatedGenieAsset[], fromSweep?: boolean) => void\n  removeAssetsFromBag: (assets: UpdatedGenieAsset[], fromSweep?: boolean) => void\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  lockSweepItems: (contractAddress: string) => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  bagExpanded: boolean\n  toggleBag: () => void\n  usedSweep: boolean\n  isLocked: boolean\n  setLocked: (isLocked: boolean) => void\n  reset: () => void\n}\n\nexport const useBag = create<BagState>()(\n  devtools(\n    (set, get) => ({\n      bagStatus: BagStatus.ADDING_TO_BAG,\n      bagExpanded: false,\n      bagManuallyClosed: false,\n      setBagStatus: (newBagStatus) =>\n        set(() => ({\n          bagStatus: newBagStatus,\n        })),\n      markAssetAsReviewed: (asset, toKeep) =>\n        set(({ itemsInBag }) => {\n          if (itemsInBag.length === 0) return { itemsInBag: [] }\n          const itemsInBagCopy = [...itemsInBag]\n          const index = itemsInBagCopy.findIndex((item) => item.asset.id === asset.id)\n          if (!toKeep && index !== -1) itemsInBagCopy.splice(index, 1)\n          else if (index !== -1) {\n            itemsInBagCopy[index].status = BagItemStatus.REVIEWED\n          }\n          return {\n            itemsInBag: itemsInBagCopy,\n          }\n        }),\n      didOpenUnavailableAssets: false,\n      setDidOpenUnavailableAssets: (didOpen) =>\n        set(() => ({\n          didOpenUnavailableAssets: didOpen,\n        })),\n      setBagExpanded: ({ bagExpanded, manualClose }) =>\n        set(({ bagManuallyClosed }) => ({ bagExpanded, bagManuallyClosed: manualClose || bagManuallyClosed })),\n      toggleBag: () => set(({ bagExpanded }) => ({ bagExpanded: !bagExpanded })),\n      usedSweep: false,\n      isLocked: false,\n      setLocked: (_isLocked) =>\n        set(() => ({\n          isLocked: _isLocked,\n        })),\n      itemsInBag: [],\n      setItemsInBag: (items) =>\n        set(() => ({\n          itemsInBag: items,\n        })),\n      addAssetsToBag: (assets, fromSweep = false) =>\n        set(({ itemsInBag }) => {\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\n          const items: BagItem[] = []\n          const itemsInBagCopy = [...itemsInBag]\n          assets.forEach((asset) => {\n            let index = -1\n            if (asset.tokenType !== NftStandard.Erc1155) {\n              index = itemsInBag.findIndex(\n                (n) => n.asset.tokenId === asset.tokenId && n.asset.address === asset.address\n              )\n            }\n            if (index !== -1) {\n              itemsInBagCopy[index].inSweep = fromSweep\n            } else {\n              const assetWithId = {\n                asset: { id: uuidv4(), ...asset },\n                status: BagItemStatus.ADDED_TO_BAG,\n                inSweep: fromSweep,\n              }\n              items.push(assetWithId)\n            }\n          })\n          if (itemsInBag.length === 0)\n            return {\n              itemsInBag: items,\n              bagStatus: BagStatus.ADDING_TO_BAG,\n              usedSweep: fromSweep,\n            }\n          else\n            return {\n              itemsInBag: [...itemsInBagCopy, ...items],\n              bagStatus: BagStatus.ADDING_TO_BAG,\n              usedSweep: fromSweep,\n            }\n        }),\n      removeAssetsFromBag: (assets, fromSweep = false) => {\n        set(({ itemsInBag }) => {\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\n          if (itemsInBag.length === 0) return { itemsInBag: [] }\n          const itemsCopy = itemsInBag.filter(\n            (item) =>\n              !assets.some((asset) =>\n                asset.id\n                  ? asset.id === item.asset.id\n                  : asset.tokenId === item.asset.tokenId && asset.address === item.asset.address\n              )\n          )\n          return {\n            itemsInBag: itemsCopy,\n            usedSweep: fromSweep,\n          }\n        })\n      },\n      lockSweepItems: (contractAddress) =>\n        set(({ itemsInBag }) => {\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\n          const itemsInBagCopy = itemsInBag.map((item) =>\n            item.asset.address === contractAddress && item.inSweep ? { ...item, inSweep: false } : item\n          )\n          if (itemsInBag.length === 0)\n            return {\n              itemsInBag,\n            }\n          else\n            return {\n              itemsInBag: [...itemsInBagCopy],\n            }\n        }),\n      reset: () =>\n        set(() => {\n          if (!get().isLocked)\n            return {\n              bagStatus: BagStatus.ADDING_TO_BAG,\n              itemsInBag: [],\n              didOpenUnavailableAssets: false,\n              isLocked: false,\n              bagManuallyClosed: false,\n              bagExpanded: false,\n            }\n          else return {}\n        }),\n    }),\n    { name: 'useBag' }\n  )\n)\n","/workspace/Physica-Interfae/src/utils/getExplorerLink.ts",[],"/workspace/Physica-Interfae/src/utils/currencyId.ts",[],"/workspace/Physica-Interfae/src/state/user/reducer.ts",[],"/workspace/Physica-Interfae/src/hooks/Tokens.ts",["3365","3366"],"import { Currency, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { getChainInfo } from 'constants/chainInfo'\nimport { SupportedChainId } from 'constants/chains'\nimport { DEFAULT_INACTIVE_LIST_URLS, DEFAULT_LIST_OF_LISTS } from 'constants/lists'\nimport { useCurrencyFromMap, useTokenFromMapOrNetwork } from 'lib/hooks/useCurrency'\nimport { getTokenFilter } from 'lib/hooks/useTokenList/filtering'\nimport { useMemo } from 'react'\nimport { isL2ChainId } from 'utils/chains'\n\nimport { useAllLists, useCombinedActiveList, useCombinedTokenMapFromUrls } from '../state/lists/hooks'\nimport { WrappedTokenInfo } from '../state/lists/wrappedTokenInfo'\nimport { useUserAddedTokens, useUserAddedTokensOnChain } from '../state/user/hooks'\nimport { TokenAddressMap, useUnsupportedTokenList } from './../state/lists/hooks'\n\n// reduce token map into standard address <-> Token mapping, optionally include user added tokens\nfunction useTokensFromMap(tokenMap: TokenAddressMap): { [address: string]: Token } {\n  const { chainId } = useWeb3React()\n  return useMemo(() => {\n    if (!chainId) return {}\n\n    // reduce to just tokens\n    return Object.keys(tokenMap[chainId] ?? {}).reduce<{ [address: string]: Token }>((newMap, address) => {\n      newMap[address] = tokenMap[chainId][address].token\n      return newMap\n    }, {})\n  }, [chainId, tokenMap])\n}\n\nexport function useAllTokensMultichain(): TokenAddressMap {\n  return useCombinedTokenMapFromUrls(DEFAULT_LIST_OF_LISTS)\n}\n\n// Returns all tokens from the default list + user added tokens\nexport function useDefaultActiveTokens(): { [address: string]: Token } {\n  const defaultListTokens = useCombinedActiveList()\n  const tokensFromMap = useTokensFromMap(defaultListTokens)\n  const userAddedTokens = useUserAddedTokens()\n  return useMemo(() => {\n    return (\n      userAddedTokens\n        // reduce into all ALL_TOKENS filtered by the current chain\n        .reduce<{ [address: string]: Token }>(\n          (tokenMap, token) => {\n            tokenMap[token.address] = token\n            return tokenMap\n          },\n          // must make a copy because reduce modifies the map, and we do not\n          // want to make a copy in every iteration\n          { ...tokensFromMap }\n        )\n    )\n  }, [tokensFromMap, userAddedTokens])\n}\n\ntype BridgeInfo = Record<\n  SupportedChainId,\n  {\n    tokenAddress: string\n    originBridgeAddress: string\n    destBridgeAddress: string\n  }\n>\n\nexport function useUnsupportedTokens(): { [address: string]: Token } {\n  const { chainId } = useWeb3React()\n  const listsByUrl = useAllLists()\n  const unsupportedTokensMap = useUnsupportedTokenList()\n  const unsupportedTokens = useTokensFromMap(unsupportedTokensMap)\n\n  // checks the default L2 lists to see if `bridgeInfo` has an L1 address value that is unsupported\n  const l2InferredBlockedTokens: typeof unsupportedTokens = useMemo(() => {\n    if (!chainId || !isL2ChainId(chainId)) {\n      return {}\n    }\n\n    if (!listsByUrl) {\n      return {}\n    }\n\n    const listUrl = getChainInfo(chainId).defaultListUrl\n\n    const { current: list } = listsByUrl[listUrl]\n    if (!list) {\n      return {}\n    }\n\n    const unsupportedSet = new Set(Object.keys(unsupportedTokens))\n\n    return list.tokens.reduce((acc, tokenInfo) => {\n      const bridgeInfo = tokenInfo.extensions?.bridgeInfo as unknown as BridgeInfo\n      if (\n        bridgeInfo &&\n        bridgeInfo[SupportedChainId.MAINNET] &&\n        bridgeInfo[SupportedChainId.MAINNET].tokenAddress &&\n        unsupportedSet.has(bridgeInfo[SupportedChainId.MAINNET].tokenAddress)\n      ) {\n        const address = bridgeInfo[SupportedChainId.MAINNET].tokenAddress\n        // don't rely on decimals--it's possible that a token could be bridged w/ different decimals on the L2\n        return { ...acc, [address]: new Token(SupportedChainId.MAINNET, address, tokenInfo.decimals) }\n      }\n      return acc\n    }, {})\n  }, [chainId, listsByUrl, unsupportedTokens])\n\n  return { ...unsupportedTokens, ...l2InferredBlockedTokens }\n}\n\nexport function useSearchInactiveTokenLists(search: string | undefined, minResults = 10): WrappedTokenInfo[] {\n  const lists = useAllLists()\n  const inactiveUrls = DEFAULT_INACTIVE_LIST_URLS\n  const { chainId } = useWeb3React()\n  const activeTokens = useDefaultActiveTokens()\n  return useMemo(() => {\n    if (!search || search.trim().length === 0) return []\n    const tokenFilter = getTokenFilter(search)\n    const result: WrappedTokenInfo[] = []\n    const addressSet: { [address: string]: true } = {}\n    for (const url of inactiveUrls) {\n      const list = lists[url]?.current\n      if (!list) continue\n      for (const tokenInfo of list.tokens) {\n        if (tokenInfo.chainId === chainId && tokenFilter(tokenInfo)) {\n          try {\n            const wrapped: WrappedTokenInfo = new WrappedTokenInfo(tokenInfo, list)\n            if (!(wrapped.address in activeTokens) && !addressSet[wrapped.address]) {\n              addressSet[wrapped.address] = true\n              result.push(wrapped)\n              if (result.length >= minResults) return result\n            }\n          } catch {\n            continue\n          }\n        }\n      }\n    }\n    return result\n  }, [activeTokens, chainId, inactiveUrls, lists, minResults, search])\n}\n\n// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(currency: Currency | undefined | null): boolean {\n  const userAddedTokens = useUserAddedTokens()\n\n  if (!currency) {\n    return false\n  }\n\n  return !!userAddedTokens.find((token) => currency.equals(token))\n}\n\n// Check if currency on specific chain is included in custom list from user storage\nexport function useIsUserAddedTokenOnChain(\n  address: string | undefined | null,\n  chain: number | undefined | null\n): boolean {\n  const userAddedTokens = useUserAddedTokensOnChain(chain)\n\n  if (!address || !chain) {\n    return false\n  }\n\n  return !!userAddedTokens.find((token) => token.address === address)\n}\n\n// undefined if invalid or does not exist\n// null if loading or null was passed\n// otherwise returns the token\nexport function useToken(tokenAddress?: string | null): Token | null | undefined {\n  const tokens = useDefaultActiveTokens()\n  return useTokenFromMapOrNetwork(tokens, tokenAddress)\n}\n\nexport function useCurrency(currencyId?: string | null): Currency | null | undefined {\n  const tokens = useDefaultActiveTokens()\n  return useCurrencyFromMap(tokens, currencyId)\n}\n","/workspace/Physica-Interfae/src/constants/routing.ts",["3367","3368"],"// a list of tokens by chain\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { SupportedChainId } from 'constants/chains'\n\nimport {\n  AMPL,\n  BTC_BSC,\n  BUSD_BSC,\n  CAKE_BSC,\n  CEUR_CELO,\n  CEUR_CELO_ALFAJORES,\n  CMC02_CELO,\n  CUSD_CELO,\n  CUSD_CELO_ALFAJORES,\n  DAI,\n  DAI_ARBITRUM_ONE,\n  DAI_BSC,\n  DAI_OPTIMISM,\n  DAI_POLYGON,\n  ETH_BSC,\n  ETH2X_FLI,\n  FEI,\n  FRAX,\n  FRAX_BSC,\n  FXS,\n  MATIC_BSC,\n  nativeOnChain,\n  PORTAL_ETH_CELO,\n  PORTAL_USDC_CELO,\n  renBTC,\n  rETH2,\n  sETH2,\n  SWISE,\n  TRIBE,\n  USDC_ARBITRUM,\n  USDC_ARBITRUM_GOERLI,\n  USDC_BSC,\n  USDC_MAINNET,\n  USDC_OPTIMISM,\n  USDC_POLYGON,\n  USDT,\n  USDT_ARBITRUM_ONE,\n  USDT_BSC,\n  USDT_OPTIMISM,\n  USDT_POLYGON,\n  WBTC,\n  WBTC_ARBITRUM_ONE,\n  WBTC_OPTIMISM,\n  WBTC_POLYGON,\n  WETH_POLYGON,\n  WETH_POLYGON_MUMBAI,\n  WRAPPED_NATIVE_CURRENCY,\n} from './tokens'\n\ntype ChainTokenList = {\n  readonly [chainId: number]: Token[]\n}\n\ntype ChainCurrencyList = {\n  readonly [chainId: number]: Currency[]\n}\n\nconst WRAPPED_NATIVE_CURRENCIES_ONLY: ChainTokenList = Object.fromEntries(\n  Object.entries(WRAPPED_NATIVE_CURRENCY)\n    .map(([key, value]) => [key, [value]])\n    .filter(Boolean)\n)\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET],\n    DAI,\n    USDC_MAINNET,\n    USDT,\n    WBTC,\n  ],\n  [SupportedChainId.OPTIMISM]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.OPTIMISM],\n    DAI_OPTIMISM,\n    USDT_OPTIMISM,\n    WBTC_OPTIMISM,\n  ],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.ARBITRUM_ONE],\n    DAI_ARBITRUM_ONE,\n    USDT_ARBITRUM_ONE,\n    WBTC_ARBITRUM_ONE,\n  ],\n  [SupportedChainId.POLYGON]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.POLYGON],\n    DAI_POLYGON,\n    USDC_POLYGON,\n    USDT_POLYGON,\n    WETH_POLYGON,\n  ],\n  [SupportedChainId.BNB]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.BNB],\n    DAI_BSC,\n    USDC_BSC,\n    USDT_BSC,\n    BUSD_BSC,\n    FRAX_BSC,\n    MATIC_BSC,\n    CAKE_BSC,\n  ],\n  [SupportedChainId.CELO]: [CUSD_CELO, CEUR_CELO, CMC02_CELO, PORTAL_USDC_CELO, PORTAL_ETH_CELO],\n}\nexport const ADDITIONAL_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    '0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0': [ETH2X_FLI],\n    [rETH2.address]: [sETH2],\n    [SWISE.address]: [sETH2],\n    [FEI.address]: [TRIBE],\n    [TRIBE.address]: [FEI],\n    [FRAX.address]: [FXS],\n    [FXS.address]: [FRAX],\n    [WBTC.address]: [renBTC],\n    [renBTC.address]: [WBTC],\n  },\n}\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token],\n  },\n}\n\n/**\n * Shows up in the currency select for swap and add liquidity\n */\nexport const COMMON_BASES: ChainCurrencyList = {\n  [SupportedChainId.MAINNET]: [\n    nativeOnChain(SupportedChainId.MAINNET),\n    DAI,\n    USDC_MAINNET,\n    USDT,\n    WBTC,\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token,\n  ],\n  [SupportedChainId.GOERLI]: [\n    nativeOnChain(SupportedChainId.GOERLI),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.GOERLI] as Token,\n  ],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    nativeOnChain(SupportedChainId.ARBITRUM_ONE),\n    DAI_ARBITRUM_ONE,\n    USDC_ARBITRUM,\n    USDT_ARBITRUM_ONE,\n    WBTC_ARBITRUM_ONE,\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_ONE] as Token,\n  ],\n  [SupportedChainId.ARBITRUM_GOERLI]: [\n    nativeOnChain(SupportedChainId.ARBITRUM_GOERLI),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_GOERLI] as Token,\n    USDC_ARBITRUM_GOERLI,\n  ],\n  [SupportedChainId.OPTIMISM]: [\n    nativeOnChain(SupportedChainId.OPTIMISM),\n    DAI_OPTIMISM,\n    USDC_OPTIMISM,\n    USDT_OPTIMISM,\n    WBTC_OPTIMISM,\n  ],\n  [SupportedChainId.OPTIMISM_GOERLI]: [nativeOnChain(SupportedChainId.OPTIMISM_GOERLI)],\n  [SupportedChainId.POLYGON]: [\n    nativeOnChain(SupportedChainId.POLYGON),\n    WETH_POLYGON,\n    USDC_POLYGON,\n    DAI_POLYGON,\n    USDT_POLYGON,\n    WBTC_POLYGON,\n  ],\n  [SupportedChainId.POLYGON_MUMBAI]: [\n    nativeOnChain(SupportedChainId.POLYGON_MUMBAI),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.POLYGON_MUMBAI] as Token,\n    WETH_POLYGON_MUMBAI,\n  ],\n\n  [SupportedChainId.CELO]: [\n    nativeOnChain(SupportedChainId.CELO),\n    CEUR_CELO,\n    CUSD_CELO,\n    PORTAL_ETH_CELO,\n    PORTAL_USDC_CELO,\n    CMC02_CELO,\n  ],\n  [SupportedChainId.CELO_ALFAJORES]: [\n    nativeOnChain(SupportedChainId.CELO_ALFAJORES),\n    CUSD_CELO_ALFAJORES,\n    CEUR_CELO_ALFAJORES,\n  ],\n\n  [SupportedChainId.BNB]: [\n    nativeOnChain(SupportedChainId.BNB),\n    DAI_BSC,\n    USDC_BSC,\n    USDT_BSC,\n    ETH_BSC,\n    BTC_BSC,\n    BUSD_BSC,\n  ],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET],\n    DAI,\n    USDC_MAINNET,\n    USDT,\n    WBTC,\n  ],\n  [SupportedChainId.BNB]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.BNB],\n    DAI_BSC,\n    USDC_BSC,\n    USDT_BSC,\n    BTC_BSC,\n    BUSD_BSC,\n    ETH_BSC,\n  ],\n}\nexport const PINNED_PAIRS: { readonly [chainId: number]: [Token, Token][] } = {\n  [SupportedChainId.MAINNET]: [\n    [\n      new Token(SupportedChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n      new Token(\n        SupportedChainId.MAINNET,\n        '0x39AA39c021dfbaE8faC545936693aC917d5E7563',\n        8,\n        'cUSDC',\n        'Compound USD Coin'\n      ),\n    ],\n    [USDC_MAINNET, USDT],\n    [DAI, USDT],\n  ],\n}\n","/workspace/Physica-Interfae/src/constants/addresses.ts",["3369","3370"],"import { FACTORY_ADDRESS as V2_FACTORY_ADDRESS } from '@uniswap/v2-sdk'\nimport { FACTORY_ADDRESS as V3_FACTORY_ADDRESS } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\n\nimport { constructSameAddressMap } from '../utils/constructSameAddressMap'\n\ntype AddressMap = { [chainId: number]: string }\n\nexport const UNI_ADDRESS: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984')\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS)\nexport const V2_ROUTER_ADDRESS: AddressMap = constructSameAddressMap('0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D')\n\n// celo v3 addresses\nconst CELO_V3_CORE_FACTORY_ADDRESSES = '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc'\nconst CELO_V3_MIGRATOR_ADDRESSES = '0x3cFd4d48EDfDCC53D3f173F596f621064614C582'\nconst CELO_MULTICALL_ADDRESS = '0x633987602DE5C4F337e3DbF265303A1080324204'\nconst CELO_QUOTER_ADDRESSES = '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8'\nconst CELO_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A'\nconst CELO_TICK_LENS_ADDRESSES = '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n\n// BNB v3 addresses\nconst BNB_V3_CORE_FACTORY_ADDRESSES = '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7'\nconst BNB_V3_MIGRATOR_ADDRESSES = '0x32681814957e0C13117ddc0c2aba232b5c9e760f'\nconst BNB_MULTICALL_ADDRESS = '0x963Df249eD09c358A4819E39d9Cd5736c3087184'\nconst BNB_QUOTER_ADDRESSES = '0x78D78E420Da98ad378D7799bE8f4AF69033EB077'\nconst BNB_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613'\nconst BNB_TICK_LENS_ADDRESSES = '0xD9270014D396281579760619CCf4c3af0501A47C'\n\n// PLANQ\nconst PLANQ_V3_CORE_FACTORY_ADDRESSES = '0x37e59adF08C3b4C0B744Be41E26120DB9953d30c'\nconst PLANQ_V3_MIGRATOR_ADDRESSES = '0x55090Fc8db50364f6FC63E748B300345785f9f41'\nconst PLANQ_MULTICALL_ADDRESS = '0x51224b42e2EDd04C533a19749D4a20F99ceD3388'\nconst PLANQ_QUOTER_ADDRESSES = '0xad3c229F3EF1c817d5F7cEEE7C415Ff21B26AE01'\nconst PLANQ_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = '0xC2f747c241a3aC8C0f77F5d12d9527Ad50EdCe7C'\nconst PLANQ_SWAP_ROUTER_ADDRESSES = '0xFce6fB0CdF0979069B7889f148112E00D7aD405d'\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_V3_CORE_FACTORY_ADDRESSES = '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10'\nconst OPTIMISM_GOERLI_V3_MIGRATOR_ADDRESSES = '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8'\nconst OPTIMISM_GOERLI_MULTICALL_ADDRESS = '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd'\nconst OPTIMISM_GOERLI_QUOTER_ADDRESSES = '0x9569CbA925c8ca2248772A9A4976A516743A246F'\nconst OPTIMISM_GOERLI_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6'\nconst OPTIMISM_GOERLI_TICK_LENS_ADDRESSES = '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_V3_CORE_FACTORY_ADDRESSES = '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6'\nconst ARBITRUM_GOERLI_V3_MIGRATOR_ADDRESSES = '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3'\nconst ARBITRUM_GOERLI_MULTICALL_ADDRESS = '0x8260CB40247290317a4c062F3542622367F206Ee'\nconst ARBITRUM_GOERLI_QUOTER_ADDRESSES = '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA'\nconst ARBITRUM_GOERLI_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = '0x622e4726a167799826d1E1D150b076A7725f5D81'\nconst ARBITRUM_GOERLI_TICK_LENS_ADDRESSES = '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap(V3_FACTORY_ADDRESS, [\n    SupportedChainId.OPTIMISM,\n    SupportedChainId.ARBITRUM_ONE,\n    SupportedChainId.POLYGON_MUMBAI,\n    SupportedChainId.POLYGON,\n  ]),\n  [SupportedChainId.CELO]: CELO_V3_CORE_FACTORY_ADDRESSES,\n  [SupportedChainId.CELO_ALFAJORES]: CELO_V3_CORE_FACTORY_ADDRESSES,\n  [SupportedChainId.BNB]: BNB_V3_CORE_FACTORY_ADDRESSES,\n  [SupportedChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_V3_CORE_FACTORY_ADDRESSES,\n  [SupportedChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_V3_CORE_FACTORY_ADDRESSES,\n  [SupportedChainId.PLANQ]: PLANQ_V3_CORE_FACTORY_ADDRESSES,\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0xA5644E29708357803b5A882D272c41cC0dF92B34', [\n    SupportedChainId.ARBITRUM_ONE,\n    SupportedChainId.POLYGON_MUMBAI,\n    SupportedChainId.POLYGON,\n  ]),\n  [SupportedChainId.CELO]: CELO_V3_MIGRATOR_ADDRESSES,\n  [SupportedChainId.CELO_ALFAJORES]: CELO_V3_MIGRATOR_ADDRESSES,\n  [SupportedChainId.BNB]: BNB_V3_MIGRATOR_ADDRESSES,\n  [SupportedChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_V3_MIGRATOR_ADDRESSES,\n  [SupportedChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_V3_MIGRATOR_ADDRESSES,\n  [SupportedChainId.PLANQ]: PLANQ_V3_MIGRATOR_ADDRESSES,\n}\n\nexport const MULTICALL_ADDRESS: AddressMap = {\n  ...constructSameAddressMap('0x1F98415757620B543A52E61c46B32eB19261F984', [\n    SupportedChainId.OPTIMISM,\n    SupportedChainId.POLYGON_MUMBAI,\n    SupportedChainId.POLYGON,\n  ]),\n  [SupportedChainId.ARBITRUM_ONE]: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  [SupportedChainId.CELO]: CELO_MULTICALL_ADDRESS,\n  [SupportedChainId.CELO_ALFAJORES]: CELO_MULTICALL_ADDRESS,\n  [SupportedChainId.BNB]: BNB_MULTICALL_ADDRESS,\n  [SupportedChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_MULTICALL_ADDRESS,\n  [SupportedChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_MULTICALL_ADDRESS,\n  [SupportedChainId.PLANQ]: PLANQ_MULTICALL_ADDRESS,\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [SupportedChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [SupportedChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [SupportedChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [SupportedChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6', [\n    SupportedChainId.OPTIMISM,\n    SupportedChainId.ARBITRUM_ONE,\n    SupportedChainId.POLYGON_MUMBAI,\n    SupportedChainId.POLYGON,\n  ]),\n  [SupportedChainId.CELO]: CELO_QUOTER_ADDRESSES,\n  [SupportedChainId.CELO_ALFAJORES]: CELO_QUOTER_ADDRESSES,\n  [SupportedChainId.BNB]: BNB_QUOTER_ADDRESSES,\n  [SupportedChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_QUOTER_ADDRESSES,\n  [SupportedChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_QUOTER_ADDRESSES,\n  [SupportedChainId.PLANQ]: PLANQ_QUOTER_ADDRESSES,\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0xC36442b4a4522E871399CD717aBDD847Ab11FE88', [\n    SupportedChainId.OPTIMISM,\n    SupportedChainId.ARBITRUM_ONE,\n    SupportedChainId.POLYGON_MUMBAI,\n    SupportedChainId.POLYGON,\n  ]),\n  [SupportedChainId.CELO]: CELO_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n  [SupportedChainId.CELO_ALFAJORES]: CELO_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n  [SupportedChainId.BNB]: BNB_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n  [SupportedChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n  [SupportedChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n  [SupportedChainId.PLANQ]: PLANQ_NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  [SupportedChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [SupportedChainId.GOERLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [SupportedChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  [SupportedChainId.ARBITRUM_ONE]: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n  [SupportedChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_TICK_LENS_ADDRESSES,\n  [SupportedChainId.CELO]: CELO_TICK_LENS_ADDRESSES,\n  [SupportedChainId.CELO_ALFAJORES]: CELO_TICK_LENS_ADDRESSES,\n  [SupportedChainId.BNB]: BNB_TICK_LENS_ADDRESSES,\n  [SupportedChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_TICK_LENS_ADDRESSES,\n}\n","/workspace/Physica-Interfae/src/components/Icons/LoadingSpinner.tsx",[],"/workspace/Physica-Interfae/src/theme/components/SegmentedControl.tsx",[],"/workspace/Physica-Interfae/src/lib/hooks/transactions/updater.tsx",["3371","3372"],"import { TransactionReceipt } from '@ethersproject/abstract-provider'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport useBlockNumber, { useFastForwardBlockNumber } from 'lib/hooks/useBlockNumber'\nimport ms from 'ms.macro'\nimport { useCallback, useEffect } from 'react'\nimport { retry, RetryableError, RetryOptions } from 'utils/retry'\n\ninterface Transaction {\n  addedTime: number\n  receipt?: unknown\n  lastCheckedBlockNumber?: number\n}\n\nexport function shouldCheck(lastBlockNumber: number, tx: Transaction): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / ms`1m`\n  if (minutesPending > 60) {\n    // every 10 blocks if pending longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending longer than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\n\nconst RETRY_OPTIONS_BY_CHAIN_ID: { [chainId: number]: RetryOptions } = {\n  [SupportedChainId.ARBITRUM_ONE]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.ARBITRUM_GOERLI]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.OPTIMISM]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.OPTIMISM_GOERLI]: { n: 10, minWait: 250, maxWait: 1000 },\n}\nconst DEFAULT_RETRY_OPTIONS: RetryOptions = { n: 1, minWait: 0, maxWait: 0 }\n\ninterface UpdaterProps {\n  pendingTransactions: { [hash: string]: Transaction }\n  onCheck: (tx: { chainId: number; hash: string; blockNumber: number }) => void\n  onReceipt: (tx: { chainId: number; hash: string; receipt: TransactionReceipt }) => void\n}\n\nexport default function Updater({ pendingTransactions, onCheck, onReceipt }: UpdaterProps): null {\n  const { chainId, provider } = useWeb3React()\n\n  const lastBlockNumber = useBlockNumber()\n  const fastForwardBlockNumber = useFastForwardBlockNumber()\n\n  const getReceipt = useCallback(\n    (hash: string) => {\n      if (!provider || !chainId) throw new Error('No provider or chainId')\n      const retryOptions = RETRY_OPTIONS_BY_CHAIN_ID[chainId] ?? DEFAULT_RETRY_OPTIONS\n      return retry(\n        () =>\n          provider.getTransactionReceipt(hash).then((receipt) => {\n            if (receipt === null) {\n              console.debug(`Retrying tranasaction receipt for ${hash}`)\n              throw new RetryableError()\n            }\n            return receipt\n          }),\n        retryOptions\n      )\n    },\n    [chainId, provider]\n  )\n\n  useEffect(() => {\n    if (!chainId || !provider || !lastBlockNumber) return\n\n    const cancels = Object.keys(pendingTransactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, pendingTransactions[hash]))\n      .map((hash) => {\n        const { promise, cancel } = getReceipt(hash)\n        promise\n          .then((receipt) => {\n            if (receipt) {\n              fastForwardBlockNumber(receipt.blockNumber)\n              onReceipt({ chainId, hash, receipt })\n            } else {\n              onCheck({ chainId, hash, blockNumber: lastBlockNumber })\n            }\n          })\n          .catch((error) => {\n            if (!error.isCancelledError) {\n              console.warn(`Failed to get transaction receipt for ${hash}`, error)\n            }\n          })\n        return cancel\n      })\n\n    return () => {\n      cancels.forEach((cancel) => cancel())\n    }\n  }, [chainId, provider, lastBlockNumber, getReceipt, onReceipt, onCheck, pendingTransactions, fastForwardBlockNumber])\n\n  return null\n}\n","/workspace/Physica-Interfae/src/nft/pages/asset/Asset.tsx",[],"/workspace/Physica-Interfae/src/nft/pages/profile/profile.tsx",[],"/workspace/Physica-Interfae/src/pages/AppBody.tsx",[],"/workspace/Physica-Interfae/src/pages/Vote/index.tsx",[],"/workspace/Physica-Interfae/src/pages/AddLiquidityV2/index.tsx",["3373","3374","3375","3376","3377","3378"],"import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport { sendEvent } from 'components/analytics'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport { useCallback, useState } from 'react'\nimport { Plus } from 'react-feather'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { useTheme } from 'styled-components/macro'\n\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport { BlueCard, LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween, RowFlat } from '../../components/Row'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport { ZERO_PERCENT } from '../../constants/misc'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useV2RouterContract } from '../../hooks/useContract'\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { PairState } from '../../hooks/useV2Pairs'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { TransactionType } from '../../state/transactions/types'\nimport { useIsExpertMode, useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\nimport { ThemedText } from '../../theme'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { calculateSlippageAmount } from '../../utils/calculateSlippageAmount'\nimport { currencyId } from '../../utils/currencyId'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport AppBody from '../AppBody'\nimport { Dots, Wrapper } from '../Pool/styleds'\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\nimport { PoolPriceBar } from './PoolPriceBar'\n\nconst DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE = new Percent(50, 10_000)\n\nexport default function AddLiquidity() {\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA?: string; currencyIdB?: string }>()\n  const navigate = useNavigate()\n  const { account, chainId, provider } = useWeb3React()\n\n  const theme = useTheme()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const wrappedNativeCurrency = chainId ? WRAPPED_NATIVE_CURRENCY[chainId] : undefined\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      wrappedNativeCurrency &&\n      ((currencyA && currencyA.equals(wrappedNativeCurrency)) || (currencyB && currencyB.equals(wrappedNativeCurrency)))\n  )\n\n  const toggleWalletDrawer = useToggleAccountDrawer() // toggle wallet when disconnected\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE) // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {}\n  )\n\n  const router = useV2RouterContract()\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], router?.address)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], router?.address)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !provider || !account || !router) return\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\n    }\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null\n    if (currencyA.isNative || currencyB.isNative) {\n      const tokenBIsETH = currencyB.isNative\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        (tokenBIsETH ? currencyA : currencyB)?.wrapped?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).quotient.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        currencyA?.wrapped?.address ?? '',\n        currencyB?.wrapped?.address ?? '',\n        parsedAmountA.quotient.toString(),\n        parsedAmountB.quotient.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            type: TransactionType.ADD_LIQUIDITY_V2_POOL,\n            baseCurrencyId: currencyId(currencyA),\n            expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient.toString() ?? '0',\n            quoteCurrencyId: currencyId(currencyB),\n            expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient.toString() ?? '0',\n          })\n\n          setTxHash(response.hash)\n\n          sendEvent({\n            category: 'Liquidity',\n            action: 'Add',\n            label: [currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol].join('/'),\n          })\n        })\n      )\n      .catch((error) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <AutoColumn gap=\"20px\">\n        <LightCard mt=\"20px\" $borderRadius=\"20px\">\n          <RowFlat>\n            <Text fontSize=\"48px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\n              {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol}\n            </Text>\n            <DoubleCurrencyLogo\n              currency0={currencies[Field.CURRENCY_A]}\n              currency1={currencies[Field.CURRENCY_B]}\n              size={30}\n            />\n          </RowFlat>\n        </LightCard>\n      </AutoColumn>\n    ) : (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: '20px' }}>\n          <Text fontSize=\"48px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </RowFlat>\n        <Row>\n          <Text fontSize=\"24px\">\n            {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol + ' Pool Tokens'}\n          </Text>\n        </Row>\n        <ThemedText.DeprecatedItalic fontSize={12} textAlign=\"left\" padding=\"8px 0 0 0 \">\n          <Trans>\n            Output is estimated. If the price changes by more than {allowedSlippage.toSignificant(4)}% your transaction\n            will revert.\n          </Trans>\n        </ThemedText.DeprecatedItalic>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = (\n    <Trans>\n      Supplying {parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} {currencies[Field.CURRENCY_A]?.symbol} and{' '}\n      {parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} {currencies[Field.CURRENCY_B]?.symbol}\n    </Trans>\n  )\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA)\n      if (newCurrencyIdA === currencyIdB) {\n        navigate(`/add/v2/${currencyIdB}/${currencyIdA}`)\n      } else {\n        navigate(`/add/v2/${newCurrencyIdA}/${currencyIdB}`)\n      }\n    },\n    [currencyIdB, navigate, currencyIdA]\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          navigate(`/add/v2/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          navigate(`/add/v2/${newCurrencyIdB}`)\n        }\n      } else {\n        navigate(`/add/v2/${currencyIdA ? currencyIdA : 'ETH'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, navigate, currencyIdB]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  const { pathname } = useLocation()\n  const isCreate = pathname.includes('/create')\n\n  const addIsUnsupported = useIsSwapUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs creating={isCreate} adding={true} defaultSlippage={DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE} />\n        <Wrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={handleDismissConfirmation}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            content={() => (\n              <ConfirmationModalContent\n                title={noLiquidity ? <Trans>You are creating a pool</Trans> : <Trans>You will receive</Trans>}\n                onDismiss={handleDismissConfirmation}\n                topContent={modalHeader}\n                bottomContent={modalBottom}\n              />\n            )}\n            pendingText={pendingText}\n            currencyToAdd={pair?.liquidityToken}\n          />\n          <AutoColumn gap=\"20px\">\n            {noLiquidity ||\n              (isCreate ? (\n                <ColumnCenter>\n                  <BlueCard>\n                    <AutoColumn gap=\"10px\">\n                      <ThemedText.DeprecatedLink fontWeight={600} color=\"accentAction\">\n                        <Trans>You are the first liquidity provider.</Trans>\n                      </ThemedText.DeprecatedLink>\n                      <ThemedText.DeprecatedLink fontWeight={400} color=\"accentAction\">\n                        <Trans>The ratio of tokens you add will set the price of this pool.</Trans>\n                      </ThemedText.DeprecatedLink>\n                      <ThemedText.DeprecatedLink fontWeight={400} color=\"accentAction\">\n                        <Trans>Once you are happy with the rate click supply to review.</Trans>\n                      </ThemedText.DeprecatedLink>\n                    </AutoColumn>\n                  </BlueCard>\n                </ColumnCenter>\n              ) : (\n                <ColumnCenter>\n                  <BlueCard>\n                    <AutoColumn gap=\"10px\">\n                      <ThemedText.DeprecatedLink fontWeight={400} color=\"accentAction\">\n                        <Trans>\n                          <b>\n                            <Trans>Tip:</Trans>\n                          </b>{' '}\n                          When you add liquidity, you will receive pool tokens representing your position. These tokens\n                          automatically earn fees proportional to your share of the pool, and can be redeemed at any\n                          time.\n                        </Trans>\n                      </ThemedText.DeprecatedLink>\n                    </AutoColumn>\n                  </BlueCard>\n                </ColumnCenter>\n              ))}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A] ?? null}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <Plus size=\"16\" color={theme.textSecondary} />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B] ?? null}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" $borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <ThemedText.DeprecatedSubHeader fontWeight={500} fontSize={14}>\n                      {noLiquidity ? (\n                        <Trans>Initial prices and pool share</Trans>\n                      ) : (\n                        <Trans>Prices and pool share</Trans>\n                      )}\n                    </ThemedText.DeprecatedSubHeader>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" $borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <ButtonPrimary disabled={true}>\n                <ThemedText.DeprecatedMain mb=\"4px\">\n                  <Trans>Unsupported Asset</Trans>\n                </ThemedText.DeprecatedMain>\n              </ButtonPrimary>\n            ) : !account ? (\n              <TraceEvent\n                events={[BrowserEvent.onClick]}\n                name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\n                properties={{ received_swap_quote: false }}\n                element={InterfaceElementName.CONNECT_WALLET_BUTTON}\n              >\n                <ButtonLight onClick={toggleWalletDrawer}>\n                  <Trans>Connect Wallet</Trans>\n                </ButtonLight>\n              </TraceEvent>\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>\n                              <Trans>Approving {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                            </Dots>\n                          ) : (\n                            <Trans>Approve {currencies[Field.CURRENCY_A]?.symbol}</Trans>\n                          )}\n                        </ButtonPrimary>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>\n                              <Trans>Approving {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                            </Dots>\n                          ) : (\n                            <Trans>Approve {currencies[Field.CURRENCY_B]?.symbol}</Trans>\n                          )}\n                        </ButtonPrimary>\n                      )}\n                    </RowBetween>\n                  )}\n                <ButtonError\n                  onClick={() => {\n                    expertMode ? onAdd() : setShowConfirm(true)\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                  error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n                >\n                  <Text fontSize={20} fontWeight={500}>\n                    {error ?? <Trans>Supply</Trans>}\n                  </Text>\n                </ButtonError>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n      <SwitchLocaleLink />\n\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter\n          show={addIsUnsupported}\n          currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\n        />\n      )}\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/utils/calculateGasMargin.ts",[],"/workspace/Physica-Interfae/src/pages/TokenDetails/index.tsx",["3379"],"import TokenDetails from 'components/Tokens/TokenDetails'\nimport { TokenDetailsPageSkeleton } from 'components/Tokens/TokenDetails/Skeleton'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { useTokenPriceQuery, useTokenQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { TimePeriod, toHistoryDuration, validateUrlChainParam } from 'graphql/data/util'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { useAtom } from 'jotai'\nimport { atomWithStorage } from 'jotai/utils'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nexport const pageTimePeriodAtom = atomWithStorage<TimePeriod>('tokenDetailsTimePeriod', TimePeriod.DAY)\n\nexport default function TokenDetailsPage() {\n  const { tokenAddress, chainName } = useParams<{\n    tokenAddress: string\n    chainName?: string\n  }>()\n  const chain = validateUrlChainParam(chainName)\n  const isNative = tokenAddress === NATIVE_CHAIN_ID\n  const [timePeriod, setTimePeriod] = useAtom(pageTimePeriodAtom)\n  const [detailedTokenAddress, duration] = useMemo(\n    /* tokenAddress will always be defined in the path for for this page to render, but useParams will always\n      return optional arguments; nullish coalescing operator is present here to appease typechecker */\n    () => [isNative ? getNativeTokenDBAddress(chain) : tokenAddress ?? '', toHistoryDuration(timePeriod)],\n    [chain, isNative, timePeriod, tokenAddress]\n  )\n\n  const parsedQs = useParsedQueryString()\n\n  const parsedInputTokenAddress: string | undefined = useMemo(() => {\n    return typeof parsedQs.inputCurrency === 'string' ? (parsedQs.inputCurrency as string) : undefined\n  }, [parsedQs])\n\n  const { data: tokenQuery } = useTokenQuery({\n    variables: {\n      address: detailedTokenAddress,\n      chain,\n    },\n    errorPolicy: 'all',\n  })\n\n  const { data: tokenPriceQuery } = useTokenPriceQuery({\n    variables: {\n      address: detailedTokenAddress,\n      chain,\n      duration,\n    },\n    errorPolicy: 'all',\n  })\n\n  // Saves already-loaded chart data into state to display while tokenPriceQuery is undefined timePeriod input changes\n  const [currentPriceQuery, setCurrentPriceQuery] = useState(tokenPriceQuery)\n  useEffect(() => {\n    if (tokenPriceQuery) setCurrentPriceQuery(tokenPriceQuery)\n  }, [setCurrentPriceQuery, tokenPriceQuery])\n\n  if (!tokenQuery) return <TokenDetailsPageSkeleton />\n\n  return (\n    <TokenDetails\n      urlAddress={tokenAddress}\n      chain={chain}\n      tokenQuery={tokenQuery}\n      tokenPriceQuery={currentPriceQuery}\n      onChangeTimePeriod={setTimePeriod}\n      inputTokenAddress={parsedInputTokenAddress}\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/tracing/trace.ts",[],"/workspace/Physica-Interfae/src/state/wallets/reducer.ts",[],"/workspace/Physica-Interfae/src/constants/providers.ts",[],"/workspace/Physica-Interfae/src/hooks/useParsedQueryString.ts",[],"/workspace/Physica-Interfae/src/state/mint/v3/reducer.ts",["3380"],"import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  Field,\n  resetMintState,\n  setFullRange,\n  typeInput,\n  typeLeftRangeInput,\n  typeRightRangeInput,\n  typeStartPriceInput,\n} from './actions'\n\ntype FullRange = true\n\ninterface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string | FullRange\n  readonly rightRangeTypedValue: string | FullRange\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(setFullRange, (state) => {\n      return {\n        ...state,\n        leftRangeTypedValue: true,\n        rightRangeTypedValue: true,\n      }\n    })\n    .addCase(typeStartPriceInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        startPriceTypedValue: typedValue,\n      }\n    })\n    .addCase(typeLeftRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        leftRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeRightRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        rightRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n        }\n      }\n    })\n)\n","/workspace/Physica-Interfae/src/theme/components/index.tsx",["3381","3382","3383"],"import { Trans } from '@lingui/macro'\nimport { outboundLink } from 'components/analytics'\nimport { MOBILE_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport React, {\n  forwardRef,\n  HTMLProps,\n  PropsWithChildren,\n  ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react'\nimport { ArrowLeft, CheckCircle, Copy, ExternalLink as ExternalLinkIconFeather, Icon, X } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport styled, { css, keyframes } from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { ReactComponent as TooltipTriangle } from '../../assets/svg/tooltip_triangle.svg'\nimport { anonymizeLink } from '../../utils/anonymizeLink'\n\n// TODO: Break this file into a components folder\n\nexport const CloseIcon = styled(X)<{ onClick: () => void }>`\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n`\n\n// for wrapper react feather icons\nexport const IconWrapper = styled.div<{ stroke?: string; size?: string; marginRight?: string; marginLeft?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${({ size }) => size ?? '20px'};\n  height: ${({ size }) => size ?? '20px'};\n  margin-right: ${({ marginRight }) => marginRight ?? 0};\n  margin-left: ${({ marginLeft }) => marginLeft ?? 0};\n  & > * {\n    stroke: ${({ theme, stroke }) => stroke ?? theme.accentActive};\n  }\n`\n\n// A button that triggers some onClick result, but looks like a link.\nexport const LinkStyledButton = styled.button<{ disabled?: boolean }>`\n  border: none;\n  text-decoration: none;\n  background: none;\n\n  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};\n  color: ${({ theme, disabled }) => (disabled ? theme.textSecondary : theme.accentAction)};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: ${({ disabled }) => (disabled ? null : 'underline')};\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: ${({ disabled }) => (disabled ? null : 'underline')};\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport const ButtonText = styled.button`\n  outline: none;\n  border: none;\n  font-size: inherit;\n  padding: 0;\n  margin: 0;\n  background: none;\n  cursor: pointer;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ease-in-out;\n  transition-property: opacity, color, background-color;\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  :focus {\n    text-decoration: underline;\n  }\n`\n\nexport const EllipsisStyle = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nexport const ClickableStyle = css`\n  text-decoration: none;\n  cursor: pointer;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n  :active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n`\n\nexport const LinkStyle = css`\n  color: ${({ theme }) => theme.accentAction};\n  stroke: ${({ theme }) => theme.accentAction};\n  font-weight: 500;\n`\n\n// An internal link from the react-router-dom library that is correctly styled\nexport const StyledInternalLink = styled(Link)`\n  ${ClickableStyle}\n  ${LinkStyle}\n`\n\nconst LinkIconWrapper = styled.a`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n`\n\nconst IconStyle = css`\n  height: 16px;\n  width: 18px;\n  margin-left: 10px;\n`\n\nconst LinkIcon = styled(ExternalLinkIconFeather)`\n  ${IconStyle}\n  ${ClickableStyle}\n  ${LinkStyle}\n`\n\nconst CopyIcon = styled(Copy)`\n  ${IconStyle}\n  ${ClickableStyle}\n  ${LinkStyle}\n  stroke: ${({ theme }) => theme.accentAction};\n`\n\nconst rotateImg = keyframes`\n  0% {\n    transform: perspective(1000px) rotateY(0deg);\n  }\n\n  100% {\n    transform: perspective(1000px) rotateY(360deg);\n  }\n`\n\nexport const UniTokenAnimated = styled.img`\n  animation: ${rotateImg} 5s cubic-bezier(0.83, 0, 0.17, 1) infinite;\n  padding: 2rem 0 0 0;\n  filter: drop-shadow(0px 2px 4px rgba(0, 0, 0, 0.15));\n`\n\nfunction handleClickExternalLink(event: React.MouseEvent<HTMLAnchorElement>) {\n  const { target, href } = event.currentTarget\n\n  const anonymizedHref = anonymizeLink(href)\n\n  // don't prevent default, don't redirect if it's a new tab\n  if (target === '_blank' || event.ctrlKey || event.metaKey) {\n    outboundLink({ label: anonymizedHref }, () => {\n      console.debug('Fired outbound link event', anonymizedHref)\n    })\n  } else {\n    event.preventDefault()\n    // send a ReactGA event and then trigger a location change\n    outboundLink({ label: anonymizedHref }, () => {\n      window.location.href = anonymizedHref\n    })\n  }\n}\n\nconst StyledLink = styled.a`\n  ${ClickableStyle}\n  ${LinkStyle}\n`\n\nexport const StyledRouterLink = styled(Link)`\n  ${ClickableStyle}\n  ${LinkStyle}\n`\n\n/**\n * Outbound link that handles firing google analytics events\n */\nexport function ExternalLink({\n  target = '_blank',\n  href,\n  rel = 'noopener noreferrer',\n  ...rest\n}: Omit<HTMLProps<HTMLAnchorElement>, 'as' | 'ref' | 'onClick'> & { href: string }) {\n  return <StyledLink target={target} rel={rel} href={href} onClick={handleClickExternalLink} {...rest} />\n}\n\nexport function ExternalLinkIcon({\n  target = '_blank',\n  href,\n  rel = 'noopener noreferrer',\n  ...rest\n}: Omit<HTMLProps<HTMLAnchorElement>, 'as' | 'ref' | 'onClick'> & { href: string }) {\n  return (\n    <LinkIconWrapper target={target} rel={rel} href={href} onClick={handleClickExternalLink} {...rest}>\n      <LinkIcon />\n    </LinkIconWrapper>\n  )\n}\n\nconst TOOLTIP_WIDTH = 60\n\nconst ToolTipWrapper = styled.div<{ isCopyContractTooltip?: boolean; tooltipX?: number }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: absolute;\n  left: ${({ isCopyContractTooltip, tooltipX }) =>\n    isCopyContractTooltip && (tooltipX ? `${tooltipX - TOOLTIP_WIDTH / 2}px` : '50%')};\n  transform: translate(5px, 32px);\n  z-index: ${Z_INDEX.tooltip};\n`\n\nconst StyledTooltipTriangle = styled(TooltipTriangle)`\n  path {\n    fill: ${({ theme }) => theme.black};\n  }\n`\n\nconst CopiedTooltip = styled.div<{ isCopyContractTooltip?: boolean }>`\n  background-color: ${({ theme }) => theme.black};\n  text-align: center;\n  justify-content: center;\n  width: ${({ isCopyContractTooltip }) => !isCopyContractTooltip && `${TOOLTIP_WIDTH}px`};\n  height: ${({ isCopyContractTooltip }) => !isCopyContractTooltip && '32px'};\n  line-height: ${({ isCopyContractTooltip }) => !isCopyContractTooltip && '32px'};\n\n  padding: ${({ isCopyContractTooltip }) => isCopyContractTooltip && '8px'};\n  border-radius: 8px;\n\n  color: ${({ theme }) => theme.white};\n  font-size: 12px;\n`\n\nfunction Tooltip({ isCopyContractTooltip, tooltipX }: { isCopyContractTooltip: boolean; tooltipX?: number }) {\n  return (\n    <ToolTipWrapper isCopyContractTooltip={isCopyContractTooltip} tooltipX={tooltipX}>\n      <StyledTooltipTriangle />\n      <CopiedTooltip isCopyContractTooltip={isCopyContractTooltip}>Copied!</CopiedTooltip>\n    </ToolTipWrapper>\n  )\n}\n\nconst CopyIconWrapper = styled.div`\n  text-decoration: none;\n  cursor: pointer;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n`\n\nexport function CopyToClipboard({ toCopy, children }: PropsWithChildren<{ toCopy: string }>) {\n  const [isCopied, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(toCopy)\n  }, [toCopy, setCopied])\n  return (\n    <CopyIconWrapper onClick={copy}>\n      {children}\n      {isCopied && <Tooltip isCopyContractTooltip={false} />}\n    </CopyIconWrapper>\n  )\n}\n\nexport function CopyLinkIcon({ toCopy }: { toCopy: string }) {\n  return (\n    <CopyToClipboard toCopy={toCopy}>\n      <CopyIcon />\n    </CopyToClipboard>\n  )\n}\n\nconst FullAddress = styled.span`\n  @media only screen and (max-width: ${MOBILE_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\nconst TruncatedAddress = styled.span`\n  display: none;\n  @media only screen and (max-width: ${MOBILE_MEDIA_BREAKPOINT}) {\n    display: flex;\n  }\n`\n\nconst CopyAddressRow = styled.div<{ isClicked: boolean }>`\n  ${ClickableStyle}\n  color: inherit;\n  stroke: inherit;\n  cursor: pointer;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  gap: 6px;\n  ${({ theme, isClicked }) => isClicked && `opacity: ${theme.opacity.click} !important`}\n`\n\nconst CopyContractAddressWrapper = styled.div`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n`\n\nexport function CopyContractAddress({ address }: { address: string }) {\n  const [isCopied, setCopied] = useCopyClipboard()\n  const [tooltipX, setTooltipX] = useState<number | undefined>()\n  const copy = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      setTooltipX(e.clientX)\n      setCopied(address)\n    },\n    [address, setCopied]\n  )\n\n  const truncated = `${address.slice(0, 4)}...${address.slice(-3)}`\n  return (\n    <CopyContractAddressWrapper onClick={copy}>\n      <CopyAddressRow isClicked={isCopied}>\n        <FullAddress>{address}</FullAddress>\n        <TruncatedAddress>{truncated}</TruncatedAddress>\n        <Copy size={14} />\n      </CopyAddressRow>\n      {isCopied && <Tooltip isCopyContractTooltip tooltipX={tooltipX} />}\n    </CopyContractAddressWrapper>\n  )\n}\n\nconst CopyHelperContainer = styled.div<{ clicked: boolean; color?: string; gap: number }>`\n  ${ClickableStyle}\n  display: flex;\n  flex-direction: row;\n  gap: ${({ gap }) => gap + 'px'};\n  align-items: center;\n  color: ${({ color }) => color ?? 'inherit'};\n`\n\nconst CopyHelperText = styled.div<{ fontSize?: number; offset: number }>`\n  ${EllipsisStyle}\n  ${({ fontSize }) => (fontSize ? 'font-size: ' + fontSize + 'px' : 'inherit')};\n  max-width: calc(100% - ${({ offset }) => offset + 'px'});\n`\n\nconst StyledCheckCircle = styled(CheckCircle)`\n  color: ${({ theme }) => theme.accentSuccess};\n  stroke-width: 1.5px;\n`\n\nfunction isEllipsisActive(element: HTMLDivElement | null) {\n  return Boolean(element && element.offsetWidth < element.scrollWidth)\n}\n\ninterface CopyHelperProps {\n  InitialIcon?: Icon | null\n  CopiedIcon?: Icon\n  toCopy: string\n  color?: string\n  fontSize?: number\n  iconSize?: number\n  gap?: number\n  iconPosition?: 'left' | 'right'\n  iconColor?: string\n  children: ReactNode\n}\n\nexport type CopyHelperRefType = { forceCopy: () => void }\nexport const CopyHelper = forwardRef<CopyHelperRefType, CopyHelperProps>(\n  (\n    {\n      InitialIcon = Copy,\n      CopiedIcon = StyledCheckCircle,\n      toCopy,\n      color,\n      fontSize,\n      iconSize = 20,\n      gap = 4,\n      iconPosition = 'left',\n      iconColor = 'currentColor',\n      children,\n    }: CopyHelperProps,\n    ref\n  ) => {\n    const [isCopied, setCopied] = useCopyClipboard()\n    const copy = useCallback(() => {\n      setCopied(toCopy)\n    }, [toCopy, setCopied])\n\n    useImperativeHandle(ref, () => ({\n      forceCopy() {\n        copy()\n      },\n    }))\n\n    // Detects is text is ellipsing in order to shorten gap caused by extra space browsers add after ... chars\n    const textRef = useRef<HTMLDivElement>(null)\n    const isEllipsis = isEllipsisActive(textRef.current)\n    const displayGap = isEllipsis ? gap - 4 : gap\n\n    const [isHover, setIsHover] = useState(false)\n    const onHover = useCallback(() => setIsHover(true), [])\n    const offHover = useCallback(() => setIsHover(false), [])\n\n    // Copy-helpers w/ left icon always show icon & display \"Copied!\" in copied state\n    // Copy-helpers w/ right icon show icon on hover & do not change text\n    const showIcon = Boolean(iconPosition === 'left' || isHover || isCopied)\n    const Icon = isCopied ? CopiedIcon : showIcon ? InitialIcon : null\n    const offset = showIcon ? gap + iconSize : 0\n    return (\n      <CopyHelperContainer\n        onClick={copy}\n        color={color}\n        clicked={isCopied}\n        gap={displayGap}\n        onMouseEnter={onHover}\n        onMouseLeave={offHover}\n      >\n        {iconPosition === 'left' && Icon && <Icon size={iconSize} strokeWidth={1.5} color={iconColor} />}\n        <CopyHelperText ref={textRef} fontSize={fontSize} offset={offset}>\n          {isCopied && iconPosition === 'left' ? <Trans>Copied!</Trans> : children}\n        </CopyHelperText>\n        <div style={{ clear: 'both' }} />\n        {iconPosition === 'right' && Icon && <Icon size={iconSize} strokeWidth={1.5} color={iconColor} />}\n      </CopyHelperContainer>\n    )\n  }\n)\nCopyHelper.displayName = 'CopyHelper'\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\nconst SpinnerCss = css`\n  animation: 2s ${rotate} linear infinite;\n`\n\nconst Spinner = styled.img`\n  ${SpinnerCss}\n  width: 16px;\n  height: 16px;\n`\nexport const SpinnerSVG = styled.svg`\n  ${SpinnerCss}\n`\n\nconst BackArrowLink = styled(StyledInternalLink)`\n  color: ${({ theme }) => theme.textPrimary};\n`\nexport function BackArrow({ to }: { to: string }) {\n  return (\n    <BackArrowLink to={to}>\n      <ArrowLeft />\n    </BackArrowLink>\n  )\n}\n\nexport const CustomLightSpinner = styled(Spinner)<{ size: string }>`\n  height: ${({ size }) => size};\n  width: ${({ size }) => size};\n`\n\nexport const HideSmall = styled.span`\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    display: none;\n  `};\n`\n\nexport const HideExtraSmall = styled.span`\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToExtraSmall`\n    display: none;\n  `};\n`\n\nexport const SmallOnly = styled.span`\n  display: none;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    display: block;\n  `};\n`\n\nexport const MediumOnly = styled.span`\n  display: none;\n  @media (max-width: ${({ theme }) => theme.breakpoint.md}px) {\n    display: block;\n  }\n`\n\nexport const Separator = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: ${({ theme }) => theme.backgroundOutline};\n`\n\nexport const GlowEffect = styled.div`\n  border-radius: 32px;\n  box-shadow: ${({ theme }) => theme.networkDefaultShadow};\n`\n","/workspace/Physica-Interfae/src/lib/hooks/useTokenList/fetchTokenList.ts",["3384"],"import type { TokenList } from '@uniswap/token-lists'\nimport { validateTokenList } from '@uniswap/widgets'\nimport contenthashToUri from 'lib/utils/contenthashToUri'\nimport parseENSAddress from 'lib/utils/parseENSAddress'\nimport uriToHttp from 'lib/utils/uriToHttp'\n\nexport const DEFAULT_TOKEN_LIST = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org'\n\nconst listCache = new Map<string, TokenList>()\n\n/**\n * Fetches and validates a token list.\n * For a given token list URL, we try to fetch the list from all the possible HTTP URLs.\n * For example, IPFS URLs can be fetched through multiple gateways.\n */\nexport default async function fetchTokenList(\n  listUrl: string,\n  resolveENSContentHash: (ensName: string) => Promise<string>,\n  skipValidation?: boolean\n): Promise<TokenList> {\n  const cached = listCache?.get(listUrl) // avoid spurious re-fetches\n  if (cached) {\n    return cached\n  }\n\n  let urls: string[]\n  const parsedENS = parseENSAddress(listUrl)\n  if (parsedENS) {\n    let contentHashUri\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\n    } catch (error) {\n      const message = `failed to resolve ENS name: ${parsedENS.ensName}`\n      console.debug(message, error)\n      throw new Error(message)\n    }\n    let translatedUri\n    try {\n      translatedUri = contenthashToUri(contentHashUri)\n    } catch (error) {\n      const message = `failed to translate contenthash to URI: ${contentHashUri}`\n      console.debug(message, error)\n      throw new Error(message)\n    }\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\n  } else {\n    urls = uriToHttp(listUrl)\n  }\n\n  if (urls.length === 0) {\n    throw new Error('Unrecognized list URL protocol.')\n  }\n\n  // Try each of the derived URLs until one succeeds.\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    let response\n    try {\n      response = await fetch(url, { credentials: 'omit' })\n    } catch (error) {\n      console.debug(`failed to fetch list: ${listUrl} (${url})`, error)\n      continue\n    }\n\n    if (!response.ok) {\n      console.debug(`failed to fetch list ${listUrl} (${url})`, response.statusText)\n      continue\n    }\n\n    try {\n      // The content of the result is sometimes invalid even with a 200 status code.\n      // A response can be invalid if it's not a valid JSON or if it doesn't match the TokenList schema.\n      const json = await response.json()\n      const list = skipValidation ? json : await validateTokenList(json)\n      listCache?.set(listUrl, list)\n      return list\n    } catch (error) {\n      console.debug(`failed to parse and validate list response: ${listUrl} (${url})`, error)\n      continue\n    }\n  }\n\n  throw new Error(`No valid token list found at any URLs derived from ${listUrl}.`)\n}\n","/workspace/Physica-Interfae/src/lib/utils/resolveENSContentHash.ts",[],"/workspace/Physica-Interfae/src/featureFlags/flags/featureFlags.ts",[],"/workspace/Physica-Interfae/src/hooks/useOrderedConnections.ts",[],"/workspace/Physica-Interfae/src/hooks/useEagerlyConnect.ts",[],"/workspace/Physica-Interfae/src/components/analytics/GoogleAnalyticsProvider.tsx",["3385","3386"],"import ReactGA from 'react-ga4'\nimport { GaOptions, InitOptions, UaEventOptions } from 'react-ga4/types/ga4'\n\n/**\n * Google Analytics Provider containing all methods used throughout app to log events to Google Analytics.\n */\nexport default class GoogleAnalyticsProvider {\n  public sendEvent(event: string | UaEventOptions, params?: any) {\n    ReactGA.event(event, params)\n  }\n\n  public initialize(\n    GA_MEASUREMENT_ID: InitOptions[] | string,\n    options?: {\n      legacyDimensionMetric?: boolean\n      nonce?: string\n      testMode?: boolean\n      gaOptions?: GaOptions | any\n      gtagOptions?: any\n    }\n  ) {\n    ReactGA.initialize(GA_MEASUREMENT_ID, options)\n  }\n\n  public set(fieldsObject: any) {\n    ReactGA.set(fieldsObject)\n  }\n\n  public outboundLink(\n    {\n      label,\n    }: {\n      label: string\n    },\n    hitCallback: () => unknown\n  ) {\n    ReactGA.outboundLink({ label }, hitCallback)\n  }\n\n  public pageview(path?: string, _?: string[], title?: string) {\n    ReactGA.pageview(path, _, title)\n  }\n\n  public ga(...args: any[]) {\n    ReactGA.ga(...args)\n  }\n\n  public gaCommandSendTiming(timingCategory: any, timingVar: any, timingValue: any, timingLabel: any) {\n    ReactGA._gaCommandSendTiming(timingCategory, timingVar, timingValue, timingLabel)\n  }\n}\n","/workspace/Physica-Interfae/src/state/connection/hooks.ts",[],"/workspace/Physica-Interfae/src/components/TopLevelModals/index.tsx",[],"/workspace/Physica-Interfae/src/state/lists/wrappedTokenInfo.ts",[],"/workspace/Physica-Interfae/src/constants/tokens.ts",["3387","3388","3389","3390","3391","3392","3393","3394","3395","3396","3397","3398","3399","3400","3401","3402","3403","3404","3405","3406","3407","3408","3409","3410","3411","3412","3413","3414","3415","3416","3417","3418","3419","3420","3421","3422","3423","3424","3425","3426","3427","3428","3429","3430","3431","3432","3433","3434","3435","3436","3437","3438","3439","3440","3441","3442","3443","3444","3445","3446","3447","3448"],"import { Currency, Ether, NativeCurrency, Token, WETH9 } from '@uniswap/sdk-core'\nimport { SupportedChainId } from 'constants/chains'\nimport invariant from 'tiny-invariant'\n\nimport { UNI_ADDRESS } from './addresses'\n\nexport const NATIVE_CHAIN_ID = 'NATIVE'\n\n// When decimals are not specified for an ERC20 token\n// use default ERC20 token decimals as specified here:\n// https://docs.openzeppelin.com/contracts/3.x/erc20\nexport const DEFAULT_ERC20_DECIMALS = 18\n\nexport const USDC_MAINNET = new Token(\n  SupportedChainId.MAINNET,\n  '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  6,\n  'USDC',\n  'USD//C'\n)\nconst USDC_GOERLI = new Token(\n  SupportedChainId.GOERLI,\n  '0x07865c6e87b9f70255377e024ace6630c1eaa37f',\n  6,\n  'USDC',\n  'USD//C'\n)\nexport const USDC_OPTIMISM = new Token(\n  SupportedChainId.OPTIMISM,\n  '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\n  6,\n  'USDC',\n  'USD//C'\n)\nconst USDC_OPTIMISM_GOERLI = new Token(\n  SupportedChainId.OPTIMISM_GOERLI,\n  '0x7E07E15D2a87A24492740D16f5bdF58c16db0c4E',\n  6,\n  'USDC',\n  'USD//C'\n)\nexport const USDC_ARBITRUM = new Token(\n  SupportedChainId.ARBITRUM_ONE,\n  '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  6,\n  'USDC',\n  'USD//C'\n)\nexport const USDC_ARBITRUM_GOERLI = new Token(\n  SupportedChainId.ARBITRUM_GOERLI,\n  '0x8FB1E3fC51F3b789dED7557E680551d93Ea9d892',\n  6,\n  'USDC',\n  'USD//C'\n)\nexport const USDC_POLYGON = new Token(\n  SupportedChainId.POLYGON,\n  '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n  6,\n  'USDC',\n  'USD//C'\n)\nconst USDC_POLYGON_MUMBAI = new Token(\n  SupportedChainId.POLYGON_MUMBAI,\n  '0xe11a86849d99f524cac3e7a0ec1241828e332c62',\n  6,\n  'USDC',\n  'USD//C'\n)\nexport const PORTAL_USDC_CELO = new Token(\n  SupportedChainId.CELO,\n  '0x37f750B7cC259A2f741AF45294f6a16572CF5cAd',\n  6,\n  'USDCet',\n  'USDC (Portal from Ethereum)'\n)\nexport const AMPL = new Token(\n  SupportedChainId.MAINNET,\n  '0xD46bA6D942050d489DBd938a2C909A5d5039A161',\n  9,\n  'AMPL',\n  'Ampleforth'\n)\nexport const DAI = new Token(\n  SupportedChainId.MAINNET,\n  '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  18,\n  'DAI',\n  'Dai Stablecoin'\n)\nexport const DAI_ARBITRUM_ONE = new Token(\n  SupportedChainId.ARBITRUM_ONE,\n  '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  18,\n  'DAI',\n  'Dai stable coin'\n)\nexport const DAI_OPTIMISM = new Token(\n  SupportedChainId.OPTIMISM,\n  '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  18,\n  'DAI',\n  'Dai stable coin'\n)\nexport const DAI_POLYGON = new Token(\n  SupportedChainId.POLYGON,\n  '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n  18,\n  'DAI',\n  'Dai Stablecoin'\n)\nexport const USDT_POLYGON = new Token(\n  SupportedChainId.POLYGON,\n  '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',\n  6,\n  'USDT',\n  'Tether USD'\n)\nexport const USDT_PLANQ = new Token(\n  SupportedChainId.PLANQ,\n  '0xfD6fF17b542260f95660BBD71470Fe6eEC72801D',\n  6,\n  'USDT',\n  'Tether USD'\n)\nexport const USDC_PLANQ = new Token(\n  SupportedChainId.PLANQ,\n  '0xfD6fF17b542260f95660BBD71470Fe6eEC72801D',\n  6,\n  'USDC',\n  'Planq USDC'\n)\nexport const WBTC_POLYGON = new Token(\n  SupportedChainId.POLYGON,\n  '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6',\n  8,\n  'WBTC',\n  'Wrapped BTC'\n)\nexport const USDT = new Token(\n  SupportedChainId.MAINNET,\n  '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n  6,\n  'USDT',\n  'Tether USD'\n)\nexport const USDT_ARBITRUM_ONE = new Token(\n  SupportedChainId.ARBITRUM_ONE,\n  '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\n  6,\n  'USDT',\n  'Tether USD'\n)\nexport const USDT_OPTIMISM = new Token(\n  SupportedChainId.OPTIMISM,\n  '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\n  6,\n  'USDT',\n  'Tether USD'\n)\nexport const WBTC = new Token(\n  SupportedChainId.MAINNET,\n  '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',\n  8,\n  'WBTC',\n  'Wrapped BTC'\n)\nexport const WBTC_ARBITRUM_ONE = new Token(\n  SupportedChainId.ARBITRUM_ONE,\n  '0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f',\n  8,\n  'WBTC',\n  'Wrapped BTC'\n)\nexport const WBTC_OPTIMISM = new Token(\n  SupportedChainId.OPTIMISM,\n  '0x68f180fcCe6836688e9084f035309E29Bf0A2095',\n  8,\n  'WBTC',\n  'Wrapped BTC'\n)\nexport const FEI = new Token(\n  SupportedChainId.MAINNET,\n  '0x956F47F50A910163D8BF957Cf5846D573E7f87CA',\n  18,\n  'FEI',\n  'Fei USD'\n)\nexport const TRIBE = new Token(\n  SupportedChainId.MAINNET,\n  '0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B',\n  18,\n  'TRIBE',\n  'Tribe'\n)\nexport const FRAX = new Token(\n  SupportedChainId.MAINNET,\n  '0x853d955aCEf822Db058eb8505911ED77F175b99e',\n  18,\n  'FRAX',\n  'Frax'\n)\nexport const FXS = new Token(\n  SupportedChainId.MAINNET,\n  '0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0',\n  18,\n  'FXS',\n  'Frax Share'\n)\nexport const renBTC = new Token(\n  SupportedChainId.MAINNET,\n  '0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D',\n  8,\n  'renBTC',\n  'renBTC'\n)\nexport const ETH2X_FLI = new Token(\n  SupportedChainId.MAINNET,\n  '0xAa6E8127831c9DE45ae56bB1b0d4D4Da6e5665BD',\n  18,\n  'ETH2x-FLI',\n  'ETH 2x Flexible Leverage Index'\n)\nexport const sETH2 = new Token(\n  SupportedChainId.MAINNET,\n  '0xFe2e637202056d30016725477c5da089Ab0A043A',\n  18,\n  'sETH2',\n  'StakeWise Staked ETH2'\n)\nexport const rETH2 = new Token(\n  SupportedChainId.MAINNET,\n  '0x20BC832ca081b91433ff6c17f85701B6e92486c5',\n  18,\n  'rETH2',\n  'StakeWise Reward ETH2'\n)\nexport const SWISE = new Token(\n  SupportedChainId.MAINNET,\n  '0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2',\n  18,\n  'SWISE',\n  'StakeWise'\n)\nexport const WETH_POLYGON_MUMBAI = new Token(\n  SupportedChainId.POLYGON_MUMBAI,\n  '0xa6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa',\n  18,\n  'WETH',\n  'Wrapped Ether'\n)\n\nexport const WETH_POLYGON = new Token(\n  SupportedChainId.POLYGON,\n  '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n  18,\n  'WETH',\n  'Wrapped Ether'\n)\nconst CELO_CELO = new Token(SupportedChainId.CELO, '0x471EcE3750Da237f93B8E339c536989b8978a438', 18, 'CELO', 'Celo')\nexport const CUSD_CELO = new Token(\n  SupportedChainId.CELO,\n  '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n  18,\n  'cUSD',\n  'Celo Dollar'\n)\nexport const CEUR_CELO = new Token(\n  SupportedChainId.CELO,\n  '0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73',\n  18,\n  'cEUR',\n  'Celo Euro Stablecoin'\n)\nexport const PORTAL_ETH_CELO = new Token(\n  SupportedChainId.CELO,\n  '0x66803FB87aBd4aaC3cbB3fAd7C3aa01f6F3FB207',\n  18,\n  'ETH',\n  'Portal Ether'\n)\nexport const CMC02_CELO = new Token(\n  SupportedChainId.CELO,\n  '0x32A9FE697a32135BFd313a6Ac28792DaE4D9979d',\n  18,\n  'cMCO2',\n  'Celo Moss Carbon Credit'\n)\nconst CELO_CELO_ALFAJORES = new Token(\n  SupportedChainId.CELO_ALFAJORES,\n  '0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9',\n  18,\n  'CELO',\n  'Celo'\n)\nexport const CUSD_CELO_ALFAJORES = new Token(\n  SupportedChainId.CELO_ALFAJORES,\n  '0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1',\n  18,\n  'CUSD',\n  'Celo Dollar'\n)\nexport const CEUR_CELO_ALFAJORES = new Token(\n  SupportedChainId.CELO_ALFAJORES,\n  '0x10c892A6EC43a53E45D0B916B4b7D383B1b78C0F',\n  18,\n  'CEUR',\n  'Celo Euro Stablecoin'\n)\n\nexport const USDC_BSC = new Token(\n  SupportedChainId.BNB,\n  '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  18,\n  'USDC',\n  'USDC'\n)\n\nexport const USDT_BSC = new Token(\n  SupportedChainId.BNB,\n  '0x55d398326f99059fF775485246999027B3197955',\n  18,\n  'USDT',\n  'USDT'\n)\n\nexport const ETH_BSC = new Token(\n  SupportedChainId.BNB,\n  '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  18,\n  'ETH',\n  'Ethereum'\n)\n\nexport const MATIC_BSC = new Token(\n  SupportedChainId.BNB,\n  '0xCC42724C6683B7E57334c4E856f4c9965ED682bD',\n  18,\n  'MATIC',\n  'Matic'\n)\n\nexport const FRAX_BSC = new Token(\n  SupportedChainId.BNB,\n  '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\n  18,\n  'FRAX',\n  'FRAX'\n)\n\nexport const BTC_BSC = new Token(SupportedChainId.BNB, '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18, 'BTCB', 'BTCB')\n\nexport const CAKE_BSC = new Token(\n  SupportedChainId.BNB,\n  '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n  18,\n  'CAKE',\n  'Cake'\n)\n\nexport const BUSD_BSC = new Token(\n  SupportedChainId.BNB,\n  '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n  18,\n  'BUSD',\n  'BUSD'\n)\n\nexport const DAI_BSC = new Token(SupportedChainId.BNB, '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3', 18, 'DAI', 'DAI')\n\nexport const UNI: { [chainId: number]: Token } = {\n  [SupportedChainId.MAINNET]: new Token(SupportedChainId.MAINNET, UNI_ADDRESS[1], 18, 'UNI', 'Uniswap'),\n  [SupportedChainId.GOERLI]: new Token(SupportedChainId.GOERLI, UNI_ADDRESS[5], 18, 'UNI', 'Uniswap'),\n}\nconst PLANQ_COIN = new Token(SupportedChainId.PLANQ, '0x5EBCdf1De1781e8B5D41c016B0574aD53E2F6E1A', 18, 'PLANQ', 'Planq')\nexport const WRAPPED_NATIVE_CURRENCY: { [chainId: number]: Token | undefined } = {\n  ...(WETH9 as Record<SupportedChainId, Token>),\n  [SupportedChainId.OPTIMISM]: new Token(\n    SupportedChainId.OPTIMISM,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [SupportedChainId.OPTIMISM_GOERLI]: new Token(\n    SupportedChainId.OPTIMISM_GOERLI,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [SupportedChainId.ARBITRUM_ONE]: new Token(\n    SupportedChainId.ARBITRUM_ONE,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [SupportedChainId.ARBITRUM_GOERLI]: new Token(\n    SupportedChainId.ARBITRUM_GOERLI,\n    '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [SupportedChainId.POLYGON]: new Token(\n    SupportedChainId.POLYGON,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC'\n  ),\n  [SupportedChainId.POLYGON_MUMBAI]: new Token(\n    SupportedChainId.POLYGON_MUMBAI,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC'\n  ),\n  [SupportedChainId.CELO]: new Token(\n    SupportedChainId.CELO,\n    '0x471ece3750da237f93b8e339c536989b8978a438',\n    18,\n    'CELO',\n    'Celo native asset'\n  ),\n  [SupportedChainId.CELO_ALFAJORES]: new Token(\n    SupportedChainId.CELO_ALFAJORES,\n    '0xf194afdf50b03e69bd7d057c1aa9e10c9954e4c9',\n    18,\n    'CELO',\n    'Celo native asset'\n  ),\n  [SupportedChainId.BNB]: new Token(\n    SupportedChainId.BNB,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [SupportedChainId.PLANQ]: new Token(\n    SupportedChainId.PLANQ,\n    '0x5EBCdf1De1781e8B5D41c016B0574aD53E2F6E1A',\n    18,\n    'WPLANQ',\n    'Wrapped PLANQ'\n  ),\n}\n\nexport function isCelo(chainId: number): chainId is SupportedChainId.CELO | SupportedChainId.CELO_ALFAJORES {\n  return chainId === SupportedChainId.CELO_ALFAJORES || chainId === SupportedChainId.CELO\n}\n\nfunction getCeloNativeCurrency(chainId: number) {\n  switch (chainId) {\n    case SupportedChainId.CELO_ALFAJORES:\n      return CELO_CELO_ALFAJORES\n    case SupportedChainId.CELO:\n      return CELO_CELO\n    default:\n      throw new Error('Not celo')\n  }\n}\n\nfunction isPLANQ(chainId: number): chainId is SupportedChainId.PLANQ | SupportedChainId.PLANQ {\n  return chainId === SupportedChainId.PLANQ || chainId === SupportedChainId.PLANQ\n}\n\nclass PlanqNativeCurrency extends NativeCurrency {\n  equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n\n  get wrapped(): Token {\n    if (!isPLANQ(this.chainId)) throw new Error('Not planq')\n    const wrapped = WRAPPED_NATIVE_CURRENCY[this.chainId]\n    invariant(wrapped instanceof Token)\n    return wrapped\n  }\n\n  public constructor(chainId: number) {\n    if (!isPLANQ(chainId)) throw new Error('Not planq')\n    super(chainId, 18, 'PLANQ', 'Planq')\n  }\n}\n\nfunction isMatic(chainId: number): chainId is SupportedChainId.POLYGON | SupportedChainId.POLYGON_MUMBAI {\n  return chainId === SupportedChainId.POLYGON_MUMBAI || chainId === SupportedChainId.POLYGON\n}\n\nclass MaticNativeCurrency extends NativeCurrency {\n  equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n\n  get wrapped(): Token {\n    if (!isMatic(this.chainId)) throw new Error('Not matic')\n    const wrapped = WRAPPED_NATIVE_CURRENCY[this.chainId]\n    invariant(wrapped instanceof Token)\n    return wrapped\n  }\n\n  public constructor(chainId: number) {\n    if (!isMatic(chainId)) throw new Error('Not matic')\n    super(chainId, 18, 'MATIC', 'Polygon Matic')\n  }\n}\n\nfunction isBsc(chainId: number): chainId is SupportedChainId.BNB {\n  return chainId === SupportedChainId.BNB\n}\n\nclass BscNativeCurrency extends NativeCurrency {\n  equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n\n  get wrapped(): Token {\n    if (!isBsc(this.chainId)) throw new Error('Not bnb')\n    const wrapped = WRAPPED_NATIVE_CURRENCY[this.chainId]\n    invariant(wrapped instanceof Token)\n    return wrapped\n  }\n\n  public constructor(chainId: number) {\n    if (!isBsc(chainId)) throw new Error('Not bnb')\n    super(chainId, 18, 'BNB', 'BNB')\n  }\n}\n\nclass ExtendedEther extends Ether {\n  public get wrapped(): Token {\n    const wrapped = WRAPPED_NATIVE_CURRENCY[this.chainId]\n    if (wrapped) return wrapped\n    throw new Error(`Unsupported chain ID: ${this.chainId}`)\n  }\n\n  private static _cachedExtendedEther: { [chainId: number]: NativeCurrency } = {}\n\n  public static onChain(chainId: number): ExtendedEther {\n    return this._cachedExtendedEther[chainId] ?? (this._cachedExtendedEther[chainId] = new ExtendedEther(chainId))\n  }\n}\n\nconst cachedNativeCurrency: { [chainId: number]: NativeCurrency | Token } = {}\nexport function nativeOnChain(chainId: number): NativeCurrency | Token {\n  if (cachedNativeCurrency[chainId]) return cachedNativeCurrency[chainId]\n  let nativeCurrency: NativeCurrency | Token\n  if (isMatic(chainId)) {\n    nativeCurrency = new MaticNativeCurrency(chainId)\n  } else if (isCelo(chainId)) {\n    nativeCurrency = getCeloNativeCurrency(chainId)\n  } else if (isBsc(chainId)) {\n    nativeCurrency = new BscNativeCurrency(chainId)\n  } else if (isPLANQ(chainId)) {\n    nativeCurrency = new PlanqNativeCurrency(chainId)\n  } else {\n    nativeCurrency = ExtendedEther.onChain(chainId)\n  }\n  return (cachedNativeCurrency[chainId] = nativeCurrency)\n}\n\nexport const TOKEN_SHORTHANDS: { [shorthand: string]: { [chainId in SupportedChainId]?: string } } = {\n  USDC: {\n    [SupportedChainId.MAINNET]: USDC_MAINNET.address,\n    [SupportedChainId.ARBITRUM_ONE]: USDC_ARBITRUM.address,\n    [SupportedChainId.ARBITRUM_GOERLI]: USDC_ARBITRUM_GOERLI.address,\n    [SupportedChainId.OPTIMISM]: USDC_OPTIMISM.address,\n    [SupportedChainId.OPTIMISM_GOERLI]: USDC_OPTIMISM_GOERLI.address,\n    [SupportedChainId.POLYGON]: USDC_POLYGON.address,\n    [SupportedChainId.POLYGON_MUMBAI]: USDC_POLYGON_MUMBAI.address,\n    [SupportedChainId.BNB]: USDC_BSC.address,\n    [SupportedChainId.CELO]: PORTAL_USDC_CELO.address,\n    [SupportedChainId.CELO_ALFAJORES]: PORTAL_USDC_CELO.address,\n    [SupportedChainId.GOERLI]: USDC_GOERLI.address,\n  },\n}\n","/workspace/Physica-Interfae/src/utils/constructSameAddressMap.ts",["3449"],"import { SupportedChainId } from 'constants/chains'\n\nconst DEFAULT_NETWORKS = [SupportedChainId.MAINNET, SupportedChainId.GOERLI]\n\nexport function constructSameAddressMap<T extends string>(\n  address: T,\n  additionalNetworks: SupportedChainId[] = []\n): { [chainId: number]: T } {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<{ [chainId: number]: T }>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n","/workspace/Physica-Interfae/src/types/tokens.ts",[],"/workspace/Physica-Interfae/src/pages/AddLiquidity/styled.tsx",[],"/workspace/Physica-Interfae/src/nft/pages/collection/index.tsx",[],"/workspace/Physica-Interfae/src/nft/pages/explore/index.tsx",[],"/workspace/Physica-Interfae/src/nft/pages/profile/shared.ts",[],"/workspace/Physica-Interfae/src/utils/maxAmountSpend.ts",["3450"],"import { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nconst MIN_NATIVE_CURRENCY_FOR_GAS: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount<Currency>): CurrencyAmount<Currency> | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency.isNative) {\n    if (JSBI.greaterThan(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)) {\n      return CurrencyAmount.fromRawAmount(\n        currencyAmount.currency,\n        JSBI.subtract(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)\n      )\n    } else {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.BigInt(0))\n    }\n  }\n  return currencyAmount\n}\n","/workspace/Physica-Interfae/src/utils/calculateSlippageAmount.ts",[],"/workspace/Physica-Interfae/src/state/transactions/types.ts",[],"/workspace/Physica-Interfae/src/pages/AddLiquidityV2/PoolPriceBar.tsx",[],"/workspace/Physica-Interfae/src/pages/AddLiquidityV2/ConfirmAddModalBottom.tsx",[],"/workspace/Physica-Interfae/src/pages/Pool/styleds.tsx",[],"/workspace/Physica-Interfae/src/state/transactions/hooks.tsx",["3451","3452","3453"],"import type { TransactionResponse } from '@ethersproject/providers'\nimport { Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ALL_SUPPORTED_CHAIN_IDS, SupportedChainId } from 'constants/chains'\nimport { useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { addTransaction } from './reducer'\nimport { TransactionDetails, TransactionInfo, TransactionType } from './types'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (response: TransactionResponse, info: TransactionInfo) => void {\n  const { chainId, account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    (response: TransactionResponse, info: TransactionInfo) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, info, chainId }))\n    },\n    [account, chainId, dispatch]\n  )\n}\n\nexport function useMultichainTransactions(): [TransactionDetails, SupportedChainId][] {\n  const state = useAppSelector((state) => state.transactions)\n  return ALL_SUPPORTED_CHAIN_IDS.flatMap((chainId) =>\n    state[chainId]\n      ? Object.values(state[chainId]).map((tx): [TransactionDetails, SupportedChainId] => [tx, chainId])\n      : []\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useWeb3React()\n\n  const state = useAppSelector((state) => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useTransaction(transactionHash?: string): TransactionDetails | undefined {\n  const allTransactions = useAllTransactions()\n\n  if (!transactionHash) {\n    return undefined\n  }\n\n  return allTransactions[transactionHash]\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\nexport function useIsTransactionConfirmed(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return Boolean(transactions[transactionHash].receipt)\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(token?: Token, spender?: string): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof token?.address === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          if (tx.info.type !== TransactionType.APPROVAL) return false\n          return tx.info.spender === spender && tx.info.tokenAddress === token.address && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, token?.address]\n  )\n}\n","/workspace/Physica-Interfae/src/utils/listSort.ts",["3454"],"import { DEFAULT_LIST_OF_LISTS } from './../constants/lists'\n\nconst DEFAULT_LIST_PRIORITIES = DEFAULT_LIST_OF_LISTS.reduce(\n  (acc, listUrl, index) => ({\n    ...acc,\n    [listUrl]: index + 1,\n  }),\n  {}\n) as Record<string, number>\n\n// use ordering of default list of lists to assign priority\nexport default function sortByListPriority(urlA: string, urlB: string) {\n  const A = DEFAULT_LIST_PRIORITIES[urlA]\n  const B = DEFAULT_LIST_PRIORITIES[urlB]\n  if (!A) return 0\n  if (!B) return 0\n  return A - B\n}\n","/workspace/Physica-Interfae/src/constants/networks.ts",[],"/workspace/Physica-Interfae/src/lib/hooks/routing/clientSideSmartOrderRouter.ts",["3455","3456","3457","3458"],"import { BigintIsh, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\n// eslint-disable-next-line no-restricted-imports\nimport { AlphaRouter, AlphaRouterConfig, ChainId } from '@uniswap/smart-order-router'\nimport { SupportedChainId } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { GetQuoteResult } from 'state/routing/types'\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\n\nexport function toSupportedChainId(chainId: ChainId): SupportedChainId | undefined {\n  const numericChainId: number = chainId\n  if (SupportedChainId[numericChainId]) return numericChainId\n  return undefined\n}\nexport function isSupportedChainId(chainId: ChainId | undefined): boolean {\n  if (chainId === undefined) return false\n  return toSupportedChainId(chainId) !== undefined\n}\n\nasync function getQuote(\n  {\n    type,\n    tokenIn,\n    tokenOut,\n    amount: amountRaw,\n  }: {\n    type: 'exactIn' | 'exactOut'\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\n    amount: BigintIsh\n  },\n  router: AlphaRouter,\n  config: Partial<AlphaRouterConfig>\n): Promise<{ data: GetQuoteResult; error?: unknown }> {\n  const currencyIn = new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\n  const currencyOut = new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\n\n  const baseCurrency = type === 'exactIn' ? currencyIn : currencyOut\n  const quoteCurrency = type === 'exactIn' ? currencyOut : currencyIn\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\n\n  const swapRoute = await router.route(\n    amount,\n    quoteCurrency,\n    type === 'exactIn' ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    /*swapConfig=*/ undefined,\n    config\n  )\n\n  if (!swapRoute) throw new Error('Failed to generate client side quote')\n\n  return { data: transformSwapRouteToGetQuoteResult(type, amount, swapRoute) }\n}\n\ninterface QuoteArguments {\n  tokenInAddress: string\n  tokenInChainId: ChainId\n  tokenInDecimals: number\n  tokenInSymbol?: string\n  tokenOutAddress: string\n  tokenOutChainId: ChainId\n  tokenOutDecimals: number\n  tokenOutSymbol?: string\n  amount: string\n  type: 'exactIn' | 'exactOut'\n}\n\nexport async function getClientSideQuote(\n  {\n    tokenInAddress,\n    tokenInChainId,\n    tokenInDecimals,\n    tokenInSymbol,\n    tokenOutAddress,\n    tokenOutChainId,\n    tokenOutDecimals,\n    tokenOutSymbol,\n    amount,\n    type,\n  }: QuoteArguments,\n  router: AlphaRouter,\n  config: Partial<AlphaRouterConfig>\n) {\n  return getQuote(\n    {\n      type,\n      tokenIn: {\n        address: tokenInAddress,\n        chainId: tokenInChainId,\n        decimals: tokenInDecimals,\n        symbol: tokenInSymbol,\n      },\n      tokenOut: {\n        address: tokenOutAddress,\n        chainId: tokenOutChainId,\n        decimals: tokenOutDecimals,\n        symbol: tokenOutSymbol,\n      },\n      amount,\n    },\n    router,\n    config\n  )\n}\n","/workspace/Physica-Interfae/src/constants/chainInfo.ts",["3459"],"import bnbCircleLogoUrl from 'assets/images/bnbCircle.svg'\nimport celoCircleLogoUrl from 'assets/images/celoCircle.png'\nimport ethereumLogoUrl from 'assets/images/ethereum-logo.png'\nimport polygonCircleLogoUrl from 'assets/images/polygonCircle.png'\nimport { default as arbitrumCircleLogoUrl, default as arbitrumLogoUrl } from 'assets/svg/arbitrum_logo.svg'\nimport bnbSquareLogoUrl from 'assets/svg/bnb_square_logo.svg'\nimport bnbLogo from 'assets/svg/bnb-logo.svg'\nimport celoLogo from 'assets/svg/celo_logo.svg'\nimport celoSquareLogoUrl from 'assets/svg/celo_square_logo.svg'\nimport optimismSquareLogoUrl from 'assets/svg/optimism_square_logo.svg'\nimport optimismLogoUrl from 'assets/svg/optimistic_ethereum.svg'\nimport polygonSquareLogoUrl from 'assets/svg/polygon_square_logo.svg'\nimport polygonMaticLogo from 'assets/svg/polygon-matic-logo.svg'\nimport { SupportedChainId } from 'constants/chains'\nimport ms from 'ms.macro'\nimport { darkTheme } from 'theme/colors'\n\nimport { SupportedL1ChainId, SupportedL2ChainId } from './chains'\nimport { ARBITRUM_LIST, CELO_LIST, OPTIMISM_LIST, PLASMA_BNB_LIST } from './lists'\n\nexport const AVERAGE_L1_BLOCK_TIME = ms`12s`\n\nexport enum NetworkType {\n  L1,\n  L2,\n}\ninterface BaseChainInfo {\n  readonly networkType: NetworkType\n  readonly blockWaitMsBeforeWarning?: number\n  readonly docs: string\n  readonly bridge?: string\n  readonly explorer: string\n  readonly infoLink: string\n  readonly logoUrl: string\n  readonly circleLogoUrl?: string\n  readonly squareLogoUrl?: string\n  readonly label: string\n  readonly helpCenterUrl?: string\n  readonly nativeCurrency: {\n    name: string // e.g. 'Goerli ETH',\n    symbol: string // e.g. 'gorETH',\n    decimals: number // e.g. 18,\n  }\n  readonly color?: string\n  readonly backgroundColor?: string\n}\n\ninterface L1ChainInfo extends BaseChainInfo {\n  readonly networkType: NetworkType.L1\n  readonly defaultListUrl?: string\n}\n\nexport interface L2ChainInfo extends BaseChainInfo {\n  readonly networkType: NetworkType.L2\n  readonly bridge: string\n  readonly statusPage?: string\n  readonly defaultListUrl: string\n}\n\ntype ChainInfoMap = { readonly [chainId: number]: L1ChainInfo | L2ChainInfo } & {\n  readonly [chainId in SupportedL2ChainId]: L2ChainInfo\n} & { readonly [chainId in SupportedL1ChainId]: L1ChainInfo }\n\nconst CHAIN_INFO: ChainInfoMap = {\n  [SupportedChainId.MAINNET]: {\n    networkType: NetworkType.L1,\n    docs: 'https://docs.uniswap.org/',\n    explorer: 'https://etherscan.io/',\n    infoLink: 'https://info.uniswap.org/#/',\n    label: 'Ethereum',\n    logoUrl: ethereumLogoUrl,\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    color: darkTheme.chain_1,\n  },\n  [SupportedChainId.PLANQ]: {\n    networkType: NetworkType.L1,\n    docs: 'https://planq.network',\n    explorer: 'https://evm.planq.network/',\n    infoLink: 'https://planq.network',\n    label: 'Planq',\n    logoUrl: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/planq/images/planq.svg',\n    nativeCurrency: { name: 'Planq', symbol: 'PLANQ', decimals: 18 },\n    color: darkTheme.chain_1,\n  },\n  [SupportedChainId.GOERLI]: {\n    networkType: NetworkType.L1,\n    docs: 'https://docs.uniswap.org/',\n    explorer: 'https://goerli.etherscan.io/',\n    infoLink: 'https://info.uniswap.org/#/',\n    label: 'Görli',\n    logoUrl: ethereumLogoUrl,\n    nativeCurrency: { name: 'Görli Ether', symbol: 'görETH', decimals: 18 },\n    color: darkTheme.chain_5,\n  },\n  [SupportedChainId.OPTIMISM]: {\n    networkType: NetworkType.L2,\n    blockWaitMsBeforeWarning: ms`25m`,\n    bridge: 'https://app.optimism.io/bridge',\n    defaultListUrl: OPTIMISM_LIST,\n    docs: 'https://optimism.io/',\n    explorer: 'https://optimistic.etherscan.io/',\n    infoLink: 'https://info.uniswap.org/#/optimism/',\n    label: 'Optimism',\n    logoUrl: optimismLogoUrl,\n    // Optimism perfers same icon for both\n    circleLogoUrl: optimismLogoUrl,\n    squareLogoUrl: optimismSquareLogoUrl,\n    statusPage: 'https://optimism.io/status',\n    helpCenterUrl: 'https://help.uniswap.org/en/collections/3137778-uniswap-on-optimistic-ethereum-oξ',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    color: darkTheme.chain_10,\n    backgroundColor: darkTheme.chain_10_background,\n  },\n  [SupportedChainId.OPTIMISM_GOERLI]: {\n    networkType: NetworkType.L2,\n    blockWaitMsBeforeWarning: ms`25m`,\n    bridge: 'https://app.optimism.io/bridge',\n    defaultListUrl: OPTIMISM_LIST,\n    docs: 'https://optimism.io/',\n    explorer: 'https://goerli-optimism.etherscan.io/',\n    infoLink: 'https://info.uniswap.org/#/optimism/',\n    label: 'Optimism Görli',\n    logoUrl: optimismLogoUrl,\n    statusPage: 'https://optimism.io/status',\n    helpCenterUrl: 'https://help.uniswap.org/en/collections/3137778-uniswap-on-optimistic-ethereum-oξ',\n    nativeCurrency: { name: 'Optimism Goerli Ether', symbol: 'görOpETH', decimals: 18 },\n    color: darkTheme.chain_420,\n  },\n  [SupportedChainId.ARBITRUM_ONE]: {\n    networkType: NetworkType.L2,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://bridge.arbitrum.io/',\n    docs: 'https://offchainlabs.com/',\n    explorer: 'https://arbiscan.io/',\n    infoLink: 'https://info.uniswap.org/#/arbitrum',\n    label: 'Arbitrum',\n    logoUrl: arbitrumLogoUrl,\n    circleLogoUrl: arbitrumCircleLogoUrl,\n    defaultListUrl: ARBITRUM_LIST,\n    helpCenterUrl: 'https://help.uniswap.org/en/collections/3137787-uniswap-on-arbitrum',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    color: darkTheme.chain_42,\n    backgroundColor: darkTheme.chain_42161_background,\n  },\n  [SupportedChainId.ARBITRUM_GOERLI]: {\n    networkType: NetworkType.L2,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://bridge.arbitrum.io/',\n    docs: 'https://offchainlabs.com/',\n    explorer: 'https://goerli.arbiscan.io/',\n    infoLink: 'https://info.uniswap.org/#/arbitrum/',\n    label: 'Arbitrum Goerli',\n    logoUrl: arbitrumLogoUrl,\n    defaultListUrl: ARBITRUM_LIST, // TODO: use arbitrum goerli token list\n    helpCenterUrl: 'https://help.uniswap.org/en/collections/3137787-uniswap-on-arbitrum',\n    nativeCurrency: { name: 'Goerli Arbitrum Ether', symbol: 'goerliArbETH', decimals: 18 },\n    color: darkTheme.chain_421613,\n  },\n  [SupportedChainId.POLYGON]: {\n    networkType: NetworkType.L1,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://wallet.polygon.technology/login',\n    docs: 'https://polygon.io/',\n    explorer: 'https://polygonscan.com/',\n    infoLink: 'https://info.uniswap.org/#/polygon/',\n    label: 'Polygon',\n    logoUrl: polygonMaticLogo,\n    circleLogoUrl: polygonCircleLogoUrl,\n    squareLogoUrl: polygonSquareLogoUrl,\n    nativeCurrency: { name: 'Polygon Matic', symbol: 'MATIC', decimals: 18 },\n    color: darkTheme.chain_137,\n    backgroundColor: darkTheme.chain_137_background,\n  },\n  [SupportedChainId.POLYGON_MUMBAI]: {\n    networkType: NetworkType.L1,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://wallet.polygon.technology/bridge',\n    docs: 'https://polygon.io/',\n    explorer: 'https://mumbai.polygonscan.com/',\n    infoLink: 'https://info.uniswap.org/#/polygon/',\n    label: 'Polygon Mumbai',\n    logoUrl: polygonMaticLogo,\n    nativeCurrency: { name: 'Polygon Mumbai Matic', symbol: 'mMATIC', decimals: 18 },\n  },\n  [SupportedChainId.CELO]: {\n    networkType: NetworkType.L1,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://www.portalbridge.com/#/transfer',\n    docs: 'https://docs.celo.org/',\n    explorer: 'https://celoscan.io/',\n    infoLink: 'https://info.uniswap.org/#/celo/',\n    label: 'Celo',\n    logoUrl: celoLogo,\n    circleLogoUrl: celoCircleLogoUrl,\n    squareLogoUrl: celoSquareLogoUrl,\n    nativeCurrency: { name: 'Celo', symbol: 'CELO', decimals: 18 },\n    defaultListUrl: CELO_LIST,\n  },\n  [SupportedChainId.CELO_ALFAJORES]: {\n    networkType: NetworkType.L1,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://www.portalbridge.com/#/transfer',\n    docs: 'https://docs.celo.org/',\n    explorer: 'https://alfajores-blockscout.celo-testnet.org/',\n    infoLink: 'https://info.uniswap.org/#/celo/',\n    label: 'Celo Alfajores',\n    logoUrl: celoLogo,\n    nativeCurrency: { name: 'Celo', symbol: 'CELO', decimals: 18 },\n    defaultListUrl: CELO_LIST,\n  },\n  [SupportedChainId.BNB]: {\n    networkType: NetworkType.L1,\n    blockWaitMsBeforeWarning: ms`10m`,\n    bridge: 'https://cbridge.celer.network/1/56',\n    docs: 'https://docs.bnbchain.org/',\n    explorer: 'https://bscscan.com/',\n    infoLink: 'https://info.uniswap.org/#/bnb/',\n    label: 'BNB Chain',\n    logoUrl: bnbLogo,\n    circleLogoUrl: bnbCircleLogoUrl,\n    squareLogoUrl: bnbSquareLogoUrl,\n    nativeCurrency: { name: 'BNB', symbol: 'BNB', decimals: 18 },\n    defaultListUrl: PLASMA_BNB_LIST,\n    color: darkTheme.chain_56,\n    backgroundColor: darkTheme.chain_56_background,\n  },\n}\n\nexport function getChainInfo(chainId: SupportedL1ChainId): L1ChainInfo\nexport function getChainInfo(chainId: SupportedL2ChainId): L2ChainInfo\nexport function getChainInfo(chainId: SupportedChainId): L1ChainInfo | L2ChainInfo\nexport function getChainInfo(\n  chainId: SupportedChainId | SupportedL1ChainId | SupportedL2ChainId | number | undefined\n): L1ChainInfo | L2ChainInfo | undefined\n\n/**\n * Overloaded method for returning ChainInfo given a chainID\n * Return type varies depending on input type:\n * number | undefined -> returns chaininfo | undefined\n * SupportedChainId -> returns L1ChainInfo | L2ChainInfo\n * SupportedL1ChainId -> returns L1ChainInfo\n * SupportedL2ChainId -> returns L2ChainInfo\n */\nexport function getChainInfo(chainId: any): any {\n  if (chainId) {\n    return CHAIN_INFO[chainId] ?? undefined\n  }\n  return undefined\n}\n\nconst MAINNET_INFO = CHAIN_INFO[SupportedChainId.PLANQ]\nexport function getChainInfoOrDefault(chainId: number | undefined) {\n  return getChainInfo(chainId) ?? MAINNET_INFO\n}\n","/workspace/Physica-Interfae/src/state/mint/v3/actions.ts",["3460"],"import { createAction } from '@reduxjs/toolkit'\n\nexport enum Field {\n  CURRENCY_A = 'CURRENCY_A',\n  CURRENCY_B = 'CURRENCY_B',\n}\n\nexport enum Bound {\n  LOWER = 'LOWER',\n  UPPER = 'UPPER',\n}\n\nexport const typeInput = createAction<{ field: Field; typedValue: string; noLiquidity: boolean }>(\n  'mintV3/typeInputMint'\n)\nexport const typeStartPriceInput = createAction<{ typedValue: string }>('mintV3/typeStartPriceInput')\nexport const typeLeftRangeInput = createAction<{ typedValue: string }>('mintV3/typeLeftRangeInput')\nexport const typeRightRangeInput = createAction<{ typedValue: string }>('mintV3/typeRightRangeInput')\nexport const resetMintState = createAction<void>('mintV3/resetMintState')\nexport const setFullRange = createAction<void>('mintV3/setFullRange')\n","/workspace/Physica-Interfae/src/utils/anonymizeLink.ts",[],"/workspace/Physica-Interfae/src/utils/userAgent.ts",[],"/workspace/Physica-Interfae/src/constants/locales.ts",[],"/workspace/Physica-Interfae/src/components/Row/index.tsx",[],"/workspace/Physica-Interfae/src/utils/retry.ts",["3461"],"function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nclass CancelledError extends Error {\n  public isCancelledError = true as const\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {\n  public isRetryableError = true as const\n}\n\nexport interface RetryOptions {\n  n: number\n  minWait: number\n  maxWait: number\n}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: RetryOptions\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  // eslint-disable-next-line no-async-promise-executor\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !error.isRetryableError) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n","/workspace/Physica-Interfae/src/utils/nativeTokens.ts",[],"/workspace/Physica-Interfae/src/state/mint/actions.ts",[],"/workspace/Physica-Interfae/src/lib/utils/uriToHttp.ts",[],"/workspace/Physica-Interfae/src/lib/utils/parseENSAddress.ts",["3462"],"const ENS_NAME_REGEX = /^(([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+)eth(\\/.*)?$/\n\nexport default function parseENSAddress(\n  ensAddress: string\n): { ensName: string; ensPath: string | undefined } | undefined {\n  const match = ensAddress.match(ENS_NAME_REGEX)\n  if (!match) return undefined\n  return { ensName: `${match[1].toLowerCase()}eth`, ensPath: match[4] }\n}\n","/workspace/Physica-Interfae/src/lib/utils/contenthashToUri.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/index.ts",[],"/workspace/Physica-Interfae/src/hooks/useCopyClipboard.ts",[],"/workspace/Physica-Interfae/src/utils/index.ts",[],"/workspace/Physica-Interfae/src/nft/types/index.ts",[],"/workspace/Physica-Interfae/src/lib/hooks/useCurrencyBalance.ts",["3463","3464","3465","3466","3467","3468","3469","3470","3471","3472","3473","3474","3475"],"import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport ERC20ABI from 'abis/erc20.json'\nimport { Erc20Interface } from 'abis/types/Erc20'\nimport JSBI from 'jsbi'\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { nativeOnChain } from '../../constants/tokens'\nimport { useInterfaceMulticall } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useNativeCurrencyBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount<Currency> | undefined\n} {\n  const { chainId } = useWeb3React()\n  const multicallContract = useInterfaceMulticall()\n\n  const validAddressInputs: [string][] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n            .map((addr) => [addr])\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(multicallContract, 'getEthBalance', validAddressInputs)\n\n  return useMemo(\n    () =>\n      validAddressInputs.reduce<{ [address: string]: CurrencyAmount<Currency> }>((memo, [address], i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value && chainId)\n          memo[address] = CurrencyAmount.fromRawAmount(nativeOnChain(chainId), JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [validAddressInputs, chainId, results]\n  )\n}\n\nconst ERC20Interface = new Interface(ERC20ABI) as Erc20Interface\nconst tokenBalancesGasRequirement = { gasRequired: 185_000 }\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }, boolean] {\n  const { chainId } = useWeb3React() // we cannot fetch balances cross-chain\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false && t?.chainId === chainId) ?? [],\n    [chainId, tokens]\n  )\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(\n    validatedTokenAddresses,\n    ERC20Interface,\n    'balanceOf',\n    useMemo(() => [address], [address]),\n    tokenBalancesGasRequirement\n  )\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return useMemo(\n    () => [\n      address && validatedTokens.length > 0\n        ? validatedTokens.reduce<{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address] = CurrencyAmount.fromRawAmount(token, amount)\n            }\n            return memo\n          }, {})\n        : {},\n      anyLoading,\n    ],\n    [address, validatedTokens, anyLoading, balances]\n  )\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): CurrencyAmount<Token> | undefined {\n  const tokenBalances = useTokenBalances(\n    account,\n    useMemo(() => [token], [token])\n  )\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount<Currency> | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency?.isToken ?? false) ?? [],\n    [currencies]\n  )\n\n  const { chainId } = useWeb3React()\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some((currency) => currency?.isNative) ?? false, [currencies])\n  const ethBalance = useNativeCurrencyBalances(useMemo(() => (containsETH ? [account] : []), [containsETH, account]))\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency || currency.chainId !== chainId) return undefined\n        if (currency.isToken) return tokenBalances[currency.address]\n        if (currency.isNative) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, chainId, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport default function useCurrencyBalance(\n  account?: string,\n  currency?: Currency\n): CurrencyAmount<Currency> | undefined {\n  return useCurrencyBalances(\n    account,\n    useMemo(() => [currency], [currency])\n  )[0]\n}\n","/workspace/Physica-Interfae/src/components/Tokens/constants.ts",[],"/workspace/Physica-Interfae/src/hooks/useAccountRiskCheck.ts",[],"/workspace/Physica-Interfae/src/components/Button/index.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/TransactionCompleteModal.tsx",["3476","3477","3478"],"import { formatEther } from '@ethersproject/units'\nimport { Trans } from '@lingui/macro'\nimport { Trace, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport clsx from 'clsx'\nimport { OpacityHoverState } from 'components/Common'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Row } from 'nft/components/Flex'\nimport { BackArrowIcon, ChevronUpIcon, LightningBoltIcon, TwitterIcon, UniIcon } from 'nft/components/icons'\nimport { Overlay, stopPropagation } from 'nft/components/modals/Overlay'\nimport { themeVars, vars } from 'nft/css/sprinkles.css'\nimport { useIsMobile, useSendTransaction, useTransactionResponse } from 'nft/hooks'\nimport { TxResponse, TxStateType } from 'nft/types'\nimport {\n  fetchPrice,\n  formatEthPrice,\n  formatUsdPrice,\n  formatUSDPriceWithCommas,\n  generateTweetForPurchase,\n  getSuccessfulImageSize,\n  parseTransactionResponse,\n} from 'nft/utils'\nimport { formatAssetEventProperties } from 'nft/utils/formatEventProperties'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nimport * as styles from './TransactionCompleteModal.css'\n\nconst TWITTER_WIDTH = 560\nconst TWITTER_HEIGHT = 480\n\nconst UploadLink = styled.a`\n  position: absolute;\n  right: 32px;\n  top: 32px;\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 12px;\n    top: 28px;\n  }\n`\n\nconst TxCompleteModal = () => {\n  const [ethPrice, setEthPrice] = useState(3000)\n  const [showUnavailable, setShowUnavailable] = useState(false)\n  const txHash = useSendTransaction((state) => state.txHash)\n  const purchasedWithErc20 = useSendTransaction((state) => state.purchasedWithErc20)\n  const setTxState = useSendTransaction((state) => state.setState)\n  const txState = useSendTransaction((state) => state.state)\n  const transactionStateRef = useRef(txState)\n  const transactionResponse = useTransactionResponse((state) => state.transactionResponse)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n  const isMobile = useIsMobile()\n  const txHashUrl = getExplorerLink(1, txHash, ExplorerDataType.TRANSACTION)\n  const shouldShowModal = (txState === TxStateType.Success || txState === TxStateType.Failed) && txState\n  const trace = useTrace({ modal: InterfaceModalName.NFT_TX_COMPLETE })\n  const {\n    nftsPurchased,\n    nftsNotPurchased,\n    showPurchasedModal,\n    showRefundModal,\n    totalPurchaseValue,\n    totalRefundValue,\n    totalUSDRefund,\n    txFeeFiat,\n  } = useMemo(() => {\n    return parseTransactionResponse(transactionResponse, ethPrice)\n  }, [transactionResponse, ethPrice])\n\n  const toggleShowUnavailable = () => {\n    setShowUnavailable(!showUnavailable)\n  }\n\n  function closeTxCompleteScreen() {\n    setTransactionResponse({} as TxResponse)\n    setTxState(TxStateType.New)\n  }\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPrice(price ?? 0)\n    })\n  }, [])\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  const shareTweet = () => {\n    window.open(\n      generateTweetForPurchase(nftsPurchased, txHashUrl),\n      'newwindow',\n      `left=${(window.screen.width - TWITTER_WIDTH) / 2}, top=${\n        (window.screen.height - TWITTER_HEIGHT) / 2\n      }, width=${TWITTER_WIDTH}, height=${TWITTER_HEIGHT}`\n    )\n  }\n\n  return (\n    <>\n      {shouldShowModal && (\n        <Portal>\n          <Overlay onClick={closeTxCompleteScreen} />\n          <Box className={styles.modalContainer} onClick={closeTxCompleteScreen}>\n            {/* Successfully purchased NFTs */}\n            {showPurchasedModal && (\n              <Trace\n                name={NFTEventName.NFT_BUY_BAG_SUCCEEDED}\n                properties={{\n                  buy_quantity: nftsPurchased.length,\n                  usd_value: parseFloat(formatEther(totalPurchaseValue)) * ethPrice,\n                  transaction_hash: txHash,\n                  using_erc20: purchasedWithErc20,\n                  ...formatAssetEventProperties(nftsPurchased),\n                  ...trace,\n                }}\n                shouldLogImpression\n              >\n                <Box className={styles.successModal} onClick={stopPropagation}>\n                  <UniIcon color={vars.color.pink400} width=\"36\" height=\"36\" className={styles.uniLogo} />\n                  <Box display=\"flex\" flexWrap=\"wrap\" width=\"full\" height=\"min\">\n                    <h1 className={styles.title}>\n                      <Trans>Complete!</Trans>\n                    </h1>\n                    <p className={styles.subHeading}>\n                      <Trans>Uniswap has granted your wish!</Trans>\n                    </p>\n                  </Box>\n                  <UploadLink onClick={shareTweet} target=\"_blank\">\n                    <TwitterIcon width={32} height={32} color={themeVars.colors.textSecondary} />\n                  </UploadLink>\n                  <Box\n                    className={styles.successAssetsContainer}\n                    style={{\n                      maxHeight: nftsPurchased.length > 32 ? (isMobile ? '172px' : '292px') : 'min-content',\n                    }}\n                  >\n                    {[...nftsPurchased].map((nft, index) => (\n                      <img\n                        className={clsx(\n                          styles.successAssetImage,\n                          nftsPurchased.length > 1 && styles.successAssetImageGrid\n                        )}\n                        style={{\n                          maxHeight: `${getSuccessfulImageSize(nftsPurchased.length, isMobile)}px`,\n                          maxWidth: `${getSuccessfulImageSize(nftsPurchased.length, isMobile)}px`,\n                        }}\n                        src={nft.imageUrl}\n                        alt={nft.name}\n                        key={index}\n                      />\n                    ))}\n                  </Box>\n                  {nftsPurchased.length > 32 && <Box className={styles.overflowFade} />}\n                  <Box\n                    display=\"flex\"\n                    width=\"full\"\n                    height=\"min\"\n                    flexDirection=\"row\"\n                    marginTop={{ sm: '20', md: '20' }}\n                    flexWrap={{ sm: 'wrap', md: 'nowrap' }}\n                    alignItems=\"center\"\n                    paddingRight=\"40\"\n                    paddingLeft=\"40\"\n                    className={styles.bottomBar}\n                    justifyContent=\"space-between\"\n                  >\n                    <Row>\n                      <Box marginRight=\"16\">\n                        {nftsPurchased.length} NFT{nftsPurchased.length === 1 ? '' : 's'}\n                      </Box>\n                      <Box>{formatEthPrice(totalPurchaseValue.toString())} ETH</Box>\n                    </Row>\n                    <a href={txHashUrl} target=\"_blank\" rel=\"noreferrer\" style={{ textDecoration: 'none' }}>\n                      <Box color=\"textSecondary\" fontWeight=\"normal\">\n                        <Trans>View on Etherscan</Trans>\n                      </Box>\n                    </a>\n                  </Box>\n                </Box>\n              </Trace>\n            )}\n            {/* NFTs that were not purchased ie Refunds */}\n            {showRefundModal &&\n              /* Showing both purchases & refunds */\n              (showPurchasedModal ? (\n                <Trace\n                  name={NFTEventName.NFT_BUY_BAG_REFUNDED}\n                  properties={{\n                    buy_quantity: nftsPurchased.length,\n                    fail_quantity: nftsNotPurchased.length,\n                    refund_amount_usd: totalUSDRefund,\n                    transaction_hash: txHash,\n                    ...trace,\n                  }}\n                  shouldLogImpression\n                >\n                  <Box className={styles.mixedRefundModal} onClick={stopPropagation}>\n                    <Box\n                      display=\"inline-flex\"\n                      flexWrap=\"wrap\"\n                      width={{ sm: 'full', md: 'half' }}\n                      paddingRight={{ sm: '0', md: '32' }}\n                    >\n                      <LightningBoltIcon color=\"pink\" />\n                      <p className={styles.subtitle}>Instant Refund</p>\n                      <p className={styles.interStd}>\n                        Uniswap returned{' '}\n                        <span style={{ fontWeight: '700' }}>{formatEthPrice(totalRefundValue.toString())} ETH</span>{' '}\n                        back to your wallet for unavailable items.\n                      </p>\n                      <Box\n                        display=\"flex\"\n                        flexWrap=\"wrap\"\n                        bottom=\"24\"\n                        width=\"full\"\n                        alignSelf=\"flex-end\"\n                        position={{ sm: 'absolute', md: 'static' }}\n                      >\n                        <p className={styles.totalEthCost} style={{ marginBottom: '2px' }}>\n                          {formatEthPrice(totalRefundValue.toString())} ETH\n                        </p>\n                        <p className={styles.totalUsdRefund}>{formatUSDPriceWithCommas(totalUSDRefund)}</p>\n                        <p className={styles.totalEthCost} style={{ width: '100%' }}>\n                          for {nftsNotPurchased.length} unavailable item\n                          {nftsNotPurchased.length === 1 ? '' : 's'}.\n                        </p>\n                        <Box\n                          position={{ sm: 'absolute', md: 'relative' }}\n                          right={{ sm: '0', md: 'auto' }}\n                          bottom={{ sm: '0', md: 'auto' }}\n                          justifyContent={{ sm: 'flex-end', md: 'flex-start' }}\n                          textAlign={{ sm: 'right', md: 'left' }}\n                          flexShrink=\"0\"\n                          marginRight={{ sm: '40', md: '24' }}\n                          width={{ sm: 'half', md: 'auto' }}\n                        >\n                          <a href={txHashUrl} target=\"_blank\" rel=\"noreferrer\" style={{ textDecoration: 'none' }}>\n                            <Box\n                              fontWeight=\"normal\"\n                              marginTop=\"16\"\n                              color=\"textSecondary\"\n                              className={styles.totalEthCost}\n                            >\n                              View on Etherscan\n                            </Box>\n                          </a>\n                        </Box>\n                      </Box>\n                    </Box>\n                    <Box className={styles.refundAssetsContainer}>\n                      {nftsNotPurchased.map((nft, index) => (\n                        <Box display=\"flex\" flexWrap=\"wrap\" height=\"min\" width=\"52\" key={index}>\n                          <img className={styles.refundAssetImage} src={nft.imageUrl} alt={nft.name} key={index} />\n                        </Box>\n                      ))}\n                    </Box>\n                    <Box className={styles.refundOverflowFade} />\n                  </Box>\n                </Trace>\n              ) : (\n                // Only showing when all assets are unavailable\n                <Trace\n                  name={NFTEventName.NFT_BUY_BAG_REFUNDED}\n                  properties={{\n                    buy_quantity: 0,\n                    fail_quantity: nftsNotPurchased.length,\n                    refund_amount_usd: totalUSDRefund,\n                    ...trace,\n                  }}\n                  shouldLogImpression\n                >\n                  <Box className={styles.fullRefundModal} onClick={stopPropagation}>\n                    <Box marginLeft=\"auto\" marginRight=\"auto\" display=\"flex\">\n                      {txState === TxStateType.Success ? (\n                        <>\n                          <LightningBoltIcon />\n                          <h1 className={styles.title}>Instant Refund</h1>\n                        </>\n                      ) : (\n                        <h1 className={styles.title}>Failed Transaction</h1>\n                      )}\n                    </Box>\n                    <p className={styles.bodySmall}>\n                      {txState === TxStateType.Success &&\n                        `Selected item${\n                          nftsPurchased.length === 1 ? ' is' : 's are'\n                        } no longer available. Uniswap instantly refunded you for this incomplete transaction. `}\n                      {formatUsdPrice(txFeeFiat)} was used for gas in attempt to complete this transaction. For support,\n                      please visit our <a href=\"https://discord.gg/FCfyBSbCU5\">Discord</a>\n                    </p>\n                    <Box className={styles.allUnavailableAssets}>\n                      {nftsNotPurchased.length >= 3 && (\n                        <Box className={styles.toggleUnavailable} onClick={() => toggleShowUnavailable()}>\n                          {!showUnavailable && (\n                            <Box paddingLeft=\"20\" paddingTop=\"8\" paddingBottom=\"8\">\n                              {nftsNotPurchased.slice(0, 3).map((asset, index) => (\n                                <img\n                                  style={{ zIndex: 2 - index }}\n                                  className={styles.unavailableAssetPreview}\n                                  src={asset.imageUrl}\n                                  alt={asset.name}\n                                  key={index}\n                                />\n                              ))}\n                            </Box>\n                          )}\n                          <Box\n                            color={showUnavailable ? 'textPrimary' : 'textSecondary'}\n                            className={styles.unavailableText}\n                          >\n                            Unavailable\n                            <Box className={styles.unavailableItems}>\n                              {nftsNotPurchased.length} item{nftsNotPurchased.length === 1 ? '' : 's'}\n                            </Box>\n                          </Box>\n                          <ChevronUpIcon className={`${!showUnavailable && styles.chevronDown} ${styles.chevron}`} />\n                        </Box>\n                      )}\n                      {(showUnavailable || nftsNotPurchased.length < 3) &&\n                        nftsNotPurchased.map((asset, index) => (\n                          <Box\n                            backgroundColor=\"backgroundSurface\"\n                            display=\"flex\"\n                            padding=\"4\"\n                            marginBottom=\"1\"\n                            borderRadius=\"8\"\n                            key={index}\n                          >\n                            <Box className={styles.assetContainer}>\n                              <img className={styles.fullRefundImage} src={asset.imageUrl} alt={asset.name} />\n                            </Box>\n                            <Box flexWrap=\"wrap\" marginTop=\"4\">\n                              <Box marginLeft=\"4\" width=\"full\" display=\"flex\">\n                                <p className={styles.totalEthCost} style={{ marginBottom: '2px' }}>\n                                  {formatEthPrice(\n                                    asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n                                  )}{' '}\n                                  ETH\n                                </p>\n                              </Box>\n                              <Box color=\"textPrimary\" className={styles.totalUsdRefund}>\n                                {txState === TxStateType.Success ? 'Refunded' : asset.name}\n                              </Box>\n                            </Box>\n                          </Box>\n                        ))}\n                    </Box>\n                    {showUnavailable && <Box className={styles.fullRefundOverflowFade} />}\n                    <p className={styles.totalEthCost} style={{ marginBottom: '2px' }}>\n                      {formatEthPrice(totalRefundValue.toString())} ETH\n                    </p>\n                    <p className={styles.totalUsdRefund}>{formatUSDPriceWithCommas(totalUSDRefund)}</p>\n                    <Box className={styles.walletAddress} marginLeft=\"auto\" marginRight=\"0\">\n                      <a href={txHashUrl} target=\"_blank\" rel=\"noreferrer\">\n                        <Box className={styles.addressHash}>View on Etherscan</Box>\n                      </a>\n                    </Box>\n                    <p className={styles.totalEthCost}>\n                      for {nftsNotPurchased.length} unavailable item\n                      {nftsNotPurchased.length === 1 ? '' : 's'}.\n                    </p>\n                    <Box\n                      as=\"button\"\n                      border=\"none\"\n                      backgroundColor=\"accentAction\"\n                      cursor=\"pointer\"\n                      className={styles.returnButton}\n                      type=\"button\"\n                      onClick={() => closeTxCompleteScreen()}\n                    >\n                      <BackArrowIcon className={styles.fullRefundBackArrow} />\n                      Return to Marketplace\n                    </Box>\n                  </Box>\n                </Trace>\n              ))}\n          </Box>\n        </Portal>\n      )}\n    </>\n  )\n}\n\nexport default TxCompleteModal\n","/workspace/Physica-Interfae/src/nft/components/bag/Bag.tsx",["3479","3480","3481","3482"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accentAction};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag(\n    (state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }),\n    shallow\n  )\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const [userCanScroll, setUserCanScroll] = useState(false)\n  const [scrollProgress, setScrollProgress] = useState(0)\n  const scrollRef = (node: HTMLDivElement) => {\n    if (node !== null) {\n      const canScroll = node.scrollHeight > node.clientHeight\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\n    }\n  }\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\n    const scrollTop = event.currentTarget.scrollTop\n    const containerHeight = event.currentTarget.clientHeight\n    const scrollHeight = event.currentTarget.scrollHeight\n\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\n  }\n\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","/workspace/Physica-Interfae/src/nft/components/icons.tsx",["3483","3484","3485","3486","3487","3488"],"import React from 'react'\nimport styled, { useTheme } from 'styled-components/macro'\n\nimport { themeVars, vars } from '../css/sprinkles.css'\n\n// ESLint reports `fill` is missing, whereas it exists on an SVGProps type\ntype SVGProps = React.SVGProps<SVGSVGElement> & { fill?: string; height?: string | number; width?: string | number }\n\nexport const UniIcon = (props: SVGProps) => (\n  <svg {...props} fill=\"none\" viewBox=\"0 0 289 47\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M32.8354 10.8549L0.00585938 29.8306L10.9554 36.145L43.7844 17.1692L32.8354 10.8549Z\" fill=\"#3D587B\"/>\n<path d=\"M43.791 29.8086L43.7851 17.1687L32.8418 23.4945L32.8485 36.134L43.791 29.8086Z\" fill=\"#D5F6FF\"/>\n<path d=\"M21.8928 17.1795L10.9434 10.8652L10.9494 23.5049L21.8928 17.1795Z\" fill=\"#5A7B92\"/>\n<path d=\"M32.8484 36.134L32.8413 23.4943L21.8989 29.8196L32.8484 36.134Z\" fill=\"#5A7B92\"/>\n<path d=\"M10.9493 23.505L10.9433 10.8653L0 17.1907L0.00604055 29.8303L10.9493 23.505Z\" fill=\"#AAEEFF\"/>\n<path d=\"M60.581 33.5V13.1364H68.2174C69.7818 13.1364 71.0943 13.428 72.1549 14.0114C73.2221 14.5947 74.0275 15.3968 74.5711 16.4176C75.1213 17.4318 75.3964 18.5852 75.3964 19.8778C75.3964 21.1837 75.1213 22.3437 74.5711 23.358C74.0209 24.3722 73.2089 25.1709 72.135 25.7543C71.0611 26.331 69.7387 26.6193 68.1677 26.6193H63.1066V23.5866H67.6705C68.5853 23.5866 69.3343 23.4276 69.9177 23.1094C70.501 22.7912 70.9319 22.3537 71.2103 21.7969C71.4953 21.2401 71.6379 20.6004 71.6379 19.8778C71.6379 19.1553 71.4953 18.5189 71.2103 17.9688C70.9319 17.4186 70.4977 16.991 69.9077 16.6861C69.3244 16.3745 68.572 16.2188 67.6506 16.2188H64.27V33.5H60.581ZM82.0409 24.5511V33.5H78.4415V13.1364H81.9614V20.8224H82.1403C82.4983 19.9607 83.0518 19.2812 83.8008 18.7841C84.5565 18.2803 85.5177 18.0284 86.6844 18.0284C87.745 18.0284 88.6697 18.2505 89.4585 18.6946C90.2473 19.1387 90.8572 19.7884 91.2881 20.6435C91.7256 21.4986 91.9443 22.5426 91.9443 23.7756V33.5H88.3449V24.3324C88.3449 23.3049 88.0797 22.5062 87.5494 21.9361C87.0258 21.3594 86.29 21.071 85.342 21.071C84.7057 21.071 84.1356 21.2102 83.6318 21.4886C83.1347 21.7604 82.7436 22.1548 82.4585 22.6719C82.1801 23.1889 82.0409 23.8153 82.0409 24.5511ZM97.3037 39.2273C96.8132 39.2273 96.3591 39.1875 95.9415 39.108C95.5305 39.035 95.2024 38.9489 94.9571 38.8494L95.7923 36.0455C96.316 36.1979 96.7833 36.2708 97.1943 36.2642C97.6053 36.2576 97.9666 36.1283 98.2781 35.8764C98.5963 35.6312 98.8648 35.2202 99.0835 34.6435L99.3918 33.8182L93.8534 18.2273H97.6716L101.191 29.7614H101.351L104.88 18.2273H108.709L102.593 35.3494C102.308 36.1581 101.931 36.8509 101.46 37.4276C100.989 38.0109 100.413 38.455 99.7298 38.7599C99.0537 39.0715 98.245 39.2273 97.3037 39.2273ZM123.27 22.2642L119.989 22.6222C119.896 22.2907 119.734 21.9792 119.502 21.6875C119.276 21.3958 118.972 21.1605 118.587 20.9815C118.203 20.8026 117.732 20.7131 117.175 20.7131C116.426 20.7131 115.796 20.8755 115.286 21.2003C114.782 21.5251 114.534 21.946 114.54 22.4631C114.534 22.9072 114.696 23.2685 115.027 23.5469C115.365 23.8253 115.922 24.054 116.698 24.233L119.303 24.7898C120.748 25.1013 121.822 25.5952 122.525 26.2713C123.234 26.9474 123.592 27.8324 123.598 28.9261C123.592 29.8873 123.31 30.7358 122.753 31.4716C122.203 32.2008 121.437 32.7708 120.456 33.1818C119.475 33.5928 118.348 33.7983 117.076 33.7983C115.206 33.7983 113.702 33.4072 112.562 32.625C111.421 31.8362 110.742 30.7391 110.523 29.3338L114.033 28.9957C114.192 29.6851 114.53 30.2055 115.047 30.5568C115.564 30.9081 116.237 31.0838 117.066 31.0838C117.921 31.0838 118.607 30.9081 119.124 30.5568C119.648 30.2055 119.91 29.7713 119.91 29.2543C119.91 28.8168 119.74 28.4555 119.402 28.1705C119.071 27.8854 118.554 27.6667 117.851 27.5142L115.246 26.9673C113.781 26.6624 112.697 26.1487 111.995 25.4261C111.292 24.697 110.944 23.7756 110.951 22.6619C110.944 21.7206 111.199 20.9053 111.716 20.2159C112.24 19.5199 112.966 18.983 113.894 18.6051C114.829 18.2206 115.906 18.0284 117.125 18.0284C118.915 18.0284 120.324 18.4096 121.351 19.1719C122.385 19.9342 123.025 20.965 123.27 22.2642ZM126.566 33.5V18.2273H130.166V33.5H126.566ZM128.376 16.0597C127.806 16.0597 127.316 15.8707 126.905 15.4929C126.494 15.1084 126.288 14.6477 126.288 14.1108C126.288 13.5672 126.494 13.1065 126.905 12.7287C127.316 12.3442 127.806 12.152 128.376 12.152C128.953 12.152 129.443 12.3442 129.848 12.7287C130.259 13.1065 130.464 13.5672 130.464 14.1108C130.464 14.6477 130.259 15.1084 129.848 15.4929C129.443 15.8707 128.953 16.0597 128.376 16.0597ZM140.529 33.7983C139.005 33.7983 137.695 33.4635 136.602 32.794C135.515 32.1245 134.676 31.1998 134.086 30.0199C133.503 28.8333 133.211 27.4678 133.211 25.9233C133.211 24.3722 133.509 23.0033 134.106 21.8168C134.702 20.6236 135.544 19.6955 136.631 19.0327C137.725 18.3632 139.018 18.0284 140.509 18.0284C141.749 18.0284 142.846 18.2571 143.8 18.7145C144.762 19.1652 145.527 19.8049 146.097 20.6335C146.667 21.4555 146.992 22.4167 147.072 23.517H143.631C143.492 22.7812 143.161 22.1681 142.637 21.6776C142.12 21.1804 141.427 20.9318 140.559 20.9318C139.823 20.9318 139.177 21.1307 138.62 21.5284C138.063 21.9195 137.629 22.483 137.318 23.2188C137.013 23.9545 136.86 24.8362 136.86 25.8636C136.86 26.9044 137.013 27.7992 137.318 28.5483C137.622 29.2907 138.05 29.8641 138.6 30.2685C139.157 30.6662 139.81 30.8651 140.559 30.8651C141.089 30.8651 141.563 30.7656 141.981 30.5668C142.405 30.3613 142.76 30.0663 143.045 29.6818C143.33 29.2973 143.525 28.83 143.631 28.2798H147.072C146.986 29.3603 146.667 30.3182 146.117 31.1534C145.567 31.982 144.818 32.6316 143.87 33.1023C142.922 33.5663 141.809 33.7983 140.529 33.7983ZM154.422 33.8082C153.454 33.8082 152.583 33.6359 151.807 33.2912C151.038 32.9399 150.428 32.4228 149.978 31.7401C149.534 31.0573 149.312 30.2154 149.312 29.2145C149.312 28.3527 149.471 27.6402 149.789 27.0767C150.107 26.5133 150.541 26.0625 151.091 25.7244C151.642 25.3864 152.261 25.1312 152.951 24.9588C153.647 24.7798 154.366 24.6506 155.108 24.571C156.003 24.4782 156.729 24.3954 157.286 24.3224C157.843 24.2429 158.247 24.1236 158.499 23.9645C158.758 23.7988 158.887 23.5436 158.887 23.1989V23.1392C158.887 22.3902 158.665 21.8101 158.221 21.3991C157.776 20.9882 157.137 20.7827 156.302 20.7827C155.42 20.7827 154.721 20.9749 154.204 21.3594C153.693 21.7438 153.348 22.1979 153.169 22.7216L149.809 22.2443C150.074 21.3163 150.511 20.5407 151.121 19.9176C151.731 19.2879 152.477 18.8172 153.358 18.5057C154.24 18.1875 155.214 18.0284 156.282 18.0284C157.017 18.0284 157.75 18.1146 158.479 18.2869C159.208 18.4593 159.874 18.7443 160.478 19.142C161.081 19.5331 161.565 20.0668 161.929 20.7429C162.301 21.419 162.486 22.2642 162.486 23.2784V33.5H159.026V31.402H158.907C158.688 31.8262 158.38 32.224 157.982 32.5952C157.591 32.9598 157.097 33.2547 156.5 33.4801C155.91 33.6989 155.218 33.8082 154.422 33.8082ZM155.357 31.1634C156.079 31.1634 156.706 31.0208 157.236 30.7358C157.767 30.4441 158.174 30.0597 158.459 29.5824C158.751 29.1051 158.897 28.5848 158.897 28.0213V26.2216C158.784 26.3144 158.592 26.4006 158.32 26.4801C158.055 26.5597 157.757 26.6293 157.425 26.6889C157.094 26.7486 156.766 26.8016 156.441 26.848C156.116 26.8944 155.834 26.9342 155.596 26.9673C155.059 27.0402 154.578 27.1596 154.154 27.3253C153.73 27.491 153.395 27.723 153.15 28.0213C152.904 28.313 152.782 28.6908 152.782 29.1548C152.782 29.8177 153.024 30.3182 153.508 30.6562C153.991 30.9943 154.608 31.1634 155.357 31.1634ZM173.21 33.5V13.1364H186.255V16.2287H176.899V21.7571H185.361V24.8494H176.899V33.5H173.21ZM189.457 33.5V18.2273H193.057V33.5H189.457ZM191.267 16.0597C190.697 16.0597 190.206 15.8707 189.795 15.4929C189.384 15.1084 189.179 14.6477 189.179 14.1108C189.179 13.5672 189.384 13.1065 189.795 12.7287C190.206 12.3442 190.697 12.152 191.267 12.152C191.843 12.152 192.334 12.3442 192.738 12.7287C193.149 13.1065 193.355 13.5672 193.355 14.1108C193.355 14.6477 193.149 15.1084 192.738 15.4929C192.334 15.8707 191.843 16.0597 191.267 16.0597ZM200.357 24.5511V33.5H196.758V18.2273H200.198V20.8224H200.377C200.729 19.9673 201.289 19.2879 202.058 18.7841C202.833 18.2803 203.791 18.0284 204.931 18.0284C205.985 18.0284 206.903 18.2538 207.685 18.7045C208.474 19.1553 209.084 19.8082 209.515 20.6634C209.952 21.5185 210.168 22.5559 210.161 23.7756V33.5H206.562V24.3324C206.562 23.3116 206.297 22.5128 205.766 21.9361C205.243 21.3594 204.517 21.071 203.589 21.071C202.959 21.071 202.399 21.2102 201.908 21.4886C201.425 21.7604 201.043 22.1548 200.765 22.6719C200.493 23.1889 200.357 23.8153 200.357 24.5511ZM218.215 33.8082C217.247 33.8082 216.376 33.6359 215.6 33.2912C214.831 32.9399 214.221 32.4228 213.771 31.7401C213.327 31.0573 213.104 30.2154 213.104 29.2145C213.104 28.3527 213.264 27.6402 213.582 27.0767C213.9 26.5133 214.334 26.0625 214.884 25.7244C215.434 25.3864 216.054 25.1312 216.744 24.9588C217.44 24.7798 218.159 24.6506 218.901 24.571C219.796 24.4782 220.522 24.3954 221.079 24.3224C221.636 24.2429 222.04 24.1236 222.292 23.9645C222.55 23.7988 222.68 23.5436 222.68 23.1989V23.1392C222.68 22.3902 222.458 21.8101 222.014 21.3991C221.569 20.9882 220.93 20.7827 220.095 20.7827C219.213 20.7827 218.514 20.9749 217.997 21.3594C217.486 21.7438 217.141 22.1979 216.962 22.7216L213.602 22.2443C213.867 21.3163 214.304 20.5407 214.914 19.9176C215.524 19.2879 216.27 18.8172 217.151 18.5057C218.033 18.1875 219.007 18.0284 220.075 18.0284C220.81 18.0284 221.543 18.1146 222.272 18.2869C223.001 18.4593 223.667 18.7443 224.271 19.142C224.874 19.5331 225.358 20.0668 225.722 20.7429C226.094 21.419 226.279 22.2642 226.279 23.2784V33.5H222.819V31.402H222.7C222.481 31.8262 222.173 32.224 221.775 32.5952C221.384 32.9598 220.89 33.2547 220.293 33.4801C219.703 33.6989 219.011 33.8082 218.215 33.8082ZM219.15 31.1634C219.872 31.1634 220.499 31.0208 221.029 30.7358C221.559 30.4441 221.967 30.0597 222.252 29.5824C222.544 29.1051 222.69 28.5848 222.69 28.0213V26.2216C222.577 26.3144 222.385 26.4006 222.113 26.4801C221.848 26.5597 221.55 26.6293 221.218 26.6889C220.887 26.7486 220.559 26.8016 220.234 26.848C219.909 26.8944 219.627 26.9342 219.389 26.9673C218.852 27.0402 218.371 27.1596 217.947 27.3253C217.523 27.491 217.188 27.723 216.943 28.0213C216.697 28.313 216.575 28.6908 216.575 29.1548C216.575 29.8177 216.817 30.3182 217.3 30.6562C217.784 30.9943 218.401 31.1634 219.15 31.1634ZM233.498 24.5511V33.5H229.899V18.2273H233.339V20.8224H233.518C233.869 19.9673 234.429 19.2879 235.198 18.7841C235.974 18.2803 236.932 18.0284 238.072 18.0284C239.126 18.0284 240.044 18.2538 240.826 18.7045C241.615 19.1553 242.225 19.8082 242.656 20.6634C243.093 21.5185 243.309 22.5559 243.302 23.7756V33.5H239.702V24.3324C239.702 23.3116 239.437 22.5128 238.907 21.9361C238.383 21.3594 237.658 21.071 236.729 21.071C236.1 21.071 235.54 21.2102 235.049 21.4886C234.565 21.7604 234.184 22.1548 233.906 22.6719C233.634 23.1889 233.498 23.8153 233.498 24.5511ZM253.623 33.7983C252.098 33.7983 250.789 33.4635 249.695 32.794C248.608 32.1245 247.77 31.1998 247.18 30.0199C246.596 28.8333 246.305 27.4678 246.305 25.9233C246.305 24.3722 246.603 23.0033 247.2 21.8168C247.796 20.6236 248.638 19.6955 249.725 19.0327C250.819 18.3632 252.112 18.0284 253.603 18.0284C254.843 18.0284 255.94 18.2571 256.894 18.7145C257.855 19.1652 258.621 19.8049 259.191 20.6335C259.761 21.4555 260.086 22.4167 260.166 23.517H256.725C256.586 22.7812 256.255 22.1681 255.731 21.6776C255.214 21.1804 254.521 20.9318 253.653 20.9318C252.917 20.9318 252.271 21.1307 251.714 21.5284C251.157 21.9195 250.723 22.483 250.411 23.2188C250.106 23.9545 249.954 24.8362 249.954 25.8636C249.954 26.9044 250.106 27.7992 250.411 28.5483C250.716 29.2907 251.144 29.8641 251.694 30.2685C252.251 30.6662 252.904 30.8651 253.653 30.8651C254.183 30.8651 254.657 30.7656 255.075 30.5668C255.499 30.3613 255.854 30.0663 256.139 29.6818C256.424 29.2973 256.619 28.83 256.725 28.2798H260.166C260.079 29.3603 259.761 30.3182 259.211 31.1534C258.661 31.982 257.912 32.6316 256.964 33.1023C256.016 33.5663 254.902 33.7983 253.623 33.7983ZM269.883 33.7983C268.351 33.7983 267.029 33.4801 265.915 32.8438C264.808 32.2008 263.956 31.2926 263.36 30.1193C262.763 28.9394 262.465 27.5507 262.465 25.9531C262.465 24.3821 262.763 23.0033 263.36 21.8168C263.963 20.6236 264.805 19.6955 265.885 19.0327C266.966 18.3632 268.235 18.0284 269.694 18.0284C270.635 18.0284 271.523 18.1809 272.358 18.4858C273.2 18.7841 273.943 19.2481 274.586 19.8778C275.235 20.5076 275.746 21.3097 276.117 22.2841C276.488 23.2519 276.674 24.4053 276.674 25.7443V26.848H264.155V24.4219H273.223C273.217 23.7325 273.068 23.1193 272.776 22.5824C272.484 22.0388 272.077 21.6113 271.553 21.2997C271.036 20.9882 270.433 20.8324 269.743 20.8324C269.008 20.8324 268.361 21.0114 267.804 21.3693C267.248 21.7206 266.813 22.1847 266.502 22.7614C266.197 23.3314 266.041 23.9579 266.035 24.6406V26.7585C266.035 27.6468 266.197 28.4091 266.522 29.0455C266.847 29.6752 267.301 30.1591 267.884 30.4972C268.467 30.8286 269.15 30.9943 269.932 30.9943C270.456 30.9943 270.93 30.9214 271.354 30.7756C271.778 30.6231 272.146 30.401 272.458 30.1094C272.769 29.8177 273.005 29.4564 273.164 29.0256L276.525 29.4034C276.312 30.2917 275.908 31.0672 275.312 31.7301C274.722 32.3864 273.966 32.8968 273.044 33.2614C272.123 33.6193 271.069 33.7983 269.883 33.7983Z\" fill=\"white\"/>\n  </svg>\n)\n\nexport const ChevronUpIcon = ({\n  secondaryColor,\n  secondaryWidth,\n  secondaryHeight,\n  ...props\n}: SVGProps & { secondaryWidth?: string; secondaryHeight?: string; secondaryColor?: string }) => (\n  <svg\n    width={secondaryWidth || '29'}\n    height={secondaryHeight || '28'}\n    viewBox=\"0 0 29 28\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <g clipPath=\"url(#clip0_564_11230)\">\n      <path\n        d=\"M7.2207 16.0615L13.9092 9.22363C14.1377 8.97754 14.4102 8.86328 14.7178 8.86328C15.0254 8.86328 15.3066 8.98633 15.5352 9.22363L22.2148 16.0615C22.4082 16.2549 22.5137 16.501 22.5137 16.791C22.5137 17.3799 22.0566 17.8369 21.4766 17.8369C21.1953 17.8369 20.9229 17.7314 20.7207 17.5205L14.7266 11.3594L8.71484 17.5205C8.52148 17.7227 8.24902 17.8369 7.95898 17.8369C7.37891 17.8369 6.92188 17.3799 6.92188 16.791C6.92188 16.5098 7.02734 16.2549 7.2207 16.0615Z\"\n        fill={secondaryColor || themeVars.colors.textSecondary}\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_564_11230\">\n        <rect width=\"28\" height=\"28\" fill=\"white\" transform=\"translate(0.716797)\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n\nexport const BackArrowIcon = (props: SVGProps) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" {...props}>\n    <path d=\"M5.676 13.645c0 .263.114.527.316.72l5.801 5.792c.21.202.44.3.694.3.554 0 .958-.396.958-.933a.934.934 0 00-.29-.694l-1.977-2.004-2.55-2.329 2.049.123h10.652c.58 0 .985-.404.985-.975 0-.58-.405-.985-.985-.985H10.677l-2.04.123 2.54-2.329 1.978-2.004a.934.934 0 00.29-.694c0-.536-.404-.932-.958-.932-.255 0-.492.097-.72.317l-5.775 5.774a1.012 1.012 0 00-.316.73z\" />\n  </svg>\n)\n\nexport const VerifiedIcon = (props: SVGProps) => {\n  const theme = useTheme()\n  return (\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <path\n        d=\"M4.52795 13.8056C4.52719 14.4043 4.6712 14.8474 4.95997 15.135C5.24798 15.4233 5.68496 15.5651 6.27091 15.5605H7.57497C7.62945 15.5585 7.68379 15.5676 7.73463 15.5873C7.78547 15.607 7.83176 15.6369 7.87062 15.6752L8.79884 16.5928C9.22054 17.0142 9.63382 17.2237 10.0387 17.2214C10.4436 17.2191 10.8569 17.0096 11.2786 16.5928L12.1954 15.6752C12.2356 15.6365 12.2832 15.6063 12.3354 15.5866C12.3876 15.5669 12.4433 15.558 12.499 15.5605H13.7951C14.3871 15.5613 14.8283 15.4171 15.1186 15.1281C15.4089 14.839 15.5541 14.3959 15.5541 13.7987V12.5014C15.5511 12.389 15.5923 12.2799 15.6687 12.1974L16.5854 11.2798C17.0125 10.86 17.2245 10.4467 17.2214 10.0399C17.2184 9.63305 17.0064 9.21935 16.5854 8.79878L15.6687 7.88115C15.592 7.79886 15.5509 7.68965 15.5541 7.57719V6.2799C15.5533 5.68191 15.4093 5.23878 15.1221 4.95049C14.8348 4.66221 14.3925 4.51806 13.7951 4.51806H12.499C12.4433 4.52036 12.3877 4.51138 12.3355 4.49168C12.2834 4.47197 12.2357 4.44193 12.1954 4.40336L11.2786 3.48574C10.8569 3.06439 10.4436 2.85487 10.0387 2.85717C9.63382 2.85946 9.22054 3.06898 8.79884 3.48574L7.87062 4.40336C7.83164 4.44148 7.78536 4.4713 7.73454 4.49101C7.68373 4.51072 7.62943 4.51993 7.57497 4.51806H6.27091C5.67961 4.51883 5.23995 4.66182 4.95194 4.94705C4.66393 5.23228 4.51992 5.67656 4.51992 6.2799V7.58063C4.52314 7.69309 4.48197 7.80229 4.40533 7.88459L3.48859 8.80222C3.06765 9.22203 2.85718 9.63572 2.85718 10.0433C2.85718 10.4509 3.07033 10.8653 3.49662 11.2867L4.41336 12.2043C4.48979 12.2867 4.53092 12.3958 4.52795 12.5083V13.8056Z\"\n        fill={theme.accentAction}\n      />\n      <path\n        d=\"M9.99737 12.4943C9.86205 12.7005 9.6623 12.8164 9.43032 12.8164C9.19191 12.8164 9.00504 12.7198 8.83106 12.4943L7.31036 10.6385C7.20082 10.5032 7.14282 10.3614 7.14282 10.2068C7.14282 9.88458 7.38768 9.63327 7.70342 9.63327C7.89673 9.63327 8.05138 9.70415 8.20603 9.90391L9.40455 11.4311L11.9498 7.34577C12.0851 7.12669 12.2591 7.02359 12.4524 7.02359C12.7553 7.02359 13.0388 7.23623 13.0388 7.55197C13.0388 7.70017 12.9615 7.85482 12.8777 7.99014L9.99737 12.4943Z\"\n        fill=\"white\"\n      />\n    </svg>\n  )\n}\n\nexport const PoolIcon = ({ width, height, ...props }: SVGProps) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={`0 0 ${width} ${height}`}\n    {...props}\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M5.19993 7.5915H12.3999V3.59138C12.3999 1.82406 13.8326 0.39143 15.5999 0.39143C17.3672 0.39143 18.8 1.82406 18.8 3.59138H17.1999C17.1999 2.70774 16.4835 1.99148 15.5999 1.99148C14.7162 1.99148 14 2.70774 14 3.59138V12.3915H12.3999V9.19155H5.19993V10.7915H3.59988V3.59145C3.59988 1.82413 5.03265 0.391498 6.79998 0.391498C8.5673 0.391498 9.99993 1.82413 9.99993 3.59145H8.39988C8.39988 2.70781 7.68362 1.99154 6.79998 1.99154C5.91633 1.99154 5.19993 2.70781 5.19993 3.59145V7.5915ZM1.49707 14.7342L0.902832 13.2487C3.75352 12.1084 6.88055 12.1084 10.2529 13.2325C13.2806 14.2417 16.0201 14.2417 18.5027 13.2487L19.097 14.7342C16.2463 15.8745 13.1192 15.8745 9.7469 14.7503C6.71916 13.7411 3.9797 13.7411 1.49707 14.7342ZM1.49707 18.734L0.902832 17.2485C3.75352 16.1082 6.88055 16.1082 10.2529 17.2324C13.2806 18.2416 16.0201 18.2416 18.5027 17.2485L19.097 18.734C16.2463 19.8743 13.1192 19.8743 9.7469 18.7502C6.71916 17.7411 3.9797 17.7411 1.49707 18.734Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const XMarkIcon = (props: SVGProps) => (\n  <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fill={props.fill ?? themeVars.colors.textSecondary}\n      d=\"M10.2706 27.2148C9.74321 27.7421 9.7181 28.6838 10.2831 29.2362C10.8356 29.7887 11.7773 29.7761 12.3046 29.2488L19.9887 21.5521L27.6855 29.2488C28.2254 29.7887 29.1545 29.7887 29.7069 29.2362C30.2468 28.6712 30.2594 27.7547 29.7069 27.2148L22.0228 19.518L29.7069 11.8339C30.2594 11.294 30.2594 10.3649 29.7069 9.81241C29.1419 9.27251 28.2254 9.25995 27.6855 9.79985L19.9887 17.4966L12.3046 9.79985C11.7773 9.27251 10.823 9.2474 10.2831 9.81241C9.73066 10.3649 9.74321 11.3065 10.2706 11.8339L17.9673 19.518L10.2706 27.2148Z\"\n    />\n  </svg>\n)\n\nexport const ArrowRightIcon = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" {...props} xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M12.7494 7.79771C12.7494 7.64202 12.6842 7.49135 12.5686 7.38086L9.26897 4.08119C9.13839 3.95564 9.00279 3.90039 8.86216 3.90039C8.54074 3.90039 8.30971 4.1264 8.30971 4.43276C8.30971 4.59347 8.375 4.72907 8.47545 4.82952L9.60547 5.97461L11.0619 7.30552L9.89676 7.23521H3.80971C3.47321 7.23521 3.24219 7.46624 3.24219 7.79771C3.24219 8.12416 3.47321 8.35519 3.80971 8.35519H9.89676L11.0619 8.28488L9.60547 9.61579L8.47545 10.7609C8.375 10.8613 8.30971 10.9969 8.30971 11.1576C8.30971 11.464 8.54074 11.69 8.86216 11.69C9.00279 11.69 9.13839 11.6348 9.25893 11.5193L12.5686 8.20954C12.6842 8.09905 12.7494 7.94838 12.7494 7.79771Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const ExternalIcon = (props: SVGProps) => (\n  <svg {...props} viewBox=\"0 0 28 28\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M4.91993 13.9991C4.91993 18.9722 9.03078 23.0758 13.9946 23.0782C13.9953 23.0782 13.9959 23.0782 13.9966 23.0782C13.997 23.0782 13.9974 23.0782 13.9978 23.0782C13.9982 23.0782 13.9986 23.0782 13.999 23.0782C13.9997 23.0782 14.0003 23.0782 14.001 23.0782C18.9648 23.0758 23.0757 18.9722 23.0757 13.9991C23.0757 9.43823 19.5985 5.59653 15.1841 5.00029C14.8058 4.94735 14.4136 4.92 14.0078 4.92C14.0045 4.92 14.0011 4.92 13.9978 4.92C13.9945 4.92 13.9911 4.92 13.9878 4.92C9.36477 4.92 5.49758 8.47078 4.97903 12.9708C4.97912 12.9708 4.97921 12.9707 4.9793 12.9707C4.94009 13.3086 4.91993 13.6518 4.91993 13.9991ZM18.4807 13.3839L18.4814 13.3663C18.4375 12.2764 18.2969 11.2745 18.0596 10.3692C18.7499 10.1516 19.3569 9.87637 19.8424 9.55441C19.9241 9.50192 20.0028 9.4483 20.0786 9.39363C20.9488 10.5186 21.52 11.8985 21.6343 13.3839H18.4807ZM17.2222 14.6143H14.6143V17.0928C14.6176 17.093 14.6211 17.0931 14.6245 17.0933C15.3934 17.1203 16.1361 17.2166 16.8267 17.3477C17.0464 16.5128 17.187 15.5899 17.2222 14.6143ZM14.6232 18.3238C14.6707 18.3262 14.7263 18.3287 14.7883 18.3313C15.3825 18.3611 15.9463 18.4207 16.4663 18.5167C15.9922 19.7809 15.3428 20.7031 14.6143 21.0468V18.3234C14.6172 18.3235 14.6202 18.3237 14.6232 18.3238ZM16.2881 21.304C16.2563 21.3075 16.2267 21.311 16.1996 21.3145C16.7877 20.7176 17.3063 19.8565 17.688 18.8155C18.3032 19.0089 18.8218 19.2462 19.2525 19.545C18.4189 20.3445 17.4042 20.9548 16.2881 21.304ZM13.3814 18.3234V21.0468C12.6529 20.7031 12.0034 19.7809 11.5293 18.5167C12.0999 18.4113 12.7231 18.3498 13.3814 18.3234ZM13.3814 14.6143H10.7734C10.8086 15.5899 10.9492 16.5128 11.1689 17.3477C11.8595 17.2166 12.6022 17.1203 13.3711 17.0933C13.3746 17.0931 13.378 17.093 13.3814 17.0928V14.6143ZM9.51492 13.3839H6.36133C6.47559 11.8985 7.04688 10.5186 7.917 9.39363C7.99279 9.4483 8.07156 9.50191 8.15322 9.5544C8.6387 9.87637 9.24574 10.1516 9.93606 10.3692C9.69875 11.2745 9.55813 12.2764 9.51418 13.3663L9.51492 13.3839ZM18.631 8.85777C18.8652 8.74186 19.0785 8.61524 19.27 8.47957C18.4126 7.63961 17.3548 7.0174 16.166 6.66499C16.7786 7.26197 17.3125 8.138 17.7069 9.22351C17.7978 9.1952 17.8866 9.16558 17.9734 9.13471C18.2063 9.04964 18.4255 8.95751 18.631 8.85777ZM10.2888 9.22351C10.6831 8.138 11.217 7.26197 11.8296 6.66499C10.6408 7.0174 9.58305 7.63961 8.72559 8.47957C8.91713 8.61524 9.13042 8.74186 9.36462 8.85777C9.57011 8.95752 9.78933 9.04965 10.0223 9.13472C10.109 9.16559 10.1979 9.1952 10.2888 9.22351ZM14.6143 6.96014V9.71873C15.2726 9.69231 15.9045 9.63081 16.4839 9.52547C16.0098 8.23491 15.3428 7.28636 14.6143 6.96014ZM13.3814 6.96014C12.6528 7.28636 11.9858 8.23491 11.5117 9.52547C12.0911 9.63081 12.7231 9.69231 13.3814 9.71873V6.96014ZM17.2222 13.3839C17.1871 12.4267 17.0467 11.5046 16.836 10.6878C16.1446 10.8272 15.3925 10.9231 14.6143 10.9493V13.3839H17.2222ZM13.3814 13.3839V10.9493C12.6031 10.9231 11.851 10.8272 11.1596 10.6878C10.949 11.5046 10.8086 12.4267 10.7734 13.3839H13.3814ZM9.52539 14.6143C9.56055 15.7218 9.70996 16.7501 9.94727 17.6641C9.14746 17.919 8.46192 18.2442 7.94336 18.6397C7.05567 17.5059 6.47559 16.1173 6.36133 14.6143H9.52539ZM10.3076 18.8155C10.6943 19.8702 11.2217 20.7403 11.8193 21.338C10.6592 20.9952 9.6045 20.3712 8.74317 19.545C9.17383 19.2462 9.69239 19.0089 10.3076 18.8155ZM18.4702 14.6143C18.4351 15.7218 18.2857 16.7501 18.0484 17.6641C18.8482 17.919 19.5337 18.2442 20.0523 18.6397C20.94 17.5059 21.52 16.1173 21.6343 14.6143H18.4702Z\"\n      fill={props.fill}\n    />\n  </svg>\n)\n\nexport const InstagramIcon = (props: SVGProps) => (\n  <svg role=\"img\" viewBox=\"-3 -3 23 23\" xmlns=\"http://www.w3.org/2000/svg\" {...props} fill=\"none\">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M4.16295 0.285156H11.2695C13.5526 0.285156 15.4305 2.17023 15.4305 4.45603V11.5429C15.4305 13.8313 13.5499 15.7137 11.2695 15.7137H4.16295C1.87988 15.7137 0.00195312 13.8313 0.00195312 11.5429V4.45603C0.00195312 2.16754 1.87988 0.285156 4.16295 0.285156ZM11.859 2.97813C12.0924 2.98133 12.3154 3.0757 12.4804 3.24117C12.6455 3.40663 12.7397 3.63013 12.7429 3.86411C12.7395 4.098 12.6453 4.32136 12.4803 4.48671C12.3152 4.65206 12.0923 4.74636 11.859 4.74956C11.7425 4.75115 11.6269 4.72934 11.519 4.68542C11.4111 4.64149 11.313 4.57634 11.2306 4.49381C11.1482 4.41127 11.0832 4.31303 11.0393 4.20488C10.9954 4.09673 10.9736 3.98086 10.9751 3.86411C10.9735 3.74732 10.9953 3.63139 11.0391 3.52318C11.083 3.41497 11.148 3.31666 11.2304 3.23407C11.3128 3.15147 11.4109 3.08628 11.5188 3.04232C11.6268 2.99836 11.7425 2.97653 11.859 2.97813ZM7.69797 3.79409H7.73451C10.0176 3.79409 11.9326 5.71364 11.9326 8.00213C11.9326 10.3278 10.0176 12.2102 7.73451 12.2102H7.69797C5.4149 12.2102 3.53698 10.3278 3.53698 8.00213C3.53698 5.71364 5.4149 3.79409 7.69797 3.79409ZM7.69797 5.23376H7.73451C9.24438 5.23376 10.4963 6.48867 10.4963 8.00213C10.4963 9.5522 9.24438 10.8071 7.73451 10.8071H7.69797C6.1881 10.8071 4.93615 9.5522 4.93615 8.00213C4.93615 6.48867 6.1881 5.23376 7.69797 5.23376ZM4.19949 1.61386H11.233C11.9945 1.61486 12.7245 1.91856 13.2629 2.45834C13.8013 2.99811 14.1041 3.7299 14.105 4.49319V11.5062C14.104 12.2694 13.8011 13.0011 13.2627 13.5407C12.7243 14.0804 11.9944 14.384 11.233 14.385H4.19949C3.4381 14.384 2.70818 14.0804 2.1698 13.5407C1.63141 13.0011 1.32852 12.2694 1.32752 11.5062V4.49427C1.32837 3.73098 1.63121 2.99919 2.16961 2.45942C2.70801 1.91964 3.43801 1.61594 4.19949 1.61494V1.61386Z\"\n      fill={props.fill}\n    />\n  </svg>\n)\n\nexport const EllipsisIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M10 10.8334C10.4603 10.8334 10.8334 10.4603 10.8334 10C10.8334 9.53978 10.4603 9.16669 10 9.16669C9.5398 9.16669 9.16671 9.53978 9.16671 10C9.16671 10.4603 9.5398 10.8334 10 10.8334Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M15.8334 10.8334C16.2936 10.8334 16.6667 10.4603 16.6667 10C16.6667 9.53978 16.2936 9.16669 15.8334 9.16669C15.3731 9.16669 15 9.53978 15 10C15 10.4603 15.3731 10.8334 15.8334 10.8334Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M4.16671 10.8334C4.62694 10.8334 5.00004 10.4603 5.00004 10C5.00004 9.53978 4.62694 9.16669 4.16671 9.16669C3.70647 9.16669 3.33337 9.53978 3.33337 10C3.33337 10.4603 3.70647 10.8334 4.16671 10.8334Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const LightningBoltIcon = (props: SVGProps) => (\n  <svg {...props} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M6.51562 12.6003C6.51562 12.9092 6.7567 13.1427 7.08817 13.1427H11.4576L9.15988 19.3126C8.851 20.1338 9.70229 20.5707 10.2447 19.9078L17.281 11.1991C17.4166 11.0258 17.4844 10.8676 17.4844 10.6943C17.4844 10.3779 17.2433 10.1519 16.9118 10.1519H12.5424L14.8401 3.97447C15.149 3.15332 14.2977 2.71638 13.7553 3.38686L6.72656 12.0956C6.59096 12.2613 6.51562 12.4195 6.51562 12.6003Z\"\n      fill=\"#FB118E\"\n    />\n    <defs>\n      <linearGradient\n        id=\"paint0_linear_1845_11847\"\n        x1=\"17.4844\"\n        y1=\"3.05859\"\n        x2=\"1.90385\"\n        y2=\"13.0107\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"#4673FA\" />\n        <stop offset=\"1\" stopColor=\"#9646FA\" />\n      </linearGradient>\n    </defs>\n  </svg>\n)\n\nexport const SweepIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M13.4177 11.9534C12.3508 11.6675 11.2541 12.3006 10.9682 13.3676C9.90129 13.0817 8.80461 13.7148 8.51873 14.7818L8.25991 15.7477M13.4177 11.9534C14.4846 12.2392 15.1178 13.3359 14.8319 14.4028C15.8989 14.6887 16.532 15.7855 16.2461 16.8524L15.9873 17.8183M13.4177 11.9534L16.0059 2.2941M8.25991 15.7477L15.9873 17.8183M8.25991 15.7477C8.25991 15.7477 7.74227 17.6796 7.48345 18.6455C7.22463 19.6114 5.99989 20.3185 5.99989 20.3185C9.86359 21.3538 12.3131 19.9396 12.3131 19.9396L11.7954 21.8714C13.4053 22.3028 14.9197 21.8027 15.2109 20.716L15.9873 17.8183\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M5.18229 6.58808C5.25706 6.38601 5.54287 6.38601 5.61764 6.58808C5.99377 7.60457 6.79521 8.406 7.8117 8.78214C8.01377 8.85691 8.01377 9.14272 7.8117 9.21749C6.79521 9.59363 5.99377 10.3951 5.61764 11.4116C5.54286 11.6136 5.25706 11.6136 5.18229 11.4116C4.80615 10.3951 4.00471 9.59363 2.98822 9.21749C2.78615 9.14272 2.78615 8.85691 2.98822 8.78214C4.00471 8.406 4.80615 7.60457 5.18229 6.58808Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const CrossIcon = (props: SVGProps) => (\n  <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M9.0304 17.9341C8.66126 18.3032 8.64369 18.9624 9.03919 19.3403C9.41712 19.7358 10.0851 19.7183 10.4542 19.3491L14.7169 15.0864L18.9796 19.3491C19.3576 19.7271 20.0079 19.7358 20.3859 19.3403C20.7814 18.9624 20.7726 18.3032 20.3947 17.9253L16.132 13.6626L20.3947 9.40869C20.7726 9.02197 20.7814 8.37158 20.3859 7.99365C20.0079 7.59814 19.3576 7.60693 18.9796 7.98486L14.7169 12.2476L10.4542 7.98486C10.0851 7.61572 9.41712 7.59814 9.03919 7.99365C8.64369 8.37158 8.66126 9.03076 9.0304 9.3999L13.2931 13.6626L9.0304 17.9341Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const ArrowsIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M8.5166 5.71191C8.91211 5.29883 9.52734 5.30762 9.91406 5.71191L14.3438 10.2471C14.5195 10.4229 14.6338 10.6953 14.6338 10.9326C14.6338 11.4863 14.2471 11.8643 13.7021 11.8643C13.4385 11.8643 13.2275 11.7764 13.0518 11.5918L11.2412 9.71094L10.0811 8.375L10.1514 10.2383L10.1514 21.6465C10.1514 22.1914 9.75586 22.5869 9.21094 22.5869C8.66602 22.5869 8.2793 22.1914 8.2793 21.6465L8.2793 10.2383L8.34082 8.375L7.18945 9.71094L5.37891 11.5918C5.20313 11.7764 4.9834 11.8643 4.71973 11.8643C4.18359 11.8643 3.79688 11.4863 3.79688 10.9326C3.79688 10.6953 3.91113 10.4229 4.08691 10.2471L8.5166 5.71191ZM20.1533 22.2793C19.7578 22.6924 19.1426 22.6836 18.7559 22.2793L14.3262 17.7529C14.1504 17.5684 14.0361 17.2959 14.0361 17.0586C14.0361 16.5137 14.4229 16.1357 14.9678 16.1357C15.2227 16.1357 15.4424 16.2236 15.6182 16.3994L17.4287 18.2803L18.5801 19.6162L18.5186 17.7529L18.5186 6.34473C18.5186 5.80859 18.9141 5.4043 19.459 5.4043C19.9951 5.4043 20.3906 5.80859 20.3906 6.34473L20.3906 17.7529L20.3291 19.6162L21.4805 18.2803L23.291 16.3994C23.4668 16.2236 23.6865 16.1357 23.9414 16.1357C24.4863 16.1357 24.873 16.5137 24.873 17.0586C24.873 17.2959 24.7588 17.5684 24.583 17.7529L20.1533 22.2793Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const ReversedArrowsIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 3 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M19.4834 5.71191C19.0879 5.29883 18.4727 5.30762 18.0859 5.71191L13.6562 10.2471C13.4805 10.4229 13.3662 10.6953 13.3662 10.9326C13.3662 11.4863 13.7529 11.8643 14.2979 11.8643C14.5615 11.8643 14.7725 11.7764 14.9482 11.5918L16.7588 9.71094L17.9189 8.375L17.8486 10.2383L17.8486 21.6465C17.8486 22.1914 18.2441 22.5869 18.7891 22.5869C19.334 22.5869 19.7207 22.1914 19.7207 21.6465L19.7207 10.2383L19.6592 8.375L20.8105 9.71094L22.6211 11.5918C22.7969 11.7764 23.0166 11.8643 23.2803 11.8643C23.8164 11.8643 24.2031 11.4863 24.2031 10.9326C24.2031 10.6953 24.0889 10.4229 23.9131 10.2471L19.4834 5.71191ZM7.84668 22.2793C8.24218 22.6924 8.85742 22.6836 9.24414 22.2793L13.6738 17.7529C13.8496 17.5684 13.9639 17.2959 13.9639 17.0586C13.9639 16.5137 13.5771 16.1357 13.0322 16.1357C12.7773 16.1357 12.5576 16.2236 12.3818 16.3994L10.5713 18.2803L9.41992 19.6162L9.48144 17.7529L9.48144 6.34473C9.48144 5.80859 9.08594 5.4043 8.54101 5.4043C8.00488 5.4043 7.60937 5.80859 7.60937 6.34473L7.60937 17.7529L7.6709 19.6162L6.51953 18.2803L4.70898 16.3994C4.5332 16.2236 4.31347 16.1357 4.05859 16.1357C3.51367 16.1357 3.12695 16.5137 3.12695 17.0586C3.12695 17.2959 3.24121 17.5684 3.41699 17.7529L7.84668 22.2793Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const RarityVerifiedIcon = () => (\n  <svg width=\"17\" height=\"17\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M4.5686 3.53439C4.74662 3.33093 5.0038 3.21423 5.27414 3.21423L10.1451 3.21423C10.4154 3.21423 10.6726 3.33093 10.8506 3.53438L13.0437 6.04077C13.3654 6.40839 13.3509 6.96139 13.0104 7.31163L8.38181 12.0724C8.01367 12.4511 7.40558 12.4511 7.03744 12.0724L2.40887 7.31163C2.06836 6.96139 2.05385 6.40839 2.37552 6.04077L4.5686 3.53439Z\"\n      fill=\"#4673FA\"\n    />\n    <path\n      d=\"M7.50864 9.74988C7.31466 9.74988 7.15641 9.6669 7.01348 9.47501L5.76283 7.92953C5.67094 7.81544 5.625 7.69097 5.625 7.56131C5.625 7.29682 5.82919 7.079 6.09463 7.079C6.25288 7.079 6.37539 7.14123 6.50301 7.30719L7.48822 8.5778L9.60157 5.14456C9.70877 4.96823 9.85681 4.87488 10.0151 4.87488C10.2703 4.87488 10.5 5.05639 10.5 5.32607C10.5 5.44536 10.4438 5.57501 10.3673 5.69429L7.97827 9.47501C7.86597 9.65653 7.69751 9.74988 7.50864 9.74988Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const BrokenLinkIcon = (props: SVGProps) => (\n  <svg width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <g clipPath=\"url(#clip0_79_4612)\">\n      <path\n        d=\"M14.4344 11.3181L16.9344 8.81813C17.6934 8.03229 18.1133 6.97978 18.1039 5.8873C18.0944 4.79481 17.6562 3.74976 16.8836 2.97722C16.1111 2.20469 15.066 1.76649 13.9735 1.75699C12.8811 1.7475 11.8286 2.16748 11.0427 2.92647L9.60938 4.35147\"\n        stroke=\"#98A1C0\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M5.20088 8.75098L2.70088 11.251C1.94189 12.0368 1.52191 13.0893 1.53141 14.1818C1.5409 15.2743 1.9791 16.3194 2.75164 17.0919C3.52417 17.8644 4.56922 18.3026 5.66171 18.3121C6.7542 18.3216 7.80671 17.9016 8.59255 17.1426L10.0175 15.7176\"\n        stroke=\"#98A1C0\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M5 3.24316L14.7368 16.6952\"\n        stroke=\"#98A1C0\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_79_4612\">\n        <rect width=\"20\" height=\"20\" fill=\"white\" transform=\"translate(0.128906 0.0341797)\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n\nexport const RowsCollpsedIcon = () => (\n  <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M13.9912 5.42773C13.71 5.42773 13.4639 5.55957 13.1738 5.78809L7.24121 10.5869C7.03027 10.7627 6.89844 11.0264 6.89844 11.3516C6.89844 11.9492 7.38184 12.3887 7.93555 12.3887C8.19043 12.3887 8.44531 12.292 8.7002 12.0898L14 7.81836L19.291 12.0898C19.5371 12.292 19.8008 12.3887 20.0557 12.3887C20.6094 12.3887 21.0928 11.9492 21.0928 11.3516C21.0928 11.0264 20.9609 10.7627 20.75 10.5869L14.8086 5.78809C14.5273 5.55957 14.2812 5.42773 13.9912 5.42773ZM13.9912 21.7139C14.2812 21.7139 14.5273 21.5908 14.8086 21.3623L20.75 16.5635C20.9609 16.3789 21.0928 16.1152 21.0928 15.7988C21.0928 15.1924 20.6094 14.7529 20.0557 14.7529C19.8008 14.7529 19.5371 14.8584 19.291 15.0605L14 19.332L8.7002 15.0605C8.44531 14.8584 8.19043 14.7529 7.93555 14.7529C7.38184 14.7529 6.89844 15.1924 6.89844 15.7988C6.89844 16.1152 7.03027 16.3789 7.24121 16.5635L13.1738 21.3535C13.4639 21.5908 13.71 21.7139 13.9912 21.7139Z\"\n      fill=\"#70757A\"\n    />\n  </svg>\n)\n\nexport const RowsExpandedIcon = () => (\n  <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M13.9912 11.9609C14.2812 11.9609 14.5273 11.8379 14.8086 11.6094L20.75 6.81055C20.9609 6.62598 21.0928 6.3623 21.0928 6.0459C21.0928 5.43945 20.6094 5 20.0557 5C19.8008 5 19.5371 5.10547 19.291 5.30762L14 9.5791L8.7002 5.30762C8.44531 5.10547 8.19043 5 7.93555 5C7.38184 5 6.89844 5.43945 6.89844 6.0459C6.89844 6.3623 7.03027 6.62598 7.24121 6.81055L13.1738 11.6006C13.4639 11.8379 13.71 11.9609 13.9912 11.9609Z\"\n      fill=\"#70757A\"\n    />\n    <path\n      d=\"M14.0928 15C13.8115 15 13.5654 15.1318 13.2754 15.3604L7.34277 20.1592C7.13184 20.335 7 20.5986 7 20.9238C7 21.5215 7.4834 21.9609 8.03711 21.9609C8.29199 21.9609 8.54688 21.8643 8.80176 21.6621L14.1016 17.3906L19.3926 21.6621C19.6387 21.8643 19.9023 21.9609 20.1572 21.9609C20.7109 21.9609 21.1943 21.5215 21.1943 20.9238C21.1943 20.5986 21.0625 20.335 20.8516 20.1592L14.9102 15.3604C14.6289 15.1318 14.3828 15 14.0928 15Z\"\n      fill=\"#70757A\"\n    />\n  </svg>\n)\n\nexport const ClockIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M10.7474 4.99984C10.7474 4.58562 10.4116 4.24984 9.9974 4.24984C9.58318 4.24984 9.2474 4.58562 9.2474 4.99984H10.7474ZM9.9974 9.99984H9.2474C9.2474 10.2839 9.4079 10.5436 9.66199 10.6707L9.9974 9.99984ZM12.9953 12.3373C13.3658 12.5226 13.8163 12.3724 14.0015 12.0019C14.1868 11.6314 14.0366 11.1809 13.6661 10.9957L12.9953 12.3373ZM17.5807 9.99984C17.5807 14.188 14.1856 17.5832 9.9974 17.5832V19.0832C15.014 19.0832 19.0807 15.0164 19.0807 9.99984H17.5807ZM9.9974 17.5832C5.80924 17.5832 2.41406 14.188 2.41406 9.99984H0.914062C0.914062 15.0164 4.98081 19.0832 9.9974 19.0832V17.5832ZM2.41406 9.99984C2.41406 5.81168 5.80924 2.4165 9.9974 2.4165V0.916504C4.98081 0.916504 0.914062 4.98325 0.914062 9.99984H2.41406ZM9.9974 2.4165C14.1856 2.4165 17.5807 5.81168 17.5807 9.99984H19.0807C19.0807 4.98325 15.014 0.916504 9.9974 0.916504V2.4165ZM9.2474 4.99984V9.99984H10.7474V4.99984H9.2474ZM9.66199 10.6707L12.9953 12.3373L13.6661 10.9957L10.3328 9.32902L9.66199 10.6707Z\"\n      fill={vars.color.gray300}\n    />\n  </svg>\n)\n\nexport const ApprovedCheckmarkIcon = (props: SVGProps) => (\n  <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M13.7464 21.1101C13.3792 21.6796 12.8372 22 12.2076 22C11.5607 22 11.0536 21.733 10.5814 21.1101L6.45464 15.9844C6.15738 15.6107 6 15.2191 6 14.792C6 13.9021 6.66448 13.208 7.52131 13.208C8.0459 13.208 8.46557 13.4038 8.88525 13.9555L12.1377 18.1735L19.0448 6.88988C19.412 6.28476 19.8842 6 20.4087 6C21.2306 6 22 6.58732 22 7.4594C22 7.86874 21.7902 8.29588 21.5628 8.66963L13.7464 21.1101Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const FilterIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"1 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M18.3332 2.5H1.6665L8.33317 10.3833V15.8333L11.6665 17.5V10.3833L18.3332 2.5Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const MagnifyingGlassIcon = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M15 15L11.2439 11.2439M12.3821 6.69106C12.3821 9.83414 9.83414 12.3821 6.69106 12.3821C3.54797 12.3821 1 9.83414 1 6.69106C1 3.54797 3.54797 1 6.69106 1C9.83414 1 12.3821 3.54797 12.3821 6.69106Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const NavMagnifyingGlassIcon = () => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"24\"\n    height=\"24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    data-cy=\"magnifying-icon\"\n  >\n    <path\n      d=\"M10.5 18C14.6421 18 18 14.6421 18 10.5C18 6.35786 14.6421 3 10.5 3C6.35786 3 3 6.35786 3 10.5C3 14.6421 6.35786 18 10.5 18Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path d=\"M21 21L16 16\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n  </svg>\n)\n\nexport const BagIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" {...props}>\n    <path\n      d=\"M19.2893 5H4.5115C3.34557 5 2.40039 5.89543 2.40039 7V21C2.40039 22.1046 3.34557 23 4.5115 23H19.2893C20.4552 23 21.4004 22.1046 21.4004 21V7C21.4004 5.89543 20.4552 5 19.2893 5Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M9 5L9 4.25C9 3.45435 9.31607 2.69129 9.87868 2.12868C10.4413 1.56607 11.2044 1.25 12 1.25C12.7957 1.25 13.5587 1.56607 14.1213 2.12868C14.6839 2.69129 15 3.45435 15 4.25L15 5\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const HundredsOverflowIcon = () => (\n  <svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M0.781304 6.5554C0.565868 6.5554 0.381209 6.47964 0.227327 6.32812C0.073444 6.17661 -0.00231359 5.99195 5.38039e-05 5.77415C-0.00231359 5.56108 0.073444 5.37879 0.227327 5.22727C0.381209 5.07576 0.565868 5 0.781304 5C0.989637 5 1.17075 5.07576 1.32463 5.22727C1.48088 5.37879 1.56019 5.56108 1.56255 5.77415C1.56019 5.91856 1.52231 6.04995 1.44892 6.16832C1.37789 6.2867 1.2832 6.38139 1.16483 6.45242C1.04882 6.52107 0.920982 6.5554 0.781304 6.5554Z\"\n      fill=\"white\"\n    />\n    <path\n      d=\"M3.68169 6.5554C3.46626 6.5554 3.2816 6.47964 3.12772 6.32812C2.97383 6.17661 2.89808 5.99195 2.90044 5.77415C2.89808 5.56108 2.97383 5.37879 3.12772 5.22727C3.2816 5.07576 3.46626 5 3.68169 5C3.89003 5 4.07114 5.07576 4.22502 5.22727C4.38127 5.37879 4.46058 5.56108 4.46294 5.77415C4.46058 5.91856 4.4227 6.04995 4.34931 6.16832C4.27829 6.2867 4.18359 6.38139 4.06522 6.45242C3.94921 6.52107 3.82137 6.5554 3.68169 6.5554Z\"\n      fill=\"white\"\n    />\n    <path\n      d=\"M6.58209 6.5554C6.36665 6.5554 6.18199 6.47964 6.02811 6.32812C5.87423 6.17661 5.79847 5.99195 5.80084 5.77415C5.79847 5.56108 5.87423 5.37879 6.02811 5.22727C6.18199 5.07576 6.36665 5 6.58209 5C6.79042 5 6.97153 5.07576 7.12541 5.22727C7.28166 5.37879 7.36097 5.56108 7.36333 5.77415C7.36097 5.91856 7.32309 6.04995 7.2497 6.16832C7.17868 6.2867 7.08398 6.38139 6.96561 6.45242C6.8496 6.52107 6.72176 6.5554 6.58209 6.5554Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const TagIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" {...props}>\n    <path\n      d=\"M8.33333 8.33333H8.34097M20.7908 14.2092L14.2183 20.7817C14.0481 20.9521 13.8459 21.0873 13.6233 21.1796C13.4007 21.2719 13.1622 21.3194 12.9213 21.3194C12.6803 21.3194 12.4418 21.2719 12.2192 21.1796C11.9966 21.0873 11.7944 20.9521 11.6242 20.7817L3.75 12.9167V3.75H12.9167L20.7908 11.6242C21.1323 11.9677 21.324 12.4323 21.324 12.9167C21.324 13.401 21.1323 13.8657 20.7908 14.2092Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const BarChartIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M12 20V10\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path d=\"M6 20V4\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path d=\"M18 20V16\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n  </svg>\n)\n\nexport const DiscordIcon = (props: SVGProps) => (\n  <svg role=\"img\" width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\" {...props} fill=\"none\">\n    <path\n      d=\"M27.2113 25.4989C25.6574 25.4989 24.3869 24.1067 24.3869 22.3837C24.3869 20.6607 25.63 19.2685 27.2113 19.2685C27.5983 19.2814 27.9789 19.3726 28.331 19.5367C28.6831 19.7007 28.9998 19.9345 29.2625 20.2243C29.5253 20.5141 29.729 20.8543 29.8617 21.225C29.9944 21.5956 30.0536 21.9895 30.0358 22.3837C30.0358 24.0927 28.7892 25.4989 27.2113 25.4989ZM16.7708 25.4989C15.2203 25.4989 13.9464 24.1067 13.9464 22.3837C13.9464 20.6607 15.1929 19.2685 16.7708 19.2685C17.1578 19.2814 17.5384 19.3726 17.8905 19.5367C18.2426 19.7007 18.5593 19.9345 18.822 20.2243C19.0848 20.5141 19.2885 20.8543 19.4212 21.225C19.5539 21.5956 19.6131 21.9895 19.5952 22.3837C19.5987 24.0927 18.3487 25.4989 16.7708 25.4989ZM32.8978 11.402C30.8261 10.4652 28.6454 9.80198 26.4087 9.42847C26.103 9.96986 25.8259 10.5276 25.5788 11.0992C23.2005 10.749 20.7851 10.749 18.4067 11.0992C18.1547 10.5281 17.8743 9.97046 17.5666 9.42847C15.3293 9.80279 13.1484 10.4684 11.0775 11.409C6.97921 17.4167 5.86241 23.2748 6.4191 29.0493C8.83313 30.8106 11.521 32.145 14.3699 32.9964C15.0139 32.1426 15.5852 31.2343 16.0775 30.2815C15.1502 29.9373 14.2533 29.5134 13.3965 29.0145C13.6185 28.8544 13.8405 28.6664 14.0522 28.5098C16.5478 29.6693 19.2586 30.2693 22.0013 30.2693C24.744 30.2693 27.4548 29.6693 29.9504 28.5098C30.1655 28.6838 30.3841 28.8578 30.6061 29.0145C29.7492 29.5157 28.851 29.9396 27.9217 30.2815C28.4139 31.2355 28.9852 32.145 29.6293 32.9999C32.4808 32.1479 35.171 30.8123 37.5869 29.0493C38.2222 22.3559 36.4531 16.55 32.8978 11.402Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const TwitterIcon = (props: SVGProps) => (\n  <svg {...props} role=\"img\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M21.7923 16.074C20.5417 9.18217 28.4609 5.08251 33.1294 10.0503C33.1294 10.0503 35.2141 9.43965 37.0472 8.21838C36.5107 9.80217 35.4837 11.1529 34.1294 12.0558C34.1294 12.0558 36.6307 11.7074 37.7143 11.0093C37.7143 11.0093 36.6307 13.3645 34.6306 14.2374C35.713 30.0313 19.4592 39.6302 6.28571 31.7758C6.28571 31.7758 12.7884 32.1242 15.5414 28.81C15.5414 28.81 11.5389 29.1643 9.53874 24.0997C9.53874 24.0997 11.0388 24.7103 12.54 23.9249C12.54 23.9249 7.87157 23.1394 7.45393 17.2953C7.45393 17.2953 8.95516 18.5165 10.6223 18.0795C10.6223 18.0795 5.45382 14.8527 8.37161 9.00736C8.37161 9.00736 13.8731 16.3303 21.7934 16.074H21.7923Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const DiscordIconMenu = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M17.0325 6.95914C16.0748 6.51107 15.0508 6.18542 13.9802 6C13.8487 6.23771 13.6951 6.55743 13.5892 6.81177C12.4512 6.64062 11.3236 6.64062 10.2065 6.81177C10.1006 6.55743 9.94354 6.23771 9.81089 6C8.73916 6.18542 7.71399 6.51226 6.7563 6.96152C4.82465 9.8805 4.30101 12.727 4.56283 15.5331C5.844 16.4898 7.08562 17.071 8.30628 17.4513C8.60767 17.0365 8.87646 16.5956 9.10803 16.1309C8.66701 15.9633 8.24461 15.7565 7.84549 15.5164C7.95137 15.438 8.05494 15.356 8.15501 15.2716C10.5894 16.4102 13.2343 16.4102 15.6396 15.2716C15.7408 15.356 15.8444 15.438 15.9491 15.5164C15.5488 15.7577 15.1253 15.9645 14.6842 16.1321C14.9158 16.5956 15.1834 17.0377 15.486 17.4525C16.7078 17.0722 17.9506 16.491 19.2318 15.5331C19.539 12.2801 18.707 9.45977 17.0325 6.95914ZM9.43967 13.8074C8.70891 13.8074 8.10962 13.1251 8.10962 12.2944C8.10962 11.4636 8.69611 10.7802 9.43967 10.7802C10.1833 10.7802 10.7825 11.4624 10.7697 12.2944C10.7709 13.1251 10.1833 13.8074 9.43967 13.8074ZM14.3549 13.8074C13.6242 13.8074 13.0249 13.1251 13.0249 12.2944C13.0249 11.4636 13.6113 10.7802 14.3549 10.7802C15.0985 10.7802 15.6978 11.4624 15.685 12.2944C15.685 13.1251 15.0985 13.8074 14.3549 13.8074Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const TwitterIconMenu = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M18.955 7.34849C18.4393 7.57725 17.885 7.73179 17.3033 7.80132C17.897 7.44542 18.3531 6.88184 18.5678 6.21026C18.012 6.53989 17.3966 6.77916 16.7415 6.90812C16.217 6.34918 15.4695 6 14.6424 6C13.0542 6 11.7665 7.28758 11.7665 8.87576C11.7665 9.10117 11.7919 9.32068 11.841 9.53116C9.45084 9.41124 7.33181 8.26628 5.91338 6.52636C5.66583 6.95109 5.52397 7.44507 5.52397 7.97213C5.52397 8.96989 6.03168 9.85012 6.80335 10.3658C6.33194 10.3509 5.8885 10.2215 5.50077 10.0061C5.50044 10.0181 5.50044 10.0302 5.50044 10.0423C5.50044 11.4356 6.49176 12.5979 7.80738 12.8623C7.56607 12.928 7.312 12.9631 7.04973 12.9631C6.86442 12.9631 6.6843 12.9451 6.50866 12.9116C6.87465 14.054 7.93669 14.8855 9.19518 14.9086C8.21094 15.68 6.97095 16.1398 5.62352 16.1398C5.39139 16.1398 5.16248 16.1261 4.9375 16.0996C6.21022 16.9156 7.72187 17.3917 9.34594 17.3917C14.6357 17.3917 17.5284 13.0096 17.5284 9.20917C17.5284 9.08449 17.5256 8.9605 17.52 8.83708C18.0819 8.43169 18.5694 7.92524 18.955 7.34849H18.955Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const GithubIconMenu = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M12 5.25C8.27062 5.25 5.25 8.34703 5.25 12.1707C5.25 15.2332 7.18219 17.8198 9.86531 18.7368C10.2028 18.7973 10.3294 18.5897 10.3294 18.408C10.3294 18.2437 10.3209 17.6987 10.3209 17.1191C8.625 17.4391 8.18625 16.6952 8.05125 16.3059C7.97531 16.1069 7.64625 15.4927 7.35938 15.3283C7.12312 15.1986 6.78562 14.8785 7.35094 14.8698C7.8825 14.8612 8.26219 15.3716 8.38875 15.5792C8.99625 16.626 9.96656 16.3318 10.3547 16.1502C10.4138 15.7003 10.5909 15.3975 10.785 15.2245C9.28312 15.0515 7.71375 14.4546 7.71375 11.8074C7.71375 11.0548 7.97531 10.4319 8.40563 9.94745C8.33812 9.77443 8.10187 9.06505 8.47312 8.11345C8.47312 8.11345 9.03844 7.93178 10.3294 8.82283C10.8694 8.66711 11.4431 8.58925 12.0169 8.58925C12.5906 8.58925 13.1644 8.66711 13.7044 8.82283C14.9953 7.92313 15.5606 8.11345 15.5606 8.11345C15.9319 9.06505 15.6956 9.77443 15.6281 9.94745C16.0584 10.4319 16.32 11.0461 16.32 11.8074C16.32 14.4632 14.7422 15.0515 13.2403 15.2245C13.485 15.4408 13.6959 15.856 13.6959 16.5048C13.6959 17.4305 13.6875 18.1745 13.6875 18.408C13.6875 18.5897 13.8141 18.806 14.1516 18.7368C16.8178 17.8198 18.75 15.2245 18.75 12.1707C18.75 8.34703 15.7294 5.25 12 5.25Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const CheckMarkIcon = (props: SVGProps) => (\n  <svg {...props} fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M16.6693 5.33789L7.5026 14.3175L3.33594 10.2358\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const GovernanceIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M18.75 16.5V6.00002C18.7512 5.7042 18.6939 5.41106 18.5813 5.13752C18.4686 4.86397 18.3029 4.61544 18.0938 4.40626C17.8846 4.19708 17.636 4.0314 17.3625 3.91876C17.089 3.80613 16.7958 3.74878 16.5 3.75002H3.75\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path d=\"M9.75 8.75H15.75\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path d=\"M9.75 12.75H15.75\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path\n      d=\"M2.07187 7.49977C1.829 7.22785 1.65585 6.90097 1.56733 6.54728C1.4788 6.19359 1.47756 5.82369 1.56369 5.46941C1.64983 5.11513 1.82077 4.7871 2.0618 4.51353C2.30283 4.23997 2.60673 4.02908 2.94734 3.89902C3.28795 3.76895 3.65507 3.72361 4.01709 3.76689C4.37911 3.81017 4.72519 3.94077 5.02554 4.14747C5.32589 4.35416 5.57151 4.63074 5.74126 4.95342C5.91101 5.27609 5.9998 5.63518 6 5.99977V17.9998C6.00019 18.3644 6.08899 18.7235 6.25874 19.0461C6.42849 19.3688 6.67411 19.6454 6.97446 19.8521C7.27481 20.0588 7.62089 20.1894 7.98291 20.2327C8.34493 20.2759 8.71205 20.2306 9.05266 20.1005C9.39327 19.9705 9.69717 19.7596 9.9382 19.486C10.1792 19.2125 10.3502 18.8844 10.4363 18.5301C10.5224 18.1759 10.5212 17.806 10.4327 17.4523C10.3441 17.0986 10.171 16.7717 9.92813 16.4998H20.4281C20.7177 16.8236 20.9074 17.2243 20.9743 17.6536C21.0411 18.0828 20.9823 18.5223 20.8048 18.9188C20.6274 19.3154 20.3389 19.6521 19.9743 19.8882C19.6096 20.1244 19.1844 20.25 18.75 20.2498H8.25\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const ChevronLeftIcon = (props: SVGProps) => (\n  <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M7 1L1 7L7 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n  </svg>\n)\n\nexport const ChevronRightIcon = styled(ChevronLeftIcon)`\n  transform: rotate(180deg);\n`\n\nexport const TrendingArrow = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M17.5 5.8335H18.25C18.25 5.41928 17.9142 5.0835 17.5 5.0835V5.8335ZM11.0227 12.4307L10.4876 12.9562C10.6286 13.0998 10.8214 13.1807 11.0227 13.1807C11.224 13.1807 11.4169 13.0998 11.5579 12.9562L11.0227 12.4307ZM7.61364 8.9585L8.14881 8.43305C8.00778 8.28941 7.81493 8.2085 7.61364 8.2085C7.41234 8.2085 7.21949 8.28941 7.07846 8.43305L7.61364 8.9585ZM1.96483 13.6414C1.67463 13.937 1.67899 14.4118 1.97456 14.702C2.27013 14.9922 2.74498 14.9878 3.03517 14.6923L1.96483 13.6414ZM13.4091 5.0835C12.9949 5.0835 12.6591 5.41928 12.6591 5.8335C12.6591 6.24771 12.9949 6.5835 13.4091 6.5835V5.0835ZM16.75 10.0002C16.75 10.4144 17.0858 10.7502 17.5 10.7502C17.9142 10.7502 18.25 10.4144 18.25 10.0002H16.75ZM16.9648 5.30805L10.4876 11.9053L11.5579 12.9562L18.0352 6.35894L16.9648 5.30805ZM11.5579 11.9053L8.14881 8.43305L7.07846 9.48394L10.4876 12.9562L11.5579 11.9053ZM7.07846 8.43305L1.96483 13.6414L3.03517 14.6923L8.14881 9.48394L7.07846 8.43305ZM13.4091 6.5835H17.5V5.0835H13.4091V6.5835ZM16.75 5.8335V10.0002H18.25V5.8335H16.75Z\"\n      fill={vars.color.gray300}\n    />\n  </svg>\n)\nexport const ActivityListingIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M14.7254 9.93992L9.94537 14.7199C9.82153 14.8439 9.67448 14.9422 9.51262 15.0093C9.35076 15.0764 9.17725 15.111 9.00203 15.111C8.82681 15.111 8.65331 15.0764 8.49145 15.0093C8.32958 14.9422 8.18253 14.8439 8.0587 14.7199L2.33203 8.99992V2.33325H8.9987L14.7254 8.05992C14.9737 8.30974 15.1131 8.64767 15.1131 8.99992C15.1131 9.35217 14.9737 9.6901 14.7254 9.93992V9.93992Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path d=\"M5.66797 5.66675H5.6763\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n  </svg>\n)\n\nexport const ActivitySaleIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M12.6667 4.00012H3.33333C2.59695 4.00012 2 4.54733 2 5.22234V13.7779C2 14.4529 2.59695 15.0001 3.33333 15.0001H12.6667C13.403 15.0001 14 14.4529 14 13.7779V5.22234C14 4.54733 13.403 4.00012 12.6667 4.00012Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M10 6.66675C10 7.19718 9.78929 7.70589 9.41421 8.08096C9.03914 8.45603 8.53043 8.66675 8 8.66675C7.46957 8.66675 6.96086 8.45603 6.58579 8.08096C6.21071 7.70589 6 7.19718 6 6.66675\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M6 4.00012L6 3.50012C6 2.96969 6.21071 2.46098 6.58579 2.08591C6.96086 1.71083 7.46957 1.50012 8 1.50012C8.53043 1.50012 9.03914 1.71083 9.41421 2.08591C9.78929 2.46098 10 2.96969 10 3.50012L10 4.00012\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const ActivityTransferIcon = (props: SVGProps) => (\n  <svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M14.6654 1.33337L7.33203 8.66671\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path\n      d=\"M14.6654 1.33337L9.9987 14.6667L7.33203 8.66671L1.33203 6.00004L14.6654 1.33337Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const ActivityExternalLinkIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <mask id=\"path-1-outside-1_3799_46574\" maskUnits=\"userSpaceOnUse\" x=\"2\" y=\"2\" width=\"15\" height=\"15\" fill=\"black\">\n      <rect fill=\"white\" x=\"2\" y=\"2\" width=\"15\" height=\"15\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M11.0078 3.5C11.0078 3.22386 11.2317 3 11.5078 3H15.5094L15.5127 3.00001C15.6416 2.99918 15.7709 3.04794 15.8693 3.14631C15.9877 3.26455 16.0344 3.42734 16.0094 3.58074V7.50474C16.0094 7.78088 15.7855 8.00474 15.5094 8.00474C15.2332 8.00474 15.0094 7.78088 15.0094 7.50474V4.71431L8.53338 11.1954C8.3382 11.3908 8.02161 11.3909 7.82627 11.1957C7.63093 11.0005 7.63081 10.6839 7.82599 10.4886L14.3095 4H11.5078C11.2317 4 11.0078 3.77614 11.0078 3.5ZM4.24437 6.24684C4.40078 6.09031 4.61283 6.00244 4.83386 6.00244H8.83544C9.11158 6.00244 9.33544 5.77858 9.33544 5.50244C9.33544 5.2263 9.11158 5.00244 8.83544 5.00244H4.83386C4.34736 5.00244 3.88087 5.19586 3.53699 5.54001C3.19311 5.88416 3 6.35083 3 6.83735V14.1794C3 14.6659 3.19311 15.1326 3.53699 15.4767C3.88087 15.8209 4.34736 16.0143 4.83386 16.0143H12.1701C12.6566 16.0143 13.1231 15.8209 13.467 15.4767C13.8108 15.1326 14.0039 14.6659 14.0039 14.1794V10.1746C14.0039 9.8985 13.7801 9.67464 13.5039 9.67464C13.2278 9.67464 13.0039 9.8985 13.0039 10.1746V14.1794C13.0039 14.4009 12.916 14.6133 12.7596 14.7699C12.6032 14.9264 12.3911 15.0143 12.1701 15.0143H4.83386C4.61283 15.0143 4.40078 14.9264 4.24437 14.7699C4.08795 14.6133 4 14.4009 4 14.1794V6.83735C4 6.61579 4.08795 6.40339 4.24437 6.24684Z\"\n      />\n    </mask>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M11.0078 3.5C11.0078 3.22386 11.2317 3 11.5078 3H15.5094L15.5127 3.00001C15.6416 2.99918 15.7709 3.04794 15.8693 3.14631C15.9877 3.26455 16.0344 3.42734 16.0094 3.58074V7.50474C16.0094 7.78088 15.7855 8.00474 15.5094 8.00474C15.2332 8.00474 15.0094 7.78088 15.0094 7.50474V4.71431L8.53338 11.1954C8.3382 11.3908 8.02161 11.3909 7.82627 11.1957C7.63093 11.0005 7.63081 10.6839 7.82599 10.4886L14.3095 4H11.5078C11.2317 4 11.0078 3.77614 11.0078 3.5ZM4.24437 6.24684C4.40078 6.09031 4.61283 6.00244 4.83386 6.00244H8.83544C9.11158 6.00244 9.33544 5.77858 9.33544 5.50244C9.33544 5.2263 9.11158 5.00244 8.83544 5.00244H4.83386C4.34736 5.00244 3.88087 5.19586 3.53699 5.54001C3.19311 5.88416 3 6.35083 3 6.83735V14.1794C3 14.6659 3.19311 15.1326 3.53699 15.4767C3.88087 15.8209 4.34736 16.0143 4.83386 16.0143H12.1701C12.6566 16.0143 13.1231 15.8209 13.467 15.4767C13.8108 15.1326 14.0039 14.6659 14.0039 14.1794V10.1746C14.0039 9.8985 13.7801 9.67464 13.5039 9.67464C13.2278 9.67464 13.0039 9.8985 13.0039 10.1746V14.1794C13.0039 14.4009 12.916 14.6133 12.7596 14.7699C12.6032 14.9264 12.3911 15.0143 12.1701 15.0143H4.83386C4.61283 15.0143 4.40078 14.9264 4.24437 14.7699C4.08795 14.6133 4 14.4009 4 14.1794V6.83735C4 6.61579 4.08795 6.40339 4.24437 6.24684Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M15.5094 3L15.51 2.8H15.5094V3ZM15.5127 3.00001L15.512 3.20002L15.514 3.20001L15.5127 3.00001ZM15.8693 3.14631L16.0107 3.00483V3.00483L15.8693 3.14631ZM16.0094 3.58074L15.812 3.54861C15.8103 3.55923 15.8094 3.56998 15.8094 3.58074H16.0094ZM15.0094 4.71431H15.2094C15.2094 4.6334 15.1606 4.56047 15.0859 4.52952C15.0111 4.49857 14.9251 4.51571 14.8679 4.57294L15.0094 4.71431ZM8.53338 11.1954L8.67486 11.3368V11.3368L8.53338 11.1954ZM7.82627 11.1957L7.68491 11.3372L7.82627 11.1957ZM7.82599 10.4886L7.96747 10.63L7.82599 10.4886ZM14.3095 4L14.451 4.14137C14.5081 4.08415 14.5252 3.99814 14.4942 3.92343C14.4633 3.84871 14.3904 3.8 14.3095 3.8V4ZM4.24437 6.24684L4.38585 6.38821H4.38585L4.24437 6.24684ZM3.53699 5.54001L3.39551 5.39865H3.39551L3.53699 5.54001ZM3.53699 15.4767L3.67846 15.3354L3.67846 15.3354L3.53699 15.4767ZM13.467 15.4767L13.6084 15.6181L13.467 15.4767ZM12.7596 14.7699L12.6181 14.6285L12.6181 14.6285L12.7596 14.7699ZM4.24437 14.7699L4.10289 14.9113H4.10289L4.24437 14.7699ZM11.5078 2.8C11.1212 2.8 10.8078 3.1134 10.8078 3.5H11.2078C11.2078 3.33431 11.3421 3.2 11.5078 3.2V2.8ZM15.5094 2.8H11.5078V3.2H15.5094V2.8ZM15.5133 2.80001L15.51 2.8L15.5087 3.2L15.512 3.20001L15.5133 2.80001ZM16.0107 3.00483C15.8729 2.86715 15.6916 2.79885 15.5114 2.80001L15.514 3.20001C15.5917 3.1995 15.6689 3.22873 15.728 3.28778L16.0107 3.00483ZM16.2068 3.61287C16.2417 3.39869 16.1765 3.17048 16.0107 3.00483L15.728 3.28778C15.7989 3.35862 15.8271 3.456 15.812 3.54861L16.2068 3.61287ZM16.2094 7.50474V3.58074H15.8094V7.50474H16.2094ZM15.5094 8.20474C15.896 8.20474 16.2094 7.89134 16.2094 7.50474H15.8094C15.8094 7.67042 15.6751 7.80474 15.5094 7.80474V8.20474ZM14.8094 7.50474C14.8094 7.89134 15.1228 8.20474 15.5094 8.20474V7.80474C15.3437 7.80474 15.2094 7.67042 15.2094 7.50474H14.8094ZM14.8094 4.71431V7.50474H15.2094V4.71431H14.8094ZM8.67486 11.3368L15.1509 4.85568L14.8679 4.57294L8.3919 11.0541L8.67486 11.3368ZM7.68491 11.3372C7.95838 11.6105 8.4016 11.6103 8.67486 11.3368L8.3919 11.0541C8.27479 11.1713 8.08484 11.1713 7.96764 11.0542L7.68491 11.3372ZM7.68452 10.3472C7.41126 10.6207 7.41143 11.0639 7.68491 11.3372L7.96764 11.0542C7.85044 10.9371 7.85036 10.7472 7.96747 10.63L7.68452 10.3472ZM14.168 3.85863L7.68452 10.3472L7.96747 10.63L14.451 4.14137L14.168 3.85863ZM11.5078 4.2H14.3095V3.8H11.5078V4.2ZM10.8078 3.5C10.8078 3.8866 11.1212 4.2 11.5078 4.2V3.8C11.3421 3.8 11.2078 3.66569 11.2078 3.5H10.8078ZM4.83386 5.80244C4.55974 5.80244 4.2968 5.91142 4.10289 6.10548L4.38585 6.38821C4.50476 6.2692 4.66593 6.20244 4.83386 6.20244V5.80244ZM8.83544 5.80244H4.83386V6.20244H8.83544V5.80244ZM9.13544 5.50244C9.13544 5.66813 9.00112 5.80244 8.83544 5.80244V6.20244C9.22204 6.20244 9.53544 5.88904 9.53544 5.50244H9.13544ZM8.83544 5.20244C9.00112 5.20244 9.13544 5.33676 9.13544 5.50244H9.53544C9.53544 5.11584 9.22204 4.80244 8.83544 4.80244V5.20244ZM4.83386 5.20244H8.83544V4.80244H4.83386V5.20244ZM3.67846 5.68138C3.98485 5.37475 4.40046 5.20244 4.83386 5.20244V4.80244C4.29427 4.80244 3.77689 5.01697 3.39551 5.39865L3.67846 5.68138ZM3.2 6.83735C3.2 6.40382 3.37208 5.988 3.67846 5.68138L3.39551 5.39865C3.01415 5.78031 2.8 6.29784 2.8 6.83735H3.2ZM3.2 14.1794V6.83735H2.8V14.1794H3.2ZM3.67846 15.3354C3.37208 15.0287 3.2 14.6129 3.2 14.1794H2.8C2.8 14.7189 3.01415 15.2364 3.39551 15.6181L3.67846 15.3354ZM4.83386 15.8143C4.40046 15.8143 3.98485 15.642 3.67846 15.3354L3.39551 15.6181C3.77689 15.9998 4.29427 16.2143 4.83386 16.2143V15.8143ZM12.1701 15.8143H4.83386V16.2143H12.1701V15.8143ZM13.3255 15.3354C13.0191 15.642 12.6035 15.8143 12.1701 15.8143V16.2143C12.7097 16.2143 13.2271 15.9998 13.6084 15.6181L13.3255 15.3354ZM13.8039 14.1794C13.8039 14.6129 13.6319 15.0287 13.3255 15.3354L13.6084 15.6181C13.9898 15.2364 14.2039 14.7189 14.2039 14.1794H13.8039ZM13.8039 10.1746V14.1794H14.2039V10.1746H13.8039ZM13.5039 9.87464C13.6696 9.87464 13.8039 10.009 13.8039 10.1746H14.2039C14.2039 9.78804 13.8905 9.47464 13.5039 9.47464V9.87464ZM13.2039 10.1746C13.2039 10.009 13.3383 9.87464 13.5039 9.87464V9.47464C13.1173 9.47464 12.8039 9.78804 12.8039 10.1746H13.2039ZM13.2039 14.1794V10.1746H12.8039V14.1794H13.2039ZM12.9011 14.9113C13.095 14.7172 13.2039 14.4539 13.2039 14.1794H12.8039C12.8039 14.3479 12.737 14.5095 12.6181 14.6285L12.9011 14.9113ZM12.1701 15.2143C12.4442 15.2143 12.7071 15.1053 12.9011 14.9113L12.6181 14.6285C12.4992 14.7475 12.338 14.8143 12.1701 14.8143V15.2143ZM4.83386 15.2143H12.1701V14.8143H4.83386V15.2143ZM4.10289 14.9113C4.2968 15.1053 4.55974 15.2143 4.83386 15.2143V14.8143C4.66593 14.8143 4.50476 14.7475 4.38585 14.6285L4.10289 14.9113ZM3.8 14.1794C3.8 14.4539 3.90898 14.7172 4.10289 14.9113L4.38585 14.6285C4.26691 14.5095 4.2 14.3479 4.2 14.1794H3.8ZM3.8 6.83735V14.1794H4.2V6.83735H3.8ZM4.10289 6.10548C3.90898 6.29954 3.8 6.5628 3.8 6.83735H4.2C4.2 6.66879 4.26691 6.50724 4.38585 6.38821L4.10289 6.10548Z\"\n      fill=\"currentColor\"\n      mask=\"url(#path-1-outside-1_3799_46574)\"\n    />\n  </svg>\n)\n\nexport const LargeTagIcon = (props: SVGProps) => (\n  <svg width=\"96\" height=\"96\" viewBox=\"0 0 96 96\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M55.6215 80.6815L55.621 80.6819C55.0823 81.2212 54.4427 81.649 53.7386 81.9409C53.0345 82.2328 52.2797 82.383 51.5175 82.383C50.7553 82.383 50.0006 82.2328 49.2965 81.9409C48.5923 81.649 47.9527 81.2212 47.414 80.6819L47.413 80.681L17.7 51.0025V17.7H51.0029L80.714 47.411C80.7141 47.4111 80.7142 47.4112 80.7143 47.4113C81.7943 48.498 82.4006 49.9679 82.4006 51.5C82.4006 53.032 81.7944 54.5017 80.7146 55.5884C80.7144 55.5886 80.7142 55.5888 80.714 55.589L55.6215 80.6815Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2.4\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <circle cx=\"34\" cy=\"34\" r=\"3\" fill=\"currentColor\" />\n  </svg>\n)\n\nexport const CircularCloseIcon = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <circle cx=\"8\" cy=\"8\" r=\"8\" fill=\"#293249\" />\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M4.64645 4.64645C4.84171 4.45118 5.15829 4.45118 5.35355 4.64645L8 7.29289L10.6464 4.64645C10.8417 4.45118 11.1583 4.45118 11.3536 4.64645C11.5488 4.84171 11.5488 5.15829 11.3536 5.35355L8.70711 8L11.3536 10.6464C11.5488 10.8417 11.5488 11.1583 11.3536 11.3536C11.1583 11.5488 10.8417 11.5488 10.6464 11.3536L8 8.70711L5.35355 11.3536C5.15829 11.5488 4.84171 11.5488 4.64645 11.3536C4.45118 11.1583 4.45118 10.8417 4.64645 10.6464L7.29289 8L4.64645 5.35355C4.45118 5.15829 4.45118 4.84171 4.64645 4.64645Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const SquareArrowDownIcon = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M4.66797 4.66663L11.3346 11.3333M11.3346 11.3333V4.66663M11.3346 11.3333H4.66797\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const SquareArrowUpIcon = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M4.66797 11.3334L11.3346 4.66671M11.3346 4.66671V11.3334M11.3346 4.66671H4.66797\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const CloseTimerIcon = (props: SVGProps) => (\n  <svg width=\"11\" height=\"12\" viewBox=\"0 0 11 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M8.2435 3.95892C8.53639 3.66603 8.53639 3.19115 8.2435 2.89826C7.95061 2.60537 7.47573 2.60537 7.18284 2.89826L8.2435 3.95892ZM2.03998 8.04112C1.74709 8.33401 1.74709 8.80888 2.03998 9.10178C2.33288 9.39467 2.80775 9.39467 3.10064 9.10178L2.03998 8.04112ZM3.10064 2.89826C2.80775 2.60537 2.33288 2.60537 2.03998 2.89826C1.74709 3.19115 1.74709 3.66603 2.03998 3.95892L3.10064 2.89826ZM7.18284 9.10178C7.47573 9.39467 7.95061 9.39467 8.2435 9.10178C8.53639 8.80888 8.53639 8.33401 8.2435 8.04112L7.18284 9.10178ZM7.18284 2.89826L2.03998 8.04112L3.10064 9.10178L8.2435 3.95892L7.18284 2.89826ZM2.03998 3.95892L7.18284 9.10178L8.2435 8.04112L3.10064 2.89826L2.03998 3.95892Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const ChevronDownBagIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M5 7.5L10 12.5L15 7.5\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const ChevronUpBagIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M5 12.5L10 7.5L15 12.5\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const BagCloseIcon = (props: SVGProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M18.7071 6.70711C19.0976 6.31658 19.0976 5.68342 18.7071 5.29289C18.3166 4.90237 17.6834 4.90237 17.2929 5.29289L18.7071 6.70711ZM5.29289 17.2929C4.90237 17.6834 4.90237 18.3166 5.29289 18.7071C5.68342 19.0976 6.31658 19.0976 6.70711 18.7071L5.29289 17.2929ZM6.70711 5.29289C6.31658 4.90237 5.68342 4.90237 5.29289 5.29289C4.90237 5.68342 4.90237 6.31658 5.29289 6.70711L6.70711 5.29289ZM17.2929 18.7071C17.6834 19.0976 18.3166 19.0976 18.7071 18.7071C19.0976 18.3166 19.0976 17.6834 18.7071 17.2929L17.2929 18.7071ZM17.2929 5.29289L5.29289 17.2929L6.70711 18.7071L18.7071 6.70711L17.2929 5.29289ZM5.29289 6.70711L17.2929 18.7071L18.7071 17.2929L6.70711 5.29289L5.29289 6.70711Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n)\n\nexport const CancelListingIcon = (props: SVGProps) => (\n  <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M12.6667 6L13.3933 6.72667C13.6417 6.97648 13.7811 7.31442 13.7811 7.66667C13.7811 8.01891 13.6417 8.35685 13.3933 8.60667L8.61333 13.3867C8.4895 13.5106 8.34245 13.609 8.18059 13.6761C8.01872 13.7432 7.84522 13.7777 7.67 13.7777C7.49478 13.7777 7.32128 13.7432 7.15941 13.6761C6.99755 13.609 6.8505 13.5106 6.72667 13.3867L6 12.6667M8.8 2.13333L7.66667 1H1V7.66667L2.13333 8.8M13.7811 1L1.10498 13.6761M4.33333 4.33333H4.33889\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const ListingModalWindowActive = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <circle cx=\"8\" cy=\"8\" r=\"8\" fill={props.fill ? props.fill : themeVars.colors.accentAction} fillOpacity=\"0.24\" />\n    <circle cx=\"8\" cy=\"8\" r=\"5\" fill={props.fill ? props.fill : themeVars.colors.accentAction} />\n  </svg>\n)\n\nexport const ListingModalWindowClosed = (props: SVGProps) => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <circle cx=\"8\" cy=\"8\" r=\"7\" stroke=\"#333D59\" strokeWidth=\"2\" />\n  </svg>\n)\n\nexport const OpenSeaMarketplaceIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M24 16.06V14.806C24 14.69 23.888 14.606 23.778 14.638L17.856 16.35C17.824 16.358 17.796 16.376 17.774 16.4C17.1396 17.1008 16.6005 17.571 16.4578 17.6955L16.448 17.704C16.08 18.016 15.624 18.186 15.144 18.186H14.093C13.4894 18.186 13 17.6966 13 17.093C13 16.4894 13.4894 16 14.093 16H14.704C14.748 16 14.79 15.984 14.822 15.956L15.042 15.754C15.136 15.668 15.248 15.564 15.382 15.43C15.3933 15.4187 15.4047 15.4073 15.4163 15.3958C15.4868 15.3256 15.5621 15.2505 15.636 15.168C15.724 15.082 15.81 14.986 15.89 14.892C16.024 14.748 16.152 14.598 16.286 14.44C16.382 14.336 16.47 14.218 16.556 14.1C16.652 13.988 16.746 13.862 16.834 13.742C16.8666 13.6941 16.9013 13.6457 16.9367 13.5963C16.9708 13.5486 17.0057 13.5 17.04 13.45C17.104 13.354 17.168 13.252 17.222 13.156C17.39 12.896 17.532 12.618 17.652 12.34C17.707 12.2211 17.751 12.096 17.7937 11.9743C17.7992 11.9588 17.8046 11.9434 17.81 11.928C17.858 11.786 17.898 11.652 17.928 11.51C18 11.176 18.016 10.844 17.984 10.512C17.9764 10.4136 17.9688 10.317 17.9477 10.2255C17.9454 10.2152 17.944 10.2046 17.944 10.194C17.936 10.126 17.92 10.05 17.898 9.98001C17.826 9.65601 17.714 9.332 17.572 9.014C17.524 8.89599 17.468 8.77599 17.414 8.66598C17.286 8.42802 17.152 8.19001 17 7.96C16.9695 7.91136 16.9357 7.86209 16.902 7.81289C16.8762 7.77511 16.8503 7.73737 16.826 7.70002C16.7297 7.5514 16.6213 7.40815 16.5163 7.26916C16.4926 7.2379 16.4692 7.20686 16.446 7.17602C16.384 7.09458 16.3161 7.01314 16.2477 6.93116C16.2103 6.88629 16.1728 6.84127 16.136 6.79599C16.032 6.66998 15.93 6.54998 15.826 6.43201C15.454 6.01201 15.064 5.63198 14.716 5.30802C14.652 5.24399 14.582 5.18001 14.51 5.11798C14.24 4.87201 13.994 4.65801 13.788 4.49198C13.726 4.44425 13.6703 4.39722 13.6185 4.35345C13.5835 4.32387 13.5503 4.29579 13.518 4.26998C13.4545 4.22272 13.3996 4.18086 13.3537 4.14585C13.3258 4.12459 13.3012 4.10585 13.28 4.08998C13.264 4.078 13.246 4.06999 13.228 4.06398C13.0932 4.02615 13 3.90323 13 3.76322V2.11201C13 1.80401 12.876 1.52802 12.678 1.326C12.48 1.12398 12.204 1 11.9 1C11.292 1 10.8 1.498 10.8 2.11201V3.2656C10.8 3.32504 10.7432 3.36806 10.686 3.35198L10.376 3.26399L10.102 3.18821C10.1004 3.18775 10.0987 3.18716 10.097 3.18657C10.0934 3.18529 10.0898 3.18401 10.086 3.18401C10.082 3.18401 10.078 3.18348 10.0742 3.18244L7.93999 2.60399C7.84603 2.578 7.766 2.68 7.81402 2.766L8.15602 3.39801C8.17546 3.44665 8.2001 3.4953 8.22543 3.54529C8.24175 3.57751 8.25835 3.61028 8.27403 3.64398C8.33001 3.75602 8.38603 3.87399 8.44002 3.992C8.48799 4.09599 8.53601 4.198 8.59203 4.30999C8.61561 4.36275 8.63965 4.41614 8.66403 4.4703C8.75336 4.6687 8.8473 4.87732 8.94 5.10202L8.94079 5.10389C9.02051 5.29326 9.10024 5.48265 9.17001 5.68C9.36199 6.178 9.54402 6.70999 9.70201 7.25601C9.7413 7.37805 9.7727 7.49617 9.80452 7.61587C9.81806 7.66682 9.83168 7.71806 9.84601 7.77001L9.86799 7.866C9.93201 8.12001 9.98799 8.372 10.028 8.62601C10.06 8.8 10.09 8.96598 10.106 9.134L10.106 9.13407C10.13 9.32404 10.154 9.51401 10.162 9.70398C10.178 9.87801 10.186 10.06 10.186 10.234C10.186 10.678 10.146 11.106 10.052 11.51C10.0462 11.5316 10.0403 11.5534 10.0344 11.5755C10.008 11.6739 9.98068 11.776 9.94802 11.874C9.91838 11.9792 9.87997 12.0844 9.84008 12.1937C9.82613 12.2319 9.812 12.2706 9.798 12.31C9.7957 12.3162 9.7934 12.3224 9.7911 12.3286C9.76138 12.4087 9.73114 12.4902 9.694 12.57C9.49601 13.046 9.24999 13.52 8.99602 13.964C8.624 14.622 8.25002 15.2 7.988 15.572C7.97207 15.5959 7.95652 15.6186 7.94154 15.6405C7.92269 15.6681 7.90474 15.6944 7.88803 15.72C7.80601 15.836 7.89002 16 8.032 16H9.707C10.3106 16 10.8 16.4894 10.8 17.093C10.8 17.6966 10.3106 18.186 9.707 18.186H8.00003C7.24802 18.186 6.55203 17.76 6.21599 17.078C6.042 16.736 5.974 16.36 6.01402 15.992C6.02401 15.882 5.94199 15.778 5.82999 15.778H0.17403C0.0779956 15.778 0 15.856 0 15.952V16.068C0 19.676 2.914 22.6 6.51002 22.6H16.656C18.5579 22.6 19.6378 20.8669 20.6993 19.1634C20.9951 18.6886 21.2896 18.216 21.6 17.784C22.158 17.008 23.5 16.392 23.892 16.224C23.956 16.196 24 16.132 24 16.06ZM1.51195 13.202L1.42794 13.334C1.35397 13.448 1.43594 13.6 1.57593 13.6H6.78395C6.84196 13.6 6.89594 13.572 6.92796 13.524C6.99596 13.4201 7.05994 13.312 7.11795 13.202C7.56797 12.446 7.96794 11.628 8.11394 11.024C8.45594 9.55604 7.72595 7.19805 6.87994 5.30201C6.82396 5.17604 6.64993 5.16401 6.57596 5.28004L1.51195 13.202Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const CollectionSelectedAssetIcon = (props: SVGProps) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" {...props}>\n    <path\n      d=\"M17.5 9.16667V6.52778C17.5 5.68401 16.7538 5 15.8333 5H4.16667C3.24619 5 2.5 5.68401 2.5 6.52778V17.2222C2.5 18.066 3.24619 18.75 4.16667 18.75H11.25\"\n      stroke=\"#F5F6FC\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M12.5 14.6667L14.4048 16.6667L19.1667 11.6667\"\n      stroke=\"#F5F6FC\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M6.66671 5L6.66671 4.16666C6.66671 3.28261 7.0179 2.43476 7.64302 1.80964C8.26814 1.18452 9.11599 0.833333 10 0.833333C10.8841 0.833333 11.7319 1.18452 12.3571 1.80964C12.9822 2.43476 13.3334 3.28261 13.3334 4.16667L13.3334 5\"\n      stroke=\"#F5F6FC\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n\nexport const Nft20Icon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M20.1797 2C18.6608 1.99964 17.2055 2.60684 16.1403 3.68523V2H15.3199C13.8003 1.99901 12.3441 2.60626 11.2784 3.68523V2H10.4603C7.32315 2.00245 4.78057 4.53488 4.77811 7.65966V16.3545H4.51732C4.29849 16.3542 4.08024 16.3773 3.86643 16.4234C3.47831 16.5022 3.10944 16.6561 2.78085 16.8763C2.54716 16.3376 2.0146 15.9887 1.42549 15.9881C1.32123 15.9869 1.21723 15.998 1.11563 16.0214C0.327205 16.2173 -0.15257 17.0126 0.0440797 17.7979C0.202958 18.4325 0.764814 18.8854 1.42105 18.9079H1.46342C1.39473 19.2972 1.40305 19.6962 1.48796 20.0824C1.80032 21.5009 3.05723 22.515 4.51518 22.5248C4.95221 22.5247 5.38438 22.4332 5.78359 22.2562C6.32672 22.7363 7.02799 23.001 7.75417 23H18.0085C19.6557 23.0049 20.9951 21.6788 21 20.0381V20.0314V2H20.1797ZM20.1797 20.0314C20.176 21.2182 19.211 22.1793 18.0195 22.183H7.75417C7.02124 22.1819 6.33891 21.8107 5.94184 21.1971C5.66604 21.4217 5.34054 21.5777 4.99223 21.6523C4.83388 21.6855 4.67254 21.7026 4.51073 21.7034C3.43635 21.7023 2.50819 20.9554 2.28156 19.9093C2.21779 19.6077 2.21779 19.2962 2.28156 18.9946C2.29731 18.9073 2.31892 18.8213 2.34617 18.737C2.35062 18.6819 2.34607 18.6264 2.33278 18.5727C2.27026 18.273 2.00466 18.0586 1.69742 18.0598C1.65102 18.06 1.60483 18.0645 1.55921 18.0731C1.51396 18.0838 1.4675 18.089 1.42099 18.0886C1.06149 18.0888 0.769941 17.7986 0.769836 17.4405C0.769732 17.1328 0.986836 16.8673 1.28947 16.8052C1.33483 16.7953 1.38129 16.7909 1.42769 16.792C1.73362 16.7923 1.99802 17.0049 2.06305 17.3027C2.12556 17.6023 2.39116 17.8167 2.6984 17.8155C2.74496 17.8159 2.79131 17.8106 2.83662 17.8C2.89113 17.7895 2.94381 17.7708 2.99267 17.7445C3.0589 17.6862 3.12811 17.6314 3.19999 17.5801C3.45231 17.401 3.73925 17.2762 4.04262 17.2138C4.19925 17.1794 4.35923 17.1623 4.51968 17.1627C4.89739 17.162 5.26913 17.2559 5.60086 17.4358V7.66633C5.59589 4.99306 7.76766 2.82204 10.4516 2.81709H10.4605V7.65503C10.4617 4.98388 12.6355 2.81834 15.3179 2.81709H15.3201V7.65504C15.3214 4.98389 17.4952 2.81834 20.1776 2.81709H20.1798L20.1797 20.0314ZM18.5612 15.3443V19.3409C18.5576 20.0184 18.0064 20.5663 17.3263 20.5687H16.9406V19.7628C16.9171 19.317 16.5353 18.9746 16.0878 18.998C15.6731 19.0197 15.3417 19.3497 15.3199 19.7628V20.571H10.4603V19.7628C10.4579 19.3181 10.0953 18.959 9.64886 18.959C9.2032 18.9578 8.84092 19.3167 8.83966 19.7606V19.7628V20.571H8.45405C7.7725 20.5697 7.22033 20.0197 7.21907 19.3409V15.3443C7.22033 14.6654 7.7725 14.1154 8.45405 14.1142H8.83966V14.9202C8.83966 15.3657 9.20157 15.7272 9.64886 15.7285C10.0965 15.7272 10.4591 15.3661 10.4603 14.9202V14.1142H15.3199V14.9202C15.2965 15.366 15.6402 15.7463 16.0878 15.7697C16.5353 15.7931 16.9171 15.4507 16.9406 15.0049C16.9421 14.9767 16.9421 14.9484 16.9406 14.9202V14.1142H17.3263C18.0073 14.1166 18.5588 14.6659 18.5612 15.3443ZM12.1764 12.4616C12.1764 12.4616 11.7194 11.9677 11.6458 11.7557C11.5454 11.4663 11.6201 10.5311 11.6201 10.5311C11.6188 10.276 11.5133 10.1986 11.2572 10.1998H10.3578C10.1029 10.1998 9.97363 10.3285 9.97363 10.5824V11.6915C9.97363 12.0851 10.8363 12.4616 12.1764 12.4616ZM15.4274 10.531C15.4286 10.276 15.5341 10.1986 15.7902 10.1997H16.6897C16.9445 10.1997 17.0738 10.3285 17.0738 10.5823V11.6915C17.0738 12.0851 16.2111 12.4615 14.871 12.4615C14.871 12.4615 15.328 11.9676 15.4016 11.7556C15.502 11.4663 15.4274 10.531 15.4274 10.531ZM8.21559 4.38903C8.63871 4.05164 9.10875 3.7772 9.61102 3.57419C9.03525 3.5955 8.47512 3.7662 7.98603 4.06931C7.48842 4.37684 7.07127 4.79765 6.76889 5.29714C6.46039 5.79429 6.27902 6.35923 6.24057 6.94241C6.22832 7.08576 6.22832 7.22983 6.24057 7.37318C6.24427 7.49333 6.25569 7.60731 6.26714 7.72155L6.27399 7.7906L6.2902 7.91729L6.2902 7.9173C6.31983 8.15043 6.34945 8.38349 6.39662 8.61659C6.44525 8.36635 6.47544 8.11619 6.50563 7.86601L6.51474 7.7906C6.51977 7.74621 6.5241 7.70159 6.52841 7.65719L6.52841 7.65718C6.53747 7.56388 6.54643 7.47154 6.56157 7.38427C6.56575 7.35291 6.56947 7.32154 6.57315 7.29039C6.57729 7.25541 6.5814 7.22073 6.5861 7.18669C6.59119 7.14987 6.59921 7.11302 6.60722 7.07617L6.60722 7.07616L6.60722 7.07615C6.61322 7.0486 6.61921 7.02105 6.62398 6.99353C6.72766 6.48387 6.92008 5.99615 7.19242 5.55252C7.46524 5.11003 7.8112 4.71673 8.21559 4.38903ZM14.4706 3.57419C13.9924 3.77173 13.5427 4.03153 13.1331 4.34683C12.7415 4.65248 12.402 5.0191 12.1278 5.43257C11.8553 5.8463 11.6486 6.29936 11.5148 6.77588C11.4959 6.8404 11.4827 6.90553 11.4695 6.97063L11.4695 6.97067C11.4576 7.02879 11.4458 7.08688 11.43 7.14448C11.4093 7.22036 11.3997 7.2988 11.39 7.37768C11.3842 7.42576 11.3783 7.47401 11.3698 7.52194C11.3386 7.78393 11.3052 8.04373 11.2517 8.30797C11.2001 8.06325 11.1695 7.82238 11.1387 7.57998L11.1387 7.57994L11.1313 7.52194C11.1313 7.44632 11.1256 7.36927 11.1198 7.29161L11.1198 7.29159L11.1198 7.29156C11.1154 7.23241 11.1109 7.17291 11.109 7.11342C11.1045 6.97576 11.1224 6.84033 11.1402 6.70491C11.2114 6.14982 11.4088 5.61817 11.7176 5.15067C12.0234 4.68604 12.4342 4.29899 12.9169 4.02053C13.3875 3.74072 13.9228 3.58701 14.4706 3.57419ZM17.995 4.34683C18.4047 4.03168 18.8545 3.77188 19.3326 3.57419C18.7861 3.59217 18.2534 3.74968 17.7855 4.03158C17.3018 4.30566 16.8895 4.68891 16.5817 5.15067C16.2722 5.61802 16.074 6.14961 16.0021 6.70491C15.9843 6.84033 15.9687 6.97576 15.9731 7.11342C15.975 7.17161 15.9789 7.22981 15.9827 7.28768C15.988 7.36667 15.9932 7.44504 15.9932 7.52194C15.9985 7.56064 16.0036 7.59929 16.0088 7.63791C16.0386 7.8608 16.0683 8.08276 16.1158 8.30797C16.1649 8.0657 16.1952 7.82716 16.2256 7.58724C16.2284 7.56549 16.2312 7.54372 16.2339 7.52194C16.2406 7.48004 16.246 7.4379 16.2514 7.39584C16.2624 7.31085 16.2733 7.22618 16.2941 7.14448C16.3071 7.09389 16.3173 7.04293 16.3276 6.9919C16.3422 6.91973 16.3567 6.84743 16.3789 6.77588C16.5127 6.29936 16.7194 5.8463 16.9919 5.43257C17.266 5.01968 17.6047 4.65316 17.995 4.34683Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const NftXIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M12 0L2.80713 9.19286L10.5399 16.6017C9.50042 17.3018 8.96753 18.0136 8.48384 18.6597L8.48313 18.6607L8.48293 18.6609C7.9305 19.4002 7.45337 20.0387 6.10491 20.7007C5.15896 21.1652 4.48456 21.2978 3.84753 21.3305C4.34999 21.9968 5.19599 22.5819 6.27942 23.0318C6.53176 22.9339 6.79713 22.818 7.07742 22.6803C8.90264 21.7852 9.61871 20.8277 10.2506 19.9829L10.2514 19.9817C10.8039 19.2423 11.281 18.6039 12.6296 17.9417C13.9782 17.2795 14.7753 17.2918 15.698 17.306H15.698L15.6982 17.306C16.3164 17.3158 16.9831 17.3259 17.7963 17.1518C16.8046 16.619 15.5296 16.2159 14.0884 15.9998L21.1928 9.19286L12 0ZM7.37363 17.0155L7.37899 17.0083L7.37901 17.0083C7.57949 16.7399 7.76995 16.4849 7.99763 16.237C5.23472 16.9028 3.33203 18.2972 3.33203 19.9111C3.33203 19.9712 3.33529 20.0311 3.34043 20.0904C3.61146 19.9875 3.8974 19.8644 4.20117 19.7151C6.0262 18.8185 6.74209 17.8606 7.37363 17.0155ZM18.6096 18.0667C17.5547 18.0496 16.3591 18.0312 14.5339 18.928C12.7087 19.8247 11.9928 20.7825 11.3613 21.6278L11.3609 21.6284C10.8085 22.3673 10.3313 23.0057 8.98288 23.6678C8.92185 23.6978 8.86288 23.7261 8.80322 23.7535C9.74427 23.9195 10.6982 24.002 11.6537 24C11.8645 24 12.0731 23.9962 12.2796 23.9885C12.6172 23.6313 12.8796 23.2809 13.1282 22.9481C13.6805 22.2088 14.1578 21.5702 15.5064 20.9081C16.855 20.2461 17.6523 20.2584 18.5748 20.2726H18.575C18.9998 20.2793 19.4476 20.2862 19.95 20.2337C19.967 20.1272 19.9755 20.0195 19.9756 19.9116C19.9756 19.2494 19.6548 18.6242 19.0862 18.071C18.9683 18.0715 18.8504 18.0699 18.7306 18.0683H18.7304L18.6096 18.0667ZM19.5883 21.1462C18.8621 22.2725 17.1703 23.1878 14.9902 23.6572C15.5194 23.0755 16.2343 22.4722 17.4111 21.8937C18.2554 21.4786 18.9648 21.2601 19.5883 21.1462Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const X2y2Icon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M21.528 4.70405C19.6893 2.90732 17.174 1.8 14.4 1.8C8.7667 1.8 4.2 6.3667 4.2 12C4.2 17.6333 8.7667 22.2 14.4 22.2C17.1739 22.2 19.6893 21.0927 21.528 19.296C19.3347 22.156 15.8827 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C15.8827 0 19.3347 1.84402 21.528 4.70405ZM6.77759 17.8368C8.24862 19.2742 10.2609 20.16 12.48 20.16C16.9867 20.16 20.64 16.5067 20.64 12C20.64 7.49337 16.9867 3.84002 12.48 3.84002C10.2609 3.84002 8.24862 4.72587 6.77759 6.16324C8.53226 3.87524 11.2939 2.40002 14.4 2.40002C19.702 2.40002 24 6.69809 24 12C24 17.302 19.702 21.6 14.4 21.6C11.2939 21.6 8.53226 20.1248 6.77759 17.8368ZM12 19.2C15.9765 19.2 19.2001 15.9764 19.2001 12C19.2001 8.02353 15.9765 4.79999 12 4.79999C8.0236 4.79999 4.80005 8.02353 4.80005 12C4.80005 15.9764 8.0236 19.2 12 19.2ZM12 16.8C14.651 16.8 16.8 14.651 16.8 12C16.8 9.34902 14.651 7.19999 12 7.19999C9.34908 7.19999 7.20005 9.34902 7.20005 12C7.20005 14.651 9.34908 16.8 12 16.8Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const SudoSwapIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM4.37501 7.35706V7.33475V7.3125H5.05176H5.72851L5.92208 7.82812L6.11564 8.34375L6.51939 9.4375L6.92308 10.5312L7.18845 11.2647L7.45383 11.9982L7.10851 12.9522L6.76326 13.9062L6.24608 15.2969L5.72895 16.6875H5.05201H4.37501V16.6622V16.6369L5.12889 14.5841L5.88276 12.5312L5.97514 12.2656L6.06745 12L5.97501 11.7344L5.88258 11.4688L5.12883 9.41288L4.37501 7.35706ZM18.0691 7.84375L18.168 7.57812L18.267 7.3125H18.9527H19.6384L19.6096 7.39062L19.5808 7.46875L18.7554 9.73438L17.93 12L18.7554 14.2656L19.5808 16.5312L19.6096 16.6094L19.6384 16.6875H18.9527H18.267L18.168 16.4219L18.0691 16.1562L17.5731 14.8125L17.0773 13.4688L16.8114 12.7344L16.5455 12L16.8114 11.2656L17.0773 10.5312L17.5731 9.1875L18.0691 7.84375ZM10.779 9.492L10.9989 9.43669L11.2188 9.38131L12.2188 9.39819L13.2188 9.41506L13.5938 9.5595L13.9688 9.70387L14.2512 9.993L14.5336 10.2821L14.6106 10.5389L14.6875 10.7957V10.9291V11.0625H14.0999H13.5123L13.4463 10.8734L13.3804 10.6842L13.0496 10.5302L12.7188 10.3763L12.0303 10.3756L11.3418 10.375L11.124 10.4914L10.9063 10.6079L10.7871 10.8109L10.668 11.0138L10.672 11.2816L10.676 11.5492L10.7441 11.6765L10.8123 11.8038L11.0043 11.9406L11.1965 12.0774L12.2701 12.2621L13.3438 12.4468L13.7313 12.6314L14.1188 12.8159L14.3195 13.0166L14.5203 13.2174L14.6481 13.4993L14.7759 13.7812L14.776 14.3125L14.7761 14.8438L14.6353 15.1984L14.4946 15.553L14.2499 15.8052L14.0051 16.0573L13.5495 16.1999L13.0938 16.3424L12.0625 16.3431L11.0313 16.3438L10.6875 16.2258L10.3438 16.1079L10.09 15.9612L9.83614 15.8145L9.70239 15.6721L9.56864 15.5297L9.44551 15.2493L9.32239 14.9688L9.27926 14.7344L9.23608 14.5H9.88564H10.5351L10.627 14.7647L10.7188 15.0293L11 15.1866L11.2813 15.3438H12.0625H12.8438L13.0542 15.255L13.2646 15.1663L13.4448 14.9175L13.625 14.6687L13.6247 14.35L13.6244 14.0312L13.4841 13.865L13.3438 13.6987L12.875 13.5398L12.4063 13.3808L11.8241 13.2834L11.242 13.1861L10.8554 13.0576L10.4688 12.9291L10.2395 12.7795L10.0101 12.6299L9.85439 12.4243L9.69864 12.2188L9.59164 11.8483L9.4847 11.4777L9.51633 11.1295L9.54795 10.7812L9.62876 10.5118L9.70958 10.2423L9.95214 9.99238L10.1946 9.7425L10.4868 9.61725L10.779 9.492Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const LooksRareIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M7.13513 3.08105L0 10.2211L12 22.2162L24 10.2211L16.8649 3.08105H7.13513ZM6.48649 7.62158C9.51816 4.5766 14.4818 4.57658 17.5135 7.62156L20.1081 10.2162L17.5135 12.8108C14.4818 15.8558 9.51816 15.8558 6.48649 12.8108L3.89189 10.2162L6.48649 7.62158ZM8.27026 10.2162C8.27026 12.2769 9.94096 13.946 12 13.946C14.059 13.946 15.7297 12.2769 15.7297 10.2162C15.7297 8.15553 14.059 6.48651 12 6.48651C9.94096 6.48651 8.27026 8.15553 8.27026 10.2162ZM12 11.8379C11.1048 11.8379 10.3784 11.1122 10.3784 10.2162C10.3784 9.32028 11.1048 8.59462 12 8.59462C12.8952 8.59462 13.6216 9.32028 13.6216 10.2162C13.6216 11.1122 12.8952 11.8379 12 11.8379Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n\nexport const LarvaLabsMarketplaceIcon = (props: SVGProps) => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M9 5H12V17H9V5ZM13 5H16V13H13V5ZM13 14V17H22V14H13ZM2 17V14H8V17H2Z\"\n      fill=\"white\"\n    />\n  </svg>\n)\n","/workspace/Physica-Interfae/src/nft/components/collection/CollectionPageSkeleton.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionNfts.tsx",["3489","3490","3491","3492","3493"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport clsx from 'clsx'\nimport { OpacityHoverState } from 'components/Common'\nimport { parseEther } from 'ethers/lib/utils'\nimport { NftAssetTraitInput, NftMarketplace, NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { ASSET_PAGE_SIZE, AssetFetcherParams, useNftAssets } from 'graphql/data/nft/Asset'\nimport useDebounce from 'hooks/useDebounce'\nimport { useScreenSize } from 'hooks/useScreenSize'\nimport { AnimatedBox, Box } from 'nft/components/Box'\nimport { CollectionSearch, FilterButton } from 'nft/components/collection'\nimport { CollectionAsset } from 'nft/components/collection/CollectionAsset'\nimport * as styles from 'nft/components/collection/CollectionNfts.css'\nimport { SortDropdown } from 'nft/components/common/SortDropdown'\nimport { Center, Column, Row } from 'nft/components/Flex'\nimport { SweepIcon } from 'nft/components/icons'\nimport { bodySmall, buttonTextMedium, headlineMedium } from 'nft/css/common.css'\nimport { loadingAsset } from 'nft/css/loading.css'\nimport {\n  CollectionFilters,\n  initialCollectionFilterState,\n  SortBy,\n  SortByQueries,\n  useBag,\n  useCollectionFilters,\n  useFiltersExpanded,\n  useIsMobile,\n} from 'nft/hooks'\nimport { useIsCollectionLoading } from 'nft/hooks/useIsCollectionLoading'\nimport { usePriceRange } from 'nft/hooks/usePriceRange'\nimport {\n  DropDownOption,\n  GenieAsset,\n  GenieCollection,\n  isPooledMarket,\n  Markets,\n  UniformAspectRatio,\n  UniformAspectRatios,\n} from 'nft/types'\nimport {\n  calcPoolPrice,\n  getRarityStatus,\n  isInSameMarketplaceCollection,\n  isInSameSudoSwapPool,\n  pluralize,\n} from 'nft/utils'\nimport { scrollToTop } from 'nft/utils/scrollToTop'\nimport { applyFiltersFromURL, syncLocalFiltersWithURL } from 'nft/utils/urlParams'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useLocation } from 'react-router-dom'\nimport styled, { css } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { LoadingAssets } from './CollectionAssetLoading'\nimport { MARKETPLACE_ITEMS, MarketplaceLogo } from './MarketplaceSelect'\nimport { ClearAllButton } from './shared'\nimport { Sweep } from './Sweep'\nimport { TraitChip } from './TraitChip'\n\ninterface CollectionNftsProps {\n  contractAddress: string\n  collectionStats: GenieCollection\n  rarityVerified?: boolean\n}\n\nconst rarityStatusCache = new Map<string, boolean>()\n\nconst InfiniteScrollWrapperCss = css`\n  margin: 0 16px;\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    margin: 0 20px;\n  }\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    margin: 0 26px;\n  }\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    margin: 0 48px;\n  }\n`\n\nconst ActionsContainer = styled.div`\n  display: flex;\n  flex: 1 1 auto;\n  gap: 10px;\n  justify-content: space-between;\n\n  ${InfiniteScrollWrapperCss}\n`\n\nconst ActionsSubContainer = styled.div`\n  display: flex;\n  gap: 12px;\n  flex: 1;\n  min-width: 0px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 10px;\n  }\n`\n\nconst SortDropdownContainer = styled.div<{ isFiltersExpanded: boolean }>`\n  width: max-content;\n  height: 44px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    ${({ isFiltersExpanded }) => isFiltersExpanded && `display: none;`}\n  }\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    display: none;\n  }\n`\n\nconst EmptyCollectionWrapper = styled.div`\n  display: block;\n  text-align: center;\n`\n\nconst ViewFullCollection = styled.span`\n  ${OpacityHoverState}\n`\n\nconst InfiniteScrollWrapper = styled.div`\n  ${InfiniteScrollWrapperCss}\n`\n\nconst SweepButton = styled.div<{ toggled: boolean; disabled?: boolean }>`\n  display: flex;\n  gap: 8px;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 18px 12px 12px;\n  cursor: ${({ disabled }) => (disabled ? 'auto' : 'pointer')};\n  color: ${({ toggled, disabled, theme }) => (toggled && !disabled ? theme.accentTextLightPrimary : theme.textPrimary)};\n  background: ${({ theme, toggled, disabled }) =>\n    !disabled && toggled\n      ? 'radial-gradient(101.8% 4091.31% at 0% 0%, #4673FA 0%, #9646FA 100%)'\n      : theme.backgroundInteractive};\n  opacity: ${({ disabled }) => (disabled ? 0.4 : 1)};\n  :hover {\n    background-color: ${({ theme }) => theme.hoverState};\n    transition: ${({\n      theme: {\n        transition: { duration, timing },\n      },\n    }) => `${duration.fast} background-color ${timing.in}`};\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    padding: 12px 12px 12px 12px;\n  }\n`\n\nconst SweepText = styled(ThemedText.BodyPrimary)`\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    display: none;\n  }\n`\n\nconst MarketNameWrapper = styled(Row)`\n  gap: 8px;\n`\n\nconst CollectionNftsLoading = ({ height }: { height?: number }) => (\n  <Box width=\"full\" className={styles.assetList}>\n    <LoadingAssets height={height} />\n  </Box>\n)\n\nexport const CollectionNftsAndMenuLoading = () => (\n  <InfiniteScrollWrapper>\n    <Column alignItems=\"flex-start\" position=\"relative\" width=\"full\">\n      <Row marginY=\"12\" gap=\"12\" marginBottom=\"40\">\n        <Box className={loadingAsset} borderRadius=\"12\" width={{ sm: '44', md: '100' }} height=\"44\" />\n        <Box\n          className={loadingAsset}\n          borderRadius=\"12\"\n          height=\"44\"\n          display={{ sm: 'none', md: 'flex' }}\n          style={{ width: '220px' }}\n        />\n        <Box className={loadingAsset} borderRadius=\"12\" height=\"44\" width={{ sm: '276', md: '332' }} />\n      </Row>\n      <CollectionNftsLoading />\n    </Column>\n  </InfiniteScrollWrapper>\n)\n\nexport const getSortDropdownOptions = (setSortBy: (sortBy: SortBy) => void, hasRarity: boolean): DropDownOption[] => {\n  const options = [\n    {\n      displayText: 'Price: Low to High',\n      onClick: () => setSortBy(SortBy.LowToHigh),\n      reverseIndex: 2,\n      sortBy: SortBy.LowToHigh,\n    },\n    {\n      displayText: 'Price: High to Low',\n      onClick: () => setSortBy(SortBy.HighToLow),\n      reverseIndex: 1,\n      sortBy: SortBy.HighToLow,\n    },\n  ]\n  return hasRarity\n    ? options.concat([\n        {\n          displayText: 'Rarity: Rare to Common',\n          onClick: () => setSortBy(SortBy.RareToCommon),\n          reverseIndex: 4,\n          sortBy: SortBy.RareToCommon,\n        },\n        {\n          displayText: 'Rarity: Common to Rare',\n          onClick: () => setSortBy(SortBy.CommonToRare),\n          reverseIndex: 3,\n          sortBy: SortBy.CommonToRare,\n        },\n      ])\n    : options\n}\n\nexport const CollectionNfts = ({ contractAddress, collectionStats, rarityVerified }: CollectionNftsProps) => {\n  const { chainId } = useWeb3React()\n  const traits = useCollectionFilters((state) => state.traits)\n  const minPrice = useCollectionFilters((state) => state.minPrice)\n  const maxPrice = useCollectionFilters((state) => state.maxPrice)\n  const markets = useCollectionFilters((state) => state.markets)\n  const sortBy = useCollectionFilters((state) => state.sortBy)\n  const searchByNameText = useCollectionFilters((state) => state.search)\n  const setMarketCount = useCollectionFilters((state) => state.setMarketCount)\n  const setSortBy = useCollectionFilters((state) => state.setSortBy)\n  const buyNow = useCollectionFilters((state) => state.buyNow)\n\n  const setPriceRangeLow = usePriceRange((state) => state.setPriceRangeLow)\n  const priceRangeLow = usePriceRange((state) => state.priceRangeLow)\n  const priceRangeHigh = usePriceRange((state) => state.priceRangeHigh)\n  const setPriceRangeHigh = usePriceRange((state) => state.setPriceRangeHigh)\n  const setPrevMinMax = usePriceRange((state) => state.setPrevMinMax)\n\n  const setIsCollectionNftsLoading = useIsCollectionLoading((state) => state.setIsCollectionNftsLoading)\n  const removeTrait = useCollectionFilters((state) => state.removeTrait)\n  const removeMarket = useCollectionFilters((state) => state.removeMarket)\n  const reset = useCollectionFilters((state) => state.reset)\n  const setMin = useCollectionFilters((state) => state.setMinPrice)\n  const setMax = useCollectionFilters((state) => state.setMaxPrice)\n  const setHasRarity = useCollectionFilters((state) => state.setHasRarity)\n\n  const toggleBag = useBag((state) => state.toggleBag)\n  const bagExpanded = useBag((state) => state.bagExpanded)\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  const debouncedMinPrice = useDebounce(minPrice, 500)\n  const debouncedMaxPrice = useDebounce(maxPrice, 500)\n  const debouncedSearchByNameText = useDebounce(searchByNameText, 500)\n\n  const [uniformAspectRatio, setUniformAspectRatio] = useState<UniformAspectRatio>(UniformAspectRatios.unset)\n  const [renderedHeight, setRenderedHeight] = useState<number | undefined>()\n\n  const [sweepIsOpen, setSweepOpen] = useState(false)\n\n  const assetQueryParams: AssetFetcherParams = {\n    address: contractAddress,\n    orderBy: SortByQueries[sortBy].field,\n    asc: SortByQueries[sortBy].asc,\n    filter: {\n      listed: buyNow,\n      marketplaces: markets.length > 0 ? markets.map((market) => market.toUpperCase() as NftMarketplace) : undefined,\n      maxPrice: debouncedMaxPrice ? parseEther(debouncedMaxPrice).toString() : undefined,\n      minPrice: debouncedMinPrice ? parseEther(debouncedMinPrice).toString() : undefined,\n      tokenSearchQuery: debouncedSearchByNameText,\n      traits:\n        traits.length > 0\n          ? traits.map((trait) => {\n              return { name: trait.trait_type, values: [trait.trait_value] } as unknown as NftAssetTraitInput\n            })\n          : undefined,\n    },\n    first: ASSET_PAGE_SIZE,\n  }\n\n  const { data: collectionNfts, loading, hasNext, loadMore } = useNftAssets(assetQueryParams)\n\n  const getPoolPosition = useCallback(\n    (asset: GenieAsset) => {\n      const assetInBag = itemsInBag.some(\n        (item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address\n      )\n\n      if (asset.marketplace === Markets.Sudoswap) {\n        const bagItemsInSudoSwapPool = itemsInBag.filter((item) => isInSameSudoSwapPool(asset, item.asset))\n        if (assetInBag) {\n          return bagItemsInSudoSwapPool.findIndex((item) => item.asset.tokenId === asset.tokenId)\n        } else {\n          return bagItemsInSudoSwapPool.length\n        }\n      }\n\n      return assetInBag\n        ? itemsInBag\n            .filter((item) => isInSameMarketplaceCollection(asset, item.asset))\n            .findIndex((item) => item.asset.tokenId === asset.tokenId)\n        : itemsInBag.filter((item) => isInSameMarketplaceCollection(asset, item.asset)).length\n    },\n    [itemsInBag]\n  )\n\n  const calculatePrice = useCallback(\n    (asset: GenieAsset) => {\n      return calcPoolPrice(asset, getPoolPosition(asset))\n    },\n    [getPoolPosition]\n  )\n\n  const collectionAssets = useMemo(() => {\n    if (!collectionNfts || !collectionNfts.some((asset) => asset.marketplace && isPooledMarket(asset.marketplace))) {\n      return collectionNfts\n    }\n\n    const assets = [...collectionNfts]\n\n    assets.forEach(\n      (asset) =>\n        asset.marketplace &&\n        isPooledMarket(asset.marketplace) &&\n        (asset.priceInfo.ETHPrice = calculatePrice(asset) ?? '0')\n    )\n\n    if (sortBy === SortBy.HighToLow || sortBy === SortBy.LowToHigh) {\n      assets.sort((a, b) => {\n        const bigA = BigNumber.from(a.priceInfo?.ETHPrice ?? 0)\n        const bigB = BigNumber.from(b.priceInfo?.ETHPrice ?? 0)\n\n        // Always sort not for sale (price = 0) assets to the end\n        if (bigA.gt(0) && bigB.lte(0)) {\n          return -1\n        } else if (bigB.gt(0) && bigA.lte(0)) {\n          return 1\n        }\n\n        const diff = bigA.sub(bigB)\n        if (diff.gt(0)) {\n          return sortBy === SortBy.LowToHigh ? 1 : -1\n        } else if (diff.lt(0)) {\n          return sortBy === SortBy.LowToHigh ? -1 : 1\n        }\n\n        return 0\n      })\n    }\n\n    return assets\n  }, [collectionNfts, sortBy, calculatePrice])\n\n  const [currentTokenPlayingMedia, setCurrentTokenPlayingMedia] = useState<string | undefined>()\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\n  const oldStateRef = useRef<CollectionFilters | null>(null)\n  const isMobile = useIsMobile()\n  const screenSize = useScreenSize()\n\n  useEffect(() => {\n    setIsCollectionNftsLoading(loading)\n  }, [loading, setIsCollectionNftsLoading])\n\n  const hasRarity = useMemo(() => {\n    const hasRarity = getRarityStatus(rarityStatusCache, collectionStats?.address, collectionAssets) ?? false\n    setHasRarity(hasRarity)\n    return hasRarity\n  }, [collectionStats.address, collectionAssets, setHasRarity])\n\n  const sortDropDownOptions: DropDownOption[] = useMemo(\n    () => getSortDropdownOptions(setSortBy, hasRarity),\n    [hasRarity, setSortBy]\n  )\n\n  useEffect(() => {\n    setSweepOpen(false)\n    return () => {\n      useCollectionFilters.setState(initialCollectionFilterState)\n    }\n  }, [contractAddress])\n\n  const assets = useMemo(() => {\n    if (!collectionAssets) return null\n    return collectionAssets.map((asset) => (\n      <CollectionAsset\n        key={asset.address + asset.tokenId}\n        asset={asset}\n        isMobile={isMobile}\n        mediaShouldBePlaying={asset.tokenId === currentTokenPlayingMedia}\n        setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n        rarityVerified={rarityVerified}\n        uniformAspectRatio={uniformAspectRatio}\n        setUniformAspectRatio={setUniformAspectRatio}\n        renderedHeight={renderedHeight}\n        setRenderedHeight={setRenderedHeight}\n      />\n    ))\n  }, [collectionAssets, isMobile, currentTokenPlayingMedia, rarityVerified, uniformAspectRatio, renderedHeight])\n\n  const hasNfts = collectionAssets && collectionAssets.length > 0\n  const hasErc1155s = hasNfts && collectionAssets[0] && collectionAssets[0]?.tokenType === NftStandard.Erc1155\n\n  const minMaxPriceChipText: string | undefined = useMemo(() => {\n    if (debouncedMinPrice && debouncedMaxPrice) {\n      return `Price: ${debouncedMinPrice} - ${debouncedMaxPrice} ETH`\n    } else if (debouncedMinPrice) {\n      return `Min. Price: ${debouncedMinPrice} ETH`\n    } else if (debouncedMaxPrice) {\n      return `Max Price: ${debouncedMaxPrice} ETH`\n    }\n\n    return undefined\n  }, [debouncedMinPrice, debouncedMaxPrice])\n\n  useEffect(() => {\n    const marketCount: any = {}\n    collectionStats?.marketplaceCount?.forEach(({ marketplace, count }) => {\n      marketCount[marketplace] = count\n    })\n    setMarketCount(marketCount)\n    oldStateRef.current = useCollectionFilters.getState()\n  }, [collectionStats?.marketplaceCount, setMarketCount])\n\n  const location = useLocation()\n  // Applying filters from URL to local state\n  useEffect(() => {\n    if (collectionStats?.traits) {\n      const modifiedQuery = applyFiltersFromURL(location, collectionStats)\n\n      requestAnimationFrame(() => {\n        if (modifiedQuery) {\n          useCollectionFilters.setState(modifiedQuery as any)\n        }\n      })\n\n      useCollectionFilters.subscribe((state) => {\n        if (JSON.stringify(oldStateRef.current) !== JSON.stringify(state)) {\n          syncLocalFiltersWithURL(state)\n          oldStateRef.current = state\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location])\n\n  useEffect(() => {\n    setUniformAspectRatio(UniformAspectRatios.unset)\n    setRenderedHeight(undefined)\n  }, [contractAddress])\n\n  useEffect(() => {\n    if (collectionStats && collectionStats.stats?.floor_price) {\n      const lowValue = collectionStats.stats?.floor_price\n      const maxValue = 10 * collectionStats.stats?.floor_price\n\n      if (priceRangeLow === '') {\n        setPriceRangeLow(lowValue?.toFixed(2))\n      }\n\n      if (priceRangeHigh === '') {\n        setPriceRangeHigh(maxValue.toFixed(2))\n      }\n    }\n  }, [collectionStats, priceRangeLow, priceRangeHigh, setPriceRangeHigh, setPriceRangeLow])\n\n  const handleSweepClick = useCallback(() => {\n    if (hasErc1155s) return\n    if (!sweepIsOpen) {\n      scrollToTop()\n      if (!bagExpanded && !isMobile) toggleBag()\n    }\n    setSweepOpen(!sweepIsOpen)\n  }, [bagExpanded, hasErc1155s, isMobile, sweepIsOpen, toggleBag])\n\n  const handleClearAllClick = useCallback(() => {\n    reset()\n    setPrevMinMax([0, 100])\n    scrollToTop()\n  }, [reset, setPrevMinMax])\n\n  return (\n    <>\n      <AnimatedBox\n        backgroundColor=\"backgroundBackdrop\"\n        position=\"sticky\"\n        top=\"72\"\n        width=\"full\"\n        zIndex=\"3\"\n        marginBottom={{ sm: '8', md: '20' }}\n        paddingTop=\"16\"\n        paddingBottom=\"16\"\n      >\n        <ActionsContainer>\n          <ActionsSubContainer>\n            <TraceEvent\n              events={[BrowserEvent.onClick]}\n              element={InterfaceElementName.NFT_FILTER_BUTTON}\n              name={NFTEventName.NFT_FILTER_OPENED}\n              shouldLogImpression={!isFiltersExpanded}\n              properties={{ collection_address: contractAddress, chain_id: chainId }}\n            >\n              <FilterButton\n                isMobile={isMobile}\n                isFiltersExpanded={isFiltersExpanded}\n                collectionCount={collectionAssets?.[0]?.totalCount ?? 0}\n                onClick={() => {\n                  if (bagExpanded && !screenSize['xl']) toggleBag()\n                  setFiltersExpanded(!isFiltersExpanded)\n                }}\n              />\n            </TraceEvent>\n            <SortDropdownContainer isFiltersExpanded={isFiltersExpanded}>\n              <SortDropdown dropDownOptions={sortDropDownOptions} />\n            </SortDropdownContainer>\n            <CollectionSearch />\n          </ActionsSubContainer>\n          {!hasErc1155s && (\n            <SweepButton\n              toggled={sweepIsOpen}\n              disabled={hasErc1155s}\n              className={buttonTextMedium}\n              onClick={handleSweepClick}\n              data-testid=\"nft-sweep-button\"\n            >\n              <SweepIcon viewBox=\"0 0 24 24\" width=\"20px\" height=\"20px\" />\n              <SweepText fontWeight={600} color=\"currentColor\" lineHeight=\"20px\">\n                Sweep\n              </SweepText>\n            </SweepButton>\n          )}\n        </ActionsContainer>\n        <InfiniteScrollWrapper>\n          {sweepIsOpen && (\n            <Sweep contractAddress={contractAddress} minPrice={debouncedMinPrice} maxPrice={debouncedMaxPrice} />\n          )}\n          <Row\n            paddingTop={!!markets.length || !!traits.length || minMaxPriceChipText ? '12' : '0'}\n            gap=\"8\"\n            flexWrap=\"wrap\"\n          >\n            {markets.map((market) => (\n              <TraitChip\n                key={market}\n                value={\n                  <MarketNameWrapper>\n                    <MarketplaceLogo src={`/nft/svgs/marketplaces/${market.toLowerCase()}.svg`} />\n                    {MARKETPLACE_ITEMS[market as keyof typeof MARKETPLACE_ITEMS]}\n                  </MarketNameWrapper>\n                }\n                onClick={() => {\n                  scrollToTop()\n                  removeMarket(market)\n                }}\n              />\n            ))}\n            {traits.map((trait) => (\n              <TraitChip\n                key={trait.trait_value}\n                value={\n                  trait.trait_type === 'Number of traits'\n                    ? `${trait.trait_value} trait${pluralize(Number(trait.trait_value))}`\n                    : `${trait.trait_type}: ${trait.trait_value}`\n                }\n                onClick={() => {\n                  scrollToTop()\n                  removeTrait(trait)\n                }}\n              />\n            ))}\n            {minMaxPriceChipText && (\n              <TraitChip\n                value={minMaxPriceChipText}\n                onClick={() => {\n                  scrollToTop()\n                  setMin('')\n                  setMax('')\n                  setPrevMinMax([0, 100])\n                }}\n              />\n            )}\n            {Boolean(traits.length || markets.length || minMaxPriceChipText) && (\n              <ClearAllButton onClick={handleClearAllClick}>Clear All</ClearAllButton>\n            )}\n          </Row>\n        </InfiniteScrollWrapper>\n      </AnimatedBox>\n      <InfiniteScrollWrapper>\n        {loading ? (\n          <CollectionNftsLoading height={renderedHeight} />\n        ) : (\n          <InfiniteScroll\n            next={loadMore}\n            hasMore={hasNext ?? false}\n            loader={Boolean(hasNext && hasNfts) && <LoadingAssets />}\n            dataLength={collectionAssets?.length ?? 0}\n            style={{ overflow: 'unset' }}\n            className={hasNfts ? styles.assetList : undefined}\n          >\n            {!hasNfts ? (\n              <Center width=\"full\" color=\"textSecondary\" textAlign=\"center\" style={{ height: '60vh' }}>\n                <EmptyCollectionWrapper>\n                  <p className={headlineMedium}>No NFTS found</p>\n                  <Box\n                    onClick={reset}\n                    type=\"button\"\n                    className={clsx(bodySmall, buttonTextMedium)}\n                    color=\"accentAction\"\n                    cursor=\"pointer\"\n                  >\n                    <ViewFullCollection>View full collection</ViewFullCollection>\n                  </Box>\n                </EmptyCollectionWrapper>\n              </Center>\n            ) : (\n              assets\n            )}\n          </InfiniteScroll>\n        )}\n      </InfiniteScrollWrapper>\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/explore/Banner.tsx",["3494","3495","3496"],"import { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport { fetchTrendingCollections } from 'nft/queries'\nimport { TimePeriod } from 'nft/types'\nimport { calculateCardIndex } from 'nft/utils'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { opacify } from 'theme/utils'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 22px;\n  position: relative;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px;\n  }\n`\n\nconst AbsoluteFill = styled.div`\n  position: absolute;\n  top: -96px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\n// https://stackoverflow.com/a/71353198\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\n  transform: translate3d(0, 0, 0) scaleY(1.1);\n\n  background-image: ${(props) => `url(${props.backgroundImage})`};\n  filter: blur(62px);\n\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\n`\n\nconst PlainBackground = styled(AbsoluteFill)`\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: ${({ theme }) => theme.maxWidth};\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 72px;\n  line-height: 88px;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.textPrimary};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    line-height: 43px;\n    text-align: center;\n    padding-bottom: 16px;\n\n    br {\n      display: none;\n    }\n  }\n\n  /* Custom breakpoint to split into two lines on smaller screens */\n  @media only screen and (max-width: 550px) {\n    font-size: 28px;\n    line-height: 34px;\n    padding-bottom: 0;\n\n    br {\n      display: unset;\n    }\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n\n  const { data } = useQuery(\n    ['trendingCollections'],\n    () => {\n      return fetchTrendingCollections({\n        volumeType: 'eth',\n        timePeriod: TimePeriod.OneDay,\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n      })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n  const { data: gqlData } = useTrendingCollections(\n    TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n    HistoryDuration.Day\n  )\n\n  const collections = useMemo(() => {\n    const gatedData = isNftGraphqlEnabled ? gqlData : data\n    return gatedData\n      ?.filter((collection) => collection.address && !EXCLUDED_COLLECTIONS.includes(collection.address))\n      .slice(0, 5)\n  }, [data, gqlData, isNftGraphqlEnabled])\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  const activeCollection = collections?.[activeCollectionIdx]\n\n  return (\n    <BannerContainer>\n      {activeCollection ? (\n        activeCollection.bannerImageUrl ? (\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\n        ) : (\n          <PlainBackground />\n        )\n      ) : null}\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. <br />\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <CarouselCard\n                key={collection.address}\n                collection={collection}\n                onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n              />\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","/workspace/Physica-Interfae/src/nft/components/explore/TrendingCollections.tsx",["3497"],"import { OpacityHoverState } from 'components/Common'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { fetchTrendingCollections } from '../../queries'\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: ${({ theme }) => theme.maxWidth};\n  padding: 0 16px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  font-weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nfunction convertTimePeriodToHistoryDuration(timePeriod: TimePeriod): HistoryDuration {\n  switch (timePeriod) {\n    case TimePeriod.OneDay:\n      return HistoryDuration.Day\n    case TimePeriod.SevenDays:\n      return HistoryDuration.Week\n    case TimePeriod.ThirtyDays:\n      return HistoryDuration.Month\n    case TimePeriod.AllTime:\n      return HistoryDuration.Max\n    default:\n      return HistoryDuration.Day\n  }\n}\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n\n  const { isSuccess, data } = useQuery(\n    ['trendingCollections', timePeriod],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchInterval: 5000,\n    }\n  )\n\n  const { data: gqlData, loading } = useTrendingCollections(100, convertTimePeriodToHistoryDuration(timePeriod))\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollections = useMemo(() => {\n    const gatedData = isNftGraphqlEnabled ? gqlData : data\n    const dataLoaded = isNftGraphqlEnabled ? !loading : isSuccess\n    if (dataLoaded && gatedData) {\n      return gatedData.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [isNftGraphqlEnabled, gqlData, data, loading, isSuccess, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","/workspace/Physica-Interfae/src/nft/components/bag/MobileHoverBag.tsx",[],"/workspace/Physica-Interfae/src/components/Loader/styled.tsx",[],"/workspace/Physica-Interfae/src/utils/transformSwapRouteToGetQuoteResult.ts",["3498"],"import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { routeAmountsToString, SwapRoute } from '@uniswap/smart-order-router'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { GetQuoteResult, V2PoolInRoute, V3PoolInRoute } from 'state/routing/types'\n\n// from routing-api (https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/quote.ts#L243-L311)\nexport function transformSwapRouteToGetQuoteResult(\n  type: 'exactIn' | 'exactOut',\n  amount: CurrencyAmount<Currency>,\n  {\n    quote,\n    quoteGasAdjusted,\n    route,\n    estimatedGasUsed,\n    estimatedGasUsedQuoteToken,\n    estimatedGasUsedUSD,\n    gasPriceWei,\n    methodParameters,\n    blockNumber,\n  }: SwapRoute\n): GetQuoteResult {\n  const routeResponse: Array<(V3PoolInRoute | V2PoolInRoute)[]> = []\n\n  for (const subRoute of route) {\n    const { amount, quote, tokenPath } = subRoute\n\n    const pools = subRoute.protocol === Protocol.V2 ? subRoute.route.pairs : subRoute.route.pools\n    const curRoute: (V3PoolInRoute | V2PoolInRoute)[] = []\n    for (let i = 0; i < pools.length; i++) {\n      const nextPool = pools[i]\n      const tokenIn = tokenPath[i]\n      const tokenOut = tokenPath[i + 1]\n\n      let edgeAmountIn = undefined\n      if (i === 0) {\n        edgeAmountIn = type === 'exactIn' ? amount.quotient.toString() : quote.quotient.toString()\n      }\n\n      let edgeAmountOut = undefined\n      if (i === pools.length - 1) {\n        edgeAmountOut = type === 'exactIn' ? quote.quotient.toString() : amount.quotient.toString()\n      }\n\n      if (nextPool instanceof Pool) {\n        curRoute.push({\n          type: 'v3-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          fee: nextPool.fee.toString(),\n          liquidity: nextPool.liquidity.toString(),\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\n          tickCurrent: nextPool.tickCurrent.toString(),\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      } else {\n        const reserve0 = nextPool.reserve0\n        const reserve1 = nextPool.reserve1\n\n        curRoute.push({\n          type: 'v2-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          reserve0: {\n            token: {\n              chainId: reserve0.currency.wrapped.chainId,\n              decimals: reserve0.currency.wrapped.decimals,\n              address: reserve0.currency.wrapped.address,\n              symbol: reserve0.currency.wrapped.symbol,\n            },\n            quotient: reserve0.quotient.toString(),\n          },\n          reserve1: {\n            token: {\n              chainId: reserve1.currency.wrapped.chainId,\n              decimals: reserve1.currency.wrapped.decimals,\n              address: reserve1.currency.wrapped.address,\n              symbol: reserve1.currency.wrapped.symbol,\n            },\n            quotient: reserve1.quotient.toString(),\n          },\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      }\n    }\n\n    routeResponse.push(curRoute)\n  }\n\n  const result: GetQuoteResult = {\n    methodParameters,\n    blockNumber: blockNumber.toString(),\n    amount: amount.quotient.toString(),\n    amountDecimals: amount.toExact(),\n    quote: quote.quotient.toString(),\n    quoteDecimals: quote.toExact(),\n    quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\n    quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\n    gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\n    gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\n    gasUseEstimate: estimatedGasUsed.toString(),\n    gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\n    gasPriceWei: gasPriceWei.toString(),\n    route: routeResponse,\n    routeString: routeAmountsToString(route),\n  }\n\n  return result\n}\n","/workspace/Physica-Interfae/src/connection/index.ts",["3499","3500","3501","3502"],"import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { initializeConnector, Web3ReactHooks } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport { Connector } from '@web3-react/types'\nimport COINBASE_ICON from 'assets/images/coinbaseWalletIcon.svg'\nimport GNOSIS_ICON from 'assets/images/gnosis.png'\nimport METAMASK_ICON from 'assets/images/metamask.svg'\nimport UNIWALLET_ICON from 'assets/images/uniwallet.png'\nimport WALLET_CONNECT_ICON from 'assets/images/walletConnectIcon.svg'\nimport INJECTED_DARK_ICON from 'assets/svg/browser-wallet-dark.svg'\nimport INJECTED_LIGHT_ICON from 'assets/svg/browser-wallet-light.svg'\nimport UNISWAP_LOGO from 'assets/svg/logo.svg'\nimport { SupportedChainId } from 'constants/chains'\nimport { useCallback } from 'react'\nimport { isMobile, isNonIOSPhone } from 'utils/userAgent'\n\nimport { RPC_URLS } from '../constants/networks'\nimport { RPC_PROVIDERS } from '../constants/providers'\nimport { getIsCoinbaseWallet, getIsInjected, getIsMetaMaskWallet } from './utils'\nimport { UniwalletConnect, WalletConnectPopup } from './WalletConnect'\n\nexport enum ConnectionType {\n  UNIWALLET = 'UNIWALLET',\n  INJECTED = 'INJECTED',\n  COINBASE_WALLET = 'COINBASE_WALLET',\n  WALLET_CONNECT = 'WALLET_CONNECT',\n  NETWORK = 'NETWORK',\n  GNOSIS_SAFE = 'GNOSIS_SAFE',\n}\n\nexport interface Connection {\n  getName(): string\n  connector: Connector\n  hooks: Web3ReactHooks\n  type: ConnectionType\n  getIcon?(isDarkMode: boolean): string\n  shouldDisplay(): boolean\n  overrideActivate?: () => boolean\n  isNew?: boolean\n}\n\nfunction onError(error: Error) {\n  console.debug(`web3-react error: ${error}`)\n}\n\nconst [web3Network, web3NetworkHooks] = initializeConnector<Network>(\n  (actions) => new Network({ actions, urlMap: RPC_PROVIDERS, defaultChainId: 1 })\n)\nexport const networkConnection: Connection = {\n  getName: () => 'Network',\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK,\n  shouldDisplay: () => false,\n}\n\nconst getIsCoinbaseWalletBrowser = () => isMobile && getIsCoinbaseWallet()\nconst getIsMetaMaskBrowser = () => isMobile && getIsMetaMaskWallet()\nconst getIsInjectedMobileBrowser = () => getIsCoinbaseWalletBrowser() || getIsMetaMaskBrowser()\n\nconst getShouldAdvertiseMetaMask = () =>\n  !getIsMetaMaskWallet() && !isMobile && (!getIsInjected() || getIsCoinbaseWallet())\nconst getIsGenericInjector = () => getIsInjected() && !getIsMetaMaskWallet() && !getIsCoinbaseWallet()\n\nconst [web3Injected, web3InjectedHooks] = initializeConnector<MetaMask>((actions) => new MetaMask({ actions, onError }))\n\nconst injectedConnection: Connection = {\n  // TODO(WEB-3131) re-add \"Install MetaMask\" string when no injector is present\n  getName: () => (getIsGenericInjector() ? 'Browser Wallet' : 'MetaMask'),\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED,\n  getIcon: (isDarkMode: boolean) =>\n    getIsGenericInjector() ? (isDarkMode ? INJECTED_DARK_ICON : INJECTED_LIGHT_ICON) : METAMASK_ICON,\n  shouldDisplay: () => getIsMetaMaskWallet() || getShouldAdvertiseMetaMask() || getIsGenericInjector(),\n  // If on non-injected, non-mobile browser, prompt user to install Metamask\n  overrideActivate: () => {\n    if (getShouldAdvertiseMetaMask()) {\n      window.open('https://metamask.io/', 'inst_metamask')\n      return true\n    }\n    return false\n  },\n}\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector<GnosisSafe>((actions) => new GnosisSafe({ actions }))\nexport const gnosisSafeConnection: Connection = {\n  getName: () => 'Gnosis Safe',\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE,\n  getIcon: () => GNOSIS_ICON,\n  shouldDisplay: () => false,\n}\n\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector<WalletConnectPopup>(\n  (actions) => new WalletConnectPopup({ actions, onError })\n)\nexport const walletConnectConnection: Connection = {\n  getName: () => 'WalletConnect',\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT,\n  getIcon: () => WALLET_CONNECT_ICON,\n  shouldDisplay: () => !getIsInjectedMobileBrowser(),\n}\n\nconst [web3UniwalletConnect, web3UniwalletConnectHooks] = initializeConnector<UniwalletConnect>(\n  (actions) => new UniwalletConnect({ actions, onError })\n)\nexport const uniwalletConnectConnection: Connection = {\n  getName: () => 'Uniswap Wallet',\n  connector: web3UniwalletConnect,\n  hooks: web3UniwalletConnectHooks,\n  type: ConnectionType.UNIWALLET,\n  getIcon: () => UNIWALLET_ICON,\n  shouldDisplay: () => Boolean(!getIsInjectedMobileBrowser() && !isNonIOSPhone),\n  isNew: true,\n}\n\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector<CoinbaseWallet>(\n  (actions) =>\n    new CoinbaseWallet({\n      actions,\n      options: {\n        url: RPC_URLS[SupportedChainId.MAINNET][0],\n        appName: 'Uniswap',\n        appLogoUrl: UNISWAP_LOGO,\n        reloadOnDisconnect: false,\n      },\n      onError,\n    })\n)\n\nconst coinbaseWalletConnection: Connection = {\n  getName: () => 'Coinbase Wallet',\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET,\n  getIcon: () => COINBASE_ICON,\n  shouldDisplay: () =>\n    Boolean((isMobile && !getIsInjectedMobileBrowser()) || !isMobile || getIsCoinbaseWalletBrowser()),\n  // If on a mobile browser that isn't the coinbase wallet browser, deeplink to the coinbase wallet app\n  overrideActivate: () => {\n    if (isMobile && !getIsInjectedMobileBrowser()) {\n      window.open('https://go.cb-w.com/mtUDhEZPy1', 'cbwallet')\n      return true\n    }\n    return false\n  },\n}\n\nexport function getConnections() {\n  return [\n    uniwalletConnectConnection,\n    injectedConnection,\n    walletConnectConnection,\n    coinbaseWalletConnection,\n    gnosisSafeConnection,\n    networkConnection,\n  ]\n}\n\nexport function useGetConnection() {\n  return useCallback((c: Connector | ConnectionType) => {\n    if (c instanceof Connector) {\n      const connection = getConnections().find((connection) => connection.connector === c)\n      if (!connection) {\n        throw Error('unsupported connector')\n      }\n      return connection\n    } else {\n      switch (c) {\n        case ConnectionType.INJECTED:\n          return injectedConnection\n        case ConnectionType.COINBASE_WALLET:\n          return coinbaseWalletConnection\n        case ConnectionType.WALLET_CONNECT:\n          return walletConnectConnection\n        case ConnectionType.UNIWALLET:\n          return uniwalletConnectConnection\n        case ConnectionType.NETWORK:\n          return networkConnection\n        case ConnectionType.GNOSIS_SAFE:\n          return gnosisSafeConnection\n      }\n    }\n  }, [])\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useWalletCollections.ts",["3503","3504"],"import { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { WalletAsset, WalletCollection } from '../types'\n\ninterface WalletCollectionState {\n  walletAssets: WalletAsset[]\n  walletCollections: WalletCollection[]\n  displayAssets: WalletAsset[]\n  collectionFilters: string[]\n  listFilter: string\n  setWalletAssets: (assets: WalletAsset[]) => void\n  setWalletCollections: (collections: WalletCollection[]) => void\n  setCollectionFilters: (address: string) => void\n  clearCollectionFilters: () => void\n  setListFilter: (value: string) => void\n  setDisplayAssets: (walletAssets: WalletAsset[], listFilter: string) => void\n}\n\nexport const useWalletCollections = create<WalletCollectionState>()(\n  devtools(\n    (set) => ({\n      walletAssets: [],\n      walletCollections: [],\n      displayAssets: [],\n      collectionFilters: [],\n      listFilter: 'All',\n      setWalletAssets: (assets) =>\n        set(() => {\n          return {\n            walletAssets: assets?.filter((asset) => asset.asset_contract?.tokenType === NftStandard.Erc721),\n          }\n        }),\n      setWalletCollections: (collections) =>\n        set(() => {\n          return { walletCollections: collections }\n        }),\n      setCollectionFilters: (address) =>\n        set(({ collectionFilters }) => {\n          if (collectionFilters.length === 0) return { collectionFilters: [address] }\n          else if (collectionFilters.some((x) => x === address))\n            return { collectionFilters: collectionFilters.filter((n) => n !== address) }\n          else return { collectionFilters: [...collectionFilters, address] }\n        }),\n      clearCollectionFilters: () =>\n        set(() => {\n          return { collectionFilters: [] }\n        }),\n      setListFilter: (value) =>\n        set(() => {\n          return { listFilter: value }\n        }),\n      setDisplayAssets: (walletAssets, listFilter) =>\n        set(() => {\n          return { displayAssets: filterWalletAssets(walletAssets, listFilter) }\n        }),\n    }),\n    { name: 'useWalletCollections' }\n  )\n)\n\nconst filterWalletAssets = (walletAssets: WalletAsset[], listFilter: string) => {\n  let displayAssets = walletAssets\n  if (listFilter === 'Listed')\n    displayAssets = displayAssets?.filter((x) => {\n      return x.listing_date !== null\n    })\n  if (listFilter === 'Unlisted')\n    displayAssets = displayAssets?.filter((x) => {\n      return x.listing_date === null\n    })\n  return displayAssets\n}\n","/workspace/Physica-Interfae/src/hooks/useContract.ts",["3505","3506","3507"],"import { Contract } from '@ethersproject/contracts'\nimport QuoterV2Json from '@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json'\nimport IUniswapV2PairJson from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport IUniswapV2Router02Json from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\nimport QuoterJson from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'\nimport TickLensJson from '@uniswap/v3-periphery/artifacts/contracts/lens/TickLens.sol/TickLens.json'\nimport UniswapInterfaceMulticallJson from '@uniswap/v3-periphery/artifacts/contracts/lens/UniswapInterfaceMulticall.sol/UniswapInterfaceMulticall.json'\nimport NonfungiblePositionManagerJson from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport V3MigratorJson from '@uniswap/v3-periphery/artifacts/contracts/V3Migrator.sol/V3Migrator.json'\nimport { useWeb3React } from '@web3-react/core'\nimport ARGENT_WALLET_DETECTOR_ABI from 'abis/argent-wallet-detector.json'\nimport EIP_2612 from 'abis/eip_2612.json'\nimport ENS_PUBLIC_RESOLVER_ABI from 'abis/ens-public-resolver.json'\nimport ENS_ABI from 'abis/ens-registrar.json'\nimport ERC20_ABI from 'abis/erc20.json'\nimport ERC20_BYTES32_ABI from 'abis/erc20_bytes32.json'\nimport ERC721_ABI from 'abis/erc721.json'\nimport ERC1155_ABI from 'abis/erc1155.json'\nimport { ArgentWalletDetector, EnsPublicResolver, EnsRegistrar, Erc20, Erc721, Erc1155, Weth } from 'abis/types'\nimport WETH_ABI from 'abis/weth.json'\nimport {\n  ARGENT_WALLET_DETECTOR_ADDRESS,\n  ENS_REGISTRAR_ADDRESSES,\n  MULTICALL_ADDRESS,\n  NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n  QUOTER_ADDRESSES,\n  TICK_LENS_ADDRESSES,\n  V2_ROUTER_ADDRESS,\n  V3_MIGRATOR_ADDRESSES,\n} from 'constants/addresses'\nimport { WRAPPED_NATIVE_CURRENCY } from 'constants/tokens'\nimport { useMemo } from 'react'\nimport { NonfungiblePositionManager, Quoter, QuoterV2, TickLens, UniswapInterfaceMulticall } from 'types/v3'\nimport { V3Migrator } from 'types/v3/V3Migrator'\n\nimport { getContract } from '../utils'\n\nconst { abi: IUniswapV2PairABI } = IUniswapV2PairJson\nconst { abi: IUniswapV2Router02ABI } = IUniswapV2Router02Json\nconst { abi: QuoterABI } = QuoterJson\nconst { abi: QuoterV2ABI } = QuoterV2Json\nconst { abi: TickLensABI } = TickLensJson\nconst { abi: MulticallABI } = UniswapInterfaceMulticallJson\nconst { abi: NFTPositionManagerABI } = NonfungiblePositionManagerJson\nconst { abi: V2MigratorABI } = V3MigratorJson\n\n// returns null on errors\nexport function useContract<T extends Contract = Contract>(\n  addressOrAddressMap: string | { [chainId: number]: string } | undefined,\n  ABI: any,\n  withSignerIfPossible = true\n): T | null {\n  const { provider, account, chainId } = useWeb3React()\n\n  return useMemo(() => {\n    if (!addressOrAddressMap || !ABI || !provider || !chainId) return null\n    let address: string | undefined\n    if (typeof addressOrAddressMap === 'string') address = addressOrAddressMap\n    else address = addressOrAddressMap[chainId]\n    if (!address) return null\n    try {\n      return getContract(address, ABI, provider, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      console.error('Failed to get contract', error)\n      return null\n    }\n  }, [addressOrAddressMap, ABI, provider, chainId, withSignerIfPossible, account]) as T\n}\n\nexport function useV2MigratorContract() {\n  return useContract<V3Migrator>(V3_MIGRATOR_ADDRESSES, V2MigratorABI, true)\n}\n\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean) {\n  return useContract<Erc20>(tokenAddress, ERC20_ABI, withSignerIfPossible)\n}\n\nexport function useWETHContract(withSignerIfPossible?: boolean) {\n  const { chainId } = useWeb3React()\n  return useContract<Weth>(\n    chainId ? WRAPPED_NATIVE_CURRENCY[chainId]?.address : undefined,\n    WETH_ABI,\n    withSignerIfPossible\n  )\n}\n\nexport function useERC721Contract(nftAddress?: string) {\n  return useContract<Erc721>(nftAddress, ERC721_ABI, false)\n}\n\nexport function useERC1155Contract(nftAddress?: string) {\n  return useContract<Erc1155>(nftAddress, ERC1155_ABI, false)\n}\n\nexport function useArgentWalletDetectorContract() {\n  return useContract<ArgentWalletDetector>(ARGENT_WALLET_DETECTOR_ADDRESS, ARGENT_WALLET_DETECTOR_ABI, false)\n}\n\nexport function useENSRegistrarContract(withSignerIfPossible?: boolean) {\n  return useContract<EnsRegistrar>(ENS_REGISTRAR_ADDRESSES, ENS_ABI, withSignerIfPossible)\n}\n\nexport function useENSResolverContract(address: string | undefined, withSignerIfPossible?: boolean) {\n  return useContract<EnsPublicResolver>(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible)\n}\n\nexport function useBytes32TokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible)\n}\n\nexport function useEIP2612Contract(tokenAddress?: string): Contract | null {\n  return useContract(tokenAddress, EIP_2612, false)\n}\n\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\n}\n\nexport function useV2RouterContract(): Contract | null {\n  return useContract(V2_ROUTER_ADDRESS, IUniswapV2Router02ABI, true)\n}\n\nexport function useInterfaceMulticall() {\n  return useContract<UniswapInterfaceMulticall>(MULTICALL_ADDRESS, MulticallABI, false) as UniswapInterfaceMulticall\n}\n\nexport function useV3NFTPositionManagerContract(withSignerIfPossible?: boolean): NonfungiblePositionManager | null {\n  return useContract<NonfungiblePositionManager>(\n    NONFUNGIBLE_POSITION_MANAGER_ADDRESSES,\n    NFTPositionManagerABI,\n    withSignerIfPossible\n  )\n}\n\nexport function useQuoter(useQuoterV2: boolean) {\n  return useContract<Quoter | QuoterV2>(QUOTER_ADDRESSES, useQuoterV2 ? QuoterV2ABI : QuoterABI)\n}\n\nexport function useTickLens(): TickLens | null {\n  const { chainId } = useWeb3React()\n  const address = chainId ? TICK_LENS_ADDRESSES[chainId] : undefined\n  return useContract(address, TickLensABI) as TickLens | null\n}\n","/workspace/Physica-Interfae/src/components/AirdropModal/index.tsx",[],"/workspace/Physica-Interfae/src/nft/utils/index.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/index.ts",[],"/workspace/Physica-Interfae/src/components/FiatOnrampModal/index.tsx",["3508","3509"],"import { Trans } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useCloseModal, useModalIsOpen } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { CustomLightSpinner, ThemedText } from 'theme'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\n\nimport Circle from '../../assets/images/blue-loader.svg'\nimport Modal from '../Modal'\n\nconst MOONPAY_DARK_BACKGROUND = '#1c1c1e'\nconst Wrapper = styled.div<{ isDarkMode: boolean }>`\n  // #1c1c1e is the background color for the darkmode moonpay iframe as of 2/16/2023\n  background-color: ${({ isDarkMode, theme }) => (isDarkMode ? MOONPAY_DARK_BACKGROUND : theme.white)};\n  border-radius: 20px;\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  display: flex;\n  flex-flow: column nowrap;\n  margin: 0;\n  min-height: 720px;\n  min-width: 375px;\n  position: relative;\n  width: 100%;\n`\n\nconst ErrorText = styled(ThemedText.BodyPrimary)`\n  color: ${({ theme }) => theme.accentFailure};\n  margin: auto !important;\n  text-align: center;\n  width: 90%;\n`\nconst StyledIframe = styled.iframe<{ isDarkMode: boolean }>`\n  // #1c1c1e is the background color for the darkmode moonpay iframe as of 2/16/2023\n  background-color: ${({ isDarkMode, theme }) => (isDarkMode ? MOONPAY_DARK_BACKGROUND : theme.white)};\n  border-radius: 12px;\n  bottom: 0;\n  left: 0;\n  height: calc(100% - 16px);\n  margin: 8px;\n  padding: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: calc(100% - 16px);\n`\nconst StyledSpinner = styled(CustomLightSpinner)`\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n`\n\nconst MOONPAY_SUPPORTED_CURRENCY_CODES = [\n  'eth',\n  'eth_arbitrum',\n  'eth_optimism',\n  'eth_polygon',\n  'weth',\n  'wbtc',\n  'matic_polygon',\n  'polygon',\n  'usdc_arbitrum',\n  'usdc_optimism',\n  'usdc_polygon',\n]\n\nexport default function FiatOnrampModal() {\n  const { account } = useWeb3React()\n  const theme = useTheme()\n  const isDarkMode = useIsDarkMode()\n  const closeModal = useCloseModal()\n  const fiatOnrampModalOpen = useModalIsOpen(ApplicationModal.FIAT_ONRAMP)\n\n  const [signedIframeUrl, setSignedIframeUrl] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const fetchSignedIframeUrl = useCallback(async () => {\n    if (!account) {\n      setError('Please connect an account before making a purchase.')\n      return\n    }\n    setLoading(true)\n    setError(null)\n    try {\n      const signedIframeUrlFetchEndpoint = process.env.REACT_APP_MOONPAY_LINK as string\n      const res = await fetch(signedIframeUrlFetchEndpoint, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          theme: isDarkMode ? 'dark' : 'light',\n          colorCode: theme.accentAction,\n          defaultCurrencyCode: 'eth',\n          redirectUrl: 'https://app.uniswap.org/#/swap',\n          walletAddresses: JSON.stringify(\n            MOONPAY_SUPPORTED_CURRENCY_CODES.reduce(\n              (acc, currencyCode) => ({\n                ...acc,\n                [currencyCode]: account,\n              }),\n              {}\n            )\n          ),\n        }),\n      })\n      const { url } = await res.json()\n      setSignedIframeUrl(url)\n    } catch (e) {\n      console.log('there was an error fetching the link', e)\n      setError(e.toString())\n    } finally {\n      setLoading(false)\n    }\n  }, [account, isDarkMode, theme.accentAction])\n\n  useEffect(() => {\n    fetchSignedIframeUrl()\n  }, [fetchSignedIframeUrl])\n\n  return (\n    <Modal isOpen={fiatOnrampModalOpen} onDismiss={closeModal} maxHeight={720}>\n      <Wrapper data-testid=\"fiat-onramp-modal\" isDarkMode={isDarkMode}>\n        {error ? (\n          <>\n            <ThemedText.MediumHeader>\n              <Trans>Moonpay Fiat On-ramp iframe</Trans>\n            </ThemedText.MediumHeader>\n            <ErrorText>\n              <Trans>something went wrong!</Trans>\n              <br />\n              {error}\n            </ErrorText>\n          </>\n        ) : loading ? (\n          <StyledSpinner src={Circle} alt=\"loading spinner\" size=\"90px\" />\n        ) : (\n          <StyledIframe\n            src={signedIframeUrl ?? ''}\n            frameBorder=\"0\"\n            title=\"fiat-onramp-iframe\"\n            isDarkMode={isDarkMode}\n          />\n        )}\n      </Wrapper>\n    </Modal>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Button/LoadingButtonSpinner.tsx",[],"/workspace/Physica-Interfae/src/graphql/data/util.tsx",[],"/workspace/Physica-Interfae/src/nft/components/explore/CollectionTable.tsx",["3510"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a?: number, b?: number): 1 | -1 => {\n  if (!a) return -1\n  if (!b) return 1\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      if (isNftGraphqlEnabled) {\n        return compareFloats(rowA.original.floor.value, rowB.original.floor.value)\n      } else {\n        const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\n        const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\n\n        return aFloor.gte(bFloor) ? 1 : -1\n      }\n    }\n  }, [isNftGraphqlEnabled])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change && change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","/workspace/Physica-Interfae/src/nft/components/explore/CarouselCard.tsx",["3511"],"import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { useCollection } from 'graphql/data/nft/Collection'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme/components/text'\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 21px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 21px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\nconst IconContainer = styled.div`\n  display: inline;\n  vertical-align: text-bottom;\n  margin-left: 2px;\n`\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  bottom: 0px;\n  left: 0px;\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  z-index: 0;\n\n  // overlay workaround for firefox only\n  @supports (-moz-appearance: none) {\n    bottom: -1px;\n  }\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div``\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\n      theme.breakpoint.sm}px) and (max-width: 880px)) {\n    ${FirstColumnTextWrapper} {\n      display: none;\n    }\n    ${TableElement} {\n      justify-self: left !important;\n    }\n    ${CardHeaderColumn} {\n      padding: 0 20px;\n    }\n  }\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nconst MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">\n          {Number(floorInEth) > 0\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\n            : '-'}\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const { data: gqlCollection, loading } = useCollection(collection.address ?? '')\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n\n  if (loading) return <LoadingCarouselCard />\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              {collection.floor && (\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                  {isNftGraphqlEnabled\n                    ? ethNumberStandardFormatter(collection.floor)\n                    : formatWeiToDecimal(collection.floor.toString())}{' '}\n                  ETH Floor\n                </ThemedText.SubHeaderSmall>\n              )}\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nconst LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CollectionName = styled(ThemedText.MediumHeader)`\n  display: inline;\n  vertical-align: text-bottom;\n  line-height: 28px;\n`\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl ?? ''}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CollectionNameContainer>\n          <CollectionName color=\"accentTextLightPrimary\" fontWeight=\"500\">\n            {collection.name}\n          </CollectionName>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CollectionNameContainer>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/explore/Carousel.tsx",["3512","3513","3514"],"import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","/workspace/Physica-Interfae/src/nft/components/collection/TraitChip.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/Sweep.tsx",["3515","3516","3517","3518","3519","3520","3521","3522","3523"],"import 'rc-slider/assets/index.css'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { SweepFetcherParams, useSweepNftAssets } from 'graphql/data/nft/Asset'\nimport { useBag, useCollectionFilters } from 'nft/hooks'\nimport { GenieAsset, isPooledMarket, Markets } from 'nft/types'\nimport { calcPoolPrice, formatWeiToDecimal, isInSameSudoSwapPool } from 'nft/utils'\nimport { default as Slider } from 'rc-slider'\nimport { useEffect, useMemo, useReducer, useState } from 'react'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nconst SweepContainer = styled.div`\n  display: flex;\n  gap: 60px;\n  margin-top: 12px;\n  padding: 16px;\n  border-radius: 12px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  justify-content: space-between;\n  background: linear-gradient(${({ theme }) => theme.backgroundSurface}, ${({ theme }) => theme.backgroundSurface})\n      padding-box,\n    linear-gradient(to right, #4673fa, #9646fa) border-box;\n  border: 2px solid transparent;\n`\n\nconst StyledSlider = styled(Slider)`\n  cursor: pointer;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    display: none;\n  }\n`\n\nconst SweepLeftmostContainer = styled.div`\n  display: flex;\n  width: 100%;\n  gap: 24px;\n`\n\nconst SweepRightmostContainer = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 8px;\n  min-width: 160px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    display: none;\n  }\n`\n\nconst SweepHeaderContainer = styled.div`\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    display: none;\n  }\n`\n\nconst SweepSubContainer = styled.div`\n  display: flex;\n  width: 100%;\n  gap: 12px;\n  align-items: center;\n`\n\nconst InputContainer = styled.input`\n  width: 96px;\n  color: ${({ theme }) => theme.textPrimary};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  background: none;\n  border-radius: 8px;\n  padding: 6px 8px;\n  font-size: 16px;\n  font-weight: 400px;\n  line-height: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    width: 100%;\n  }\n\n  :hover,\n  :focus {\n    outline: none;\n    border: 1px solid ${({ theme }) => theme.accentAction};\n  }\n`\n\nconst ToggleContainer = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  background: none;\n  border-radius: 12px;\n  padding: 4px;\n  cursor: pointer;\n`\n\nconst ToggleSwitch = styled.div<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n  padding: 4px 8px;\n  border-radius: 8px;\n  background-color: ${({ theme, active }) => (active ? theme.backgroundInteractive : `none`)};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 16px;\n`\n\nconst NftDisplayContainer = styled.div`\n  position: relative;\n  width: 34px;\n  height: 34px;\n`\n\nconst NftHolder = styled.div<{ index: number; src: string | undefined }>`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 26px;\n  height: 26px;\n  border-radius: 4px;\n  background: ${({ theme, src }) => (src ? `url(${src})` : theme.textTertiary)};\n  background-size: 26px;\n  opacity: ${({ src, index }) => (src ? 1.0 : index === 0 ? 0.9 : index === 1 ? 0.6 : 0.3)};\n  transform: ${({ index }) =>\n    index === 0\n      ? 'translate(-50%, -50%) rotate(-4.42deg)'\n      : index === 1\n      ? 'translate(-50%, -50%) rotate(-14.01deg)'\n      : 'translate(-50%, -50%) rotate(10.24deg)'};\n  z-index: ${({ index }) => 3 - index};\n`\n\nconst wholeNumberRegex = RegExp(`^(0|[1-9][0-9]*)$`)\nconst twoDecimalPlacesRegex = RegExp(`^\\\\d*\\\\.?\\\\d{0,2}$`)\n\ninterface NftDisplayProps {\n  nfts: GenieAsset[]\n}\n\nconst NftDisplay = ({ nfts }: NftDisplayProps) => {\n  return (\n    <NftDisplayContainer>\n      {[...Array(3)].map((_, index) => {\n        return (\n          <NftHolder\n            key={index}\n            index={index}\n            src={nfts.length - 1 >= index ? nfts[nfts.length - 1 - index].smallImageUrl : undefined}\n          />\n        )\n      })}\n    </NftDisplayContainer>\n  )\n}\n\ninterface SweepProps {\n  contractAddress: string\n  minPrice: string\n  maxPrice: string\n}\n\nexport const Sweep = ({ contractAddress, minPrice, maxPrice }: SweepProps) => {\n  const theme = useTheme()\n\n  const [isItemsToggled, toggleSweep] = useReducer((state) => !state, true)\n  const [sweepAmount, setSweepAmount] = useState<string>('')\n\n  const addAssetsToBag = useBag((state) => state.addAssetsToBag)\n  const removeAssetsFromBag = useBag((state) => state.removeAssetsFromBag)\n  const itemsInBag = useBag((state) => state.itemsInBag)\n  const lockSweepItems = useBag((state) => state.lockSweepItems)\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n\n  const traits = useCollectionFilters((state) => state.traits)\n  const markets = useCollectionFilters((state) => state.markets)\n\n  const collectionParams = useSweepFetcherParams(contractAddress, 'others', minPrice, maxPrice)\n  const sudoSwapParams = useSweepFetcherParams(contractAddress, Markets.Sudoswap, minPrice, maxPrice)\n  const nftxParams = useSweepFetcherParams(contractAddress, Markets.NFTX, minPrice, maxPrice)\n  const nft20Params = useSweepFetcherParams(contractAddress, Markets.NFT20, minPrice, maxPrice)\n  // These calls will suspend if the query is not yet loaded.\n  const { data: collectionAssets } = useSweepNftAssets(collectionParams)\n  const { data: sudoSwapAssets } = useSweepNftAssets(sudoSwapParams)\n  const { data: nftxAssets } = useSweepNftAssets(nftxParams)\n  const { data: nft20Assets } = useSweepNftAssets(nft20Params)\n\n  const { sortedAssets, sortedAssetsTotalEth } = useMemo(() => {\n    if (!collectionAssets && !sudoSwapAssets && !nftxAssets && !nft20Assets) {\n      return { sortedAssets: undefined, sortedAssetsTotalEth: BigNumber.from(0) }\n    }\n\n    let counterNFTX = 0\n    let counterNFT20 = 0\n\n    let jointCollections: GenieAsset[] = []\n\n    if (sudoSwapAssets) jointCollections = [...jointCollections, ...sudoSwapAssets]\n    if (nftxAssets) jointCollections = [...jointCollections, ...nftxAssets]\n    if (nft20Assets) jointCollections = [...jointCollections, ...nft20Assets]\n\n    const sudoSwapAssetsInJointCollections = jointCollections.filter(\n      (sweepAsset) => sweepAsset.marketplace === Markets.Sudoswap && !sweepAsset.susFlag\n    )\n\n    jointCollections.forEach((asset) => {\n      if (!asset.susFlag) {\n        if (asset.marketplace === Markets.Sudoswap) {\n          const poolPrice = calcPoolPrice(\n            asset,\n            sudoSwapAssetsInJointCollections\n              .filter((sweepAsset) => isInSameSudoSwapPool(asset, sweepAsset))\n              .findIndex((sweepAsset) => sweepAsset.tokenId === asset.tokenId)\n          )\n          asset.priceInfo.ETHPrice = poolPrice ?? '0'\n        } else {\n          const isNFTX = asset.marketplace === Markets.NFTX\n          const poolPrice = calcPoolPrice(asset, isNFTX ? counterNFTX : counterNFT20)\n          if (BigNumber.from(poolPrice).gt(0)) {\n            isNFTX ? counterNFTX++ : counterNFT20++\n          }\n          asset.priceInfo.ETHPrice = poolPrice\n        }\n      }\n    })\n\n    jointCollections = collectionAssets ? collectionAssets.concat(jointCollections) : jointCollections\n\n    jointCollections.sort((a, b) => {\n      return BigNumber.from(a.priceInfo.ETHPrice).gt(BigNumber.from(b.priceInfo.ETHPrice)) ? 1 : -1\n    })\n\n    let validAssets = jointCollections.filter(\n      (asset) => BigNumber.from(asset.priceInfo.ETHPrice).gt(0) && !asset.susFlag\n    )\n\n    validAssets = validAssets.slice(\n      0,\n      Math.max(\n        collectionAssets?.length ?? 0,\n        sudoSwapAssets?.length ?? 0,\n        nftxAssets?.length ?? 0,\n        nft20Assets?.length ?? 0\n      )\n    )\n\n    return {\n      sortedAssets: validAssets,\n      sortedAssetsTotalEth: validAssets.reduce(\n        (total, asset) => total.add(BigNumber.from(asset.priceInfo.ETHPrice)),\n        BigNumber.from(0)\n      ),\n    }\n  }, [collectionAssets, sudoSwapAssets, nftxAssets, nft20Assets])\n\n  const { sweepItemsInBag, sweepEthPrice } = useMemo(() => {\n    const sweepItemsInBag = itemsInBag\n      .filter((item) => item.inSweep && item.asset.address === contractAddress)\n      .map((item) => item.asset)\n\n    const sweepEthPrice = sweepItemsInBag.reduce(\n      (total, asset) => total.add(BigNumber.from(asset.priceInfo.ETHPrice)),\n      BigNumber.from(0)\n    )\n\n    return { sweepItemsInBag, sweepEthPrice }\n  }, [itemsInBag, contractAddress])\n\n  useEffect(() => {\n    if (sweepItemsInBag.length === 0) setSweepAmount('')\n  }, [sweepItemsInBag])\n\n  useEffect(() => {\n    lockSweepItems(contractAddress)\n  }, [contractAddress, traits, markets, minPrice, maxPrice, lockSweepItems])\n\n  const clearSweep = () => {\n    setSweepAmount('')\n    removeAssetsFromBag(sweepItemsInBag)\n  }\n\n  const handleSweep = (value: number) => {\n    if (sortedAssets) {\n      if (isItemsToggled) {\n        if (sweepItemsInBag.length === 0 && value > 0) setBagExpanded({ bagExpanded: true })\n\n        if (sweepItemsInBag.length < value) {\n          addAssetsToBag(sortedAssets.slice(sweepItemsInBag.length, value), true)\n        } else {\n          removeAssetsFromBag(sweepItemsInBag.slice(value, sweepItemsInBag.length), true)\n        }\n        setSweepAmount(value < 1 ? '' : value.toString())\n      } else {\n        const wishValueInWei = parseEther(value.toString())\n        if (sweepEthPrice.lte(wishValueInWei)) {\n          let curIndex = sweepItemsInBag.length\n          let curTotal = sweepEthPrice\n          const wishAssets: GenieAsset[] = []\n\n          while (\n            curIndex < sortedAssets.length &&\n            curTotal.add(BigNumber.from(sortedAssets[curIndex].priceInfo.ETHPrice)).lte(wishValueInWei)\n          ) {\n            wishAssets.push(sortedAssets[curIndex])\n            curTotal = curTotal.add(BigNumber.from(sortedAssets[curIndex].priceInfo.ETHPrice))\n            curIndex++\n          }\n\n          if (wishAssets.length > 0) {\n            if (sweepItemsInBag.length === 0) setBagExpanded({ bagExpanded: true })\n            addAssetsToBag(wishAssets, true)\n          }\n        } else {\n          let curIndex = sweepItemsInBag.length - 1\n          let curTotal = sweepEthPrice\n          const wishAssets: GenieAsset[] = []\n\n          while (curIndex >= 0 && curTotal.gt(wishValueInWei)) {\n            wishAssets.push(sweepItemsInBag[curIndex])\n            curTotal = curTotal.sub(BigNumber.from(sweepItemsInBag[curIndex].priceInfo.ETHPrice))\n            curIndex--\n          }\n\n          if (wishAssets.length > 0) {\n            removeAssetsFromBag(wishAssets, true)\n          }\n        }\n\n        setSweepAmount(value === 0 ? '' : value.toFixed(2))\n      }\n    }\n  }\n\n  const handleSliderChange = (value: number | number[]) => {\n    if (typeof value === 'number') {\n      if (sortedAssets) {\n        if (isItemsToggled) {\n          if (Math.floor(value) !== Math.floor(sweepAmount !== '' ? parseFloat(sweepAmount) : 0))\n            handleSweep(Math.floor(value))\n          setSweepAmount(value < 1 ? '' : value.toString())\n        } else {\n          handleSweep(value)\n          setSweepAmount(value === 0 ? '' : value.toFixed(2))\n        }\n      }\n    }\n  }\n\n  const handleInput = (value: string) => {\n    if (value === '') {\n      handleSweep(0)\n      setSweepAmount('')\n    } else if (isItemsToggled && wholeNumberRegex.test(value)) {\n      handleSweep(parseFloat(value))\n      setSweepAmount(value)\n    } else if (!isItemsToggled && twoDecimalPlacesRegex.test(value)) {\n      handleSweep(parseFloat(value))\n      setSweepAmount(value)\n    }\n  }\n\n  const handleToggleSweep = () => {\n    clearSweep()\n    toggleSweep()\n  }\n\n  return (\n    <SweepContainer data-testid=\"nft-sweep-slider\">\n      <SweepLeftmostContainer>\n        <SweepHeaderContainer>\n          <ThemedText.SubHeader color=\"textPrimary\" lineHeight=\"20px\" paddingTop=\"6px\" paddingBottom=\"6px\">\n            Sweep\n          </ThemedText.SubHeader>\n        </SweepHeaderContainer>\n        <SweepSubContainer>\n          <StyledSlider\n            defaultValue={0}\n            min={0}\n            max={isItemsToggled ? sortedAssets?.length ?? 0 : parseFloat(formatEther(sortedAssetsTotalEth).toString())}\n            value={isItemsToggled ? sweepItemsInBag.length : parseFloat(formatWeiToDecimal(sweepEthPrice.toString()))}\n            step={isItemsToggled ? 1 : 0.01}\n            trackStyle={{\n              top: '3px',\n              height: '8px',\n              background: `radial-gradient(101.8% 4091.31% at 0% 0%, #4673FA 0%, #9646FA 100%)`,\n            }}\n            handleStyle={{\n              top: '3px',\n              width: '12px',\n              height: '20px',\n              backgroundColor: `#4673FA`, //This is a custom color to align with the gradient on sweep - we may want to systematize it eventually\n              borderRadius: '4px',\n              border: 'none',\n              opacity: '1',\n              boxShadow: `${theme.shallowShadow.slice(0, -1)}`,\n            }}\n            railStyle={{\n              top: '3px',\n              height: '8px',\n              backgroundColor: `${theme.backgroundInteractive}`,\n            }}\n            onChange={handleSliderChange}\n          />\n          <InputContainer\n            inputMode=\"decimal\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            // text-specific options\n            type=\"text\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            placeholder=\"0\"\n            minLength={1}\n            maxLength={79}\n            spellCheck=\"false\"\n            value={\n              isItemsToggled ? (sweepAmount !== '' ? Math.floor(parseFloat(sweepAmount)) : sweepAmount) : sweepAmount\n            }\n            onChange={(event) => {\n              handleInput(event.target.value.replace(/,/g, '.'))\n            }}\n          />\n          <ToggleContainer onClick={handleToggleSweep}>\n            <ToggleSwitch active={isItemsToggled}>Items</ToggleSwitch>\n            <ToggleSwitch active={!isItemsToggled}>ETH</ToggleSwitch>\n          </ToggleContainer>\n        </SweepSubContainer>\n      </SweepLeftmostContainer>\n      <SweepRightmostContainer>\n        <ThemedText.SubHeader font-size=\"14px\">{`${formatWeiToDecimal(\n          sweepEthPrice.toString()\n        )} ETH`}</ThemedText.SubHeader>\n        <NftDisplay nfts={sweepItemsInBag} />\n      </SweepRightmostContainer>\n    </SweepContainer>\n  )\n}\n\nconst ALL_OTHER_MARKETS = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare]\n\nfunction useSweepFetcherParams(\n  contractAddress: string,\n  market: Markets.Sudoswap | Markets.NFTX | Markets.NFT20 | 'others',\n  minPrice: string,\n  maxPrice: string\n): SweepFetcherParams {\n  const traits = useCollectionFilters((state) => state.traits)\n  const markets = useCollectionFilters((state) => state.markets)\n\n  const isMarketFiltered = !!markets.length\n\n  return useMemo(() => {\n    if (isMarketFiltered) {\n      if (market === 'others') {\n        const marketsToQuery = markets.filter((market) => !isPooledMarket(market as Markets))\n\n        if (marketsToQuery.length > 0) {\n          return {\n            contractAddress,\n            traits,\n            markets: marketsToQuery,\n          }\n        } else {\n          return { contractAddress: '', traits: [], markets: [] }\n        }\n      }\n      if (!markets.includes(market)) return { contractAddress: '', traits: [], markets: [] }\n    }\n\n    switch (market) {\n      case Markets.Sudoswap:\n      case Markets.NFTX:\n      case Markets.NFT20:\n        return {\n          contractAddress,\n          traits,\n          markets: [market],\n\n          price: {\n            low: minPrice,\n            high: maxPrice,\n            symbol: 'ETH',\n          },\n        }\n      case 'others':\n        return {\n          contractAddress,\n          traits,\n          markets: ALL_OTHER_MARKETS,\n\n          price: {\n            low: minPrice,\n            high: maxPrice,\n            symbol: 'ETH',\n          },\n        }\n    }\n  }, [contractAddress, isMarketFiltered, market, markets, maxPrice, minPrice, traits])\n}\n","/workspace/Physica-Interfae/src/connection/WalletConnect.ts",["3524"],"import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { URI_AVAILABLE, WalletConnect, WalletConnectConstructorArgs } from '@web3-react/walletconnect'\nimport { isIOS } from 'utils/userAgent'\n\nimport { RPC_URLS } from '../constants/networks'\n\n// Avoid testing for the best URL by only passing a single URL per chain.\n// Otherwise, WC will not initialize until all URLs have been tested (see getBestUrl in web3-react).\nconst RPC_URLS_WITHOUT_FALLBACKS = Object.entries(RPC_URLS).reduce(\n  (map, [chainId, urls]) => ({\n    ...map,\n    [chainId]: urls[0],\n  }),\n  {}\n)\n\nexport class WalletConnectPopup extends WalletConnect {\n  ANALYTICS_EVENT = 'Wallet Connect QR Scan'\n  constructor({\n    actions,\n    onError,\n    qrcode = true,\n  }: Omit<WalletConnectConstructorArgs, 'options'> & { qrcode?: boolean }) {\n    super({ actions, options: { qrcode, rpc: RPC_URLS_WITHOUT_FALLBACKS }, onError })\n  }\n\n  activate(chainId?: number) {\n    sendAnalyticsEvent(this.ANALYTICS_EVENT)\n    return super.activate(chainId)\n  }\n}\n\n// Custom class for Uniswap Wallet specific functionality\nexport class UniwalletConnect extends WalletConnectPopup {\n  ANALYTICS_EVENT = 'Uniswap Wallet QR Scan'\n  static UNI_URI_AVAILABLE = 'uni_uri_available'\n\n  constructor({ actions, onError }: Omit<WalletConnectConstructorArgs, 'options'>) {\n    // disables walletconnect's proprietary qr code modal; instead UniwalletModal will listen for events to trigger our custom modal\n    super({ actions, qrcode: false, onError })\n\n    this.events.once(URI_AVAILABLE, () => {\n      this.provider?.connector.on('disconnect', () => {\n        this.deactivate()\n      })\n    })\n\n    this.events.on(URI_AVAILABLE, (uri) => {\n      if (!uri) return\n      // Emits custom wallet connect code, parseable by the Uniswap Wallet\n      this.events.emit(UniwalletConnect.UNI_URI_AVAILABLE, `hello_uniwallet:${uri}`)\n\n      // Opens deeplink to Uniswap Wallet if on iOS\n      if (isIOS) {\n        const newTab = window.open(`https://uniswap.org/app/wc?uri=${encodeURIComponent(uri)}`)\n\n        // Fixes blank tab opening on mobile Chrome\n        newTab?.close()\n      }\n    })\n  }\n\n  deactivate() {\n    this.events.emit(URI_AVAILABLE)\n    return super.deactivate()\n  }\n}\n","/workspace/Physica-Interfae/src/connection/utils.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/shared.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/MarketplaceSelect.tsx",["3525","3526"],"import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName, NFTFilterTypes } from '@uniswap/analytics-events'\nimport clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport * as styles from 'nft/components/collection/Filters.css'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronUpIcon } from 'nft/components/icons'\nimport { subheadSmall } from 'nft/css/common.css'\nimport { useCollectionFilters } from 'nft/hooks/useCollectionFilters'\nimport { TraitPosition, useTraitsOpen } from 'nft/hooks/useTraitsOpen'\nimport { FormEvent, useEffect, useMemo, useReducer, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { Checkbox } from '../layout/Checkbox'\n\nconst FilterItemWrapper = styled(Row)`\n  justify-content: space-between;\n  padding: 10px 16px 10px 12px;\n  cursor: pointer;\n  border-radius: 12px;\n  &:hover {\n    background: ${({ theme }) => theme.backgroundInteractive};\n  }\n`\n\nexport const MarketplaceLogo = styled.img`\n  height: 16px;\n  width: 16px;\n  border-radius: 4px;\n`\n\nconst MarketNameWrapper = styled(Row)`\n  gap: 10px;\n`\n\nexport const MARKETPLACE_ITEMS = {\n  x2y2: 'X2Y2',\n  opensea: 'OpenSea',\n  looksrare: 'LooksRare',\n  sudoswap: 'SudoSwap',\n\n  nftx: 'NFTX',\n  nft20: 'NFT20',\n  cryptopunks: 'LarvaLabs',\n}\n\nfunction getMarketLogoSrc(market: string) {\n  const marketplaceItem = Object.keys(MARKETPLACE_ITEMS).find(\n    (key) => MARKETPLACE_ITEMS[key as keyof typeof MARKETPLACE_ITEMS] === market\n  )\n  return `/nft/svgs/marketplaces/${marketplaceItem}.svg`\n}\n\nexport const FilterItem = ({\n  title,\n  element,\n  onClick,\n}: {\n  title: string | JSX.Element\n  element: JSX.Element\n  onClick: React.MouseEventHandler<HTMLElement>\n}) => {\n  return (\n    <FilterItemWrapper onClick={onClick}>\n      <ThemedText.BodyPrimary>{title}</ThemedText.BodyPrimary>\n      <ThemedText.SubHeaderSmall>{element}</ThemedText.SubHeaderSmall>\n    </FilterItemWrapper>\n  )\n}\n\nconst MarketplaceItem = ({\n  title,\n  value,\n  addMarket,\n  removeMarket,\n  isMarketSelected,\n  count,\n}: {\n  title: string\n  value: string\n  addMarket: (market: string) => void\n  removeMarket: (market: string) => void\n  isMarketSelected: boolean\n  count?: number\n}) => {\n  const [isCheckboxSelected, setCheckboxSelected] = useState(false)\n  const [hovered, toggleHover] = useReducer((state) => !state, false)\n  useEffect(() => {\n    setCheckboxSelected(isMarketSelected)\n  }, [isMarketSelected])\n  const handleCheckbox = (e: FormEvent) => {\n    e.preventDefault()\n    if (!isCheckboxSelected) {\n      addMarket(value)\n      setCheckboxSelected(true)\n    } else {\n      removeMarket(value)\n      setCheckboxSelected(false)\n    }\n    sendAnalyticsEvent(NFTEventName.NFT_FILTER_SELECTED, { filter_type: NFTFilterTypes.MARKETPLACE })\n  }\n\n  const checkbox = (\n    <Checkbox checked={isCheckboxSelected} hovered={hovered} onChange={handleCheckbox}>\n      <Box as=\"span\" color=\"textSecondary\" marginLeft=\"4\" paddingRight=\"12\">\n        {count}\n      </Box>\n    </Checkbox>\n  )\n\n  const titleWithLogo = (\n    <MarketNameWrapper>\n      <MarketplaceLogo src={getMarketLogoSrc(title)} />\n      {title}\n    </MarketNameWrapper>\n  )\n\n  return (\n    <div key={value} onMouseEnter={toggleHover} onMouseLeave={toggleHover}>\n      <FilterItem title={titleWithLogo} element={checkbox} onClick={handleCheckbox} />\n    </div>\n  )\n}\n\nexport const FilterDropdown = ({\n  title,\n  items,\n  onClick,\n  isOpen,\n}: {\n  title: string\n  items: JSX.Element[]\n  onClick: React.MouseEventHandler<HTMLElement>\n  isOpen: boolean\n}) => {\n  return (\n    <>\n      <Box className={styles.detailsOpen} opacity={isOpen ? '1' : '0'} />\n      <Box\n        as=\"details\"\n        className={clsx(subheadSmall, !isOpen && styles.rowHover)}\n        open={isOpen}\n        borderRadius={isOpen ? '0' : '12'}\n      >\n        <Box\n          as=\"summary\"\n          className={`${styles.row} ${styles.rowHover}`}\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          fontSize=\"16\"\n          paddingTop=\"12\"\n          paddingLeft=\"12\"\n          paddingBottom=\"12\"\n          lineHeight=\"20\"\n          borderRadius=\"12\"\n          maxHeight=\"48\"\n          onClick={onClick}\n        >\n          {title}\n          <Box display=\"flex\" alignItems=\"center\">\n            <Box\n              className={styles.chevronContainer}\n              style={{\n                transform: `rotate(${isOpen ? 0 : 180}deg)`,\n              }}\n            >\n              <ChevronUpIcon className={styles.chevronIcon} />\n            </Box>\n          </Box>\n        </Box>\n        <Column className={styles.filterDropDowns} paddingBottom=\"8\" paddingLeft=\"0\">\n          {items}\n        </Column>\n      </Box>\n    </>\n  )\n}\n\nexport const MarketplaceSelect = () => {\n  const {\n    addMarket,\n    removeMarket,\n    markets: selectedMarkets,\n    marketCount,\n  } = useCollectionFilters(({ markets, marketCount, removeMarket, addMarket }) => ({\n    markets,\n    marketCount,\n    removeMarket,\n    addMarket,\n  }))\n\n  const [isOpen, setOpen] = useState(!!selectedMarkets.length)\n  const setTraitsOpen = useTraitsOpen((state) => state.setTraitsOpen)\n\n  const MarketplaceItems = useMemo(\n    () =>\n      Object.entries(MARKETPLACE_ITEMS).map(([value, title]) => (\n        <MarketplaceItem\n          key={value}\n          title={title}\n          value={value}\n          count={marketCount?.[value] || 0}\n          {...{ addMarket, removeMarket, isMarketSelected: selectedMarkets.includes(value) }}\n        />\n      )),\n    [addMarket, marketCount, removeMarket, selectedMarkets]\n  )\n\n  const onClick: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    setOpen(!isOpen)\n    setTraitsOpen(TraitPosition.MARKPLACE_INDEX, !isOpen)\n  }\n\n  return <FilterDropdown title=\"Marketplaces\" items={MarketplaceItems} onClick={onClick} isOpen={isOpen} />\n}\n","/workspace/Physica-Interfae/src/nft/components/collection/CollectionAssetLoading.tsx",[],"/workspace/Physica-Interfae/src/nft/types/sell/index.ts",[],"/workspace/Physica-Interfae/src/lib/hooks/multicall.ts",[],"/workspace/Physica-Interfae/src/nft/types/discover/index.ts",[],"/workspace/Physica-Interfae/src/nft/types/common/index.ts",[],"/workspace/Physica-Interfae/src/nft/types/navbar/index.ts",[],"/workspace/Physica-Interfae/src/nft/utils/updatedAssets.ts",["3527"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { UpdatedGenieAsset } from 'nft/types'\n\nexport const updatedAssetPriceDifference = (asset: UpdatedGenieAsset) => {\n  if (!asset.updatedPriceInfo) return BigNumber.from(0)\n  return BigNumber.from(asset.updatedPriceInfo.ETHPrice).sub(BigNumber.from(asset.priceInfo.ETHPrice))\n}\n\nexport const sortUpdatedAssets = (x: UpdatedGenieAsset, y: UpdatedGenieAsset) => {\n  return updatedAssetPriceDifference(x).gt(updatedAssetPriceDifference(y)) ? -1 : 1\n}\n\nexport const getTotalNftValue = (nfts: UpdatedGenieAsset[]): BigNumber => {\n  return (\n    nfts &&\n    nfts.reduce(\n      (ethTotal, nft) =>\n        ethTotal.add(BigNumber.from(nft.updatedPriceInfo ? nft.updatedPriceInfo.ETHPrice : nft.priceInfo.ETHPrice)),\n      BigNumber.from(0)\n    )\n  )\n}\n\nexport function filterUpdatedAssetsByState(assets: UpdatedGenieAsset[]): {\n  unchanged: UpdatedGenieAsset[]\n  priceChanged: UpdatedGenieAsset[]\n  unavailable: UpdatedGenieAsset[]\n} {\n  const unchanged = assets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable)\n  const priceChanged = assets.filter((asset) => asset.updatedPriceInfo).sort(sortUpdatedAssets)\n  const unavailable = assets.filter((asset) => asset.isUnavailable)\n\n  return { unchanged, priceChanged, unavailable }\n}\n","/workspace/Physica-Interfae/src/nft/utils/transactionResponse.ts",["3528"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { TxResponse, UpdatedGenieAsset } from 'nft/types'\nimport { getTotalNftValue } from 'nft/utils'\n\nexport const parseTransactionResponse = (transactionResponse: TxResponse | undefined, ethPrice: number) => {\n  let nftsPurchased: UpdatedGenieAsset[] = []\n  let nftsNotPurchased: UpdatedGenieAsset[] = []\n  let showPurchasedModal = false\n  let showRefundModal = false\n  let totalPurchaseValue = BigNumber.from(0)\n  let totalRefundValue = BigNumber.from(0)\n  let totalUSDRefund = 0\n  let txFeeFiat = 0\n\n  if (transactionResponse !== undefined) {\n    const { nftsPurchased: purchasedNfts, nftsNotPurchased: notPurchasedNfts, txReceipt } = transactionResponse\n    if (nftsPurchased && nftsNotPurchased && txReceipt) {\n      nftsPurchased = purchasedNfts\n      nftsNotPurchased = notPurchasedNfts\n      showPurchasedModal = nftsPurchased.length >= 1\n      showRefundModal = nftsNotPurchased.length >= 1\n      totalPurchaseValue = getTotalNftValue(nftsPurchased)\n      totalRefundValue = getTotalNftValue(nftsNotPurchased)\n      totalUSDRefund = totalRefundValue && parseFloat(formatEther(totalRefundValue)) * ethPrice\n      const txFee = BigNumber.from(txReceipt ? txReceipt.gasUsed : 0).mul(\n        BigNumber.from(txReceipt ? txReceipt.effectiveGasPrice : 0)\n      )\n      txFeeFiat = parseFloat(formatEther(txFee)) * ethPrice\n    }\n  }\n\n  return {\n    nftsPurchased,\n    nftsNotPurchased,\n    showPurchasedModal,\n    showRefundModal,\n    totalPurchaseValue,\n    totalRefundValue,\n    totalUSDRefund,\n    txFeeFiat,\n  }\n}\n\n// Given the length of the array of successfully purchased NFTs, returns the maxHeight and maxWidth of each asset preview\nexport const getSuccessfulImageSize = (numSuccessful: number, isMobile: boolean) => {\n  const sizeModifier = isMobile ? 2 : 1\n  if (numSuccessful === 1) {\n    return 474 / sizeModifier\n  } else if (numSuccessful === 2) {\n    return 280 / sizeModifier\n  } else if (numSuccessful === 3 || (numSuccessful >= 5 && numSuccessful < 7)) {\n    return 184 / sizeModifier\n  } else if (numSuccessful === 4 || (numSuccessful >= 7 && numSuccessful < 13)) {\n    return 136 / sizeModifier\n  } else if (numSuccessful >= 13 && numSuccessful < 21) {\n    return 108 / sizeModifier\n  } else return isMobile ? 39 : 64\n}\n","/workspace/Physica-Interfae/src/nft/types/collection/index.ts",[],"/workspace/Physica-Interfae/src/nft/types/checkout/index.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/Filters.tsx",["3529"],"import { Box } from 'nft/components/Box'\nimport * as styles from 'nft/components/collection/Filters.css'\nimport { MarketplaceSelect } from 'nft/components/collection/MarketplaceSelect'\nimport { PriceRange } from 'nft/components/collection/PriceRange'\nimport { Column, Row } from 'nft/components/Flex'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { subhead } from 'nft/css/common.css'\nimport { useCollectionFilters } from 'nft/hooks'\nimport { Trait } from 'nft/hooks/useCollectionFilters'\nimport { TraitPosition } from 'nft/hooks/useTraitsOpen'\nimport { DropDownOption } from 'nft/types'\nimport { useMemo, useReducer } from 'react'\nimport { isMobile } from 'utils/userAgent'\n\nimport { FilterSortDropdown } from '../common/SortDropdown'\nimport { getSortDropdownOptions } from './CollectionNfts'\nimport { TraitSelect } from './TraitSelect'\n\nexport const Filters = ({ traitsByGroup }: { traitsByGroup: Record<string, Trait[]> }) => {\n  const { buyNow, setBuyNow } = useCollectionFilters((state) => ({\n    buyNow: state.buyNow,\n    setBuyNow: state.setBuyNow,\n  }))\n  const setSortBy = useCollectionFilters((state) => state.setSortBy)\n  const hasRarity = useCollectionFilters((state) => state.hasRarity)\n  const [buyNowHovered, toggleBuyNowHover] = useReducer((state) => !state, false)\n\n  const handleBuyNowToggle = () => {\n    setBuyNow(!buyNow)\n  }\n\n  const sortDropDownOptions: DropDownOption[] = useMemo(\n    () => getSortDropdownOptions(setSortBy, hasRarity ?? false),\n    [hasRarity, setSortBy]\n  )\n\n  return (\n    <Box className={styles.container}>\n      <Row width=\"full\" justifyContent=\"space-between\"></Row>\n      <Column marginTop=\"8\">\n        <Row\n          justifyContent=\"space-between\"\n          className={`${styles.row} ${styles.rowHover}`}\n          gap=\"2\"\n          borderRadius=\"12\"\n          paddingTop=\"12\"\n          paddingBottom=\"12\"\n          paddingLeft=\"12\"\n          onClick={(e) => {\n            e.preventDefault()\n            handleBuyNowToggle()\n          }}\n          onMouseEnter={toggleBuyNowHover}\n          onMouseLeave={toggleBuyNowHover}\n        >\n          <Box data-testid=\"nft-collection-filter-buy-now\" className={subhead}>\n            Buy now\n          </Box>\n          <Checkbox hovered={buyNowHovered} checked={buyNow} onClick={handleBuyNowToggle}>\n            <span />\n          </Checkbox>\n        </Row>\n        {isMobile && <FilterSortDropdown sortDropDownOptions={sortDropDownOptions} />}\n        <MarketplaceSelect />\n        <PriceRange />\n        {Object.entries(traitsByGroup).length > 0 && (\n          <Box\n            as=\"span\"\n            color=\"textSecondary\"\n            paddingLeft=\"8\"\n            marginTop=\"12\"\n            marginBottom=\"12\"\n            className={styles.borderTop}\n          ></Box>\n        )}\n\n        <Column>\n          {Object.entries(traitsByGroup).map(([type, traits], index) => (\n            // the index is offset by two because price range and marketplace appear prior to it\n            <TraitSelect key={type} {...{ type, traits }} index={index + TraitPosition.TRAIT_START_INDEX} />\n          ))}\n        </Column>\n      </Column>\n    </Box>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/collection/FilterButton.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionStats.tsx",[],"/workspace/Physica-Interfae/src/nft/queries/index.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionSearch.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/ActivitySwitcher.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/Activity.tsx",["3530","3531","3532","3533","3534"],"import { OpacityHoverState } from 'components/Common'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { NftActivityType } from 'graphql/data/__generated__/types-and-hooks'\nimport { useNftActivity } from 'graphql/data/nft/NftActivity'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { themeVars, vars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { ActivityFetcher } from 'nft/queries/genie/ActivityFetcher'\nimport { ActivityEvent, ActivityEventResponse, ActivityEventType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { useCallback, useEffect, useReducer, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\n\nimport * as styles from './Activity.css'\nimport { AddressCell, BuyCell, EventCell, ItemCell, PriceCell } from './ActivityCells'\nimport { ActivityLoader, ActivityPageLoader } from './ActivityLoader'\n\nenum ColumnHeaders {\n  Item = 'Item',\n  Event = 'Event',\n  Price = 'Price',\n  By = 'By',\n  To = 'To',\n}\n\nconst FilterBox = styled.div<{ backgroundColor: string }>`\n  display: flex;\n  background: ${({ backgroundColor }) => backgroundColor};\n  ${OpacityHoverState};\n`\n\nexport const HeaderRow = () => {\n  return (\n    <Box className={styles.headerRow}>\n      <Box>{ColumnHeaders.Item}</Box>\n      <Box>{ColumnHeaders.Event}</Box>\n      <Box display={{ sm: 'none', md: 'block' }}>{ColumnHeaders.Price}</Box>\n      <Box display={{ sm: 'none', xl: 'block' }}>{ColumnHeaders.By}</Box>\n      <Box display={{ sm: 'none', xxl: 'block' }}>{ColumnHeaders.To}</Box>\n    </Box>\n  )\n}\n\ninterface ActivityProps {\n  contractAddress: string\n  rarityVerified: boolean\n  collectionName: string\n  chainId?: number\n}\n\nconst initialFilterState = {\n  [ActivityEventType.Listing]: true,\n  [ActivityEventType.Sale]: true,\n  [ActivityEventType.Transfer]: false,\n  [ActivityEventType.CancelListing]: false,\n}\n\nexport const reduceFilters = (state: typeof initialFilterState, action: { eventType: ActivityEventType }) => {\n  return { ...state, [action.eventType]: !state[action.eventType] }\n}\n\nconst baseHref = (event: ActivityEvent) => `/#/nfts/asset/${event.collectionAddress}/${event.tokenId}?origin=activity`\n\nexport const Activity = ({ contractAddress, rarityVerified, collectionName, chainId }: ActivityProps) => {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const [activeFilters, filtersDispatch] = useReducer(reduceFilters, initialFilterState)\n\n  const {\n    data: eventsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n    isLoading,\n  } = useInfiniteQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n        activeFilters,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          eventTypes: Object.keys(activeFilters)\n            .filter((key) => activeFilters[key as ActivityEventType])\n            .map((key) => key as ActivityEventType),\n        },\n        pageParam\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const {\n    nftActivity: gqlEventsData,\n    hasNext,\n    loadMore,\n    loading,\n  } = useNftActivity(\n    {\n      activityTypes: Object.keys(activeFilters)\n        .map((key) => key as NftActivityType)\n        .filter((key) => activeFilters[key]),\n      address: contractAddress,\n    },\n    25\n  )\n\n  const { events, gatedHasNext, gatedLoadMore, gatedLoading, gatedIsLoadingMore } = {\n    events: isNftGraphqlEnabled\n      ? gqlEventsData\n      : isSuccess\n      ? eventsData?.pages.map((page) => page.events).flat()\n      : undefined,\n    gatedHasNext: isNftGraphqlEnabled ? hasNext : hasNextPage,\n    gatedLoadMore: isNftGraphqlEnabled ? loadMore : fetchNextPage,\n    gatedLoading: isNftGraphqlEnabled ? loading : isLoading,\n    gatedIsLoadingMore: isNftGraphqlEnabled ? hasNext && gqlEventsData?.length : isFetchingNextPage,\n  }\n\n  const itemsInBag = useBag((state) => state.itemsInBag)\n  const addAssetsToBag = useBag((state) => state.addAssetsToBag)\n  const removeAssetsFromBag = useBag((state) => state.removeAssetsFromBag)\n  const cartExpanded = useBag((state) => state.bagExpanded)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const isMobile = useIsMobile()\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\n  const isDarkMode = useIsDarkMode()\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPriceInUSD(price || 0)\n    })\n  }, [])\n\n  const Filter = useCallback(\n    function ActivityFilter({ eventType }: { eventType: ActivityEventType }) {\n      const isActive = activeFilters[eventType]\n      const activeBackgroundColor = isDarkMode ? vars.color.gray500 : vars.color.gray200\n\n      return (\n        <FilterBox\n          className={styles.filter}\n          backgroundColor={isActive ? activeBackgroundColor : themeVars.colors.backgroundInteractive}\n          onClick={() => filtersDispatch({ eventType })}\n        >\n          {eventType.charAt(0) + eventType.slice(1).toLowerCase() + 's'}\n        </FilterBox>\n      )\n    },\n    [activeFilters, isDarkMode]\n  )\n\n  return (\n    <Box marginLeft={{ sm: '16', md: '48' }}>\n      <Row gap=\"8\" paddingTop={{ sm: '0', md: '16' }}>\n        <Filter eventType={ActivityEventType.Listing} />\n        <Filter eventType={ActivityEventType.Sale} />\n        <Filter eventType={ActivityEventType.Transfer} />\n      </Row>\n      {gatedLoading ? (\n        <ActivityLoader />\n      ) : (\n        events && (\n          <Column marginTop=\"36\">\n            <HeaderRow />\n            <InfiniteScroll\n              next={gatedLoadMore}\n              hasMore={!!gatedHasNext}\n              loader={gatedIsLoadingMore ? <ActivityPageLoader rowCount={2} /> : null}\n              dataLength={events?.length ?? 0}\n              style={{ overflow: 'unset' }}\n            >\n              {events.map(\n                (event, i) =>\n                  event.eventType && (\n                    <Box\n                      as=\"a\"\n                      data-testid=\"nft-activity-row\"\n                      href={baseHref(event)}\n                      className={styles.eventRow}\n                      key={i}\n                    >\n                      <ItemCell\n                        event={event}\n                        rarityVerified={rarityVerified}\n                        collectionName={collectionName}\n                        eventTimestamp={event.eventTimestamp}\n                        isMobile={isMobile}\n                      />\n                      <EventCell\n                        eventType={event.eventType}\n                        eventTimestamp={event.eventTimestamp}\n                        eventTransactionHash={event.transactionHash}\n                        price={event.price}\n                        isMobile={isMobile}\n                      />\n                      <PriceCell marketplace={event.marketplace} price={event.price} />\n                      <AddressCell address={event.fromAddress} chainId={chainId} />\n                      <AddressCell address={event.toAddress} chainId={chainId} desktopLBreakpoint />\n                      <BuyCell\n                        event={event}\n                        collectionName={collectionName}\n                        selectAsset={addAssetsToBag}\n                        removeAsset={removeAssetsFromBag}\n                        itemsInBag={itemsInBag}\n                        cartExpanded={cartExpanded}\n                        toggleCart={toggleCart}\n                        isMobile={isMobile}\n                        ethPriceInUSD={ethPriceInUSD}\n                      />\n                    </Box>\n                  )\n              )}\n            </InfiniteScroll>\n          </Column>\n        )\n      )}\n    </Box>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useBagTotalEthPrice.ts",["3535","3536","3537"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n","/workspace/Physica-Interfae/src/nft/components/Box.ts",[],"/workspace/Physica-Interfae/src/featureFlags/flags/nftlGraphql.ts",[],"/workspace/Physica-Interfae/src/graphql/data/nft/TrendingCollections.ts",["3538"],"import { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport gql from 'graphql-tag'\nimport { TrendingCollection } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { HistoryDuration, useTrendingCollectionsQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query TrendingCollections($size: Int, $timePeriod: HistoryDuration) {\n    topCollections(first: $size, duration: $timePeriod) {\n      edges {\n        node {\n          name\n          nftContracts {\n            address\n            totalSupply\n          }\n          image {\n            url\n          }\n          bannerImage {\n            url\n          }\n          isVerified\n          markets(currencies: ETH) {\n            floorPrice {\n              value\n            }\n            owners\n            totalVolume {\n              value\n            }\n            volume(duration: $timePeriod) {\n              value\n            }\n            volumePercentChange(duration: $timePeriod) {\n              value\n            }\n            floorPricePercentChange(duration: $timePeriod) {\n              value\n            }\n            sales {\n              value\n            }\n            listings {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useTrendingCollections(size: number, timePeriod: HistoryDuration) {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const { data, loading, error } = useTrendingCollectionsQuery({\n    variables: {\n      size,\n      timePeriod,\n    },\n    skip: !isNftGraphqlEnabled,\n  })\n\n  const trendingCollections: TrendingCollection[] | undefined = useMemo(\n    () =>\n      data?.topCollections?.edges?.map((edge) => {\n        const collection = edge?.node\n        return {\n          name: collection.name,\n          address: collection.nftContracts?.[0]?.address,\n          imageUrl: collection.image?.url,\n          bannerImageUrl: collection.bannerImage?.url,\n          isVerified: collection.isVerified,\n          volume: collection.markets?.[0]?.volume?.value,\n          volumeChange: collection.markets?.[0]?.volumePercentChange?.value,\n          floor: collection.markets?.[0]?.floorPrice?.value,\n          floorChange: collection.markets?.[0]?.floorPricePercentChange?.value,\n          marketCap: collection.markets?.[0]?.totalVolume?.value,\n          percentListed:\n            (collection.markets?.[0]?.listings?.value ?? 0) / (collection.nftContracts?.[0]?.totalSupply ?? 1),\n          owners: collection.markets?.[0]?.owners,\n          sales: collection.markets?.[0]?.sales?.value,\n          totalSupply: collection.nftContracts?.[0]?.totalSupply,\n        }\n      }),\n    [data?.topCollections?.edges]\n  )\n\n  return {\n    data: trendingCollections,\n    loading,\n    error,\n  }\n}\n","/workspace/Physica-Interfae/src/nft/components/Flex.tsx",[],"/workspace/Physica-Interfae/src/nft/components/explore/Table.tsx",["3539"],"import { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { GlowEffect, ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { chainId } = useWeb3React()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <GlowEffect>\n      <table {...getTableProps()} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                    }}\n                    disabled={column.disableSortBy}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n\n            return (\n              <TraceEvent\n                events={[BrowserEvent.onClick]}\n                name={NFTEventName.NFT_TRENDING_ROW_SELECTED}\n                properties={{ collection_address: row.original.collection.address, chain_id: chainId }}\n                element={InterfaceElementName.NFT_TRENDING_ROW}\n                key={i}\n              >\n                <StyledRow\n                  {...row.getRowProps()}\n                  key={row.id}\n                  onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n                  data-testid=\"nft-trending-collection\"\n                >\n                  {row.cells.map((cell, cellIndex) => {\n                    return (\n                      <td\n                        className={styles.td}\n                        {...cell.getCellProps()}\n                        key={cellIndex}\n                        style={{\n                          maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                        }}\n                      >\n                        {cellIndex === 0 ? (\n                          <RankCellContainer>\n                            {!isMobile && (\n                              <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                                {i + 1}\n                              </ThemedText.BodySecondary>\n                            )}\n                            {cell.render('Cell')}\n                          </RankCellContainer>\n                        ) : (\n                          cell.render('Cell')\n                        )}\n                      </td>\n                    )\n                  })}\n                </StyledRow>\n              </TraceEvent>\n            )\n          })}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <GlowEffect>\n      <table {...props} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? '52px' : 0,\n                    }}\n                    disabled={index === 0}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...props}>\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n            <StyledLoadingRow key={index}>\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n                return (\n                  <td className={styles.loadingTd} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <StyledCollectionNameHolder>\n                        <StyledRankHolder />\n                        <StyledImageHolder />\n                        <LoadingBubble />\n                      </StyledCollectionNameHolder>\n                    ) : (\n                      <StyledLoadingHolder>\n                        <LoadingBubble />\n                      </StyledLoadingHolder>\n                    )}\n                  </td>\n                )\n              })}\n            </StyledLoadingRow>\n          ))}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/utils/urlParams.ts",[],"/workspace/Physica-Interfae/src/nft/components/explore/Cells/Cells.tsx",[],"/workspace/Physica-Interfae/src/nft/utils/scrollToTop.ts",[],"/workspace/Physica-Interfae/src/nft/types/sell/sell.ts",[],"/workspace/Physica-Interfae/src/nft/components/layout/Checkbox.tsx",[],"/workspace/Physica-Interfae/src/nft/types/common/common.ts",[],"/workspace/Physica-Interfae/src/nft/types/discover/discover.ts",[],"/workspace/Physica-Interfae/src/nft/types/navbar/navbar.ts",[],"/workspace/Physica-Interfae/src/nft/types/collection/collection.ts",[],"/workspace/Physica-Interfae/src/nft/types/checkout/checkout.ts",[],"/workspace/Physica-Interfae/src/nft/css/atoms.ts",[],"/workspace/Physica-Interfae/src/components/Modal/index.tsx",["3540"],"import { DialogContent, DialogOverlay } from '@reach/dialog'\nimport React from 'react'\nimport { animated, useSpring, useTransition } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport styled, { css } from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { isMobile } from '../../utils/userAgent'\n\nconst AnimatedDialogOverlay = animated(DialogOverlay)\n\nconst StyledDialogOverlay = styled(AnimatedDialogOverlay)<{ $scrollOverlay?: boolean }>`\n  &[data-reach-dialog-overlay] {\n    z-index: ${Z_INDEX.modalBackdrop};\n    background-color: transparent;\n    overflow: hidden;\n\n    display: flex;\n    align-items: center;\n    @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\n      align-items: flex-end;\n    }\n    overflow-y: ${({ $scrollOverlay }) => $scrollOverlay && 'scroll'};\n    justify-content: center;\n\n    background-color: ${({ theme }) => theme.backgroundScrim};\n  }\n`\n\ntype StyledDialogProps = {\n  $minHeight?: number | false\n  $maxHeight?: number\n  $scrollOverlay?: boolean\n  $hideBorder?: boolean\n  $maxWidth: number\n}\n\nconst AnimatedDialogContent = animated(DialogContent)\nconst StyledDialogContent = styled(AnimatedDialogContent)<StyledDialogProps>`\n  overflow-y: auto;\n\n  &[data-reach-dialog-content] {\n    margin: auto;\n    background-color: ${({ theme }) => theme.backgroundSurface};\n    border: ${({ theme, $hideBorder }) => !$hideBorder && `1px solid ${theme.backgroundOutline}`};\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    padding: 0px;\n    width: 50vw;\n    overflow-y: auto;\n    overflow-x: hidden;\n    max-width: ${({ $maxWidth }) => $maxWidth}px;\n    ${({ $maxHeight }) =>\n      $maxHeight &&\n      css`\n        max-height: ${$maxHeight}vh;\n      `}\n    ${({ $minHeight }) =>\n      $minHeight &&\n      css`\n        min-height: ${$minHeight}vh;\n      `}\n    display: ${({ $scrollOverlay }) => ($scrollOverlay ? 'inline-table' : 'flex')};\n    border-radius: 20px;\n\n    @media screen and (max-width: ${({ theme }) => theme.breakpoint.md}px) {\n      width: 65vw;\n    }\n    @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\n      margin: 0;\n      width: 100vw;\n      border-radius: 20px;\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  }\n`\n\ninterface ModalProps {\n  isOpen: boolean\n  onDismiss?: () => void\n  onSwipe?: () => void\n  minHeight?: number | false\n  maxHeight?: number\n  maxWidth?: number\n  initialFocusRef?: React.RefObject<any>\n  children?: React.ReactNode\n  $scrollOverlay?: boolean\n  hideBorder?: boolean\n}\n\nexport default function Modal({\n  isOpen,\n  onDismiss,\n  minHeight = false,\n  maxHeight = 90,\n  maxWidth = 420,\n  initialFocusRef,\n  children,\n  onSwipe = onDismiss,\n  $scrollOverlay,\n  hideBorder = false,\n}: ModalProps) {\n  const fadeTransition = useTransition(isOpen, {\n    config: { duration: 200 },\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n  })\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }))\n  const bind = useGesture({\n    onDrag: (state) => {\n      set({\n        y: state.down ? state.movement[1] : 0,\n      })\n      if (state.movement[1] > 300 || (state.velocity > 3 && state.direction[1] > 0)) {\n        onSwipe?.()\n      }\n    },\n  })\n\n  return (\n    <>\n      {fadeTransition(\n        ({ opacity }, item) =>\n          item && (\n            <StyledDialogOverlay\n              style={{ opacity: opacity.to({ range: [0.0, 1.0], output: [0, 1] }) }}\n              onDismiss={onDismiss}\n              initialFocusRef={initialFocusRef}\n              unstable_lockFocusAcrossFrames={false}\n              $scrollOverlay={$scrollOverlay}\n            >\n              <StyledDialogContent\n                {...(isMobile\n                  ? {\n                      ...bind(),\n                      style: { transform: y.interpolate((y) => `translateY(${(y as number) > 0 ? y : 0}px)`) },\n                    }\n                  : {})}\n                aria-label=\"dialog\"\n                $minHeight={minHeight}\n                $maxHeight={maxHeight}\n                $scrollOverlay={$scrollOverlay}\n                $hideBorder={hideBorder}\n                $maxWidth={maxWidth}\n              >\n                {/* prevents the automatic focusing of inputs on mobile by the reach dialog */}\n                {!initialFocusRef && isMobile ? <div tabIndex={1} /> : null}\n                {children}\n              </StyledDialogContent>\n            </StyledDialogOverlay>\n          )\n      )}\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/collection/TraitSelect.tsx",["3541","3542","3543"],"import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName, NFTFilterTypes } from '@uniswap/analytics-events'\nimport useDebounce from 'hooks/useDebounce'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { subheadSmall } from 'nft/css/common.css'\nimport { Trait, useCollectionFilters } from 'nft/hooks/useCollectionFilters'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { scrollToTop } from 'nft/utils/scrollToTop'\nimport { CSSProperties, FormEvent, MouseEvent, useCallback, useEffect, useMemo, useState } from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { FixedSizeList } from 'react-window'\n\nimport { Input } from '../layout/Input'\nimport * as styles from './Filters.css'\nimport { TraitsHeader } from './TraitsHeader'\n\nconst TRAIT_ROW_HEIGHT = 44\n\nconst TraitItem = ({\n  trait,\n  addTrait,\n  removeTrait,\n  isTraitSelected,\n  style,\n}: {\n  trait: Trait\n  addTrait: (trait: Trait) => void\n  removeTrait: (trait: Trait) => void\n  isTraitSelected: boolean\n  style?: CSSProperties\n}) => {\n  const [isCheckboxSelected, setCheckboxSelected] = useState(false)\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n  const toggleShowFullTraitName = useCollectionFilters((state) => state.toggleShowFullTraitName)\n\n  const { shouldShow, trait_value, trait_type } = useCollectionFilters((state) => state.showFullTraitName)\n  const isEllipsisActive = (e: MouseEvent<HTMLElement>) => {\n    if (e.currentTarget.offsetWidth < e.currentTarget.scrollWidth) {\n      toggleShowFullTraitName({\n        shouldShow: true,\n        trait_value: trait.trait_value,\n        trait_type: trait.trait_type,\n      })\n    }\n  }\n  useEffect(() => {\n    setCheckboxSelected(isTraitSelected)\n  }, [isTraitSelected])\n\n  const handleCheckbox = (e: FormEvent) => {\n    e.preventDefault()\n    scrollToTop()\n\n    if (!isCheckboxSelected) {\n      addTrait(trait)\n      setCheckboxSelected(true)\n    } else {\n      removeTrait(trait)\n      setCheckboxSelected(false)\n    }\n    sendAnalyticsEvent(NFTEventName.NFT_FILTER_SELECTED, { filter_type: NFTFilterTypes.TRAIT })\n  }\n\n  const showFullTraitName = shouldShow && trait_type === trait.trait_type && trait_value === trait.trait_value\n\n  return (\n    <Row\n      key={trait.trait_value}\n      maxWidth=\"full\"\n      overflowX=\"hidden\"\n      overflowY=\"hidden\"\n      fontWeight=\"normal\"\n      className={`${subheadSmall} ${styles.subRowHover}`}\n      justifyContent=\"space-between\"\n      cursor=\"pointer\"\n      paddingLeft=\"12\"\n      paddingRight=\"16\"\n      borderRadius=\"12\"\n      style={{\n        paddingBottom: '22px',\n        paddingTop: '22px',\n        ...style,\n      }}\n      maxHeight=\"44\"\n      onMouseEnter={handleHover}\n      onMouseLeave={handleHover}\n      onClick={handleCheckbox}\n    >\n      <Box\n        as=\"span\"\n        whiteSpace=\"nowrap\"\n        textOverflow=\"ellipsis\"\n        overflow=\"hidden\"\n        style={{ minHeight: 15 }}\n        maxWidth={!showFullTraitName ? '160' : 'full'}\n        onMouseOver={(e) => isEllipsisActive(e)}\n        onMouseLeave={() => toggleShowFullTraitName({ shouldShow: false, trait_type: '', trait_value: '' })}\n      >\n        {trait.trait_type === 'Number of traits'\n          ? `${trait.trait_value} trait${pluralize(Number(trait.trait_value))}`\n          : trait.trait_value}\n      </Box>\n      <Checkbox checked={isCheckboxSelected} hovered={hovered} onChange={handleCheckbox}>\n        <Box as=\"span\" color=\"textTertiary\" minWidth=\"8\" paddingTop=\"2\" paddingRight=\"12\" position=\"relative\">\n          {!showFullTraitName && trait.trait_count}\n        </Box>\n      </Checkbox>\n    </Row>\n  )\n}\n\ninterface TraitRowProps {\n  data: Array<Trait>\n  index: number\n  style: CSSProperties\n}\n\nexport const TraitSelect = ({ traits, type, index }: { traits: Trait[]; type: string; index: number }) => {\n  const addTrait = useCollectionFilters((state) => state.addTrait)\n  const removeTrait = useCollectionFilters((state) => state.removeTrait)\n  const selectedTraits = useCollectionFilters((state) => state.traits)\n  const [search, setSearch] = useState('')\n  const debouncedSearch = useDebounce(search, 300)\n\n  const searchedTraits = useMemo(\n    () => traits.filter((t) => t.trait_value?.toString().toLowerCase().includes(debouncedSearch.toLowerCase())),\n    [debouncedSearch, traits]\n  )\n\n  const Row = useCallback(\n    function TraitRow({ data, index, style }: TraitRowProps) {\n      const trait: Trait = data[index]\n\n      const isTraitSelected = selectedTraits.find(\n        ({ trait_type, trait_value }) =>\n          trait_type === trait.trait_type && String(trait_value) === String(trait.trait_value)\n      )\n      return <TraitItem style={style} isTraitSelected={!!isTraitSelected} {...{ trait, addTrait, removeTrait }} />\n    },\n    [selectedTraits, addTrait, removeTrait]\n  )\n\n  const itemKey = useCallback((index: number, data: Trait[]) => {\n    const trait = data[index]\n    return `${trait.trait_type}_${trait.trait_value}_${index}`\n  }, [])\n\n  return traits.length ? (\n    <TraitsHeader index={index} numTraits={traits.length} title={type}>\n      <Input\n        value={search}\n        onChange={(e: FormEvent<HTMLInputElement>) => setSearch(e.currentTarget.value)}\n        placeholder=\"Search\"\n        marginTop=\"8\"\n        marginBottom=\"8\"\n        autoComplete=\"off\"\n        position=\"static\"\n        width=\"full\"\n      />\n      <Column\n        className={styles.filterDropDowns}\n        style={{ height: `${Math.min(TRAIT_ROW_HEIGHT * searchedTraits.length, styles.MAX_FILTER_DROPDOWN_HEIGHT)}px` }}\n      >\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <FixedSizeList\n              height={height}\n              width=\"100%\"\n              itemData={searchedTraits}\n              itemCount={searchedTraits.length}\n              itemSize={TRAIT_ROW_HEIGHT}\n              itemKey={itemKey}\n            >\n              {({ index, style, data }) => <Row style={style} key={itemKey(index, data)} data={data} index={index} />}\n            </FixedSizeList>\n          )}\n        </AutoSizer>\n      </Column>\n    </TraitsHeader>\n  ) : null\n}\n","/workspace/Physica-Interfae/src/nft/components/collection/ActivityLoader.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/ActivityCells.tsx",["3544","3545","3546"],"import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfacePageName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId } from '@uniswap/smart-order-router'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { NftActivityType, OrderStatus } from 'graphql/data/__generated__/types-and-hooks'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ActivityExternalLinkIcon,\n  ActivityListingIcon,\n  ActivitySaleIcon,\n  ActivityTransferIcon,\n  CancelListingIcon,\n  RarityVerifiedIcon,\n} from 'nft/components/icons'\nimport {\n  ActivityEvent,\n  ActivityEventTypeDisplay,\n  BagItem,\n  GenieAsset,\n  Markets,\n  Rarity,\n  TokenMetadata,\n  TokenRarity,\n} from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { buildActivityAsset } from 'nft/utils/buildActivityAsset'\nimport { formatEth, formatEthPrice } from 'nft/utils/currency'\nimport { getTimeDifference, isValidDate } from 'nft/utils/date'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { MouseEvent, useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { ExternalLink } from 'theme'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nimport * as styles from './Activity.css'\n\nconst AddressLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n  font-weight: 400;\n  line-height: 20px;\n  a {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n  }\n  a:hover {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n  a:focus {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n`\n\nconst formatListingStatus = (status: OrderStatus): string => {\n  switch (status) {\n    case OrderStatus.Executed:\n      return 'Sold'\n    case OrderStatus.Cancelled:\n      return 'Cancelled'\n    case OrderStatus.Expired:\n      return 'Expired'\n    case OrderStatus.Valid:\n      return 'Add to Bag'\n    default:\n      return ''\n  }\n}\n\ninterface BuyCellProps {\n  event: ActivityEvent\n  collectionName: string\n  selectAsset: (assets: GenieAsset[]) => void\n  removeAsset: (assets: GenieAsset[]) => void\n  itemsInBag: BagItem[]\n  cartExpanded: boolean\n  toggleCart: () => void\n  isMobile: boolean\n  ethPriceInUSD: number\n}\n\nexport const BuyCell = ({\n  event,\n  collectionName,\n  selectAsset,\n  removeAsset,\n  itemsInBag,\n  cartExpanded,\n  toggleCart,\n  isMobile,\n  ethPriceInUSD,\n}: BuyCellProps) => {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const asset = useMemo(\n    () => buildActivityAsset(event, collectionName, ethPriceInUSD, isNftGraphqlEnabled),\n    [event, collectionName, ethPriceInUSD, isNftGraphqlEnabled]\n  )\n  const isSelected = useMemo(() => {\n    return itemsInBag.some((item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address)\n  }, [asset, itemsInBag])\n\n  const trace = useTrace({ page: InterfacePageName.NFT_COLLECTION_PAGE })\n\n  const eventProperties = {\n    collection_address: asset.address,\n    token_id: asset.tokenId,\n    token_type: asset.tokenType,\n    ...trace,\n  }\n\n  return (\n    <Column display={{ sm: 'none', lg: 'flex' }} height=\"full\" justifyContent=\"center\" marginX=\"auto\">\n      {event.eventType === NftActivityType.Listing && event.orderStatus ? (\n        <Box\n          as=\"button\"\n          className={event.orderStatus === OrderStatus.Valid && isSelected ? styles.removeCell : styles.buyCell}\n          onClick={(e: MouseEvent) => {\n            e.preventDefault()\n            isSelected ? removeAsset([asset]) : selectAsset([asset])\n            !isSelected && !cartExpanded && !isMobile && toggleCart()\n            !isSelected && sendAnalyticsEvent(NFTEventName.NFT_BUY_ADDED, { eventProperties })\n          }}\n          disabled={event.orderStatus !== OrderStatus.Valid}\n        >\n          {event.orderStatus === OrderStatus.Valid ? (\n            <>{`${isSelected ? 'Remove' : 'Add to bag'}`}</>\n          ) : (\n            <>{`${formatListingStatus(event.orderStatus)}`}</>\n          )}\n        </Box>\n      ) : (\n        '-'\n      )}\n    </Column>\n  )\n}\n\ninterface AddressCellProps {\n  address?: string\n  desktopLBreakpoint?: boolean\n  chainId?: number\n}\n\nexport const AddressCell = ({ address, desktopLBreakpoint, chainId }: AddressCellProps) => {\n  return (\n    <Column\n      display={{ sm: 'none', xl: desktopLBreakpoint ? 'none' : 'flex', xxl: 'flex' }}\n      className={styles.addressCell}\n    >\n      <AddressLink\n        href={getExplorerLink(chainId ?? ChainId.MAINNET, address ?? '', ExplorerDataType.ADDRESS)}\n        style={{ textDecoration: 'none' }}\n      >\n        <Box onClick={(e) => e.stopPropagation()}>{address ? shortenAddress(address, 2, 4) : '-'}</Box>\n      </AddressLink>\n    </Column>\n  )\n}\n\nexport const MarketplaceIcon = ({ marketplace }: { marketplace: Markets | string }) => {\n  return (\n    <Box\n      as=\"img\"\n      alt={marketplace}\n      src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}.svg`}\n      className={styles.marketplaceIcon}\n    />\n  )\n}\n\nconst PriceTooltip = ({ price }: { price: string }) => (\n  <MouseoverTooltip\n    text={\n      <Box textAlign=\"left\" fontSize=\"14\" fontWeight=\"normal\" color=\"textSecondary\">\n        {`${price} ETH`}\n      </Box>\n    }\n    placement=\"top\"\n  >\n    <Box>{`${price.substring(0, 5)}... ETH`}</Box>\n  </MouseoverTooltip>\n)\n\nexport const PriceCell = ({ marketplace, price }: { marketplace?: Markets | string; price?: string | number }) => {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const formattedPrice = useMemo(\n    () =>\n      price\n        ? isNftGraphqlEnabled\n          ? formatEth(parseFloat(price?.toString()))\n          : putCommas(formatEthPrice(price.toString()))?.toString()\n        : null,\n    [isNftGraphqlEnabled, price]\n  )\n\n  return (\n    <Row display={{ sm: 'none', md: 'flex' }} gap=\"8\">\n      {marketplace && <MarketplaceIcon marketplace={marketplace} />}\n      {formattedPrice ? (\n        formattedPrice.length > 6 ? (\n          <PriceTooltip price={formattedPrice} />\n        ) : (\n          <>{`${formattedPrice} ETH`}</>\n        )\n      ) : (\n        <>-</>\n      )}\n    </Row>\n  )\n}\n\ninterface EventCellProps {\n  eventType: NftActivityType\n  eventTimestamp?: number\n  eventTransactionHash?: string\n  eventOnly?: boolean\n  price?: string | number\n  isMobile?: boolean\n}\n\nconst renderEventIcon = (eventType: NftActivityType) => {\n  switch (eventType) {\n    case NftActivityType.Listing:\n      return <ActivityListingIcon width={16} height={16} />\n    case NftActivityType.Sale:\n      return <ActivitySaleIcon width={16} height={16} />\n    case NftActivityType.Transfer:\n      return <ActivityTransferIcon width={16} height={16} />\n    case NftActivityType.CancelListing:\n      return <CancelListingIcon width={16} height={16} />\n    default:\n      return null\n  }\n}\n\nconst openEtherscanLinkInNewTab = (e: MouseEvent, transactionHash: string) => {\n  e.preventDefault()\n  window.open(`https://etherscan.io/tx/${transactionHash}`, '_blank', 'noopener,noreferrer')\n}\n\nconst ExternalLinkIcon = ({ transactionHash }: { transactionHash: string }) => (\n  <Row onClick={(e: MouseEvent) => openEtherscanLinkInNewTab(e, transactionHash)} marginLeft=\"4\">\n    <ActivityExternalLinkIcon />\n  </Row>\n)\n\nconst eventColors = (eventType: NftActivityType) => {\n  const activityEvents = {\n    [NftActivityType.Listing]: 'gold',\n    [NftActivityType.Sale]: 'green',\n    [NftActivityType.Transfer]: 'violet',\n    [NftActivityType.CancelListing]: 'accentFailure',\n  }\n\n  return activityEvents[eventType] as 'gold' | 'green' | 'violet' | 'accentFailure'\n}\n\nexport const EventCell = ({\n  eventType,\n  eventTimestamp,\n  eventTransactionHash,\n  eventOnly,\n  price,\n  isMobile,\n}: EventCellProps) => {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const formattedPrice = useMemo(\n    () =>\n      price\n        ? isNftGraphqlEnabled\n          ? formatEth(parseFloat(price?.toString()))\n          : putCommas(formatEthPrice(price.toString()))?.toString()\n        : null,\n    [isNftGraphqlEnabled, price]\n  )\n  return (\n    <Column height=\"full\" justifyContent=\"center\" gap=\"4\">\n      <Row className={styles.eventDetail} color={eventColors(eventType)}>\n        {renderEventIcon(eventType)}\n        {ActivityEventTypeDisplay[eventType]}\n      </Row>\n      {eventTimestamp && (isValidDate(eventTimestamp) || isNftGraphqlEnabled) && !isMobile && !eventOnly && (\n        <Row className={styles.eventTime}>\n          {getTimeDifference(eventTimestamp.toString(), isNftGraphqlEnabled)}\n          {eventTransactionHash && <ExternalLinkIcon transactionHash={eventTransactionHash} />}\n        </Row>\n      )}\n      {isMobile && price && <Row fontSize=\"16\" fontWeight=\"normal\" color=\"textPrimary\">{`${formattedPrice} ETH`}</Row>}\n    </Column>\n  )\n}\n\ninterface ItemCellProps {\n  event: ActivityEvent\n  rarityVerified: boolean\n  collectionName: string\n  isMobile: boolean\n  eventTimestamp?: number\n}\n\nconst NoContentContainer = () => (\n  <Box\n    position=\"relative\"\n    style={{\n      background: `#24272e`,\n    }}\n    className={styles.detailsImage}\n  >\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface RankingProps {\n  rarity: TokenRarity | Rarity\n  collectionName: string\n  rarityVerified: boolean\n  details?: boolean\n}\n\nconst Ranking = ({ rarity, collectionName, rarityVerified }: RankingProps) => {\n  const rank = (rarity as TokenRarity).rank || (rarity as Rarity).providers?.[0].rank\n\n  if (!rank) return null\n\n  return (\n    <Box>\n      <MouseoverTooltip\n        text={\n          <Row>\n            <Box display=\"flex\" marginRight=\"4\">\n              <img src=\"/nft/svgs/gem.svg\" alt=\"cardLogo\" width={16} />\n            </Box>\n            <Box width=\"full\" fontSize=\"14\">\n              {rarityVerified ? `Verified by ${collectionName}` : `Ranking by Rarity Sniper`}\n            </Box>\n          </Row>\n        }\n        placement=\"top\"\n      >\n        <Box className={styles.rarityInfo}>\n          <Box paddingTop=\"2\" paddingBottom=\"2\" display=\"flex\">\n            {putCommas(rank)}\n          </Box>\n\n          <Box display=\"flex\" height=\"16\">\n            {rarityVerified ? <RarityVerifiedIcon /> : null}\n          </Box>\n        </Box>\n      </MouseoverTooltip>\n    </Box>\n  )\n}\n\nconst getItemImage = (tokenMetadata?: TokenMetadata): string | undefined => {\n  return tokenMetadata?.smallImageUrl || tokenMetadata?.imageUrl\n}\n\nexport const ItemCell = ({ event, rarityVerified, collectionName, eventTimestamp, isMobile }: ItemCellProps) => {\n  const [loaded, setLoaded] = useState(false)\n  const [noContent, setNoContent] = useState(!getItemImage(event.tokenMetadata))\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n\n  return (\n    <Row gap=\"16\" overflow=\"hidden\" whiteSpace=\"nowrap\">\n      {!noContent ? (\n        <Box\n          as=\"img\"\n          alt={event.tokenMetadata?.name || event.tokenId}\n          src={getItemImage(event.tokenMetadata)}\n          draggable={false}\n          className={styles.detailsImage}\n          style={{\n            background: loaded ? 'none' : '#24272e',\n          }}\n          onLoad={() => setLoaded(true)}\n          onError={() => setNoContent(true)}\n        />\n      ) : (\n        <NoContentContainer />\n      )}\n      <Column height=\"full\" justifyContent=\"center\" overflow=\"hidden\" whiteSpace=\"nowrap\" marginRight=\"24\">\n        <Box className={styles.detailsName}>{event.tokenMetadata?.name || event.tokenId}</Box>\n        {event.tokenMetadata?.rarity && !isMobile && (\n          <Ranking\n            rarity={event.tokenMetadata?.rarity}\n            rarityVerified={rarityVerified}\n            collectionName={collectionName}\n          />\n        )}\n        {isMobile &&\n          eventTimestamp &&\n          (isValidDate(eventTimestamp) || isNftGraphqlEnabled) &&\n          getTimeDifference(eventTimestamp.toString(), isNftGraphqlEnabled)}\n      </Column>\n    </Row>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Common/index.tsx",[],"/workspace/Physica-Interfae/src/graphql/data/nft/Collection.ts",["3547"],"import gql from 'graphql-tag'\nimport { GenieCollection, Trait } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftCollection, useCollectionQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Collection($addresses: [String!]!) {\n    nftCollections(filter: { addresses: $addresses }) {\n      edges {\n        cursor\n        node {\n          bannerImage {\n            url\n          }\n          collectionId\n          description\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          instagramName\n          isVerified\n          name\n          numAssets\n          twitterName\n          nftContracts {\n            address\n            chain\n            name\n            standard\n            symbol\n            totalSupply\n          }\n          traits {\n            name\n            values\n            stats {\n              name\n              value\n              assets\n              listings\n            }\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n            owners\n            totalVolume {\n              value\n              currency\n            }\n            listings {\n              value\n            }\n            volume(duration: DAY) {\n              value\n              currency\n            }\n            volumePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            floorPricePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            marketplaces {\n              marketplace\n              listings\n              floorPrice\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\nexport function formatCollectionQueryData(\n  queryCollection: NonNullable<NftCollection>,\n  address?: string\n): GenieCollection {\n  const market = queryCollection?.markets?.[0]\n  if (!address && !queryCollection?.nftContracts?.[0]?.address) return {} as GenieCollection\n  const traits = {} as Record<string, Trait[]>\n  if (queryCollection?.traits) {\n    queryCollection?.traits.forEach((trait) => {\n      if (trait.name && trait.stats) {\n        traits[trait.name] = trait.stats.map((stats) => {\n          return {\n            trait_type: stats.name,\n            trait_value: stats.value,\n            trait_count: stats.assets,\n          } as Trait\n        })\n      }\n    })\n  }\n  return {\n    address: address ?? queryCollection?.nftContracts?.[0]?.address ?? '',\n    isVerified: queryCollection?.isVerified,\n    name: queryCollection?.name,\n    description: queryCollection?.description,\n    standard: queryCollection?.nftContracts?.[0]?.standard,\n    bannerImageUrl: queryCollection?.bannerImage?.url,\n    stats: {\n      num_owners: market?.owners,\n      floor_price: market?.floorPrice?.value,\n      one_day_volume: market?.volume?.value,\n      one_day_change: market?.volumePercentChange?.value,\n      one_day_floor_change: market?.floorPricePercentChange?.value,\n      banner_image_url: queryCollection?.bannerImage?.url,\n      total_supply: queryCollection?.numAssets,\n      total_listings: market?.listings?.value,\n      total_volume: market?.totalVolume?.value,\n    },\n    traits,\n    marketplaceCount: market?.marketplaces?.map((market) => {\n      return {\n        marketplace: market.marketplace?.toLowerCase() ?? '',\n        count: market.listings ?? 0,\n        floorPrice: market.floorPrice ?? 0,\n      }\n    }),\n    imageUrl: queryCollection?.image?.url ?? '',\n    twitterUrl: queryCollection?.twitterName,\n    instagram: queryCollection?.instagramName,\n    discordUrl: queryCollection?.discordUrl,\n    externalUrl: queryCollection?.homepageUrl,\n    rarityVerified: false, // TODO update when backend supports\n    // isFoundation: boolean, // TODO ask backend to add\n  }\n}\n\ninterface useCollectionReturnProps {\n  data: GenieCollection\n  loading: boolean\n}\n\nexport function useCollection(address: string, skip?: boolean): useCollectionReturnProps {\n  const { data: queryData, loading } = useCollectionQuery({\n    variables: {\n      addresses: address,\n    },\n    skip,\n  })\n\n  const queryCollection = queryData?.nftCollections?.edges?.[0]?.node as NonNullable<NftCollection>\n  return useMemo(() => {\n    return {\n      data: formatCollectionQueryData(queryCollection, address),\n      loading,\n    }\n  }, [address, loading, queryCollection])\n}\n","/workspace/Physica-Interfae/src/graphql/data/nft/Asset.ts",["3548","3549","3550","3551","3552"],"import { parseEther } from 'ethers/lib/utils'\nimport gql from 'graphql-tag'\nimport { GenieAsset, Markets, Trait } from 'nft/types'\nimport { wrapScientificNotation } from 'nft/utils'\nimport { useCallback, useMemo } from 'react'\n\nimport {\n  AssetQueryVariables,\n  NftAssetEdge,\n  NftAssetsFilterInput,\n  NftAssetSortableField,\n  NftAssetTraitInput,\n  NftMarketplace,\n  useAssetQuery,\n} from '../__generated__/types-and-hooks'\n\ngql`\n  query Asset(\n    $address: String!\n    $orderBy: NftAssetSortableField\n    $asc: Boolean\n    $filter: NftAssetsFilterInput\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    nftAssets(\n      address: $address\n      orderBy: $orderBy\n      asc: $asc\n      filter: $filter\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n    ) {\n      edges {\n        node {\n          id\n          name\n          image {\n            url\n          }\n          smallImage {\n            url\n          }\n          tokenId\n          animationUrl\n          suspiciousFlag\n          collection {\n            name\n            isVerified\n            nftContracts {\n              address\n              standard\n            }\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                address\n                createdAt\n                endAt\n                id\n                maker\n                marketplace\n                marketplaceUrl\n                orderHash\n                price {\n                  currency\n                  value\n                }\n                quantity\n                startAt\n                status\n                taker\n                tokenId\n                type\n                protocolParameters\n              }\n              cursor\n            }\n          }\n          rarities {\n            rank\n          }\n        }\n        cursor\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\nfunction formatAssetQueryData(queryAsset: NftAssetEdge, totalCount?: number) {\n  const asset = queryAsset.node\n  const ethPrice = parseEther(wrapScientificNotation(asset.listings?.edges[0]?.node.price.value ?? 0)).toString()\n  return {\n    id: asset.id,\n    address: asset?.collection?.nftContracts?.[0]?.address ?? '',\n    notForSale: asset.listings?.edges?.length === 0,\n    collectionName: asset.collection?.name,\n    collectionSymbol: asset.collection?.image?.url,\n    imageUrl: asset.image?.url,\n    animationUrl: asset.animationUrl,\n    marketplace: asset.listings?.edges[0]?.node?.marketplace?.toLowerCase() as unknown as Markets,\n    name: asset.name,\n    priceInfo: {\n      ETHPrice: ethPrice,\n      baseAsset: 'ETH',\n      baseDecimals: '18',\n      basePrice: ethPrice,\n    },\n    susFlag: asset.suspiciousFlag,\n    sellorders: asset.listings?.edges.map((listingNode) => {\n      return {\n        ...listingNode.node,\n        protocolParameters: listingNode.node?.protocolParameters\n          ? JSON.parse(listingNode.node?.protocolParameters.toString())\n          : undefined,\n      }\n    }),\n    smallImageUrl: asset.smallImage?.url,\n    tokenId: asset.tokenId ?? '',\n    tokenType: asset.collection?.nftContracts?.[0]?.standard,\n    totalCount,\n    collectionIsVerified: asset.collection?.isVerified,\n    rarity: {\n      primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n      providers: asset.rarities?.map((rarity) => {\n        return {\n          ...rarity,\n          provider: 'Rarity Sniper',\n        }\n      }),\n    },\n    ownerAddress: asset.ownerAddress,\n    creator: {\n      profile_img_url: asset.collection?.creator?.profileImage?.url,\n      address: asset.collection?.creator?.address,\n    },\n    metadataUrl: asset.metadataUrl,\n  }\n}\n\nexport const ASSET_PAGE_SIZE = 25\n\nexport interface AssetFetcherParams {\n  address: string\n  orderBy: NftAssetSortableField\n  asc: boolean\n  filter: NftAssetsFilterInput\n  first?: number\n  after?: string\n  last?: number\n  before?: string\n}\n\nconst defaultAssetFetcherParams: Omit<AssetQueryVariables, 'address'> = {\n  orderBy: NftAssetSortableField.Price,\n  asc: true,\n  // tokenSearchQuery must be specified so that this exactly matches the initial query.\n  filter: { listed: false, tokenSearchQuery: '' },\n  first: ASSET_PAGE_SIZE,\n}\n\nexport function useNftAssets(params: AssetFetcherParams) {\n  const variables = useMemo(() => ({ ...defaultAssetFetcherParams, ...params }), [params])\n\n  const { data, loading, fetchMore } = useAssetQuery({\n    variables,\n  })\n  const hasNext = data?.nftAssets?.pageInfo?.hasNextPage\n  const loadMore = useCallback(\n    () =>\n      fetchMore({\n        variables: {\n          after: data?.nftAssets?.pageInfo?.endCursor,\n        },\n      }),\n    [data, fetchMore]\n  )\n\n  // TODO: setup polling while handling pagination\n\n  // It is especially important for this to be memoized to avoid re-rendering from polling if data is unchanged.\n  const assets: GenieAsset[] | undefined = useMemo(\n    () =>\n      data?.nftAssets?.edges?.map((queryAsset) => {\n        return formatAssetQueryData(queryAsset as NonNullable<NftAssetEdge>, data.nftAssets?.totalCount)\n      }),\n    [data?.nftAssets?.edges, data?.nftAssets?.totalCount]\n  )\n\n  return useMemo(() => {\n    return {\n      data: assets,\n      hasNext,\n      loading,\n      loadMore,\n    }\n  }, [assets, hasNext, loadMore, loading])\n}\n\nconst DEFAULT_SWEEP_AMOUNT = 50\n\nexport interface SweepFetcherParams {\n  contractAddress: string\n  markets?: string[]\n  price?: { high?: number | string; low?: number | string; symbol: string }\n  traits?: Trait[]\n}\n\nfunction useSweepFetcherVars({ contractAddress, markets, price, traits }: SweepFetcherParams): AssetQueryVariables {\n  const filter: NftAssetsFilterInput = useMemo(\n    () => ({\n      listed: true,\n      maxPrice: price?.high?.toString(),\n      minPrice: price?.low?.toString(),\n      traits:\n        traits && traits.length > 0\n          ? traits?.map((trait) => {\n              return { name: trait.trait_type, values: [trait.trait_value] } as unknown as NftAssetTraitInput\n            })\n          : undefined,\n      marketplaces:\n        markets && markets.length > 0 ? markets?.map((market) => market.toUpperCase() as NftMarketplace) : undefined,\n    }),\n    [markets, price?.high, price?.low, traits]\n  )\n  return useMemo(\n    () => ({\n      address: contractAddress,\n      orderBy: NftAssetSortableField.Price,\n      asc: true,\n      first: DEFAULT_SWEEP_AMOUNT,\n      filter,\n    }),\n    [contractAddress, filter]\n  )\n}\n\nexport function useSweepNftAssets(params: SweepFetcherParams) {\n  const variables = useSweepFetcherVars(params)\n  const { data, loading } = useAssetQuery({\n    variables,\n    // This prevents overwriting the page's call to assets for cards shown\n    fetchPolicy: 'no-cache',\n  })\n  const assets = useMemo<GenieAsset[] | undefined>(\n    () =>\n      data?.nftAssets?.edges?.map((queryAsset) => {\n        return formatAssetQueryData(queryAsset as NonNullable<NftAssetEdge>, data.nftAssets?.totalCount)\n      }),\n    [data?.nftAssets?.edges, data?.nftAssets?.totalCount]\n  )\n  return useMemo(() => ({ data: assets, loading }), [assets, loading])\n}\n","/workspace/Physica-Interfae/src/nft/utils/currency.ts",["3553"],"import { formatEther, parseEther } from '@ethersproject/units'\n\nexport const formatUsdPrice = (price: number) => {\n  if (price > 1000000) {\n    return `$${(price / 1000000).toFixed(1)}M`\n  } else if (price > 1000) {\n    return `$${(price / 1000).toFixed(1)}K`\n  } else {\n    return `$${price.toFixed(2)}`\n  }\n}\n\nexport const formatEth = (price: number) => {\n  if (price > 1000000) {\n    return `${Math.round(price / 1000000)}M`\n  } else if (price > 1000) {\n    return `${Math.round(price / 1000)}K`\n  } else if (price < 0.001) {\n    return '<0.001'\n  } else {\n    return `${Math.round(price * 1000 + Number.EPSILON) / 1000}`\n  }\n}\n\nexport const formatUSDPriceWithCommas = (price: number) => {\n  return `$${Math.round(price)\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`\n}\n\nexport const formatEthPrice = (price: string | undefined) => {\n  if (!price) return 0\n\n  const formattedPrice = parseFloat(formatEther(String(price)))\n  return (\n    Math.round(formattedPrice * (formattedPrice >= 1 ? 100 : 1000) + Number.EPSILON) /\n    (formattedPrice >= 1 ? 100 : 1000)\n  )\n}\n\n// Stringify the `price` anyway because the `price` is being passed as any in some places\nexport const numberToWei = (amount: number) => {\n  return parseEther(amount.toString())\n}\n\nexport const ethNumberStandardFormatter = (\n  amount: string | number | undefined,\n  includeDollarSign = false,\n  removeZeroes = false,\n  roundToNearestWholeNumber = false\n): string => {\n  if (!amount) return '-'\n\n  const amountInDecimals = parseFloat(amount.toString())\n  const conditionalDollarSign = includeDollarSign ? '$' : ''\n\n  if (amountInDecimals <= 0) return '-'\n  if (amountInDecimals < 0.0001) return `< ${conditionalDollarSign}0.00001`\n  if (amountInDecimals < 1) return `${conditionalDollarSign}${parseFloat(amountInDecimals.toFixed(3))}`\n  const formattedPrice = (\n    removeZeroes\n      ? parseFloat(amountInDecimals.toFixed(2))\n      : roundToNearestWholeNumber\n      ? Math.round(amountInDecimals)\n      : amountInDecimals.toFixed(2)\n  )\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return conditionalDollarSign + formattedPrice\n}\n\nexport const formatWeiToDecimal = (amount: string, removeZeroes = false) => {\n  if (!amount) return '-'\n  return ethNumberStandardFormatter(formatEther(amount), false, removeZeroes, false)\n}\n\n// prevent BigNumber overflow by properly handling scientific notation and comma delimited values\nexport function wrapScientificNotation(value: string | number): string {\n  return parseFloat(value.toString())\n    .toLocaleString('fullwide', { useGrouping: false })\n    .replace(',', '.')\n    .replace(' ', '')\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useCollectionFilters.ts",["3554","3555"],"import { NftAssetSortableField } from 'graphql/data/__generated__/types-and-hooks'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nexport enum SortBy {\n  LowToHigh,\n  HighToLow,\n  RareToCommon,\n  CommonToRare,\n}\n\nexport const SortByPointers = {\n  [SortBy.HighToLow]: 'highest',\n  [SortBy.LowToHigh]: 'lowest',\n  [SortBy.RareToCommon]: 'rare',\n  [SortBy.CommonToRare]: 'common',\n}\ninterface QueryInfo {\n  field: NftAssetSortableField\n  asc: boolean\n}\nexport const SortByQueries = {\n  [SortBy.HighToLow]: { field: 'PRICE', asc: false } as QueryInfo,\n  [SortBy.LowToHigh]: { field: 'PRICE', asc: true } as QueryInfo,\n  [SortBy.RareToCommon]: { field: 'RARITY', asc: true } as QueryInfo,\n  [SortBy.CommonToRare]: { field: 'RARITY', asc: false } as QueryInfo,\n}\n\nexport type Trait = {\n  trait_type: string\n  trait_value: string\n  trait_count?: number\n  floorPrice?: number\n}\n\ninterface State {\n  traits: Trait[]\n  hasRarity: boolean\n  markets: string[]\n  minPrice: string\n  maxPrice: string\n  minRarity: number | ''\n  maxRarity: number | ''\n  marketCount: Record<string, number>\n  buyNow: boolean\n  search: string\n  sortBy: SortBy\n  showFullTraitName: { shouldShow: boolean; trait_value?: string; trait_type: string }\n}\n\ntype Actions = {\n  setHasRarity: (hasRarity: boolean) => void\n  setMarketCount: (_: Record<string, number>) => void\n  addMarket: (market: string) => void\n  removeMarket: (market: string) => void\n  addTrait: (trait: Trait) => void\n  removeTrait: (trait: Trait) => void\n  reset: () => void\n  setMinPrice: (price: string) => void\n  setMaxPrice: (price: string) => void\n  setMinRarity: (range: number | '') => void\n  setMaxRarity: (range: number | '') => void\n  setBuyNow: (bool: boolean) => void\n  setSearch: (term: string) => void\n  setSortBy: (sortBy: SortBy) => void\n  toggleShowFullTraitName: (show: { shouldShow: boolean; trait_value: string; trait_type: string }) => void\n}\n\nexport type CollectionFilters = State & Actions\n\nexport const initialCollectionFilterState: State = {\n  minPrice: '',\n  maxPrice: '',\n  minRarity: '',\n  maxRarity: '',\n  traits: [],\n  hasRarity: false,\n  markets: [],\n  marketCount: {},\n  buyNow: false,\n  search: '',\n  sortBy: SortBy.LowToHigh,\n  showFullTraitName: { shouldShow: false, trait_value: '', trait_type: '' },\n}\n\nexport const useCollectionFilters = create<CollectionFilters>()(\n  devtools(\n    (set) => ({\n      ...initialCollectionFilterState,\n      setHasRarity: (hasRarity) => set({ hasRarity }),\n      setSortBy: (sortBy) => set({ sortBy }),\n      setSearch: (search) => set({ search }),\n      setBuyNow: (buyNow) => set({ buyNow }),\n      setMarketCount: (marketCount) => set({ marketCount }),\n      addMarket: (market) => set(({ markets }) => ({ markets: [...markets, market] })),\n      removeMarket: (market) => set(({ markets }) => ({ markets: markets.filter((_market) => market !== _market) })),\n      addTrait: (trait) => set(({ traits }) => ({ traits: [...traits, trait] })),\n      removeTrait: (trait) =>\n        set(({ traits }) => ({\n          traits: traits.filter((x) => JSON.stringify(x) !== JSON.stringify(trait)),\n        })),\n      reset: () => set(() => ({ traits: [], minRarity: '', maxRarity: '', markets: [], minPrice: '', maxPrice: '' })),\n      setMinPrice: (price) => set(() => ({ minPrice: price })),\n      setMaxPrice: (price) => set(() => ({ maxPrice: price })),\n      setMinRarity: (range) => set(() => ({ minRarity: range })),\n      setMaxRarity: (range) => set(() => ({ maxRarity: range })),\n      toggleShowFullTraitName: ({ shouldShow, trait_value, trait_type }) =>\n        set(() => ({ showFullTraitName: { shouldShow, trait_value, trait_type } })),\n    }),\n    { name: 'useCollectionTraits' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/queries/x2y2/index.ts",[],"/workspace/Physica-Interfae/src/lib/utils/tryParseCurrencyAmount.ts",["3556"],"import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Parses a CurrencyAmount from the passed string.\n * Returns the CurrencyAmount, or undefined if parsing fails.\n */\nexport default function tryParseCurrencyAmount<T extends Currency>(\n  value?: string,\n  currency?: T\n): CurrencyAmount<T> | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return CurrencyAmount.fromRawAmount(currency, JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // fails if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  return undefined\n}\n","/workspace/Physica-Interfae/src/hooks/useStablecoinPrice.ts",[],"/workspace/Physica-Interfae/src/nft/utils/fetchPrice.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/TraitsHeader.tsx",[],"/workspace/Physica-Interfae/src/nft/components/layout/Input.tsx",[],"/workspace/Physica-Interfae/src/hooks/useWindowSize.ts",[],"/workspace/Physica-Interfae/src/graphql/data/nft/NftActivity.ts",["3557","3558","3559"],"import { WatchQueryFetchPolicy } from '@apollo/client'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport gql from 'graphql-tag'\nimport { ActivityEvent } from 'nft/types'\nimport { useCallback, useMemo } from 'react'\n\nimport { NftActivityFilterInput, useNftActivityQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftActivity($filter: NftActivityFilterInput, $after: String, $first: Int) {\n    nftActivity(filter: $filter, after: $after, first: $first) {\n      edges {\n        node {\n          id\n          address\n          tokenId\n          asset {\n            id\n            metadataUrl\n            image {\n              id\n              url\n            }\n            smallImage {\n              id\n              url\n            }\n            name\n            rarities {\n              id\n              provider\n              rank\n              score\n            }\n            suspiciousFlag\n            nftContract {\n              id\n              standard\n            }\n            collection {\n              id\n              image {\n                id\n                url\n              }\n            }\n          }\n          type\n          marketplace\n          fromAddress\n          toAddress\n          transactionHash\n          price {\n            id\n            value\n          }\n          orderStatus\n          quantity\n          url\n          timestamp\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\nexport function useNftActivity(filter: NftActivityFilterInput, first?: number, fetchPolicy?: WatchQueryFetchPolicy) {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const { data, loading, fetchMore, error } = useNftActivityQuery({\n    variables: {\n      filter,\n      first,\n    },\n    skip: !isNftGraphqlEnabled,\n    fetchPolicy,\n  })\n\n  const hasNext = data?.nftActivity?.pageInfo?.hasNextPage\n  const loadMore = useCallback(\n    () =>\n      fetchMore({\n        variables: {\n          after: data?.nftActivity?.pageInfo?.endCursor,\n        },\n      }),\n    [data, fetchMore]\n  )\n\n  const nftActivity: ActivityEvent[] | undefined = useMemo(\n    () =>\n      data?.nftActivity?.edges?.map((queryActivity) => {\n        const activity = queryActivity?.node\n        const asset = activity?.asset\n        return {\n          collectionAddress: activity.address,\n          tokenId: activity.tokenId,\n          tokenMetadata: {\n            name: asset?.name,\n            imageUrl: asset?.image?.url,\n            smallImageUrl: asset?.smallImage?.url,\n            metadataUrl: asset?.metadataUrl,\n            rarity: {\n              primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n              providers: asset?.rarities?.map((rarity) => {\n                return {\n                  ...rarity,\n                  provider: 'Rarity Sniper',\n                }\n              }),\n            },\n            suspiciousFlag: asset?.suspiciousFlag,\n            standard: asset?.nftContract?.standard,\n          },\n          eventType: activity.type,\n          marketplace: activity.marketplace,\n          fromAddress: activity.fromAddress,\n          toAddress: activity.toAddress,\n          transactionHash: activity.transactionHash,\n          orderStatus: activity.orderStatus,\n          price: activity.price?.value.toString(),\n          symbol: asset?.collection?.image?.url,\n          quantity: activity.quantity,\n          url: activity.url,\n          eventTimestamp: activity.timestamp * 1000,\n        }\n      }),\n    [data]\n  )\n\n  return useMemo(\n    () => ({ nftActivity, hasNext, loadMore, loading, error }),\n    [hasNext, loadMore, loading, nftActivity, error]\n  )\n}\n","/workspace/Physica-Interfae/src/nft/queries/openSea/index.ts",[],"/workspace/Physica-Interfae/src/components/Tokens/loading.tsx",[],"/workspace/Physica-Interfae/src/nft/queries/looksRare/index.ts",[],"/workspace/Physica-Interfae/src/nft/queries/genie/ActivityFetcher.ts",["3560"],"import { ActivityEventResponse, ActivityFilter } from '../../types'\n\nexport const ActivityFetcher = async (\n  contractAddress: string,\n  filters?: ActivityFilter,\n  cursor?: string,\n  limit?: string\n): Promise<ActivityEventResponse> => {\n  const filterParam =\n    filters && filters.eventTypes\n      ? `&event_types=${filters.eventTypes?.map((eventType) => `${eventType}`).join(',')}`\n      : ''\n\n  const tokenId = filters?.token_id ? `&token_id=${filters?.token_id}` : ''\n\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/collections/${contractAddress}/activity?limit=${\n    limit ? limit : '25'\n  }${filterParam}${cursor ? `&cursor=${cursor}` : ''}${tokenId}`\n\n  const r = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  const data = await r.json()\n  return data.data\n}\n","/workspace/Physica-Interfae/src/nft/queries/genie/index.ts",[],"/workspace/Physica-Interfae/src/nft/utils/roundAndPluralize.ts",[],"/workspace/Physica-Interfae/src/nft/utils/putCommas.ts",[],"/workspace/Physica-Interfae/src/nft/utils/date.ts",[],"/workspace/Physica-Interfae/src/nft/utils/buildActivityAsset.ts",["3561","3562"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { parseEther } from 'ethers/lib/utils'\nimport { ActivityEvent, GenieAsset } from 'nft/types'\n\nimport { formatEth } from './currency'\n\nexport const buildActivityAsset = (\n  event: ActivityEvent,\n  collectionName: string,\n  ethPriceInUSD: number,\n  isNftGraphqlEnabled: boolean\n): GenieAsset => {\n  const assetUsdPrice = event.price\n    ? isNftGraphqlEnabled\n      ? formatEth(parseFloat(event.price) * ethPriceInUSD)\n      : formatEther(\n          BigNumber.from(event.price)\n            .mul(BigNumber.from(Math.trunc(ethPriceInUSD * 100)))\n            .div(100)\n        )\n    : '0'\n\n  const weiPrice = isNftGraphqlEnabled ? (event.price ? parseEther(event.price) : '') : event.price\n\n  return {\n    address: event.collectionAddress,\n    collectionName,\n    imageUrl: event.tokenMetadata?.imageUrl,\n    marketplace: event.marketplace,\n    name: event.tokenMetadata?.name,\n    tokenId: event.tokenId,\n    susFlag: event.tokenMetadata?.suspiciousFlag,\n    smallImageUrl: event.tokenMetadata?.smallImageUrl,\n    collectionSymbol: event.symbol,\n    priceInfo: {\n      USDPrice: assetUsdPrice,\n      ETHPrice: weiPrice,\n      basePrice: weiPrice,\n      baseAsset: 'ETH',\n    },\n    tokenType: event.tokenMetadata?.standard,\n  } as GenieAsset\n}\n","/workspace/Physica-Interfae/src/nft/utils/address.ts",[],"/workspace/Physica-Interfae/src/nft/queries/openSea/PostOpenSeaSellOrder.ts",[],"/workspace/Physica-Interfae/src/nft/queries/openSea/OSCollectionsFetcher.ts",[],"/workspace/Physica-Interfae/src/nft/queries/looksRare/looksRareRewardsFetcher.ts",[],"/workspace/Physica-Interfae/src/nft/queries/looksRare/looksRareNonceFetcher.ts",[],"/workspace/Physica-Interfae/src/nft/queries/genie/TrendingCollectionsFetcher.ts",[],"/workspace/Physica-Interfae/src/nft/queries/genie/SearchCollectionsFetcher.ts",[],"/workspace/Physica-Interfae/src/nft/queries/genie/CollectionPreviewFetcher.ts",["3563","3564"],"export const CollectionPreviewFetcher = async (\n  address: string\n): Promise<\n  [\n    {\n      name: string\n      bannerImageUrl?: string\n    }\n  ]\n> => {\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/collectionPreview?address=${address}`\n\n  const controller = new AbortController()\n\n  const timeoutId = setTimeout(() => controller.abort(), 3000)\n\n  const r = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  clearInterval(timeoutId)\n  const data = await r.json()\n\n  return [\n    {\n      name: data.data.collectionName,\n      bannerImageUrl: data.data.bannerImageUrl,\n    },\n  ]\n}\n","/workspace/Physica-Interfae/src/nft/queries/genie/RouteFetcher.ts",[],"/workspace/Physica-Interfae/src/nft/queries/looksRare/createLooksRareOrder.ts",[],"/workspace/Physica-Interfae/src/nft/queries/openSea/constants.ts",[],"/workspace/Physica-Interfae/src/nft/queries/looksRare/constants.ts",[],"/workspace/Physica-Interfae/src/nft/utils/numbers.ts",[],"/workspace/Physica-Interfae/src/nft/css/reset.css.ts",[],"/workspace/Physica-Interfae/src/hooks/useScreenSize.ts",["3565"],"// HOW TO USE:\n// the hook returns a record of booleans, where the key is the name of the breakpoint\n// if the screen size is greater than or equal to the breakpoint, the value will be true\n// for example if the screen size is 1024px, the value of the 'md' key will be true and the value of the 'lg' key will be true\n// if you were to check if the screen is smaller than a breakpoint you would check if it is false\n\nimport { useEffect, useState } from 'react'\nimport { BREAKPOINTS } from 'theme'\n\nconst isClient = typeof window !== 'undefined'\n\nfunction getScreenSize(): Record<keyof typeof BREAKPOINTS, boolean> {\n  return Object.keys(BREAKPOINTS).reduce(\n    (obj, key) =>\n      Object.assign(obj, {\n        [key]: isClient ? window.innerWidth >= BREAKPOINTS[key as keyof typeof BREAKPOINTS] : false,\n      }),\n    {} as Record<keyof typeof BREAKPOINTS, boolean>\n  )\n}\n\nexport function useScreenSize(): Record<keyof typeof BREAKPOINTS, boolean> {\n  const [screenSize, setScreenSize] = useState(getScreenSize())\n\n  useEffect(() => {\n    function handleResize() {\n      setScreenSize(getScreenSize())\n    }\n\n    if (isClient) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    return undefined\n  }, [])\n\n  return screenSize\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useIsCollectionLoading.ts",["3566","3567"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface State {\n  isCollectionNftsLoading: boolean\n  setIsCollectionNftsLoading: (isCollectionNftsLoading: boolean) => void\n  isCollectionStatsLoading: boolean\n  setIsCollectionStatsLoading: (isCollectionStatsLoading: boolean) => void\n}\n\nexport const useIsCollectionLoading = create<State>()(\n  devtools(\n    (set) => ({\n      isCollectionNftsLoading: false,\n      setIsCollectionNftsLoading: (isCollectionNftsLoading) =>\n        set(() => {\n          return { isCollectionNftsLoading }\n        }),\n      isCollectionStatsLoading: false,\n      setIsCollectionStatsLoading: (isCollectionStatsLoading) =>\n        set(() => {\n          return { isCollectionStatsLoading }\n        }),\n    }),\n    { name: 'useIsCollectionLoading' }\n  )\n)\n","/workspace/Physica-Interfae/src/state/routing/useRoutingAPITrade.ts",["3568","3569","3570"],"import { skipToken } from '@reduxjs/toolkit/query/react'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { IMetric, MetricLoggerUnit, setGlobalMetric } from '@uniswap/smart-order-router'\nimport { sendTiming } from 'components/analytics'\nimport { AVERAGE_L1_BLOCK_TIME } from 'constants/chainInfo'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useStablecoinPrice'\nimport { useRoutingAPIArguments } from 'lib/hooks/routing/useRoutingAPIArguments'\nimport ms from 'ms.macro'\nimport { useMemo } from 'react'\nimport { RouterPreference, useGetQuoteQuery } from 'state/routing/slice'\n\nimport { InterfaceTrade, TradeState } from './types'\nimport { computeRoutes, transformRoutesToTrade } from './utils'\n\n/**\n * Returns the best trade by invoking the routing api or the smart order router on the client\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useRoutingAPITrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified: CurrencyAmount<Currency> | undefined,\n  otherCurrency: Currency | undefined,\n  routerPreference: RouterPreference\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    routerPreference,\n  })\n\n  const {\n    isLoading,\n    isError,\n    data: quoteResult,\n    currentData,\n  } = useGetQuoteQuery(queryArgs ?? skipToken, {\n    // Price-fetching is informational and costly, so it's done less frequently.\n    pollingInterval: routerPreference === RouterPreference.PRICE ? ms`1m` : AVERAGE_L1_BLOCK_TIME,\n    // If latest quote from cache was fetched > 2m ago, instantly repoll for another instead of waiting for next poll period\n    refetchOnMountOrArgChange: 2 * 60,\n  })\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  const isSyncing = currentData !== quoteResult\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut || currencyIn.equals(currencyOut)) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (isLoading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    let otherAmount = undefined\n    if (quoteResult) {\n      if (tradeType === TradeType.EXACT_INPUT && currencyOut) {\n        otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n      }\n\n      if (tradeType === TradeType.EXACT_OUTPUT && currencyIn) {\n        otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n      }\n    }\n\n    if (isError || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, quoteResult?.blockNumber, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: isSyncing ? TradeState.SYNCING : TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [\n    currencyIn,\n    currencyOut,\n    quoteResult,\n    isLoading,\n    tradeType,\n    isError,\n    route,\n    queryArgs,\n    gasUseEstimateUSD,\n    isSyncing,\n  ])\n}\n\n// only want to enable this when app hook called\nclass GAMetric extends IMetric {\n  putDimensions() {\n    return\n  }\n\n  putMetric(key: string, value: number, unit?: MetricLoggerUnit) {\n    sendTiming('Routing API', `${key} | ${unit}`, value, 'client')\n  }\n}\n\nsetGlobalMetric(new GAMetric())\n","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/PriceChart.tsx",["3571","3572","3573","3574","3575","3576"],"import { Trans } from '@lingui/macro'\nimport { AxisBottom, TickFormatter } from '@visx/axis'\nimport { localPoint } from '@visx/event'\nimport { EventType } from '@visx/event/lib/types'\nimport { GlyphCircle } from '@visx/glyph'\nimport { Line } from '@visx/shape'\nimport AnimatedInLineChart from 'components/Charts/AnimatedInLineChart'\nimport FadedInLineChart from 'components/Charts/FadeInLineChart'\nimport { bisect, curveCardinal, NumberValue, scaleLinear, timeDay, timeHour, timeMinute, timeMonth } from 'd3'\nimport { PricePoint } from 'graphql/data/util'\nimport { TimePeriod } from 'graphql/data/util'\nimport { useActiveLocale } from 'hooks/useActiveLocale'\nimport { ReactNode, useCallback, useEffect, useMemo, useState } from 'react'\nimport { ArrowDownRight, ArrowUpRight, TrendingUp } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { textFadeIn } from 'theme/styles'\nimport {\n  dayHourFormatter,\n  hourFormatter,\n  monthDayFormatter,\n  monthTickFormatter,\n  monthYearDayFormatter,\n  weekFormatter,\n} from 'utils/formatChartTimes'\nimport { formatDollar } from 'utils/formatNumbers'\n\nconst DATA_EMPTY = { value: 0, timestamp: 0 }\n\nexport function getPriceBounds(pricePoints: PricePoint[]): [number, number] {\n  const prices = pricePoints.map((x) => x.value)\n  const min = Math.min(...prices)\n  const max = Math.max(...prices)\n  return [min, max]\n}\n\nconst StyledUpArrow = styled(ArrowUpRight)`\n  color: ${({ theme }) => theme.accentSuccess};\n`\nconst StyledDownArrow = styled(ArrowDownRight)`\n  color: ${({ theme }) => theme.accentFailure};\n`\n\nfunction calculateDelta(start: number, current: number) {\n  return (current / start - 1) * 100\n}\n\nexport function getDeltaArrow(delta: number | null | undefined, iconSize = 20) {\n  // Null-check not including zero\n  if (delta === null || delta === undefined) {\n    return null\n  } else if (Math.sign(delta) < 0) {\n    return <StyledDownArrow size={iconSize} key=\"arrow-down\" aria-label=\"down\" />\n  }\n  return <StyledUpArrow size={iconSize} key=\"arrow-up\" aria-label=\"up\" />\n}\n\nexport function formatDelta(delta: number | null | undefined) {\n  // Null-check not including zero\n  if (delta === null || delta === undefined || delta === Infinity || isNaN(delta)) {\n    return '-'\n  }\n  const formattedDelta = Math.abs(delta).toFixed(2) + '%'\n  return formattedDelta\n}\n\nexport const DeltaText = styled.span<{ delta: number | undefined }>`\n  color: ${({ theme, delta }) =>\n    delta !== undefined ? (Math.sign(delta) < 0 ? theme.accentFailure : theme.accentSuccess) : theme.textPrimary};\n`\n\nconst ChartHeader = styled.div`\n  position: absolute;\n  ${textFadeIn};\n  animation-duration: ${({ theme }) => theme.transition.duration.medium};\n`\nexport const TokenPrice = styled.span`\n  font-size: 36px;\n  line-height: 44px;\n`\nconst MissingPrice = styled(TokenPrice)`\n  font-size: 24px;\n  line-height: 44px;\n  color: ${({ theme }) => theme.textTertiary};\n`\n\nconst DeltaContainer = styled.div`\n  height: 16px;\n  display: flex;\n  align-items: center;\n  margin-top: 4px;\n`\nexport const ArrowCell = styled.div`\n  padding-right: 3px;\n  display: flex;\n`\n\nfunction fixChart(prices: PricePoint[] | undefined | null) {\n  if (!prices) return { prices: null, blanks: [] }\n\n  const fixedChart: PricePoint[] = []\n  const blanks: PricePoint[][] = []\n  let lastValue: PricePoint | undefined = undefined\n  for (let i = 0; i < prices.length; i++) {\n    if (prices[i].value !== 0) {\n      if (fixedChart.length === 0 && i !== 0) {\n        blanks.push([{ ...prices[0], value: prices[i].value }, prices[i]])\n      }\n      lastValue = prices[i]\n      fixedChart.push(prices[i])\n    }\n  }\n\n  if (lastValue && lastValue !== prices[prices.length - 1]) {\n    blanks.push([lastValue, { ...prices[prices.length - 1], value: lastValue.value }])\n  }\n\n  return { prices: fixedChart, blanks }\n}\n\nconst margin = { top: 100, bottom: 48, crosshair: 72 }\nconst timeOptionsHeight = 44\n\ninterface PriceChartProps {\n  width: number\n  height: number\n  prices: PricePoint[] | undefined | null\n  timePeriod: TimePeriod\n}\n\nexport function PriceChart({ width, height, prices: originalPrices, timePeriod }: PriceChartProps) {\n  const locale = useActiveLocale()\n  const theme = useTheme()\n\n  const { prices, blanks } = useMemo(\n    () => (originalPrices && originalPrices.length > 0 ? fixChart(originalPrices) : { prices: null, blanks: [] }),\n    [originalPrices]\n  )\n\n  const chartAvailable = !!prices && prices.length > 0\n  const missingPricesMessage = !chartAvailable ? (\n    prices?.length === 0 ? (\n      <>\n        <Trans>Missing price data due to recently low trading volume on Uniswap v3</Trans>\n      </>\n    ) : (\n      <Trans>Missing chart data</Trans>\n    )\n  ) : null\n\n  // first price point on the x-axis of the current time period's chart\n  const startingPrice = originalPrices?.[0] ?? DATA_EMPTY\n  // last price point on the x-axis of the current time period's chart\n  const endingPrice = originalPrices?.[originalPrices.length - 1] ?? DATA_EMPTY\n  const [displayPrice, setDisplayPrice] = useState(startingPrice)\n\n  // set display price to ending price when prices have changed.\n  useEffect(() => {\n    setDisplayPrice(endingPrice)\n  }, [prices, endingPrice])\n  const [crosshair, setCrosshair] = useState<number | null>(null)\n\n  const graphHeight = height - timeOptionsHeight > 0 ? height - timeOptionsHeight : 0\n  const graphInnerHeight = graphHeight - margin.top - margin.bottom > 0 ? graphHeight - margin.top - margin.bottom : 0\n\n  // Defining scales\n  // x scale\n  const timeScale = useMemo(\n    () => scaleLinear().domain([startingPrice.timestamp, endingPrice.timestamp]).range([0, width]),\n    [startingPrice, endingPrice, width]\n  )\n  // y scale\n  const rdScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(getPriceBounds(originalPrices ?? []))\n        .range([graphInnerHeight, 0]),\n    [originalPrices, graphInnerHeight]\n  )\n\n  function tickFormat(\n    timePeriod: TimePeriod,\n    locale: string\n  ): [TickFormatter<NumberValue>, (v: number) => string, NumberValue[]] {\n    const offsetTime = (endingPrice.timestamp.valueOf() - startingPrice.timestamp.valueOf()) / 24\n    const startDateWithOffset = new Date((startingPrice.timestamp.valueOf() + offsetTime) * 1000)\n    const endDateWithOffset = new Date((endingPrice.timestamp.valueOf() - offsetTime) * 1000)\n    switch (timePeriod) {\n      case TimePeriod.HOUR:\n        return [\n          hourFormatter(locale),\n          dayHourFormatter(locale),\n          (timeMinute.every(5) ?? timeMinute)\n            .range(startDateWithOffset, endDateWithOffset, 2)\n            .map((x) => x.valueOf() / 1000),\n        ]\n      case TimePeriod.DAY:\n        return [\n          hourFormatter(locale),\n          dayHourFormatter(locale),\n          timeHour.range(startDateWithOffset, endDateWithOffset, 4).map((x) => x.valueOf() / 1000),\n        ]\n      case TimePeriod.WEEK:\n        return [\n          weekFormatter(locale),\n          dayHourFormatter(locale),\n          timeDay.range(startDateWithOffset, endDateWithOffset, 1).map((x) => x.valueOf() / 1000),\n        ]\n      case TimePeriod.MONTH:\n        return [\n          monthDayFormatter(locale),\n          dayHourFormatter(locale),\n          timeDay.range(startDateWithOffset, endDateWithOffset, 7).map((x) => x.valueOf() / 1000),\n        ]\n      case TimePeriod.YEAR:\n        return [\n          monthTickFormatter(locale),\n          monthYearDayFormatter(locale),\n          timeMonth.range(startDateWithOffset, endDateWithOffset, 2).map((x) => x.valueOf() / 1000),\n        ]\n    }\n  }\n\n  const handleHover = useCallback(\n    (event: Element | EventType) => {\n      if (!prices) return\n\n      const { x } = localPoint(event) || { x: 0 }\n      const x0 = timeScale.invert(x) // get timestamp from the scalexw\n      const index = bisect(\n        prices.map((x) => x.timestamp),\n        x0,\n        1\n      )\n\n      const d0 = prices[index - 1]\n      const d1 = prices[index]\n      let pricePoint = d0\n\n      const hasPreviousData = d1 && d1.timestamp\n      if (hasPreviousData) {\n        pricePoint = x0.valueOf() - d0.timestamp.valueOf() > d1.timestamp.valueOf() - x0.valueOf() ? d1 : d0\n      }\n\n      if (pricePoint) {\n        setCrosshair(timeScale(pricePoint.timestamp))\n        setDisplayPrice(pricePoint)\n      }\n    },\n    [timeScale, prices]\n  )\n\n  const resetDisplay = useCallback(() => {\n    setCrosshair(null)\n    setDisplayPrice(endingPrice)\n  }, [setCrosshair, setDisplayPrice, endingPrice])\n\n  const [tickFormatter, crosshairDateFormatter, ticks] = tickFormat(timePeriod, locale)\n  const delta = calculateDelta(startingPrice.value, displayPrice.value)\n  const formattedDelta = formatDelta(delta)\n  const arrow = getDeltaArrow(delta)\n  const crosshairEdgeMax = width * 0.85\n  const crosshairAtEdge = !!crosshair && crosshair > crosshairEdgeMax\n\n  /*\n   * Default curve doesn't look good for the HOUR chart.\n   * Higher values make the curve more rigid, lower values smooth the curve but make it less \"sticky\" to real data points,\n   * making it unacceptable for shorter durations / smaller variances.\n   */\n  const curveTension = timePeriod === TimePeriod.HOUR ? 1 : 0.9\n\n  const getX = useMemo(() => (p: PricePoint) => timeScale(p.timestamp), [timeScale])\n  const getY = useMemo(() => (p: PricePoint) => rdScale(p.value), [rdScale])\n  const curve = useMemo(() => curveCardinal.tension(curveTension), [curveTension])\n\n  return (\n    <>\n      <ChartHeader data-cy=\"chart-header\">\n        {displayPrice.value ? (\n          <>\n            <TokenPrice>{formatDollar({ num: displayPrice.value, isPrice: true })}</TokenPrice>\n            <DeltaContainer>\n              {formattedDelta}\n              <ArrowCell>{arrow}</ArrowCell>\n            </DeltaContainer>\n          </>\n        ) : (\n          <>\n            <MissingPrice>Price Unavailable</MissingPrice>\n            <ThemedText.Caption style={{ color: theme.textTertiary }}>{missingPricesMessage}</ThemedText.Caption>\n          </>\n        )}\n      </ChartHeader>\n      {!chartAvailable ? (\n        <MissingPriceChart width={width} height={graphHeight} message={!!displayPrice.value && missingPricesMessage} />\n      ) : (\n        <svg data-cy=\"price-chart\" width={width} height={graphHeight} style={{ minWidth: '100%' }}>\n          <AnimatedInLineChart\n            data={prices}\n            getX={getX}\n            getY={getY}\n            marginTop={margin.top}\n            curve={curve}\n            strokeWidth={2}\n          />\n          {blanks.map((blank, index) => (\n            <FadedInLineChart\n              key={index}\n              data={blank}\n              getX={getX}\n              getY={getY}\n              marginTop={margin.top}\n              curve={curve}\n              strokeWidth={2}\n              color={theme.textTertiary}\n              dashed\n            />\n          ))}\n          {crosshair !== null ? (\n            <g>\n              <AxisBottom\n                scale={timeScale}\n                stroke={theme.backgroundOutline}\n                tickFormat={tickFormatter}\n                tickStroke={theme.backgroundOutline}\n                tickLength={4}\n                hideTicks={true}\n                tickTransform=\"translate(0 -5)\"\n                tickValues={ticks}\n                top={graphHeight - 1}\n                tickLabelProps={() => ({\n                  fill: theme.textSecondary,\n                  fontSize: 12,\n                  textAnchor: 'middle',\n                  transform: 'translate(0 -24)',\n                })}\n              />\n              <text\n                x={crosshair + (crosshairAtEdge ? -4 : 4)}\n                y={margin.crosshair + 10}\n                textAnchor={crosshairAtEdge ? 'end' : 'start'}\n                fontSize={12}\n                fill={theme.textSecondary}\n              >\n                {crosshairDateFormatter(displayPrice.timestamp)}\n              </text>\n              <Line\n                from={{ x: crosshair, y: margin.crosshair }}\n                to={{ x: crosshair, y: graphHeight }}\n                stroke={theme.backgroundOutline}\n                strokeWidth={1}\n                pointerEvents=\"none\"\n                strokeDasharray=\"4,4\"\n              />\n              <GlyphCircle\n                left={crosshair}\n                top={rdScale(displayPrice.value) + margin.top}\n                size={50}\n                fill={theme.accentAction}\n                stroke={theme.backgroundOutline}\n                strokeWidth={0.5}\n              />\n            </g>\n          ) : (\n            <AxisBottom\n              hideAxisLine={true}\n              scale={timeScale}\n              stroke={theme.backgroundOutline}\n              top={graphHeight - 1}\n              hideTicks\n            />\n          )}\n          {!width && (\n            // Ensures an axis is drawn even if the width is not yet initialized.\n            <line\n              x1={0}\n              y1={graphHeight - 1}\n              x2=\"100%\"\n              y2={graphHeight - 1}\n              fill=\"transparent\"\n              shapeRendering=\"crispEdges\"\n              stroke={theme.backgroundOutline}\n              strokeWidth={1}\n            />\n          )}\n          <rect\n            x={0}\n            y={0}\n            width={width}\n            height={graphHeight}\n            fill=\"transparent\"\n            onTouchStart={handleHover}\n            onTouchMove={handleHover}\n            onMouseMove={handleHover}\n            onMouseLeave={resetDisplay}\n          />\n        </svg>\n      )}\n    </>\n  )\n}\n\nconst StyledMissingChart = styled.svg`\n  text {\n    font-size: 12px;\n    font-weight: 400;\n  }\n`\nconst chartBottomPadding = 15\nfunction MissingPriceChart({ width, height, message }: { width: number; height: number; message: ReactNode }) {\n  const theme = useTheme()\n  const midPoint = height / 2 + 45\n  return (\n    <StyledMissingChart data-cy=\"missing-chart\" width={width} height={height} style={{ minWidth: '100%' }}>\n      <path\n        d={`M 0 ${midPoint} Q 104 ${midPoint - 70}, 208 ${midPoint} T 416 ${midPoint}\n          M 416 ${midPoint} Q 520 ${midPoint - 70}, 624 ${midPoint} T 832 ${midPoint}`}\n        stroke={theme.backgroundOutline}\n        fill=\"transparent\"\n        strokeWidth=\"2\"\n      />\n      {message && <TrendingUp stroke={theme.textTertiary} x={0} size={12} y={height - chartBottomPadding - 10} />}\n      <text y={height - chartBottomPadding} x=\"20\" fill={theme.textTertiary}>\n        {message}\n      </text>\n    </StyledMissingChart>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useTraitsOpen.ts",["3577","3578"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface traitOpen {\n  [key: number]: boolean\n}\n\ninterface TraitsOpenState {\n  traitsOpen: traitOpen\n  setTraitsOpen: (index: number, isOpen: boolean) => void\n}\n\nexport enum TraitPosition {\n  MARKPLACE_INDEX = 0,\n  PRICE_RANGE_INDEX = 1,\n  TRAIT_START_INDEX = 2,\n}\n\nexport const useTraitsOpen = create<TraitsOpenState>()(\n  devtools(\n    (set) => ({\n      traitsOpen: {},\n      setTraitsOpen: (index, isOpen) => {\n        set(({ traitsOpen }) => ({ traitsOpen: { ...traitsOpen, [index]: isOpen } }))\n      },\n    }),\n    { name: 'useTraitsOpen' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/components/bag/MobileHoverBag.css.ts",[],"/workspace/Physica-Interfae/src/nft/css/common.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionAssetLoading.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionStats.css.ts",[],"/workspace/Physica-Interfae/src/nft/css/loading.css.ts",[],"/workspace/Physica-Interfae/src/nft/css/sprinkles.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/ActivitySwitcher.css.ts",[],"/workspace/Physica-Interfae/src/nft/pages/collection/index.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/explore/Explore.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/layout/Checkbox.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionSearch.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/explore/Cells/Cells.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/ActivityLoader.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/Filters.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/Activity.css.ts",[],"/workspace/Physica-Interfae/src/components/Tooltip/index.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/FilterButton.css.ts",[],"/workspace/Physica-Interfae/src/state/routing/utils.ts",["3579","3580","3581","3582","3583"],"import { MixedRouteSDK, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { FeeAmount, Pool, Route as V3Route } from '@uniswap/v3-sdk'\n\nimport { GetQuoteResult, InterfaceTrade, V2PoolInRoute, V3PoolInRoute } from './types'\n\n/**\n * Transforms a Routing API quote into an array of routes that can be used to create\n * a `Trade`.\n */\nexport function computeRoutes(\n  currencyIn: Currency | undefined,\n  currencyOut: Currency | undefined,\n  tradeType: TradeType,\n  quoteResult: Pick<GetQuoteResult, 'route'> | undefined\n) {\n  if (!quoteResult || !quoteResult.route || !currencyIn || !currencyOut) return undefined\n\n  if (quoteResult.route.length === 0) return []\n\n  const parsedTokenIn = parseToken(quoteResult.route[0][0].tokenIn)\n  const parsedTokenOut = parseToken(quoteResult.route[0][quoteResult.route[0].length - 1].tokenOut)\n  if (parsedTokenIn.address !== currencyIn.wrapped.address) return undefined\n  if (parsedTokenOut.address !== currencyOut.wrapped.address) return undefined\n  if (parsedTokenIn.wrapped.equals(parsedTokenOut.wrapped)) return undefined\n\n  try {\n    return quoteResult.route.map((route) => {\n      if (route.length === 0) {\n        throw new Error('Expected route to have at least one pair or pool')\n      }\n      const rawAmountIn = route[0].amountIn\n      const rawAmountOut = route[route.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both amountIn and amountOut to be present')\n      }\n\n      const routeProtocol = getRouteProtocol(route)\n\n      return {\n        routev3:\n          routeProtocol === Protocol.V3\n            ? new V3Route(route.map(genericPoolPairParser) as Pool[], currencyIn, currencyOut)\n            : null,\n        routev2:\n          routeProtocol === Protocol.V2\n            ? new V2Route(route.map(genericPoolPairParser) as Pair[], currencyIn, currencyOut)\n            : null,\n        mixedRoute:\n          routeProtocol === Protocol.MIXED\n            ? new MixedRouteSDK(route.map(genericPoolPairParser), currencyIn, currencyOut)\n            : null,\n        inputAmount: CurrencyAmount.fromRawAmount(currencyIn, rawAmountIn),\n        outputAmount: CurrencyAmount.fromRawAmount(currencyOut, rawAmountOut),\n      }\n    })\n  } catch (e) {\n    // `Route` constructor may throw if inputs/outputs are temporarily out of sync\n    // (RTK-Query always returns the latest data which may not be the right inputs/outputs)\n    // This is not fatal and will fix itself in future render cycles\n    console.error(e)\n    return undefined\n  }\n}\n\nexport function transformRoutesToTrade<TTradeType extends TradeType>(\n  route: ReturnType<typeof computeRoutes>,\n  tradeType: TTradeType,\n  blockNumber?: string | null,\n  gasUseEstimateUSD?: CurrencyAmount<Token> | null\n): InterfaceTrade<Currency, Currency, TTradeType> {\n  return new InterfaceTrade({\n    v2Routes:\n      route\n        ?.filter((r): r is typeof route[0] & { routev2: NonNullable<typeof route[0]['routev2']> } => r.routev2 !== null)\n        .map(({ routev2, inputAmount, outputAmount }) => ({ routev2, inputAmount, outputAmount })) ?? [],\n    v3Routes:\n      route\n        ?.filter((r): r is typeof route[0] & { routev3: NonNullable<typeof route[0]['routev3']> } => r.routev3 !== null)\n        .map(({ routev3, inputAmount, outputAmount }) => ({ routev3, inputAmount, outputAmount })) ?? [],\n    mixedRoutes:\n      route\n        ?.filter(\n          (r): r is typeof route[0] & { mixedRoute: NonNullable<typeof route[0]['mixedRoute']> } =>\n            r.mixedRoute !== null\n        )\n        .map(({ mixedRoute, inputAmount, outputAmount }) => ({ mixedRoute, inputAmount, outputAmount })) ?? [],\n    tradeType,\n    gasUseEstimateUSD,\n    blockNumber,\n  })\n}\n\nconst parseToken = ({ address, chainId, decimals, symbol }: GetQuoteResult['route'][0][0]['tokenIn']): Token => {\n  return new Token(chainId, address, parseInt(decimals.toString()), symbol)\n}\n\nconst parsePool = ({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool =>\n  new Pool(\n    parseToken(tokenIn),\n    parseToken(tokenOut),\n    parseInt(fee) as FeeAmount,\n    sqrtRatioX96,\n    liquidity,\n    parseInt(tickCurrent)\n  )\n\nconst parsePair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair =>\n  new Pair(\n    CurrencyAmount.fromRawAmount(parseToken(reserve0.token), reserve0.quotient),\n    CurrencyAmount.fromRawAmount(parseToken(reserve1.token), reserve1.quotient)\n  )\n\nconst genericPoolPairParser = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n  return pool.type === 'v3-pool' ? parsePool(pool) : parsePair(pool)\n}\n\nfunction getRouteProtocol(route: (V3PoolInRoute | V2PoolInRoute)[]): Protocol {\n  if (route.every((pool) => pool.type === 'v2-pool')) return Protocol.V2\n  if (route.every((pool) => pool.type === 'v3-pool')) return Protocol.V3\n  return Protocol.MIXED\n}\n","/workspace/Physica-Interfae/src/state/routing/types.ts",["3584"],"import { MixedRouteSDK, Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { Route as V2Route } from '@uniswap/v2-sdk'\nimport { Route as V3Route } from '@uniswap/v3-sdk'\n\nexport enum TradeState {\n  LOADING,\n  INVALID,\n  NO_ROUTE_FOUND,\n  VALID,\n  SYNCING,\n}\n\n// from https://github.com/Uniswap/routing-api/blob/main/lib/handlers/schema.ts\n\ntype TokenInRoute = Pick<Token, 'address' | 'chainId' | 'symbol' | 'decimals'>\n\nexport type V3PoolInRoute = {\n  type: 'v3-pool'\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n\n  // not used in the interface\n  address?: string\n}\n\ntype V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: 'v2-pool'\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n\n  // not used in the interface\n  // avoid returning it from the client-side smart-order-router\n  address?: string\n}\n\nexport interface GetQuoteResult {\n  quoteId?: string\n  blockNumber: string\n  amount: string\n  amountDecimals: string\n  gasPriceWei: string\n  gasUseEstimate: string\n  gasUseEstimateQuote: string\n  gasUseEstimateQuoteDecimals: string\n  gasUseEstimateUSD: string\n  methodParameters?: { calldata: string; value: string }\n  quote: string\n  quoteDecimals: string\n  quoteGasAdjusted: string\n  quoteGasAdjustedDecimals: string\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n  routeString: string\n}\n\nexport class InterfaceTrade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n> extends Trade<TInput, TOutput, TTradeType> {\n  gasUseEstimateUSD: CurrencyAmount<Token> | null | undefined\n  blockNumber: string | null | undefined\n\n  constructor({\n    gasUseEstimateUSD,\n    blockNumber,\n    ...routes\n  }: {\n    gasUseEstimateUSD?: CurrencyAmount<Token> | undefined | null\n    blockNumber?: string | null | undefined\n    v2Routes: {\n      routev2: V2Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    v3Routes: {\n      routev3: V3Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n    mixedRoutes?: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n  }) {\n    super(routes)\n    this.blockNumber = blockNumber\n    this.gasUseEstimateUSD = gasUseEstimateUSD\n  }\n}\n","/workspace/Physica-Interfae/src/utils/formatNumbers.ts",[],"/workspace/Physica-Interfae/src/utils/formatChartTimes.ts",[],"/workspace/Physica-Interfae/src/components/Charts/FadeInLineChart.tsx",[],"/workspace/Physica-Interfae/src/components/Charts/AnimatedInLineChart.tsx",[],"/workspace/Physica-Interfae/src/lib/hooks/routing/useRoutingAPIArguments.ts",["3585"],"import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { RouterPreference } from 'state/routing/slice'\n\n/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped. Input arguments do not need to be memoized, as they will\n * be destructured.\n */\nexport function useRoutingAPIArguments({\n  tokenIn,\n  tokenOut,\n  amount,\n  tradeType,\n  routerPreference,\n}: {\n  tokenIn: Currency | undefined\n  tokenOut: Currency | undefined\n  amount: CurrencyAmount<Currency> | undefined\n  tradeType: TradeType\n  routerPreference: RouterPreference\n}) {\n  return useMemo(\n    () =>\n      !tokenIn || !tokenOut || !amount || tokenIn.equals(tokenOut) || tokenIn.wrapped.equals(tokenOut.wrapped)\n        ? undefined\n        : {\n            amount: amount.quotient.toString(),\n            tokenInAddress: tokenIn.wrapped.address,\n            tokenInChainId: tokenIn.wrapped.chainId,\n            tokenInDecimals: tokenIn.wrapped.decimals,\n            tokenInSymbol: tokenIn.wrapped.symbol,\n            tokenOutAddress: tokenOut.wrapped.address,\n            tokenOutChainId: tokenOut.wrapped.chainId,\n            tokenOutDecimals: tokenOut.wrapped.decimals,\n            tokenOutSymbol: tokenOut.wrapped.symbol,\n            routerPreference,\n            type: (tradeType === TradeType.EXACT_INPUT ? 'exactIn' : 'exactOut') as 'exactIn' | 'exactOut',\n          },\n    [amount, routerPreference, tokenIn, tokenOut, tradeType]\n  )\n}\n","/workspace/Physica-Interfae/src/utils/noop.ts",[],"/workspace/Physica-Interfae/src/components/Popover/index.tsx",["3586"],"import { Options, Placement } from '@popperjs/core'\nimport Portal from '@reach/portal'\nimport useInterval from 'lib/hooks/useInterval'\nimport React, { CSSProperties, useCallback, useMemo, useState } from 'react'\nimport { usePopper } from 'react-popper'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst PopoverContainer = styled.div<{ show: boolean }>`\n  z-index: ${Z_INDEX.popover};\n  pointer-events: none;\n  visibility: ${(props) => (props.show ? 'visible' : 'hidden')};\n  opacity: ${(props) => (props.show ? 1 : 0)};\n  transition: visibility 150ms linear, opacity 150ms linear;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n  height: inherit;\n`\n\nconst Arrow = styled.div`\n  width: 8px;\n  height: 8px;\n  z-index: 9998;\n\n  ::before {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    box-sizing: border-box;\n    z-index: 9998;\n\n    content: '';\n    border: 1px solid ${({ theme }) => theme.backgroundInteractive};\n    transform: rotate(45deg);\n    background: ${({ theme }) => theme.backgroundSurface};\n  }\n\n  &.arrow-top {\n    bottom: -4px;\n    ::before {\n      border-top: none;\n      border-left: none;\n    }\n  }\n\n  &.arrow-bottom {\n    top: -4px;\n    ::before {\n      border-bottom: none;\n      border-right: none;\n    }\n  }\n\n  &.arrow-left {\n    right: -4px;\n\n    ::before {\n      border-bottom: none;\n      border-left: none;\n    }\n  }\n\n  &.arrow-right {\n    left: -4px;\n    ::before {\n      border-right: none;\n      border-top: none;\n    }\n  }\n`\n\nexport interface PopoverProps {\n  content: React.ReactNode\n  show: boolean\n  children?: React.ReactNode\n  placement?: Placement\n  offsetX?: number\n  offsetY?: number\n  hideArrow?: boolean\n  showInline?: boolean\n  style?: CSSProperties\n}\n\nexport default function Popover({\n  content,\n  show,\n  children,\n  placement = 'auto',\n  offsetX = 8,\n  offsetY = 8,\n  hideArrow = false,\n  showInline = false,\n  style,\n}: PopoverProps) {\n  const [referenceElement, setReferenceElement] = useState<HTMLDivElement | null>(null)\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\n  const [arrowElement, setArrowElement] = useState<HTMLDivElement | null>(null)\n\n  const options = useMemo(\n    (): Options => ({\n      placement,\n      strategy: 'fixed',\n      modifiers: [\n        { name: 'offset', options: { offset: [offsetX, offsetY] } },\n        { name: 'arrow', options: { element: arrowElement } },\n        { name: 'preventOverflow', options: { padding: 8 } },\n      ],\n    }),\n    [arrowElement, offsetX, offsetY, placement]\n  )\n\n  const { styles, update, attributes } = usePopper(referenceElement, popperElement, options)\n\n  const updateCallback = useCallback(() => {\n    update && update()\n  }, [update])\n  useInterval(updateCallback, show ? 100 : null)\n\n  return showInline ? (\n    <PopoverContainer show={show}>{content}</PopoverContainer>\n  ) : (\n    <>\n      <ReferenceElement style={style} ref={setReferenceElement as any}>\n        {children}\n      </ReferenceElement>\n      <Portal>\n        <PopoverContainer show={show} ref={setPopperElement as any} style={styles.popper} {...attributes.popper}>\n          {content}\n          {!hideArrow && (\n            <Arrow\n              className={`arrow-${attributes.popper?.['data-popper-placement'] ?? ''}`}\n              ref={setArrowElement as any}\n              style={styles.arrow}\n              {...attributes.arrow}\n            />\n          )}\n        </PopoverContainer>\n      </Portal>\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/index.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/PriceRange.tsx",[],"/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/SortDropdown.tsx",["3587"],"import clsx from 'clsx'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport { ArrowsIcon, ChevronUpIcon, ReversedArrowsIcon } from 'nft/components/icons'\nimport { buttonTextMedium } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useCollectionFilters, useIsCollectionLoading } from 'nft/hooks'\nimport { DropDownOption } from 'nft/types'\nimport { useEffect, useLayoutEffect, useMemo, useReducer, useRef, useState } from 'react'\n\nimport * as styles from './SortDropdown.css'\n\nexport const SortDropdown = ({\n  dropDownOptions,\n  inFilters,\n  mini,\n  miniPrompt,\n  top,\n  left,\n}: {\n  dropDownOptions: DropDownOption[]\n  inFilters?: boolean\n  mini?: boolean\n  miniPrompt?: string\n  top?: number\n  left?: number\n}) => {\n  const sortBy = useCollectionFilters((state) => state.sortBy)\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const [isReversed, toggleReversed] = useReducer((s) => !s, false)\n  const [selectedIndex, setSelectedIndex] = useState(sortBy)\n  const isCollectionStatsLoading = useIsCollectionLoading((state) => state.isCollectionStatsLoading)\n\n  const [maxWidth, setMaxWidth] = useState(0)\n\n  useEffect(() => {\n    setSelectedIndex(sortBy)\n  }, [sortBy])\n\n  const ref = useRef<HTMLDivElement>(null)\n  useOnClickOutside(ref, () => isOpen && toggleOpen())\n\n  useEffect(() => setMaxWidth(0), [dropDownOptions])\n\n  const reversable = useMemo(\n    () => dropDownOptions[selectedIndex].reverseOnClick || dropDownOptions[selectedIndex].reverseIndex,\n    [selectedIndex, dropDownOptions]\n  )\n\n  const width = isCollectionStatsLoading ? 220 : inFilters ? 'full' : mini ? 'min' : maxWidth ? maxWidth : '300px'\n\n  return (\n    <Box\n      ref={ref}\n      borderRadius=\"12\"\n      borderBottomLeftRadius={isOpen ? '0' : undefined}\n      borderBottomRightRadius={isOpen ? '0' : undefined}\n      style={{ width }}\n    >\n      <Box\n        as=\"button\"\n        fontSize=\"14\"\n        borderRadius=\"12\"\n        borderStyle={isOpen && !mini ? 'solid' : 'none'}\n        background={mini ? 'none' : 'backgroundInteractive'}\n        borderColor=\"backgroundOutline\"\n        borderWidth=\"1px\"\n        borderBottomLeftRadius={isOpen ? '0' : undefined}\n        borderBottomRightRadius={isOpen ? '0' : undefined}\n        padding={inFilters ? '12' : mini ? '0' : '8'}\n        color=\"textPrimary\"\n        whiteSpace=\"nowrap\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        width={inFilters ? 'full' : 'inherit'}\n        onClick={toggleOpen}\n        cursor=\"pointer\"\n        className={isCollectionStatsLoading ? styles.isLoadingDropdown : clsx(isOpen && !mini && styles.activeDropdown)}\n      >\n        {!isCollectionStatsLoading && (\n          <>\n            <Box display=\"flex\" alignItems=\"center\" color=\"textPrimary\">\n              {!isOpen && reversable && (\n                <Row\n                  onClick={(e) => {\n                    e.stopPropagation()\n\n                    if (dropDownOptions[selectedIndex].reverseOnClick) {\n                      dropDownOptions[selectedIndex].reverseOnClick?.()\n                      toggleReversed()\n                    } else {\n                      const dropdownIndex = dropDownOptions[selectedIndex].reverseIndex ?? 1\n                      dropDownOptions[dropdownIndex - 1].onClick()\n                      setSelectedIndex(dropdownIndex - 1)\n                    }\n                  }}\n                >\n                  {dropDownOptions[selectedIndex].reverseOnClick &&\n                    (isReversed ? <ArrowsIcon /> : <ReversedArrowsIcon />)}\n                  {dropDownOptions[selectedIndex].reverseIndex &&\n                    (selectedIndex > (dropDownOptions[selectedIndex].reverseIndex ?? 1) - 1 ? (\n                      <ArrowsIcon />\n                    ) : (\n                      <ReversedArrowsIcon />\n                    ))}\n                </Row>\n              )}\n\n              <Box\n                marginLeft={reversable ? '4' : '0'}\n                marginRight={mini ? '2' : '0'}\n                color=\"textPrimary\"\n                className={buttonTextMedium}\n              >\n                {mini ? miniPrompt : isOpen ? 'Sort by' : dropDownOptions[selectedIndex].displayText}\n              </Box>\n            </Box>\n            <ChevronUpIcon\n              secondaryColor={mini ? themeVars.colors.textPrimary : undefined}\n              secondaryWidth={mini ? '20' : undefined}\n              secondaryHeight={mini ? '20' : undefined}\n              style={{\n                transform: isOpen ? '' : 'rotate(180deg)',\n              }}\n            />\n          </>\n        )}\n      </Box>\n      <Box\n        position=\"absolute\"\n        zIndex=\"3\"\n        width={inFilters ? 'auto' : 'inherit'}\n        right={inFilters ? '16' : 'auto'}\n        paddingBottom=\"8\"\n        fontSize=\"14\"\n        background=\"backgroundModule\"\n        borderStyle=\"solid\"\n        borderColor=\"backgroundOutline\"\n        borderWidth=\"1px\"\n        borderRadius=\"8\"\n        borderTopLeftRadius={mini ? undefined : '0'}\n        borderTopRightRadius={mini ? undefined : '0'}\n        overflowY=\"hidden\"\n        transition=\"250\"\n        display={isOpen || !maxWidth ? 'block' : 'none'}\n        visibility={maxWidth ? 'visible' : 'hidden'}\n        marginTop={mini ? '12' : '0'}\n        className={clsx(!mini && styles.activeDropDownItems)}\n        style={{\n          top: top ? `${top}px` : 'inherit',\n          left: inFilters ? '16px' : left ? `${left}px` : 'inherit',\n        }}\n      >\n        {!maxWidth\n          ? [\n              dropDownOptions.reduce((acc, curr) => {\n                return curr.displayText.length >= acc.displayText.length ? curr : acc\n              }, dropDownOptions[0]),\n            ].map((option, index) => {\n              return <LargestItem key={index} option={option} index={index} setMaxWidth={setMaxWidth} />\n            })\n          : isOpen &&\n            dropDownOptions.map((option, index) => {\n              return (\n                <DropDownItem\n                  key={index}\n                  option={option}\n                  index={index}\n                  mini={mini}\n                  onClick={() => {\n                    dropDownOptions[index].onClick()\n                    setSelectedIndex(index)\n                    toggleOpen()\n                    isReversed && toggleReversed()\n                  }}\n                />\n              )\n            })}\n      </Box>\n    </Box>\n  )\n}\n\nconst DropDownItem = ({\n  option,\n  index,\n  onClick,\n  mini,\n}: {\n  option: DropDownOption\n  index: number\n  onClick?: () => void\n  mini?: boolean\n}) => {\n  return (\n    <Box\n      as=\"button\"\n      border=\"none\"\n      key={index}\n      display=\"flex\"\n      alignItems=\"center\"\n      paddingTop=\"10\"\n      paddingBottom=\"10\"\n      paddingLeft=\"12\"\n      paddingRight={mini ? '20' : '0'}\n      width=\"full\"\n      background={{\n        default: 'backgroundModule',\n        hover: 'backgroundInteractive',\n      }}\n      color=\"textPrimary\"\n      onClick={onClick}\n      cursor=\"pointer\"\n    >\n      <Box marginLeft=\"8\" className={buttonTextMedium}>\n        {option.displayText}\n      </Box>\n    </Box>\n  )\n}\n\nconst MAX_PADDING = 52\n\nconst LargestItem = ({\n  option,\n  index,\n  setMaxWidth,\n}: {\n  option: DropDownOption\n  index: number\n  setMaxWidth: (width: number) => void\n}) => {\n  const maxWidthRef = useRef<HTMLDivElement>(null)\n\n  useLayoutEffect(() => {\n    if (maxWidthRef && maxWidthRef.current) {\n      setMaxWidth(Math.ceil(maxWidthRef.current.getBoundingClientRect().width) + MAX_PADDING)\n    }\n  })\n\n  return (\n    <Box key={index} position=\"absolute\" ref={maxWidthRef}>\n      <DropDownItem option={option} index={index} />\n    </Box>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/FilterSortDropdown.tsx",[],"/workspace/Physica-Interfae/src/nft/components/collection/PriceRange.css.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/usePriceRange.ts",["3588","3589"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface PriceRangeProps {\n  priceRangeLow: string\n  setPriceRangeLow: (priceRangeLow: string) => void\n  priceRangeHigh: string\n  setPriceRangeHigh: (priceRangeHigh: string) => void\n  prevMinMax: Array<number>\n  setPrevMinMax: (prevMinMax: Array<number>) => void\n}\n\nexport const usePriceRange = create<PriceRangeProps>()(\n  devtools(\n    (set) => ({\n      priceRangeLow: '',\n      setPriceRangeLow: (priceRangeLow: string) => {\n        set(() => {\n          return { priceRangeLow }\n        })\n      },\n      priceRangeHigh: '',\n      setPriceRangeHigh: (priceRangeHigh: string) => {\n        set(() => {\n          return { priceRangeHigh }\n        })\n      },\n      prevMinMax: [0, 100],\n      setPrevMinMax: (prevMinMax: Array<number>) => {\n        set(() => {\n          return { prevMinMax }\n        })\n      },\n    }),\n    { name: 'usePriceRange' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/utils/timeSince.ts",[],"/workspace/Physica-Interfae/src/nft/utils/pooledAssets.ts",["3590","3591","3592","3593","3594"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { BagItem, BagItemStatus, GenieAsset, isPooledMarket, Markets } from 'nft/types'\nimport { isInSameMarketplaceCollection, isInSameSudoSwapPool } from 'nft/utils'\n\nconst PRECISION = '1000000000000000000'\nconst PROTOCOL_FEE_MULTIPLIER = BigNumber.from('5000000000000000')\n\nenum BondingCurve {\n  Linear = 'LINEAR',\n  Exponential = 'EXPONENTIAL',\n  Xyk = 'XYK',\n}\n\ninterface Pool {\n  delta?: string\n  spotPrice?: string\n  fee?: string\n  bondingCurve?: BondingCurve\n}\n\nconst getPoolParameters = (protocolParameters: Record<string, unknown>): Pool => {\n  return {\n    delta: protocolParameters?.delta ? (protocolParameters.delta as string) : undefined,\n    fee: protocolParameters?.ammFeeFixed ? (protocolParameters.ammFeeFixed as string) : undefined,\n    spotPrice: (protocolParameters as Record<string, { spotPrice?: string }>)?.poolMetadata?.spotPrice,\n    bondingCurve: (protocolParameters as Record<string, { bondingCurve?: BondingCurve }>)?.poolMetadata?.bondingCurve,\n  }\n}\n\nconst calculateScaledPrice = (currentPrice: BigNumber, poolFee: BigNumber): BigNumber => {\n  const protocolFee = currentPrice.mul(PROTOCOL_FEE_MULTIPLIER).div(BigNumber.from(PRECISION))\n  const tradeFee = currentPrice.mul(poolFee).div(BigNumber.from(PRECISION))\n  return currentPrice.add(protocolFee).add(tradeFee)\n}\n\nconst calcSudoSwapLinearBondingCurve = (currentPrice: BigNumber, delta: BigNumber, position = 0): BigNumber => {\n  for (let i = 0; i <= position; i++) {\n    currentPrice = currentPrice.add(delta)\n  }\n\n  return currentPrice\n}\n\nconst calcSudoSwapExponentialBondingCurve = (currentPrice: BigNumber, delta: BigNumber, position = 0): BigNumber => {\n  for (let i = 0; i <= position; i++) {\n    currentPrice = currentPrice.mul(delta).div(BigNumber.from(PRECISION))\n  }\n\n  return currentPrice\n}\n\nconst calcSudoSwapXykBondingCurve = (\n  currentPrice: BigNumber,\n  sudoSwapPool: Pool,\n  position = 0\n): BigNumber | undefined => {\n  let virtualTokenBalance = BigNumber.from(sudoSwapPool.spotPrice)\n  let virtualNFTBalance = BigNumber.from(sudoSwapPool.delta)\n\n  if (virtualNFTBalance.sub(BigNumber.from(1)).gt(BigNumber.from(0))) {\n    currentPrice = virtualTokenBalance.div(virtualNFTBalance.sub(BigNumber.from(1)))\n  } else {\n    return undefined\n  }\n\n  for (let i = 1; i <= position; i++) {\n    virtualTokenBalance = virtualTokenBalance.add(currentPrice)\n    virtualNFTBalance = virtualNFTBalance.sub(BigNumber.from(1))\n\n    if (!virtualNFTBalance.sub(BigNumber.from(1)).isZero()) {\n      currentPrice = virtualTokenBalance.div(virtualNFTBalance.sub(BigNumber.from(1)))\n    } else {\n      return undefined\n    }\n  }\n\n  return currentPrice\n}\n\nexport const calcSudoSwapPrice = (asset: GenieAsset, position = 0): string | undefined => {\n  if (!asset.sellorders) return undefined\n\n  const sudoSwapParameters = asset.sellorders[0].protocolParameters\n  const sudoSwapPool = getPoolParameters(sudoSwapParameters)\n\n  if (!sudoSwapPool.fee || !sudoSwapPool.delta || !sudoSwapPool.spotPrice || !sudoSwapPool.bondingCurve)\n    return undefined\n\n  let currentPrice = BigNumber.from(sudoSwapPool.spotPrice)\n  const delta = BigNumber.from(sudoSwapPool.delta)\n  const poolFee = BigNumber.from(sudoSwapPool.fee)\n\n  if (sudoSwapPool.bondingCurve === BondingCurve.Linear) {\n    currentPrice = calcSudoSwapLinearBondingCurve(currentPrice, delta, position)\n  } else if (sudoSwapPool.bondingCurve === BondingCurve.Exponential) {\n    currentPrice = calcSudoSwapExponentialBondingCurve(currentPrice, delta, position)\n  } else if (sudoSwapPool.bondingCurve === BondingCurve.Xyk) {\n    const xykCurrentPrice = calcSudoSwapXykBondingCurve(currentPrice, sudoSwapPool, position)\n    if (xykCurrentPrice) {\n      currentPrice = xykCurrentPrice\n    } else {\n      return undefined\n    }\n  } else {\n    return undefined\n  }\n\n  return calculateScaledPrice(currentPrice, poolFee).toString()\n}\n\nconst calcAmmBasedPoolprice = (asset: GenieAsset, position = 0): string => {\n  if (!asset.sellorders) return ''\n\n  let amountToBuy: BigNumber = BigNumber.from(0)\n  let marginalBuy: BigNumber = BigNumber.from(0)\n\n  const nft = asset.sellorders[0].protocolParameters\n  const decimals = BigNumber.from(1).mul(10).pow(18)\n  const ammFee = nft?.ammFeePercent ? (100 + (nft.ammFeePercent as number)) * 100 : 110 * 100\n\n  if (asset.marketplace === Markets.NFTX) {\n    const sixteenmul = BigNumber.from(1).mul(10).pow(16)\n    amountToBuy = BigNumber.from(ammFee)\n      .div(100)\n      .mul(position + 1)\n    amountToBuy = amountToBuy.mul(sixteenmul)\n\n    marginalBuy = BigNumber.from(ammFee).div(100).mul(position)\n    marginalBuy = marginalBuy.mul(sixteenmul)\n  }\n  if (asset.marketplace === Markets.NFT20) {\n    amountToBuy = BigNumber.from(100).mul(position + 1)\n    amountToBuy = amountToBuy.mul(decimals)\n\n    marginalBuy = BigNumber.from(100).mul(position)\n    marginalBuy = marginalBuy.mul(decimals)\n  }\n\n  const ethReserves = BigNumber.from(\n    (\n      nft as Record<\n        string,\n        {\n          ethReserves: number\n        }\n      >\n    )?.poolMetadata?.ethReserves?.toLocaleString('fullwide', { useGrouping: false }) ?? 1\n  )\n  const tokenReserves = BigNumber.from(\n    (\n      nft as Record<\n        string,\n        {\n          tokenReserves: number\n        }\n      >\n    )?.poolMetadata?.tokenReserves?.toLocaleString('fullwide', { useGrouping: false }) ?? 1\n  )\n  const numerator = ethReserves.mul(amountToBuy).mul(1000)\n  const denominator = tokenReserves.sub(amountToBuy).mul(997)\n\n  const marginalnumerator = ethReserves.mul(marginalBuy).mul(1000)\n  const marginaldenominator = tokenReserves.sub(marginalBuy).mul(997)\n\n  let price = numerator.div(denominator)\n  const marginalprice = marginalnumerator.div(marginaldenominator)\n\n  price = price.sub(marginalprice)\n  price = price.mul(101).div(100)\n\n  return price.toString()\n}\n\nexport const calcPoolPrice = (asset: GenieAsset, position = 0): string => {\n  if (!asset.sellorders) return ''\n  if (asset.marketplace === Markets.Sudoswap) return calcSudoSwapPrice(asset, position) ?? '0'\n  return calcAmmBasedPoolprice(asset, position)\n}\n\nexport const calcAvgGroupPoolPrice = (asset: GenieAsset, numberOfAssets: number) => {\n  let total = BigNumber.from(0)\n\n  for (let i = 0; i < numberOfAssets; i++) {\n    if (asset.marketplace === Markets.Sudoswap) {\n      total = total.add(BigNumber.from(calcSudoSwapPrice(asset, i) ?? '0'))\n    } else {\n      total = total.add(BigNumber.from(calcPoolPrice(asset, i)))\n    }\n  }\n\n  return total.div(numberOfAssets).toString()\n}\n\nconst recalculatePooledAssetPrice = (asset: GenieAsset, position: number): string => {\n  return asset.marketplace === Markets.Sudoswap\n    ? calcSudoSwapPrice(asset, position) ?? ''\n    : calcPoolPrice(asset, position)\n}\n\nexport const recalculateBagUsingPooledAssets = (uncheckedItemsInBag: BagItem[]) => {\n  if (\n    !uncheckedItemsInBag.some((item) => item.asset.marketplace && isPooledMarket(item.asset.marketplace)) ||\n    uncheckedItemsInBag.every(\n      (item) => item.status === BagItemStatus.REVIEWED || item.status === BagItemStatus.REVIEWING_PRICE_CHANGE\n    )\n  )\n    return uncheckedItemsInBag\n\n  const itemsInBag = [...uncheckedItemsInBag]\n  itemsInBag.forEach((item) => {\n    if (item.asset.marketplace)\n      if (isPooledMarket(item.asset.marketplace)) {\n        const asset = item.asset\n        const isPriceChangedAsset = !!asset.updatedPriceInfo\n\n        const itemsInPool =\n          asset.marketplace === Markets.Sudoswap\n            ? itemsInBag.filter((bagItem) => isInSameSudoSwapPool(item.asset, bagItem.asset))\n            : itemsInBag.filter((bagItem) => isInSameMarketplaceCollection(item.asset, bagItem.asset))\n        const calculatedPrice = isPriceChangedAsset\n          ? calcAvgGroupPoolPrice(asset, itemsInPool.length)\n          : recalculatePooledAssetPrice(\n              asset,\n              itemsInPool.findIndex((itemInPool) => itemInPool.asset.tokenId === asset.tokenId)\n            )\n\n        if (isPriceChangedAsset && item.asset.updatedPriceInfo)\n          item.asset.updatedPriceInfo.ETHPrice = item.asset.updatedPriceInfo.basePrice = calculatedPrice\n        else item.asset.priceInfo.ETHPrice = calculatedPrice\n      }\n  })\n\n  return itemsInBag\n}\n","/workspace/Physica-Interfae/src/nft/utils/listNfts.ts",["3595","3596","3597","3598","3599","3600"],"import { Signer } from '@ethersproject/abstract-signer'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { parseEther } from '@ethersproject/units'\nimport { addressesByNetwork, MakerOrder, signMakerOrder, SupportedChainId } from '@looksrare/sdk'\nimport { Seaport } from '@opensea/seaport-js'\nimport { ItemType } from '@opensea/seaport-js/lib/constants'\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\nimport { ZERO_ADDRESS } from 'constants/misc'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport {\n  OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\n  OPENSEA_FEE_ADDRESS,\n  OPENSEA_KEY_TO_CONDUIT,\n  OPENSEA_SEAPORT_V1_4_CONTRACT,\n} from 'nft/queries/openSea'\n\nimport ERC721 from '../../abis/erc721.json'\nimport ERC1155 from '../../abis/erc1155.json'\nimport {\n  createLooksRareOrder,\n  getOrderId,\n  LOOKSRARE_MARKETPLACE_CONTRACT_721,\n  newX2Y2Order,\n  PostOpenSeaSellOrder,\n} from '../queries'\nimport { INVERSE_BASIS_POINTS } from '../queries/openSea'\nimport { ListingMarket, ListingStatus, WalletAsset } from '../types'\nimport { createSellOrder, encodeOrder, OfferItem, OrderPayload, signOrderData } from './x2y2'\n\nexport const LOOKS_RARE_CREATOR_BASIS_POINTS = 50\n\nexport const ListingMarkets: ListingMarket[] = [\n  {\n    name: 'X2Y2',\n    fee: 0.5,\n    icon: '/nft/svgs/marketplaces/x2y2.svg',\n  },\n  {\n    name: 'OpenSea',\n    fee: 0,\n    icon: '/nft/svgs/marketplaces/opensea.svg',\n  },\n]\n\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\n  return {\n    amount: basisPoints,\n    recipient,\n  }\n}\n\nconst getConsiderationItems = (\n  asset: WalletAsset,\n  price: BigNumber,\n  signerAddress: string\n): {\n  sellerFee: ConsiderationInputItem\n  creatorFee?: ConsiderationInputItem\n  openSeaFee?: ConsiderationInputItem\n} => {\n  const creatorFeeBasisPoints = asset?.basisPoints ?? 0\n  const openSeaBasisPoints = !asset?.basisPoints ? 50 : 0\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - creatorFeeBasisPoints - openSeaBasisPoints\n\n  const creatorFee = price\n    .mul(BigNumber.from(creatorFeeBasisPoints))\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\n    .toString()\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n  const openSeaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n\n  return {\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\n    creatorFee:\n      creatorFeeBasisPoints > 0\n        ? createConsiderationItem(creatorFee, asset?.asset_contract?.payout_address ?? '')\n        : undefined,\n    openSeaFee: openSeaBasisPoints ? createConsiderationItem(openSeaFee, OPENSEA_FEE_ADDRESS) : undefined,\n  }\n}\n\nexport async function approveCollection(\n  operator: string,\n  collectionAddress: string,\n  signer: Signer,\n  setStatus: (newStatus: ListingStatus) => void,\n  nftStandard: NftStandard = NftStandard.Erc721\n): Promise<void> {\n  const contract = new Contract(collectionAddress, nftStandard === NftStandard.Erc721 ? ERC721 : ERC1155, signer)\n  const signerAddress = await signer.getAddress()\n\n  try {\n    const approved = await contract.isApprovedForAll(signerAddress, operator)\n    if (approved) {\n      setStatus(ListingStatus.APPROVED)\n      return\n    }\n\n    setStatus(ListingStatus.SIGNING)\n    const approvalTransaction = await contract.setApprovalForAll(operator, true)\n\n    setStatus(ListingStatus.PENDING)\n    const tx = await approvalTransaction.wait()\n\n    tx.status === 1 ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\n  } catch (error) {\n    if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n    else setStatus(ListingStatus.FAILED)\n  }\n}\n\nexport async function signListing(\n  marketplace: ListingMarket,\n  asset: WalletAsset,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  looksRareNonce = 0,\n  setStatus: (newStatus: ListingStatus) => void\n): Promise<boolean> {\n  const seaport = new Seaport(provider, {\n    conduitKeyToConduit: OPENSEA_KEY_TO_CONDUIT,\n    overrides: {\n      defaultConduitKey: OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\n    },\n    seaportVersion: '1.4',\n  })\n\n  const signerAddress = await signer.getAddress()\n  const listingPrice = asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price\n  if (!listingPrice || !asset.expirationTime || !asset.asset_contract.address || !asset.tokenId) return false\n  switch (marketplace.name) {\n    case 'OpenSea':\n      try {\n        const listingInWei = parseEther(`${listingPrice}`)\n        const { sellerFee, creatorFee, openSeaFee } = getConsiderationItems(asset, listingInWei, signerAddress)\n        const considerationItems = [sellerFee, creatorFee, openSeaFee].filter(\n          (item): item is ConsiderationInputItem => item !== undefined\n        )\n\n        const { executeAllActions } = await seaport.createOrder(\n          {\n            offer: [\n              {\n                itemType: asset.asset_contract.tokenType === NftStandard.Erc721 ? ItemType.ERC721 : ItemType.ERC1155,\n                token: asset.asset_contract.address,\n                identifier: asset.tokenId,\n                amount: '1',\n              },\n            ],\n            consideration: considerationItems,\n            endTime: asset.expirationTime.toString(),\n            zone: ZERO_ADDRESS,\n            allowPartialFills: true,\n          },\n          signerAddress\n        )\n\n        const order = await executeAllActions()\n        const seaportV14Order = { ...order, protocol_address: OPENSEA_SEAPORT_V1_4_CONTRACT }\n        setStatus(ListingStatus.PENDING)\n        const res = await PostOpenSeaSellOrder(seaportV14Order)\n        res ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\n        return res\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n    case 'LooksRare': {\n      const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n      const currentTime = Math.round(Date.now() / 1000)\n      const makerOrder: MakerOrder = {\n        // true --> ask / false --> bid\n        isOrderAsk: true,\n        // signer address of the maker order\n        signer: signerAddress,\n        // collection address\n        collection: asset.asset_contract.address,\n        // Price in WEI\n        price: parseEther(listingPrice.toString()),\n        // Token ID\n        tokenId: BigNumber.from(asset.tokenId),\n        // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        amount: BigNumber.from(1),\n        // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice), see addresses in the SDK\n        strategy: addresses.STRATEGY_STANDARD_SALE,\n        // currency address\n        currency: addresses.WETH,\n        // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        nonce: BigNumber.from(looksRareNonce),\n        // startTime timestamp in seconds\n        startTime: BigNumber.from(currentTime),\n        // endTime timestamp in seconds\n        endTime: BigNumber.from(asset.expirationTime),\n        // minimum ratio to be received by the user (per 10000)\n        // As of 11.10.22 LooksRare charges 1.5% + 0.5% if there's creator royalties set https://docs.looksrare.org/blog/looksrare-offers-zero-royalty-trading-shares-protocol-fees-with-creators-instead\n        minPercentageToAsk: BigNumber.from(10000)\n          .sub(BigNumber.from(150 + (asset.basisPoints ? 50 : 0)))\n          .toNumber(),\n        // params (e.g., price, target account for private sale)\n        params: [],\n      }\n\n      try {\n        const signatureHash = await signMakerOrder(\n          signer,\n          SupportedChainId.MAINNET,\n          makerOrder,\n          LOOKSRARE_MARKETPLACE_CONTRACT_721\n        )\n        setStatus(ListingStatus.PENDING)\n        const payload = {\n          signature: signatureHash,\n          tokenId: asset.tokenId,\n          collection: asset.asset_contract.address,\n          strategy: addresses.STRATEGY_STANDARD_SALE,\n          currency: addresses.WETH,\n          signer: signerAddress,\n          isOrderAsk: true,\n          nonce: looksRareNonce,\n          amount: 1,\n          price: parseEther(listingPrice.toString()).toString(),\n          startTime: currentTime,\n          endTime: asset.expirationTime,\n          minPercentageToAsk: 10000 - (150 + (asset.basisPoints ? 50 : 0)),\n          params: [],\n        }\n        const res = await createLooksRareOrder(payload)\n        res ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\n        return res\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n    }\n    case 'X2Y2': {\n      const orderItem: OfferItem = {\n        price: parseEther(listingPrice.toString()),\n        tokens: [\n          {\n            token: asset.asset_contract.address,\n            tokenId: BigNumber.from(asset.tokenId),\n            amount: 1,\n          },\n        ],\n      }\n      const order = createSellOrder(signerAddress, asset.expirationTime, [orderItem], asset.asset_contract.tokenType)\n      try {\n        const prevOrderId = await getOrderId(asset.asset_contract.address, asset.tokenId)\n        await signOrderData(provider, order)\n        const payload: OrderPayload = {\n          order: encodeOrder(order),\n          isBundle: false,\n          bundleName: '',\n          bundleDesc: '',\n          orderIds: prevOrderId ? [prevOrderId] : [],\n          changePrice: Boolean(prevOrderId),\n          isCollection: false,\n        }\n        setStatus(ListingStatus.PENDING)\n        // call server api\n        const resp = await newX2Y2Order(payload)\n        resp ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\n        return resp\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n    }\n    default:\n      return false\n  }\n}\n","/workspace/Physica-Interfae/src/nft/utils/isVideo.ts",[],"/workspace/Physica-Interfae/src/nft/utils/isAudio.ts",[],"/workspace/Physica-Interfae/src/nft/utils/formatEventProperties.ts",[],"/workspace/Physica-Interfae/src/nft/utils/collection.ts",[],"/workspace/Physica-Interfae/src/nft/utils/asset.ts",["3601"],"import { DetailsOrigin, GenieAsset, Listing, UpdatedGenieAsset, WalletAsset } from 'nft/types'\n\nexport function getRarityStatus(\n  rarityStatusCache: Map<string, boolean>,\n  id: string,\n  assets?: (GenieAsset | undefined)[]\n) {\n  if (rarityStatusCache.has(id)) {\n    return rarityStatusCache.get(id)\n  }\n  const hasRarity = assets && Array.from(assets).reduce((reducer, asset) => !!(reducer || asset?.rarity), false)\n\n  if (hasRarity) {\n    rarityStatusCache.set(id, hasRarity)\n  }\n\n  return hasRarity\n}\n\nexport const getAssetHref = (asset: GenieAsset | WalletAsset, origin?: DetailsOrigin) => {\n  const address =\n    (asset as GenieAsset).address !== undefined\n      ? (asset as GenieAsset).address\n      : (asset as WalletAsset).asset_contract.address\n  return `/nfts/asset/${address}/${asset.tokenId}${origin ? `?origin=${origin}` : ''}`\n}\n\nexport const getMarketplaceIcon = (marketplace: string) => {\n  return `/nft/svgs/marketplaces/${marketplace.toLowerCase()}.svg`\n}\n\nexport const generateTweetForAsset = (asset: GenieAsset): string => {\n  return `https://twitter.com/intent/tweet?text=Check%20out%20${\n    asset.name ? encodeURIComponent(asset.name) : `${asset.collectionName}%20%23${asset.tokenId}`\n  }%20(${asset.collectionName})%20https://app.uniswap.org/%23/nfts/asset/${asset.address}/${\n    asset.tokenId\n  }%20via%20@uniswap`\n}\n\nexport const generateTweetForPurchase = (assets: UpdatedGenieAsset[], txHashUrl: string): string => {\n  const multipleCollections = assets.length > 0 && assets.some((asset) => asset.address !== assets[0].address)\n  const tweetText = `I just purchased ${\n    multipleCollections ? `${assets.length} NFTs` : `${assets.length} ${assets[0].collectionName ?? 'NFT'}`\n  } with @Uniswap 🦄\\n\\nhttps://app.uniswap.org/#/nfts/collection/0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\\n${txHashUrl}`\n  return `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}`\n}\n\nfunction getMinListingPrice(listings: Listing[]): number {\n  return Math.min(...listings.map((listing) => listing.price ?? 0)) ?? 0\n}\n\nfunction mapAssetsToCollections(assets: WalletAsset[]): { collection: string; items: string[] }[] {\n  const collections = assets.map((asset) => asset.collection?.twitterUrl ?? asset.collection?.name ?? '')\n  const uniqueCollections = [...new Set(collections)]\n  return uniqueCollections.map((collection) => {\n    return {\n      collection,\n      items: assets\n        .filter((asset) => asset.collection?.twitterUrl === collection || asset.collection?.name === collection)\n        .map((asset) => asset.name ?? ''),\n    }\n  })\n}\n\nexport const generateTweetForList = (assets: WalletAsset[]): string => {\n  const tweetText =\n    assets.length == 1\n      ? `I just listed ${\n          assets[0].collection?.twitterUrl\n            ? `${assets[0].collection?.twitterUrl} `\n            : `${assets[0].collection?.name} ` ?? ''\n        }${assets[0].name} for ${getMinListingPrice(assets[0].newListings ?? [])} ETH on ${assets[0].marketplaces\n          ?.map((market) => market.name)\n          .join(', ')}. Buy it on @Uniswap at https://app.uniswap.org/#${getAssetHref(assets[0])}`\n      : `I just listed ${\n          assets.length\n        } items on @Uniswap at https://app.uniswap.org/#/nfts/profile\\n\\nCollections: ${mapAssetsToCollections(assets)\n          .map(({ collection, items }) => `${collection} ${items.map((item) => item).join(', ')}`)\n          .join(', ')} \\n\\nMarketplaces: ${assets[0].marketplaces?.map((market) => market.name).join(', ')}`\n  return `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}`\n}\n","/workspace/Physica-Interfae/src/nft/utils/buildSellObject.ts",[],"/workspace/Physica-Interfae/src/nft/utils/carousel.ts",["3602"],"export const calculateCardIndex = (x: number, l: number) => {\n  return (x < 0 ? x + l : x) % l\n}\n\nexport const calculateFirstCardIndex = (\n  i: number,\n  firstVis: number,\n  firstVisIdx: number,\n  idx: (x: number, l?: number) => number\n) => {\n  return idx(i - firstVis + firstVisIdx)\n}\n\nexport const calculateRank = (firstVis: number, firstVisIdx: number, position: number, l: number, y: number) => {\n  return firstVis - (y < 0 ? l : 0) + position - firstVisIdx + (y < 0 && firstVis === 0 ? l : 0)\n}\n","/workspace/Physica-Interfae/src/nft/components/common/SortDropdown/SortDropdown.css.ts",[],"/workspace/Physica-Interfae/src/hooks/useOnClickOutside.ts",["3603","3604"],"import { RefObject, useEffect, useRef } from 'react'\n\nexport function useOnClickOutside<T extends HTMLElement>(\n  node: RefObject<T | undefined>,\n  handler: undefined | (() => void),\n  ignoredNodes: Array<RefObject<T | undefined>> = []\n) {\n  const handlerRef = useRef<undefined | (() => void)>(handler)\n\n  useEffect(() => {\n    handlerRef.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      const nodeClicked = node.current?.contains(e.target as Node)\n      const ignoredNodeClicked = ignoredNodes.reduce(\n        (reducer, val) => reducer || !!val.current?.contains(e.target as Node),\n        false\n      )\n\n      if ((nodeClicked || ignoredNodeClicked) ?? false) {\n        return\n      }\n\n      if (handlerRef.current) handlerRef.current()\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [node, ignoredNodes])\n}\n","/workspace/Physica-Interfae/src/nft/components/bag/EmptyContent.tsx",[],"/workspace/Physica-Interfae/src/nft/components/bag/BagHeader.tsx",[],"/workspace/Physica-Interfae/src/nft/components/bag/BagContent.tsx",[],"/workspace/Physica-Interfae/src/nft/components/bag/profile/ProfileBagContent.tsx",[],"/workspace/Physica-Interfae/src/nft/hooks/useWalletBalance.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/useTransactionResponse.ts",["3605","3606"],"import { TxResponse } from 'nft/types'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ntype TransactionResponseValue = TxResponse | undefined\n\ntype TransactionResponseState = {\n  transactionResponse: TransactionResponseValue\n  setTransactionResponse: (txResponse: TransactionResponseValue) => void\n}\n\nexport const useTransactionResponse = create<TransactionResponseState>()(\n  devtools(\n    (set) => ({\n      transactionResponse: undefined,\n      setTransactionResponse: (txResponse) =>\n        set(() => ({\n          transactionResponse: txResponse,\n        })),\n    }),\n    { name: 'useTransactionResponse' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useSendTransaction.ts",["3607","3608","3609","3610","3611","3612","3613","3614","3615"],"import { Interface } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { hexStripZeros } from '@ethersproject/bytes'\nimport { ContractReceipt } from '@ethersproject/contracts'\nimport type { JsonRpcSigner } from '@ethersproject/providers'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport ERC721 from '../../abis/erc721.json'\nimport ERC1155 from '../../abis/erc1155.json'\nimport CryptoPunksMarket from '../abis/CryptoPunksMarket.json'\nimport { GenieAsset, RouteResponse, RoutingItem, TxResponse, TxStateType, UpdatedGenieAsset } from '../types'\nimport { compareAssetsWithTransactionRoute } from '../utils/txRoute/combineItemsWithTxRoute'\n\ninterface TxState {\n  state: TxStateType\n  setState: (state: TxStateType) => void\n  txHash: string\n  clearTxHash: () => void\n  purchasedWithErc20: boolean\n  sendTransaction: (\n    signer: JsonRpcSigner,\n    selectedAssets: UpdatedGenieAsset[],\n    transactionData: RouteResponse,\n    purchasedWithErc20: boolean\n  ) => Promise<TxResponse | undefined>\n}\n\nexport const useSendTransaction = create<TxState>()(\n  devtools(\n    (set) => ({\n      state: TxStateType.New,\n      txHash: '',\n      purchasedWithErc20: false,\n      clearTxHash: () => set({ txHash: '' }),\n      setState: (newState) => set(() => ({ state: newState })),\n      sendTransaction: async (signer, selectedAssets, transactionData, purchasedWithErc20) => {\n        const address = await signer.getAddress()\n        try {\n          const txNoGasLimit = {\n            to: transactionData.to,\n            value: transactionData.valueToSend ? BigNumber.from(transactionData.valueToSend) : undefined,\n            data: transactionData.data,\n          }\n\n          const gasLimit = (await signer.estimateGas(txNoGasLimit)).mul(105).div(100)\n          // tx['gasLimit'] = gasLimit\n          const tx = { ...txNoGasLimit, gasLimit } // TODO test this works when firing off tx\n\n          set({ state: TxStateType.Signing })\n          const res = await signer.sendTransaction(tx)\n          set({ state: TxStateType.Confirming })\n          set({ txHash: res.hash })\n          set({ purchasedWithErc20 })\n          sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_SIGNED, { transaction_hash: res.hash })\n\n          const txReceipt = await res.wait()\n\n          //tx was mined successfully\n          if (txReceipt.status === 1) {\n            const nftsPurchased = findNFTsPurchased(txReceipt, address, selectedAssets, transactionData.route)\n            const nftsNotPurchased = findNFTsNotPurchased(selectedAssets, nftsPurchased)\n            set({ state: TxStateType.Success })\n            return {\n              nftsPurchased,\n              nftsNotPurchased,\n              txReceipt,\n            }\n          } else {\n            set({ state: TxStateType.Failed })\n            return {\n              nftsPurchased: [],\n              nftsNotPurchased: selectedAssets,\n              txReceipt,\n            }\n          }\n        } catch (e) {\n          console.log('Error creating multiAssetSwap Transaction', e)\n          if (e.code === 4001) {\n            set({ state: TxStateType.Denied })\n          } else {\n            set({ state: TxStateType.Invalid })\n          }\n          return\n        }\n      },\n    }),\n    { name: 'useSendTransactionState' }\n  )\n)\n\nconst findNFTsPurchased = (\n  txReceipt: ContractReceipt,\n  signerAddress: string,\n  toBuy: GenieAsset[],\n  txRoute: RoutingItem[]\n): UpdatedGenieAsset[] => {\n  if (!txReceipt.logs) {\n    return []\n  }\n  const erc721Interface = new Interface(ERC721)\n  const erc1155Interface = new Interface(ERC1155)\n  const cryptopunksMarketInterface = new Interface(CryptoPunksMarket)\n\n  // Find successfully purchased NFTs (and assign to state nftsPurchased) by parsing events\n  const transferErc721BuyEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === erc721Interface.getEventTopic('Transfer') &&\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  )\n\n  const transferredErc721 = transferErc721BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: parseInt(x.topics[3]).toString(),\n  }))\n  const transferErc1155BuyEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === erc1155Interface.getEventTopic('TransferSingle') &&\n      hexStripZeros(x.topics[3]).toLowerCase() === signerAddress.toLowerCase()\n  )\n\n  const transferredErc1155 = transferErc1155BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: erc1155Interface.parseLog(x).args[3].toString(),\n  }))\n\n  // Find transferred CryptoPunks\n  const transferCryptopunkEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === cryptopunksMarketInterface.getEventTopic('PunkTransfer') &&\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  )\n  const transferredCryptopunks = transferCryptopunkEvents.map((x) => ({\n    address: x.address,\n    tokenId: cryptopunksMarketInterface.parseLog(x).args[2].toString(),\n  }))\n\n  const allTransferred = [...transferredErc721, ...transferredErc1155, ...transferredCryptopunks]\n\n  const transferredItems = toBuy.filter((assetToBuy) => {\n    return allTransferred.some(\n      (purchasedNft) =>\n        assetToBuy.address.toLowerCase() === purchasedNft.address.toLowerCase() &&\n        parseInt(assetToBuy.tokenId).toString() === purchasedNft.tokenId\n    )\n  })\n\n  return compareAssetsWithTransactionRoute(transferredItems, txRoute).updatedAssets\n}\n\nconst findNFTsNotPurchased = (toBuy: GenieAsset[], nftsPurchased: UpdatedGenieAsset[]) => {\n  const nftsNotPurchased: Array<UpdatedGenieAsset> = []\n  toBuy.forEach((selectedAsset) => {\n    const purchasedNft = nftsPurchased.find(\n      (x) => x.address.toLowerCase() === selectedAsset.address.toLowerCase() && x.tokenId === selectedAsset.tokenId\n    )\n    if (!purchasedNft) {\n      nftsNotPurchased.push(selectedAsset)\n    }\n  })\n  return nftsNotPurchased\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useSelectAsset.ts",["3616","3617"],"import { v4 as uuidv4 } from 'uuid'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { GenieAsset } from '../types'\n\ninterface SelectAssetState {\n  selectedAssets: GenieAsset[]\n  selectAsset: (asset: GenieAsset) => void\n  removeAsset: (asset: GenieAsset) => void\n  reset: () => void\n}\n\nexport const useSelectAsset = create<SelectAssetState>()(\n  devtools((set) => ({\n    selectedAssets: [],\n    selectAsset: (asset) =>\n      set(({ selectedAssets }) => {\n        const assetWithId = { id: uuidv4(), ...asset }\n        if (selectedAssets.length === 0) return { selectedAssets: [assetWithId] }\n        else return { selectedAssets: [...selectedAssets, assetWithId] }\n      }),\n    removeAsset: (asset) => {\n      set(({ selectedAssets }) => {\n        if (selectedAssets.length === 0) return { selectedAssets: [] }\n        else selectedAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\n        const assetsCopy = [...selectedAssets]\n        assetsCopy.splice(\n          selectedAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\n          1\n        )\n        return { selectedAssets: assetsCopy }\n      })\n    },\n    reset: () => set(() => ({ selectedAssets: [] })),\n  }))\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useSweep.ts",["3618","3619","3620"],"import { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\nimport { GenieAsset } from '../types'\n\ninterface SweepState {\n  sweepAssets: GenieAsset[]\n  setSweepAssets: (assets: GenieAsset[]) => void\n  removeSweepAsset: (asset: GenieAsset) => void\n  reset: () => void\n}\n\nexport const useSweep = create<SweepState>()(\n  persist(\n    devtools((set) => ({\n      sweepAssets: [],\n      setSweepAssets: (assets) =>\n        set(() => {\n          return { sweepAssets: assets }\n        }),\n      removeSweepAsset: (asset) => {\n        set(({ sweepAssets }) => {\n          if (sweepAssets.length === 0) return { sweepAssets: [] }\n          else sweepAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\n          const assetsCopy = [...sweepAssets]\n          assetsCopy.splice(\n            sweepAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\n            1\n          )\n          return { sweepAssets: assetsCopy }\n        })\n      },\n      reset: () => set(() => ({ sweepAssets: [] })),\n    })),\n    { name: 'useSweep' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useSellAsset.ts",["3621","3622","3623","3624","3625","3626","3627","3628"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { ListingMarket, WalletAsset } from '../types'\n\ninterface SellAssetState {\n  sellAssets: WalletAsset[]\n  issues: number\n  showResolveIssues: boolean\n  selectSellAsset: (asset: WalletAsset) => void\n  removeSellAsset: (asset: WalletAsset) => void\n  reset: () => void\n  setGlobalExpiration: (expirationTime: number) => void\n  setAssetListPrice: (asset: WalletAsset, price?: number, marketplace?: ListingMarket) => void\n  setGlobalMarketplaces: (marketplaces: ListingMarket[]) => void\n  removeAssetMarketplace: (asset: WalletAsset, marketplace: ListingMarket) => void\n  toggleShowResolveIssues: () => void\n  setIssues: (issues: number) => void\n}\n\nexport const useSellAsset = create<SellAssetState>()(\n  devtools(\n    (set) => ({\n      sellAssets: [],\n      issues: 0,\n      showResolveIssues: false,\n      selectSellAsset: (asset) =>\n        set(({ sellAssets }) => {\n          if (sellAssets.length === 0) return { sellAssets: [asset] }\n          else return { sellAssets: [...sellAssets, asset] }\n        }),\n      removeSellAsset: (asset) => {\n        set(({ sellAssets }) => {\n          if (sellAssets.length === 0) return { sellAssets: [] }\n          else\n            sellAssets.find(\n              (x) => asset.tokenId === x.tokenId && x.asset_contract.address === asset.asset_contract.address\n            )\n          const assetsCopy = [...sellAssets]\n          assetsCopy.splice(\n            sellAssets.findIndex(\n              (n) => n.tokenId === asset.tokenId && n.asset_contract.address === asset.asset_contract.address\n            ),\n            1\n          )\n          return { sellAssets: assetsCopy }\n        })\n      },\n      reset: () => set(() => ({ sellAssets: [] })),\n      setGlobalExpiration: (expirationTime) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => {\n            asset.expirationTime = expirationTime\n            return asset\n          })\n          return { sellAssets: assetsCopy }\n        })\n      },\n      setAssetListPrice: (asset, price, marketplace?) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          if (marketplace) {\n            const listingIndex = asset.newListings?.findIndex(\n              (listing) => listing.marketplace.name === marketplace.name\n            )\n            if (asset.newListings && listingIndex != null && listingIndex > -1) {\n              asset.newListings[listingIndex] = { price, marketplace, overrideFloorPrice: false }\n              if (listingIndex === 0) asset.marketAgnosticPrice = price\n            } else asset.newListings?.push({ price, marketplace, overrideFloorPrice: false })\n          } else asset.marketAgnosticPrice = price\n          const index = sellAssets.findIndex(\n            (n) => n.tokenId === asset.tokenId && n.asset_contract.address === asset.asset_contract.address\n          )\n          assetsCopy[index] = asset\n          return { sellAssets: assetsCopy }\n        })\n      },\n      setGlobalMarketplaces: (marketplaces) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => {\n            asset.marketplaces = marketplaces\n            asset.newListings = []\n            for (const marketplace of marketplaces) {\n              const listingIndex = asset.newListings.findIndex(\n                (listing) => listing.marketplace.name === marketplace.name\n              )\n              const newListing = {\n                price: asset.marketAgnosticPrice,\n                marketplace,\n                overrideFloorPrice: false,\n              }\n              listingIndex > -1 ? (asset.newListings[listingIndex] = newListing) : asset.newListings.push(newListing)\n            }\n            return asset\n          })\n          return { sellAssets: assetsCopy }\n        })\n      },\n      removeAssetMarketplace: (asset, marketplace) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          const assetIndex = sellAssets.indexOf(asset)\n          const marketplaceIndex =\n            asset.marketplaces?.findIndex((oldMarket) => oldMarket.name === marketplace.name) ?? -1\n          const listingIndex = asset.newListings?.findIndex((listing) => listing.marketplace.name === marketplace.name)\n          const assetCopy = JSON.parse(JSON.stringify(asset))\n          if (marketplaceIndex > -1) {\n            assetCopy.marketplaces.splice(marketplaceIndex, 1)\n            assetCopy.newListings.splice(listingIndex, 1)\n          }\n          assetsCopy.splice(assetIndex, 1, assetCopy)\n          return { sellAssets: assetsCopy }\n        })\n      },\n      toggleShowResolveIssues: () => {\n        set(({ showResolveIssues }) => {\n          return { showResolveIssues: !showResolveIssues }\n        })\n      },\n      setIssues: (issues) =>\n        set(() => ({\n          issues,\n        })),\n    }),\n    { name: 'useSelectAsset' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useProfilePageState.ts",["3629","3630"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { ProfilePageStateType } from '../types'\n\ninterface profilePageState {\n  /**\n   * State of user settings\n   */\n  state: ProfilePageStateType\n  setProfilePageState: (state: ProfilePageStateType) => void\n}\n\nexport const useProfilePageState = create<profilePageState>()(\n  devtools(\n    (set) => ({\n      state: ProfilePageStateType.VIEWING,\n      setProfilePageState: (newState) =>\n        set(() => ({\n          state: newState,\n        })),\n    }),\n    { name: 'useProfilePageState' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useNFTSelect.ts",["3631","3632"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { OpenSeaAsset } from '../types'\n\ninterface SelectNFTState {\n  /**\n   * NFTs selected by a user\n   */\n  selectedNFTs: (OpenSeaAsset & { price?: number })[]\n\n  selectNFT: (nft: OpenSeaAsset & { price?: number }) => void\n  reset: () => void\n  setUniversalPrice: (price: number) => void\n  toggleUniversalPrice: (v: boolean) => void\n  setSingleNFTPrice: (id: number, price: number) => void\n  isUniversalPrice: boolean\n}\n\nexport const useNFTSelect = create<SelectNFTState>()(\n  devtools(\n    (set) => ({\n      selectedNFTs: [],\n      isUniversalPrice: false,\n      selectNFT: (nft) =>\n        set(({ selectedNFTs }) => {\n          if (selectedNFTs.length === 0) return { selectedNFTs: [nft] }\n          else if (selectedNFTs.some((x) => x.id === nft.id))\n            return { selectedNFTs: selectedNFTs.filter((n) => n.id !== nft.id) }\n          else return { selectedNFTs: [...selectedNFTs, nft] }\n        }),\n      reset: () => set(() => ({ selectedNFTs: [] })),\n      toggleUniversalPrice: (v) => set(() => ({ isUniversalPrice: v })),\n      setUniversalPrice: (price) =>\n        set(({ selectedNFTs }) => {\n          return {\n            selectedNFTs: selectedNFTs.map((n) => ({ ...n, price })),\n            isUniversalPrice: true,\n          }\n        }),\n      setSingleNFTPrice: (id, price) =>\n        set(({ selectedNFTs }) => {\n          const found = selectedNFTs.find((i) => i.id === id)\n\n          return {\n            selectedNFTs: [...selectedNFTs.filter((n) => n.id !== id), { ...found, price }],\n          }\n        }),\n    }),\n    { name: 'useNFTSelect' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useMarketplaceSelect.ts",["3633","3634"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nexport type MarketplaceOption = { name: string; icon: string }\n\ninterface State {\n  options: MarketplaceOption[]\n  select: (o: MarketplaceOption) => void\n}\n\nexport const useMarketplaceSelect = create<State>()(\n  devtools(\n    (set) => ({\n      options: [],\n      select: (option) =>\n        set(({ options }) => {\n          if (options.find((o) => option.name === o.name))\n            return { options: options.filter((x) => x.name !== option.name) }\n          else return { options: [...options, option] }\n        }),\n    }),\n    { name: 'useMarketplaceSelect' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useNFTList.ts",["3635","3636","3637","3638","3639","3640"],"import { CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface NFTListState {\n  looksRareNonce: number\n  listings: ListingRow[]\n  collectionsRequiringApproval: CollectionRow[]\n  setLooksRareNonce: (nonce: number) => void\n  getLooksRareNonce: () => number\n  setListings: (listings: ListingRow[]) => void\n  setCollectionsRequiringApproval: (collections: CollectionRow[]) => void\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void\n  setCollectionStatusAndCallback: (\n    collection: CollectionRow,\n    status: ListingStatus,\n    callback?: () => Promise<void>\n  ) => void\n}\n\nexport const useNFTList = create<NFTListState>()(\n  devtools((set, get) => ({\n    looksRareNonce: 0,\n    listings: [],\n    collectionsRequiringApproval: [],\n    setLooksRareNonce: (nonce) =>\n      set(() => {\n        return { looksRareNonce: nonce }\n      }),\n    getLooksRareNonce: () => {\n      return get().looksRareNonce\n    },\n    setListings: (listings) =>\n      set(() => {\n        const updatedListings = listings.map((listing) => {\n          const oldListing = get().listings.find(\n            (oldListing) =>\n              oldListing.asset.asset_contract.address === listing.asset.asset_contract.address &&\n              oldListing.asset.tokenId === listing.asset.tokenId &&\n              oldListing.marketplace.name === listing.marketplace.name &&\n              oldListing.price === listing.price\n          )\n          const oldStatus = oldListing?.status\n          const oldCallback = oldListing?.callback\n          const status = () => {\n            switch (oldStatus) {\n              case ListingStatus.APPROVED:\n                return ListingStatus.APPROVED\n              case ListingStatus.FAILED:\n                return listing.status === ListingStatus.SIGNING ? ListingStatus.SIGNING : ListingStatus.FAILED\n              case ListingStatus.REJECTED:\n                return listing.status === ListingStatus.SIGNING ? ListingStatus.SIGNING : ListingStatus.REJECTED\n              default:\n                return listing.status\n            }\n          }\n          return {\n            ...listing,\n            status: status(),\n            callback: oldCallback ?? listing.callback,\n          }\n        })\n        return {\n          listings: updatedListings,\n        }\n      }),\n    setCollectionsRequiringApproval: (collections) =>\n      set(() => {\n        const updatedCollections = collections.map((collection) => {\n          const oldCollection = get().collectionsRequiringApproval.find(\n            (oldCollection) =>\n              oldCollection.collectionAddress === collection.collectionAddress &&\n              oldCollection.marketplace.name === collection.marketplace.name\n          )\n          const oldStatus = oldCollection?.status\n          const oldCallback = oldCollection?.callback\n          const status = () => {\n            switch (oldStatus) {\n              case ListingStatus.APPROVED:\n                return ListingStatus.APPROVED\n              case ListingStatus.FAILED:\n                return collection.status === ListingStatus.SIGNING ? ListingStatus.SIGNING : ListingStatus.FAILED\n              case ListingStatus.REJECTED:\n                return collection.status === ListingStatus.SIGNING ? ListingStatus.SIGNING : ListingStatus.REJECTED\n              default:\n                return collection.status\n            }\n          }\n          return {\n            ...collection,\n            status: status(),\n            callback: oldCallback ?? collection.callback,\n          }\n        })\n        return {\n          collectionsRequiringApproval: updatedCollections,\n        }\n      }),\n    setListingStatusAndCallback: (listing, status, callback) =>\n      set(({ listings }) => {\n        const listingsCopy = [...listings]\n        const oldListingIndex = listingsCopy.findIndex(\n          (oldListing) =>\n            oldListing.name === listing.name &&\n            oldListing.price === listing.price &&\n            oldListing.marketplace.name === listing.marketplace.name\n        )\n        if (oldListingIndex > -1) {\n          const updatedListing = {\n            ...listings[oldListingIndex],\n            status,\n            callback: callback ?? listings[oldListingIndex].callback,\n          }\n          listingsCopy.splice(oldListingIndex, 1, updatedListing)\n        }\n        return {\n          listings: listingsCopy,\n        }\n      }),\n    setCollectionStatusAndCallback: (collection, status, callback) =>\n      set(({ collectionsRequiringApproval }) => {\n        const collectionsCopy = [...collectionsRequiringApproval]\n        const oldCollectionIndex = collectionsCopy.findIndex(\n          (oldCollection) =>\n            oldCollection.name === collection.name && oldCollection.marketplace.name === collection.marketplace.name\n        )\n        if (oldCollectionIndex > -1) {\n          const updatedCollection = {\n            ...collectionsCopy[oldCollectionIndex],\n            status,\n            callback: callback ?? collectionsCopy[oldCollectionIndex].callback,\n          }\n          collectionsCopy.splice(oldCollectionIndex, 1, updatedCollection)\n        }\n        return {\n          collectionsRequiringApproval: collectionsCopy,\n        }\n      }),\n  }))\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useIsTablet.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/useIsMobile.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/useFiltersExpanded.ts",["3641","3642","3643"],"import { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\ninterface State {\n  isExpanded: boolean\n  setExpanded: (expanded: boolean) => void\n}\n\nconst useFiltersExpandedStore = create<State>()(\n  persist(\n    devtools(\n      (set) => ({\n        isExpanded: false,\n        setExpanded: (expanded) =>\n          set(() => ({\n            isExpanded: expanded,\n          })),\n      }),\n      { name: 'useFiltersExpanded' }\n    ),\n    { name: 'useFiltersExpanded' }\n  )\n)\n\nexport const useFiltersExpanded = (): [boolean, (expanded: boolean) => void] => {\n  const isExpanded = useFiltersExpandedStore((s) => s.isExpanded)\n  const setExpanded = useFiltersExpandedStore((s) => s.setExpanded)\n\n  return [isExpanded, setExpanded]\n}\n","/workspace/Physica-Interfae/src/nft/utils/x2y2.ts",["3644"],"import { defaultAbiCoder } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { hexZeroPad } from '@ethersproject/bytes'\nimport { AddressZero } from '@ethersproject/constants'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport type { Web3Provider } from '@ethersproject/providers'\nimport { randomBytes } from '@ethersproject/random'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\n\nconst dataParamType = `tuple(address token, uint256 tokenId, uint256 amount)[]`\nconst orderItemParamType = `tuple(uint256 price, bytes data)`\nconst orderParamTypes = [\n  `uint256`,\n  `address`,\n  `uint256`,\n  `uint256`,\n  `uint256`,\n  `uint256`,\n  `address`,\n  `bytes`,\n  `uint256`,\n  `${orderItemParamType}[]`,\n]\nconst orderParamType = `tuple(uint256 salt, address user, uint256 network, uint256 intent, uint256 delegateType, uint256 deadline, address currency, bytes dataMask, ${orderItemParamType}[] items, bytes32 r, bytes32 s, uint8 v, uint8 signVersion)`\n\nexport type OfferItem = {\n  price: BigNumber\n  tokens: {\n    token: string\n    tokenId: BigNumberish\n    amount: number\n  }[]\n}\n\ntype OrderItem = {\n  price: BigNumberish\n  data: string\n}\n\ntype Order = {\n  salt: BigNumberish\n  user: string\n  network: BigNumberish\n  intent: BigNumberish\n  delegateType: BigNumberish\n  deadline: BigNumberish\n  currency: string\n  dataMask: string\n  items: OrderItem[]\n  // signature\n  r: string\n  s: string\n  v: number\n  signVersion: number\n}\n\nexport type OrderPayload = {\n  order: string\n  isBundle: boolean\n  bundleName: string\n  bundleDesc: string\n  orderIds: number[]\n  changePrice: boolean\n  isCollection: boolean\n}\n\nconst randomSalt = () => {\n  const randomHex = BigNumber.from(randomBytes(16)).toHexString()\n  return hexZeroPad(randomHex, 64)\n}\n\nconst encodeItemData = (data: { token: string; tokenId: BigNumberish; amount: number }[]) => {\n  return defaultAbiCoder.encode([dataParamType], [data])\n}\n\nexport const signOrderData = async (web3Provider: Web3Provider, order: Order) => {\n  const orderData = defaultAbiCoder.encode(orderParamTypes, [\n    order.salt,\n    order.user,\n    order.network,\n    order.intent,\n    order.delegateType,\n    order.deadline,\n    order.currency,\n    order.dataMask,\n    order.items.length,\n    order.items,\n  ])\n  const orderHash = keccak256(orderData)\n  const orderSig = (await web3Provider.send('personal_sign', [orderHash, order.user])) as string\n  order.r = `0x${orderSig.slice(2, 66)}`\n  order.s = `0x${orderSig.slice(66, 130)}`\n  order.v = parseInt(orderSig.slice(130, 132), 16)\n  fixSignature(order)\n}\n\nconst fixSignature = (data: Order) => {\n  // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent\n  // signature malleability if version is 0/1\n  // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465\n  if (data.v < 27) {\n    data.v = data.v + 27\n  }\n}\n\nexport const encodeOrder = (order: Order): string => {\n  return defaultAbiCoder.encode([orderParamType], [order])\n}\n\nexport const createSellOrder = (\n  user: string,\n  deadline: number,\n  items: OfferItem[],\n  nftStandard: NftStandard = NftStandard.Erc721\n): Order => {\n  const salt = randomSalt()\n  const network = 1 // mainnet\n  const intent = 1 // INTENT_SELL\n  const delegateType = nftStandard === NftStandard.Erc721 ? 1 : 2\n  const currency = AddressZero // ETH\n  return {\n    salt,\n    user,\n    network,\n    intent,\n    delegateType,\n    deadline,\n    currency,\n    dataMask: '0x',\n    items: items.map((item) => ({\n      price: item.price,\n      data: encodeItemData(item.tokens),\n    })),\n    r: '',\n    s: '',\n    v: 0,\n    signVersion: 1,\n  }\n}\n","/workspace/Physica-Interfae/src/nft/queries/genie/GetAirdorpMerkle.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/useIsNftClaimAvailable.ts",["3645","3646"],"import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface NFTClaim {\n  isClaimAvailable: boolean\n  setIsClaimAvailable: (isClaimAvailable: boolean) => void\n}\n\nexport const useIsNftClaimAvailable = create<NFTClaim>()(\n  devtools(\n    (set) => ({\n      isClaimAvailable: false,\n      setIsClaimAvailable: (isClaimAvailable: boolean) => {\n        set(() => ({ isClaimAvailable }))\n      },\n    }),\n    { name: 'useIsNftClaimAvailable' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/components/bag/Bag.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/TransactionCompleteModal.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionAsset.tsx",["3647"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfacePageName, NFTEventName } from '@uniswap/analytics-events'\nimport { NftCard, NftCardDisplayProps } from 'nft/components/card'\nimport { Ranking as RankingContainer, Suspicious as SuspiciousContainer } from 'nft/components/card/icons'\nimport { useBag } from 'nft/hooks'\nimport { GenieAsset, UniformAspectRatio } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils'\nimport { useCallback, useMemo } from 'react'\n\ninterface CollectionAssetProps {\n  asset: GenieAsset\n  isMobile: boolean\n  mediaShouldBePlaying: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n  rarityVerified?: boolean\n  uniformAspectRatio: UniformAspectRatio\n  setUniformAspectRatio: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight: (renderedHeight: number | undefined) => void\n}\n\nexport const CollectionAsset = ({\n  asset,\n  isMobile,\n  mediaShouldBePlaying,\n  setCurrentTokenPlayingMedia,\n  uniformAspectRatio,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n}: CollectionAssetProps) => {\n  const bagManuallyClosed = useBag((state) => state.bagManuallyClosed)\n  const addAssetsToBag = useBag((state) => state.addAssetsToBag)\n  const removeAssetsFromBag = useBag((state) => state.removeAssetsFromBag)\n  const itemsInBag = useBag((state) => state.itemsInBag)\n  const bagExpanded = useBag((state) => state.bagExpanded)\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n  const trace = useTrace({ page: InterfacePageName.NFT_COLLECTION_PAGE })\n\n  const { isSelected } = useMemo(() => {\n    const matchingItems = itemsInBag.filter(\n      (item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address\n    )\n\n    const isSelected = matchingItems.length > 0\n    return {\n      isSelected,\n    }\n  }, [asset, itemsInBag])\n\n  const notForSale = asset.notForSale || BigNumber.from(asset.priceInfo ? asset.priceInfo.ETHPrice : 0).lt(0)\n  const provider = asset?.rarity?.providers ? asset.rarity.providers[0] : undefined\n  const handleAddAssetToBag = useCallback(() => {\n    if (BigNumber.from(asset.priceInfo?.ETHPrice ?? 0).gt(0)) {\n      addAssetsToBag([asset])\n      if (!bagExpanded && !isMobile && !bagManuallyClosed) {\n        setBagExpanded({ bagExpanded: true })\n      }\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_ADDED, {\n        collection_address: asset.address,\n        token_id: asset.tokenId,\n        token_type: asset.tokenType,\n        ...trace,\n      })\n    }\n  }, [addAssetsToBag, asset, bagExpanded, bagManuallyClosed, isMobile, setBagExpanded, trace])\n\n  const handleRemoveAssetFromBag = useCallback(() => {\n    removeAssetsFromBag([asset])\n  }, [asset, removeAssetsFromBag])\n\n  const display: NftCardDisplayProps = useMemo(() => {\n    return {\n      primaryInfo: asset.name ? asset.name : `#${asset.tokenId}`,\n      primaryInfoIcon: asset.susFlag ? <SuspiciousContainer /> : null,\n      primaryInfoRight: asset.rarity && provider ? <RankingContainer provider={provider} /> : null,\n      secondaryInfo: notForSale ? '' : `${formatWeiToDecimal(asset.priceInfo.ETHPrice, true)} ETH`,\n      selectedInfo: <Trans>Remove from bag</Trans>,\n      notSelectedInfo: <Trans>Add to bag</Trans>,\n      disabledInfo: <Trans>Not listed</Trans>,\n    }\n  }, [asset.name, asset.priceInfo.ETHPrice, asset.rarity, asset.susFlag, asset.tokenId, notForSale, provider])\n\n  return (\n    <NftCard\n      asset={asset}\n      display={display}\n      isSelected={isSelected}\n      isDisabled={Boolean(asset.notForSale)}\n      selectAsset={handleAddAssetToBag}\n      unselectAsset={handleRemoveAssetFromBag}\n      mediaShouldBePlaying={mediaShouldBePlaying}\n      uniformAspectRatio={uniformAspectRatio}\n      setUniformAspectRatio={setUniformAspectRatio}\n      renderedHeight={renderedHeight}\n      setRenderedHeight={setRenderedHeight}\n      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n      testId=\"nft-collection-asset\"\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/bag/BagFooter.tsx",["3648","3649","3650"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { SupportedChainId } from 'constants/chains'\nimport { usePayWithAnyTokenEnabled } from 'featureFlags/flags/payWithAnyToken'\nimport { useCurrency } from 'hooks/Tokens'\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { switchChain } from 'utils/switchChain'\nimport { shallow } from 'zustand/shallow'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)<{ usingPayWithAnyToken?: boolean }>`\n  padding-top: 8px;\n  padding-bottom: ${({ usingPayWithAnyToken }) => (usingPayWithAnyToken ? '16px' : '20px')};\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst PayButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface ActionButtonProps {\n  disabled?: boolean\n  onClick: () => void\n  backgroundColor: string\n  textColor: string\n}\n\nconst ActionButton = ({\n  disabled,\n  children,\n  onClick,\n  backgroundColor,\n  textColor,\n}: PropsWithChildren<ActionButtonProps>) => {\n  return (\n    <PayButton disabled={disabled} onClick={onClick} $backgroundColor={backgroundColor} $color={textColor}>\n      {children}\n    </PayButton>\n  )\n}\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency: Currency | undefined | null\n  tradeState: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.SYNCING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact: PriceImpact | undefined\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const shouldUsePayWithAnyToken = usePayWithAnyTokenEnabled()\n  const inputCurrency = useTokenInput((state) => state.inputCurrency)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && shouldUsePayWithAnyToken && chainId === SupportedChainId.MAINNET\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\n    maximumAmountIn,\n    shouldUsePayWithAnyToken,\n    true\n  )\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo(() => {\n    let handleClick: (() => void) | (() => Promise<void>) = fetchAssets\n    let buttonText = <Trans>Something went wrong</Trans>\n    let disabled = true\n    let warningText = undefined\n    let warningTextColor = theme.accentWarning\n    let helperText = undefined\n    let helperTextColor = theme.textSecondary\n    let buttonColor = theme.accentAction\n    let buttonTextColor = theme.accentTextLightPrimary\n\n    if (connected && chainId !== SupportedChainId.MAINNET) {\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\n      buttonText = <Trans>Switch networks</Trans>\n      disabled = false\n      warningText = <Trans>Wrong network</Trans>\n    } else if (sufficientBalance === false) {\n      buttonText = <Trans>Pay</Trans>\n      disabled = true\n      warningText = <Trans>Insufficient funds</Trans>\n    } else if (bagStatus === BagStatus.WARNING) {\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\n    } else if (!connected) {\n      handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      disabled = false\n      buttonText = <Trans>Connect wallet</Trans>\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      disabled = true\n      buttonText = <Trans>Proceed in wallet</Trans>\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      disabled = true\n      buttonText = <Trans>Transaction pending</Trans>\n    } else if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      disabled = true\n      buttonText = <Trans>Fetching Route</Trans>\n\n      if (tradeState === TradeState.INVALID) {\n        buttonText = <Trans>Pay</Trans>\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        buttonText = <Trans>Insufficient liquidity</Trans>\n        buttonColor = theme.backgroundInteractive\n        buttonTextColor = theme.textPrimary\n        helperText = <Trans>Insufficient pool liquidity to complete transaction</Trans>\n      }\n    } else if (allowance.state === AllowanceState.REQUIRED || allowance.state === AllowanceState.LOADING) {\n      handleClick = () => updateAllowance()\n      disabled = isAllowancePending || isApprovalLoading || allowance.state === AllowanceState.LOADING\n\n      if (allowance.state === AllowanceState.LOADING) {\n        buttonText = <Trans>Loading Allowance</Trans>\n      } else if (isAllowancePending) {\n        buttonText = <Trans>Approve in your wallet</Trans>\n      } else if (isApprovalLoading) {\n        buttonText = <Trans>Approval pending</Trans>\n      } else {\n        helperText = <Trans>An approval is needed to use this token. </Trans>\n        buttonText = <Trans>Approve</Trans>\n      }\n    } else if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      disabled = false\n      warningTextColor = theme.accentAction\n      warningText = <Trans>Price updated</Trans>\n      buttonText = <Trans>Pay</Trans>\n    } else if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      disabled = false\n      buttonColor = priceImpact.priceImpactSeverity.color\n      helperText = <Trans>Price impact warning</Trans>\n      helperTextColor = priceImpact.priceImpactSeverity.color\n      buttonText = <Trans>Pay Anyway</Trans>\n    } else if (sufficientBalance === true) {\n      disabled = false\n      buttonText = <Trans>Pay</Trans>\n      helperText = usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined\n    }\n\n    return {\n      buttonText,\n      buttonTextColor,\n      disabled,\n      warningText,\n      warningTextColor,\n      helperText,\n      helperTextColor,\n      handleClick,\n      buttonColor,\n    }\n  }, [\n    fetchAssets,\n    theme.accentWarning,\n    theme.textSecondary,\n    theme.accentAction,\n    theme.accentTextLightPrimary,\n    theme.backgroundInteractive,\n    theme.textPrimary,\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    allowance.state,\n    priceImpact,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n    isAllowancePending,\n    isApprovalLoading,\n    updateAllowance,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        {shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\" usingPayWithAnyToken={shouldUsePayWithAnyToken}>\n            <CurrencyRow>\n              <Column gap=\"xs\">\n                <ThemedText.SubHeaderSmall>\n                  <Trans>Pay with</Trans>\n                </ThemedText.SubHeaderSmall>\n                <CurrencyInput\n                  onClick={() => {\n                    if (!bagIsLocked) {\n                      setTokenSelectorOpen(true)\n                      sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                    }\n                  }}\n                >\n                  <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                  <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                    {activeCurrency?.symbol}\n                  </ThemedText.HeadlineSmall>\n                  <ChevronDown size={20} color={theme.textSecondary} />\n                </CurrencyInput>\n              </Column>\n              <TotalColumn gap=\"xs\">\n                <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                  <Trans>Total</Trans>\n                </ThemedText.SubHeaderSmall>\n                <InputCurrencyValue\n                  usingPayWithAnyToken={usingPayWithAnyToken}\n                  totalEthPrice={totalEthPrice}\n                  activeCurrency={activeCurrency}\n                  tradeState={tradeState}\n                  trade={trade}\n                />\n              </TotalColumn>\n            </CurrencyRow>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={priceImpact}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        {!shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\">\n            <Row justify=\"space-between\">\n              <div>\n                <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\n              </div>\n              <div>\n                <ThemedText.HeadlineSmall>\n                  {formatWeiToDecimal(totalEthPrice.toString())}\n                  &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n                </ThemedText.HeadlineSmall>\n              </div>\n            </Row>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={priceImpact}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            backgroundColor={buttonColor}\n            textColor={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/modals/Overlay.tsx",[],"/workspace/Physica-Interfae/src/nft/utils/txRoute/combineItemsWithTxRoute.ts",["3651","3652","3653","3654","3655","3656"],"import { BuyItem, GenieAsset, isPooledMarket, Markets, PriceInfo, RoutingItem, UpdatedGenieAsset } from 'nft/types'\nimport {\n  calcAvgGroupPoolPrice,\n  formatWeiToDecimal,\n  isInSameMarketplaceCollection,\n  isInSameSudoSwapPool,\n} from 'nft/utils'\n\nconst isTheSame = (item: GenieAsset, routeAsset: BuyItem | PriceInfo) => {\n  // if route asset has id, match by id\n  if ('id' in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id\n  } else {\n    return (\n      'address' in routeAsset &&\n      routeAsset.address.toLowerCase() === item.address.toLowerCase() &&\n      routeAsset.tokenId === item.tokenId\n    )\n  }\n}\n\nconst getPriceDiff = (oldPrice: string, newPrice: string): { hasPriceDiff: boolean; hasVisiblePriceDiff: boolean } => {\n  const hasPriceDiff = oldPrice !== newPrice\n  const hasVisiblePriceDiff = formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice)\n\n  return { hasPriceDiff, hasVisiblePriceDiff }\n}\n\nconst isAveragePriceOfPooledAssets = (\n  asset: GenieAsset,\n  numberOfAssetsInPool: number,\n  expectedPrice: string\n): boolean => {\n  return !getPriceDiff(calcAvgGroupPoolPrice(asset, numberOfAssetsInPool), expectedPrice).hasVisiblePriceDiff\n}\n\nconst isAveragedPrice = (\n  item: UpdatedGenieAsset,\n  items: UpdatedGenieAsset[],\n  route: RoutingItem,\n  txRoute?: RoutingItem[]\n): boolean => {\n  if (!(route && 'priceInfo' in route.assetOut)) return false\n\n  return (\n    !!item.marketplace &&\n    isPooledMarket(item.marketplace) &&\n    isAveragePriceOfPooledAssets(\n      item,\n      items.filter((routeItem) => itemInRouteAndSamePool(item, routeItem, txRoute)).length,\n      route.assetOut.priceInfo.basePrice\n    )\n  )\n}\n\nconst getRouteForItem = (item: UpdatedGenieAsset, txRoute?: RoutingItem[]): RoutingItem | undefined => {\n  return txRoute && txRoute.find((r) => r.action === 'Buy' && isTheSame(item, r.assetOut))\n}\n\nconst itemHasRoute = (item: UpdatedGenieAsset, txRoute?: RoutingItem[]): boolean => {\n  return !!getRouteForItem(item, txRoute)\n}\n\nconst itemInRouteAndSamePool = (\n  item: UpdatedGenieAsset,\n  routeItem: UpdatedGenieAsset,\n  txRoute?: RoutingItem[]\n): boolean => {\n  return (\n    itemHasRoute(routeItem, txRoute) &&\n    (item.marketplace === Markets.Sudoswap\n      ? isInSameSudoSwapPool(item, routeItem)\n      : isInSameMarketplaceCollection(item, routeItem))\n  )\n}\n\nexport const compareAssetsWithTransactionRoute = (\n  items: UpdatedGenieAsset[],\n  txRoute?: RoutingItem[]\n): { hasPriceAdjustment: boolean; updatedAssets: UpdatedGenieAsset[] } => {\n  let hasPriceAdjustment = false\n  const updatedAssets = items.map((item) => {\n    const route = getRouteForItem(item, txRoute)\n\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true,\n      }\n    }\n\n    let newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo\n\n    if (route && 'priceInfo' in route.assetOut) {\n      const { hasPriceDiff, hasVisiblePriceDiff } = getPriceDiff(\n        newPriceInfo.basePrice,\n        route.assetOut.priceInfo.basePrice\n      )\n\n      newPriceInfo = route.assetOut.priceInfo\n      hasPriceAdjustment = hasPriceDiff\n      if (hasVisiblePriceDiff) {\n        if (!isAveragedPrice(item, items, route, txRoute)) {\n          return {\n            ...item,\n            updatedPriceInfo: newPriceInfo,\n          }\n        }\n      }\n    }\n\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: undefined,\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined,\n    }\n  })\n\n  return { hasPriceAdjustment, updatedAssets }\n}\n","/workspace/Physica-Interfae/src/nft/components/bag/profile/ProfileAssetRow.tsx",[],"/workspace/Physica-Interfae/src/nft/types/airdrop/index.ts",[],"/workspace/Physica-Interfae/src/nft/components/collection/CollectionNfts.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/common/Portal/index.ts",[],"/workspace/Physica-Interfae/src/components/Column/index.tsx",[],"/workspace/Physica-Interfae/src/nft/components/bag/BagRow.tsx",["3657","3658","3659","3660","3661"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice: number | undefined\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/common/Portal/Portal.tsx",[],"/workspace/Physica-Interfae/src/utils/switchChain.ts",[],"/workspace/Physica-Interfae/src/nft/components/bag/BagRow.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/card/icons.tsx",[],"/workspace/Physica-Interfae/src/nft/components/modals/Overlay.css.ts",[],"/workspace/Physica-Interfae/src/components/Logo/CurrencyLogo.tsx",["3662"],"import { Currency } from '@uniswap/sdk-core'\nimport { TokenInfo } from '@uniswap/token-lists'\n\nimport AssetLogo, { AssetLogoBaseProps } from './AssetLogo'\n\nexport default function CurrencyLogo(\n  props: AssetLogoBaseProps & {\n    currency?: Currency | null\n  }\n) {\n  return (\n    <AssetLogo\n      isNative={props.currency?.isNative}\n      chainId={props.currency?.chainId}\n      address={props.currency?.wrapped.address}\n      symbol={props.symbol ?? props.currency?.symbol}\n      backupImg={(props.currency as TokenInfo)?.logoURI}\n      hideL2Icon={props.hideL2Icon ?? true}\n      {...props}\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useTokenInput.ts",["3663","3664"],"import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency: Currency | undefined\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput: TokenTradeInput | undefined\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n","/workspace/Physica-Interfae/src/nft/hooks/useSubscribeTransactionState.ts",["3665"],"import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(\n    ({ setBagExpanded, setBagStatus, setLocked }) => ({\n      setBagExpanded,\n      setBagStatus,\n      setLocked,\n    }),\n    shallow\n  )\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","/workspace/Physica-Interfae/src/nft/hooks/usePermit2Approval.ts",["3666","3667"],"import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useCallback, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\n// TODO: This should be removed when the sdk is updated to include the new UR address\nconst NFT_UNIVERSAL_ROUTER_MAINNET_ADDRESS = '0x4c60051384bd2d3c01bfc845cf5f4b44bcbe9de5'\n\nexport default function usePermit2Approval(\n  amount?: CurrencyAmount<Token>,\n  maximumAmount?: CurrencyAmount<Token>,\n  enabled?: boolean,\n  shouldUseNftRouter?: boolean\n) {\n  const { chainId } = useWeb3React()\n\n  const allowance = usePermit2Allowance(\n    enabled ? maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined) : undefined,\n    enabled && chainId\n      ? shouldUseNftRouter && chainId === 1\n        ? NFT_UNIVERSAL_ROUTER_MAINNET_ADDRESS\n        : UNIVERSAL_ROUTER_ADDRESS(chainId)\n      : undefined\n  )\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED)\n    setIsAllowancePending(true)\n    try {\n      await allowance.approveAndPermit()\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmount?.currency.symbol,\n        token_address: maximumAmount?.currency.address,\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setIsAllowancePending(false)\n    }\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      isApprovalLoading,\n      isAllowancePending,\n      updateAllowance,\n    }\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\n}\n","/workspace/Physica-Interfae/src/nft/hooks/usePriceImpact.ts",[],"/workspace/Physica-Interfae/src/nft/hooks/usePayWithAnyTokenSwap.ts",["3668"],"import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = !!trade && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useFetchAssets.ts",["3669"],"import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }),\n    shallow\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","/workspace/Physica-Interfae/src/nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts",["3670"],"import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  maximumAmountIn: CurrencyAmount<Token> | undefined\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\n  const allowedSlippage = useAutoSlippageTolerance(trade)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","/workspace/Physica-Interfae/src/hooks/usePermit2Allowance.ts",["3671"],"import { PERMIT2_ADDRESS } from '@uniswap/permit2-sdk'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { AVERAGE_L1_BLOCK_TIME } from 'constants/chainInfo'\nimport { PermitSignature, usePermitAllowance, useUpdatePermitAllowance } from 'hooks/usePermitAllowance'\nimport { useTokenAllowance, useUpdateTokenAllowance } from 'hooks/useTokenAllowance'\nimport useInterval from 'lib/hooks/useInterval'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useHasPendingApproval, useTransactionAdder } from 'state/transactions/hooks'\n\nenum ApprovalState {\n  PENDING,\n  SYNCING,\n  SYNCED,\n}\n\nexport enum AllowanceState {\n  LOADING,\n  REQUIRED,\n  ALLOWED,\n}\n\ninterface AllowanceRequired {\n  state: AllowanceState.REQUIRED\n  token: Token\n  isApprovalLoading: boolean\n  approveAndPermit: () => Promise<void>\n}\n\nexport type Allowance =\n  | { state: AllowanceState.LOADING }\n  | {\n      state: AllowanceState.ALLOWED\n      permitSignature?: PermitSignature\n    }\n  | AllowanceRequired\n\nexport default function usePermit2Allowance(amount?: CurrencyAmount<Token>, spender?: string): Allowance {\n  const { account } = useWeb3React()\n  const token = amount?.currency\n\n  const { tokenAllowance, isSyncing: isApprovalSyncing } = useTokenAllowance(token, account, PERMIT2_ADDRESS)\n  const updateTokenAllowance = useUpdateTokenAllowance(amount, PERMIT2_ADDRESS)\n  const isApproved = useMemo(() => {\n    if (!amount || !tokenAllowance) return false\n    return tokenAllowance.greaterThan(amount) || tokenAllowance.equalTo(amount)\n  }, [amount, tokenAllowance])\n\n  // Marks approval as loading from the time it is submitted (pending), until it has confirmed and another block synced.\n  // This avoids re-prompting the user for an already-submitted but not-yet-observed approval, by marking it loading\n  // until it has been re-observed. It wll sync immediately, because confirmation fast-forwards the block number.\n  const [approvalState, setApprovalState] = useState(ApprovalState.SYNCED)\n  const isApprovalLoading = approvalState !== ApprovalState.SYNCED\n  const isApprovalPending = useHasPendingApproval(token, PERMIT2_ADDRESS)\n  useEffect(() => {\n    if (isApprovalPending) {\n      setApprovalState(ApprovalState.PENDING)\n    } else {\n      setApprovalState((state) => {\n        if (state === ApprovalState.PENDING && isApprovalSyncing) {\n          return ApprovalState.SYNCING\n        } else if (state === ApprovalState.SYNCING && !isApprovalSyncing) {\n          return ApprovalState.SYNCED\n        }\n        return state\n      })\n    }\n  }, [isApprovalPending, isApprovalSyncing])\n\n  // Signature and PermitAllowance will expire, so they should be rechecked at an interval.\n  // Calculate now such that the signature will still be valid for the submitting block.\n  const [now, setNow] = useState(Date.now() + AVERAGE_L1_BLOCK_TIME)\n  useInterval(\n    useCallback(() => setNow((Date.now() + AVERAGE_L1_BLOCK_TIME) / 1000), []),\n    AVERAGE_L1_BLOCK_TIME\n  )\n\n  const [signature, setSignature] = useState<PermitSignature>()\n  const isSigned = useMemo(() => {\n    if (!amount || !signature) return false\n    return signature.details.token === token?.address && signature.spender === spender && signature.sigDeadline >= now\n  }, [amount, now, signature, spender, token?.address])\n\n  const { permitAllowance, expiration: permitExpiration, nonce } = usePermitAllowance(token, account, spender)\n  const updatePermitAllowance = useUpdatePermitAllowance(token, spender, nonce, setSignature)\n  const isPermitted = useMemo(() => {\n    if (!amount || !permitAllowance || !permitExpiration) return false\n    return (permitAllowance.greaterThan(amount) || permitAllowance.equalTo(amount)) && permitExpiration >= now\n  }, [amount, now, permitAllowance, permitExpiration])\n\n  const shouldRequestApproval = !(isApproved || isApprovalLoading)\n  const shouldRequestSignature = !(isPermitted || isSigned)\n  const addTransaction = useTransactionAdder()\n  const approveAndPermit = useCallback(async () => {\n    if (shouldRequestApproval) {\n      const { response, info } = await updateTokenAllowance()\n      addTransaction(response, info)\n    }\n    if (shouldRequestSignature) {\n      await updatePermitAllowance()\n    }\n  }, [addTransaction, shouldRequestApproval, shouldRequestSignature, updatePermitAllowance, updateTokenAllowance])\n\n  return useMemo(() => {\n    if (token) {\n      if (!tokenAllowance || !permitAllowance) {\n        return { state: AllowanceState.LOADING }\n      } else if (!(isPermitted || isSigned)) {\n        return { token, state: AllowanceState.REQUIRED, isApprovalLoading: false, approveAndPermit }\n      } else if (!isApproved) {\n        return { token, state: AllowanceState.REQUIRED, isApprovalLoading, approveAndPermit }\n      }\n    }\n    return { token, state: AllowanceState.ALLOWED, permitSignature: !isPermitted && isSigned ? signature : undefined }\n  }, [\n    approveAndPermit,\n    isApprovalLoading,\n    isApproved,\n    isPermitted,\n    isSigned,\n    permitAllowance,\n    signature,\n    token,\n    tokenAllowance,\n  ])\n}\n","/workspace/Physica-Interfae/src/featureFlags/flags/payWithAnyToken.ts",[],"/workspace/Physica-Interfae/src/nft/components/card/index.tsx",["3672","3673"],"import * as Card from 'nft/components/card/containers'\nimport { MarketplaceContainer } from 'nft/components/card/icons'\nimport { MediaContainer } from 'nft/components/card/media'\nimport { detailsHref, getNftDisplayComponent, useSelectAsset } from 'nft/components/card/utils'\nimport { useBag } from 'nft/hooks'\nimport { GenieAsset, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { floorFormatter } from 'nft/utils'\nimport { ReactNode } from 'react'\nimport { shallow } from 'zustand/shallow'\n\ninterface NftCardProps {\n  asset: GenieAsset | WalletAsset\n  display: NftCardDisplayProps\n  isSelected: boolean\n  isDisabled: boolean\n  selectAsset?: () => void\n  unselectAsset?: () => void\n  onButtonClick?: () => void\n  onCardClick?: () => void\n  sendAnalyticsEvent?: () => void\n  mediaShouldBePlaying: boolean\n  uniformAspectRatio?: UniformAspectRatio\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n  testId?: string\n  hideDetails?: boolean\n}\n\nexport interface NftCardDisplayProps {\n  primaryInfo?: ReactNode\n  primaryInfoIcon?: ReactNode\n  primaryInfoRight?: ReactNode\n  secondaryInfo?: ReactNode\n  selectedInfo?: ReactNode\n  notSelectedInfo?: ReactNode\n  disabledInfo?: ReactNode\n}\n\n/**\n * NftCard is a component that displays an NFT asset.\n *\n * By default, clicking on the card will navigate to the details page.\n * If you wish to override this behavior, pass a value for the onCardClick prop.\n */\nexport const NftCard = ({\n  asset,\n  display,\n  isSelected,\n  selectAsset,\n  unselectAsset,\n  isDisabled,\n  onButtonClick,\n  onCardClick,\n  sendAnalyticsEvent,\n  mediaShouldBePlaying,\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  setCurrentTokenPlayingMedia,\n  testId,\n  hideDetails = false,\n}: NftCardProps) => {\n  const clickActionButton = useSelectAsset({\n    selectAsset,\n    unselectAsset,\n    isSelected,\n    isDisabled,\n    onClick: onButtonClick,\n  })\n  const { bagExpanded, setBagExpanded } = useBag(\n    (state) => ({\n      bagExpanded: state.bagExpanded,\n      setBagExpanded: state.setBagExpanded,\n    }),\n    shallow\n  )\n\n  const collectionNft = 'marketplace' in asset\n  const profileNft = 'asset_contract' in asset\n  const tokenType = collectionNft ? asset.tokenType : profileNft ? asset.asset_contract.tokenType : undefined\n  const marketplace = collectionNft ? asset.marketplace : undefined\n  const listedPrice =\n    profileNft && !isDisabled && asset.floor_sell_order_price ? floorFormatter(asset.floor_sell_order_price) : undefined\n\n  return (\n    <Card.Container\n      isSelected={isSelected}\n      isDisabled={isDisabled}\n      detailsHref={onCardClick ? undefined : detailsHref(asset)}\n      testId={testId}\n      onClick={() => {\n        if (bagExpanded) setBagExpanded({ bagExpanded: false })\n        onCardClick?.()\n        sendAnalyticsEvent?.()\n      }}\n    >\n      <MediaContainer isDisabled={isDisabled}>\n        <MarketplaceContainer\n          hidePrice={hideDetails}\n          isSelected={isSelected}\n          marketplace={marketplace}\n          tokenType={tokenType}\n          listedPrice={listedPrice}\n        />\n        {getNftDisplayComponent(\n          asset,\n          mediaShouldBePlaying,\n          setCurrentTokenPlayingMedia,\n          uniformAspectRatio,\n          setUniformAspectRatio,\n          renderedHeight,\n          setRenderedHeight\n        )}\n      </MediaContainer>\n      {!hideDetails && (\n        <>\n          <Card.DetailsRelativeContainer>\n            <Card.DetailsContainer>\n              <Card.InfoContainer>\n                <Card.PrimaryRow>\n                  <Card.PrimaryDetails>\n                    <Card.PrimaryInfo>{display.primaryInfo}</Card.PrimaryInfo>\n                    {display.primaryInfoIcon}\n                  </Card.PrimaryDetails>\n                  {display.primaryInfoRight}\n                </Card.PrimaryRow>\n                <Card.SecondaryRow>\n                  <Card.SecondaryDetails>\n                    <Card.SecondaryInfo>{display.secondaryInfo}</Card.SecondaryInfo>\n                  </Card.SecondaryDetails>\n                </Card.SecondaryRow>\n              </Card.InfoContainer>\n            </Card.DetailsContainer>\n          </Card.DetailsRelativeContainer>\n          <Card.ActionButton clickActionButton={clickActionButton} isDisabled={isDisabled} isSelected={isSelected}>\n            {isSelected ? display.selectedInfo : isDisabled ? display.disabledInfo : display.notSelectedInfo}\n          </Card.ActionButton>\n        </>\n      )}\n    </Card.Container>\n  )\n}\n","/workspace/Physica-Interfae/src/components/SearchModal/CurrencySearchModal.tsx",["3674"],"import { Currency, Token } from '@uniswap/sdk-core'\nimport TokenSafety from 'components/TokenSafety'\nimport { memo, useCallback, useEffect, useState } from 'react'\nimport { useUserAddedTokens } from 'state/user/hooks'\n\nimport useLast from '../../hooks/useLast'\nimport { useWindowSize } from '../../hooks/useWindowSize'\nimport Modal from '../Modal'\nimport { CurrencySearch } from './CurrencySearch'\n\ninterface CurrencySearchModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n  showCurrencyAmount?: boolean\n  disableNonToken?: boolean\n  onlyShowCurrenciesWithBalance?: boolean\n}\n\nenum CurrencyModalView {\n  search,\n  importToken,\n  tokenSafety,\n}\n\nexport default memo(function CurrencySearchModal({\n  isOpen,\n  onDismiss,\n  onCurrencySelect,\n  selectedCurrency,\n  otherSelectedCurrency,\n  showCommonBases = false,\n  showCurrencyAmount = true,\n  disableNonToken = false,\n  onlyShowCurrenciesWithBalance = false,\n}: CurrencySearchModalProps) {\n  const [modalView, setModalView] = useState<CurrencyModalView>(CurrencyModalView.search)\n  const lastOpen = useLast(isOpen)\n  const userAddedTokens = useUserAddedTokens()\n\n  useEffect(() => {\n    if (isOpen && !lastOpen) {\n      setModalView(CurrencyModalView.search)\n    }\n  }, [isOpen, lastOpen])\n\n  const showTokenSafetySpeedbump = (token: Token) => {\n    setWarningToken(token)\n    setModalView(CurrencyModalView.tokenSafety)\n  }\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency, hasWarning?: boolean) => {\n      if (hasWarning && currency.isToken && !userAddedTokens.find((token) => token.equals(currency))) {\n        showTokenSafetySpeedbump(currency)\n      } else {\n        onCurrencySelect(currency)\n        onDismiss()\n      }\n    },\n    [onDismiss, onCurrencySelect, userAddedTokens]\n  )\n  // used for token safety\n  const [warningToken, setWarningToken] = useState<Token | undefined>()\n\n  const { height: windowHeight } = useWindowSize()\n  // change min height if not searching\n  let modalHeight: number | undefined = 80\n  let content = null\n  switch (modalView) {\n    case CurrencyModalView.search:\n      if (windowHeight) {\n        // Converts pixel units to vh for Modal component\n        modalHeight = Math.min(Math.round((680 / windowHeight) * 100), 80)\n      }\n      content = (\n        <CurrencySearch\n          isOpen={isOpen}\n          onDismiss={onDismiss}\n          onCurrencySelect={handleCurrencySelect}\n          selectedCurrency={selectedCurrency}\n          otherSelectedCurrency={otherSelectedCurrency}\n          showCommonBases={showCommonBases}\n          showCurrencyAmount={showCurrencyAmount}\n          disableNonToken={disableNonToken}\n          onlyShowCurrenciesWithBalance={onlyShowCurrenciesWithBalance}\n        />\n      )\n      break\n    case CurrencyModalView.tokenSafety:\n      modalHeight = undefined\n      if (warningToken) {\n        content = (\n          <TokenSafety\n            tokenAddress={warningToken.address}\n            onContinue={() => handleCurrencySelect(warningToken)}\n            onCancel={() => setModalView(CurrencyModalView.search)}\n            showCancel={true}\n          />\n        )\n      }\n      break\n  }\n  return (\n    <Modal isOpen={isOpen} onDismiss={onDismiss} maxHeight={modalHeight} minHeight={modalHeight}>\n      {content}\n    </Modal>\n  )\n})\n","/workspace/Physica-Interfae/src/nft/components/bag/TimedLoader.tsx",[],"/workspace/Physica-Interfae/src/components/claim/AddressClaimModal.tsx",[],"/workspace/Physica-Interfae/src/components/Logo/AssetLogo.tsx",[],"/workspace/Physica-Interfae/src/nft/hooks/usePurchaseAssets.ts",["3675","3676","3677","3678"],"import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\nimport shallow from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(\n    ({ setLocked, setBagExpanded, reset }) => ({\n      setLocked,\n      setBagExpanded,\n      reset,\n    }),\n    shallow\n  )\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useLast.ts",["3679"],"import { useEffect, useState } from 'react'\n\n/**\n * Returns the last value of type T that passes a filter function\n * @param value changing value\n * @param filterFn function that determines whether a given value should be considered for the last value\n */\nexport default function useLast<T>(\n  value: T | undefined | null,\n  filterFn?: (value: T | null | undefined) => boolean\n): T | null | undefined {\n  const [last, setLast] = useState<T | null | undefined>(filterFn && filterFn(value) ? value : undefined)\n  useEffect(() => {\n    setLast((last) => {\n      const shouldUse: boolean = filterFn ? filterFn(value) : true\n      if (shouldUse) return value\n      return last\n    })\n  }, [filterFn, value])\n  return last\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/index.tsx",[],"/workspace/Physica-Interfae/src/nft/components/card/utils.tsx",["3680","3681","3682","3683","3684"],"import { NftImage, NftPlayableMedia } from 'nft/components/card/media'\nimport {\n  LarvaLabsMarketplaceIcon,\n  LooksRareIcon,\n  Nft20Icon,\n  NftXIcon,\n  OpenSeaMarketplaceIcon,\n  SudoSwapIcon,\n  X2y2Icon,\n} from 'nft/components/icons'\nimport { GenieAsset, Markets, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { isAudio, isVideo } from 'nft/utils'\nimport { ReactNode, useCallback } from 'react'\n\nenum AssetMediaType {\n  Image,\n  Video,\n  Audio,\n}\n\nfunction getAssetImageUrl(asset: GenieAsset | WalletAsset) {\n  return asset.imageUrl || asset.smallImageUrl\n}\n\nfunction getAssetMediaUrl(asset: GenieAsset | WalletAsset) {\n  return asset.animationUrl\n}\n\nexport function detailsHref(asset: GenieAsset | WalletAsset) {\n  if ('address' in asset) return `/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\n  if ('asset_contract' in asset) return `/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\n  return '/nfts/profile'\n}\n\nfunction getAssetMediaType(asset: GenieAsset | WalletAsset) {\n  let assetMediaType = AssetMediaType.Image\n  if (asset.animationUrl) {\n    if (isAudio(asset.animationUrl)) {\n      assetMediaType = AssetMediaType.Audio\n    } else if (isVideo(asset.animationUrl)) {\n      assetMediaType = AssetMediaType.Video\n    }\n  }\n  return assetMediaType\n}\n\nexport function getNftDisplayComponent(\n  asset: GenieAsset | WalletAsset,\n  mediaShouldBePlaying: boolean,\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void,\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) {\n  switch (getAssetMediaType(asset)) {\n    case AssetMediaType.Image:\n      return (\n        <NftImage\n          src={getAssetImageUrl(asset)}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n    case AssetMediaType.Video:\n      return (\n        <NftPlayableMedia\n          src={getAssetImageUrl(asset)}\n          mediaSrc={getAssetMediaUrl(asset)}\n          tokenId={asset.tokenId}\n          shouldPlay={mediaShouldBePlaying}\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n    case AssetMediaType.Audio:\n      return (\n        <NftPlayableMedia\n          isAudio={true}\n          src={getAssetImageUrl(asset)}\n          mediaSrc={getAssetMediaUrl(asset)}\n          tokenId={asset.tokenId}\n          shouldPlay={mediaShouldBePlaying}\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n  }\n}\n\nexport function useSelectAsset({\n  selectAsset,\n  unselectAsset,\n  isSelected,\n  isDisabled,\n  onClick,\n}: {\n  selectAsset?: () => void\n  unselectAsset?: () => void\n  isSelected: boolean\n  isDisabled: boolean\n  onClick?: () => void\n}) {\n  return useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation()\n      e.preventDefault()\n\n      if (isDisabled) {\n        return\n      }\n\n      if (onClick) {\n        onClick()\n        return\n      }\n\n      return isSelected ? unselectAsset?.() : selectAsset?.()\n    },\n    [selectAsset, isDisabled, onClick, unselectAsset, isSelected]\n  )\n}\n\nexport function getMarketplaceIcon(market: Markets): ReactNode {\n  switch (market) {\n    case Markets.Opensea:\n      return <OpenSeaMarketplaceIcon />\n    case Markets.LooksRare:\n      return <LooksRareIcon />\n    case Markets.X2Y2:\n      return <X2y2Icon />\n    case Markets.Sudoswap:\n      return <SudoSwapIcon />\n    case Markets.NFT20:\n      return <Nft20Icon />\n    case Markets.NFTX:\n      return <NftXIcon />\n    case Markets.Cryptopunks:\n      return <LarvaLabsMarketplaceIcon />\n    default:\n      return null\n  }\n}\n\nexport const handleUniformAspectRatio = (\n  uniformAspectRatio: UniformAspectRatio,\n  e: React.SyntheticEvent<HTMLElement, Event>,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) => {\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\n    const height = e.currentTarget.clientHeight\n    const width = e.currentTarget.clientWidth\n    const aspectRatio = width / height\n\n    if (\n      (!renderedHeight || renderedHeight !== height) &&\n      aspectRatio < 1 &&\n      uniformAspectRatio !== UniformAspectRatios.square &&\n      setRenderedHeight\n    ) {\n      setRenderedHeight(height)\n    }\n\n    const variance = 0.05\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\n    } else if (aspectRatio > uniformAspectRatio + variance || aspectRatio < uniformAspectRatio - variance) {\n      setUniformAspectRatio(UniformAspectRatios.square)\n      setRenderedHeight && setRenderedHeight(undefined)\n    }\n  }\n}\n\nexport function getHeightFromAspectRatio(\n  uniformAspectRatio: UniformAspectRatio,\n  renderedHeight?: number\n): number | undefined {\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\n    ? undefined\n    : renderedHeight\n}\n\nexport function getMediaAspectRatio(\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n): string {\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n}\n","/workspace/Physica-Interfae/src/components/SearchModal/CurrencySearch.tsx",["3685","3686","3687","3688","3689"],"// eslint-disable-next-line no-restricted-imports\nimport { t, Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfaceEventName, InterfaceModalName } from '@uniswap/analytics-events'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendEvent } from 'components/analytics'\nimport useDebounce from 'hooks/useDebounce'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport useToggle from 'hooks/useToggle'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { getTokenFilter } from 'lib/hooks/useTokenList/filtering'\nimport { tokenComparator, useSortTokensByQuery } from 'lib/hooks/useTokenList/sorting'\nimport { ChangeEvent, KeyboardEvent, RefObject, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { FixedSizeList } from 'react-window'\nimport { Text } from 'rebass'\nimport { useAllTokenBalances } from 'state/connection/hooks'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { UserAddedToken } from 'types/tokens'\n\nimport { useDefaultActiveTokens, useIsUserAddedToken, useSearchInactiveTokenLists, useToken } from '../../hooks/Tokens'\nimport { CloseIcon, ThemedText } from '../../theme'\nimport { isAddress } from '../../utils'\nimport Column from '../Column'\nimport Row, { RowBetween } from '../Row'\nimport CommonBases from './CommonBases'\nimport { CurrencyRow, formatAnalyticsEventProperties } from './CurrencyList'\nimport CurrencyList from './CurrencyList'\nimport { PaddedColumn, SearchInput, Separator } from './styleds'\n\nconst ContentWrapper = styled(Column)`\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  width: 100%;\n  overflow: hidden;\n  flex: 1 1;\n  position: relative;\n  border-radius: 20px;\n`\n\ninterface CurrencySearchProps {\n  isOpen: boolean\n  onDismiss: () => void\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency, hasWarning?: boolean) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n  showCurrencyAmount?: boolean\n  disableNonToken?: boolean\n  onlyShowCurrenciesWithBalance?: boolean\n}\n\nexport function CurrencySearch({\n  selectedCurrency,\n  onCurrencySelect,\n  otherSelectedCurrency,\n  showCommonBases,\n  showCurrencyAmount,\n  disableNonToken,\n  onDismiss,\n  isOpen,\n  onlyShowCurrenciesWithBalance,\n}: CurrencySearchProps) {\n  const { chainId } = useWeb3React()\n  const theme = useTheme()\n\n  const [tokenLoaderTimerElapsed, setTokenLoaderTimerElapsed] = useState(false)\n\n  // refs for fixed size lists\n  const fixedList = useRef<FixedSizeList>()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const debouncedQuery = useDebounce(searchQuery, 200)\n  const isAddressSearch = isAddress(debouncedQuery)\n  const searchToken = useToken(debouncedQuery)\n  const searchTokenIsAdded = useIsUserAddedToken(searchToken)\n\n  useEffect(() => {\n    if (isAddressSearch) {\n      sendEvent({\n        category: 'Currency Select',\n        action: 'Search by address',\n        label: isAddressSearch,\n      })\n    }\n  }, [isAddressSearch])\n\n  const defaultTokens = useDefaultActiveTokens()\n  const filteredTokens: Token[] = useMemo(() => {\n    return Object.values(defaultTokens).filter(getTokenFilter(debouncedQuery))\n  }, [defaultTokens, debouncedQuery])\n\n  const [balances, balancesAreLoading] = useAllTokenBalances()\n  const sortedTokens: Token[] = useMemo(\n    () =>\n      !balancesAreLoading\n        ? filteredTokens\n            .filter((token) => {\n              if (onlyShowCurrenciesWithBalance) {\n                return balances[token.address]?.greaterThan(0)\n              }\n\n              // If there is no query, filter out unselected user-added tokens with no balance.\n              if (!debouncedQuery && token instanceof UserAddedToken) {\n                if (selectedCurrency?.equals(token) || otherSelectedCurrency?.equals(token)) return true\n                return balances[token.address]?.greaterThan(0)\n              }\n              return true\n            })\n            .sort(tokenComparator.bind(null, balances))\n        : [],\n    [\n      balances,\n      balancesAreLoading,\n      debouncedQuery,\n      filteredTokens,\n      otherSelectedCurrency,\n      selectedCurrency,\n      onlyShowCurrenciesWithBalance,\n    ]\n  )\n  const isLoading = Boolean(balancesAreLoading && !tokenLoaderTimerElapsed)\n\n  const filteredSortedTokens = useSortTokensByQuery(debouncedQuery, sortedTokens)\n\n  const native = useNativeCurrency()\n  const wrapped = native.wrapped\n\n  const searchCurrencies: Currency[] = useMemo(() => {\n    const s = debouncedQuery.toLowerCase().trim()\n\n    const tokens = filteredSortedTokens.filter((t) => !(t.equals(wrapped) || (disableNonToken && t.isNative)))\n    const shouldShowWrapped =\n      !onlyShowCurrenciesWithBalance || (!balancesAreLoading && balances[wrapped.address]?.greaterThan(0))\n    const natives = (\n      disableNonToken || native.equals(wrapped) ? [wrapped] : shouldShowWrapped ? [native, wrapped] : [native]\n    ).filter((n) => n.symbol?.toLowerCase()?.indexOf(s) !== -1 || n.name?.toLowerCase()?.indexOf(s) !== -1)\n\n    return [...natives, ...tokens]\n  }, [\n    debouncedQuery,\n    filteredSortedTokens,\n    onlyShowCurrenciesWithBalance,\n    balancesAreLoading,\n    balances,\n    wrapped,\n    disableNonToken,\n    native,\n  ])\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency, hasWarning?: boolean) => {\n      onCurrencySelect(currency, hasWarning)\n      if (!hasWarning) onDismiss()\n    },\n    [onDismiss, onCurrencySelect]\n  )\n\n  // clear the input on open\n  useEffect(() => {\n    if (isOpen) setSearchQuery('')\n  }, [isOpen])\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n  const handleInput = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n    fixedList.current?.scrollTo(0)\n  }, [])\n\n  const handleEnter = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        const s = debouncedQuery.toLowerCase().trim()\n        if (s === native?.symbol?.toLowerCase()) {\n          handleCurrencySelect(native)\n        } else if (searchCurrencies.length > 0) {\n          if (\n            searchCurrencies[0].symbol?.toLowerCase() === debouncedQuery.trim().toLowerCase() ||\n            searchCurrencies.length === 1\n          ) {\n            handleCurrencySelect(searchCurrencies[0])\n          }\n        }\n      }\n    },\n    [debouncedQuery, native, searchCurrencies, handleCurrencySelect]\n  )\n\n  // menu ui\n  const [open, toggle] = useToggle(false)\n  const node = useRef<HTMLDivElement>()\n  useOnClickOutside(node, open ? toggle : undefined)\n\n  // if no results on main list, show option to expand into inactive\n  const filteredInactiveTokens = useSearchInactiveTokenLists(\n    !onlyShowCurrenciesWithBalance && (filteredTokens.length === 0 || (debouncedQuery.length > 2 && !isAddressSearch))\n      ? debouncedQuery\n      : undefined\n  )\n\n  // Timeout token loader after 3 seconds to avoid hanging in a loading state.\n  useEffect(() => {\n    const tokenLoaderTimer = setTimeout(() => {\n      setTokenLoaderTimerElapsed(true)\n    }, 3000)\n    return () => clearTimeout(tokenLoaderTimer)\n  }, [])\n\n  return (\n    <ContentWrapper>\n      <Trace\n        name={InterfaceEventName.TOKEN_SELECTOR_OPENED}\n        modal={InterfaceModalName.TOKEN_SELECTOR}\n        shouldLogImpression\n      >\n        <PaddedColumn gap=\"16px\">\n          <RowBetween>\n            <Text fontWeight={500} fontSize={16}>\n              <Trans>Select a token</Trans>\n            </Text>\n            <CloseIcon onClick={onDismiss} />\n          </RowBetween>\n          <Row>\n            <SearchInput\n              type=\"text\"\n              id=\"token-search-input\"\n              placeholder={t`Search name or paste address`}\n              autoComplete=\"off\"\n              value={searchQuery}\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              onKeyDown={handleEnter}\n            />\n          </Row>\n          {showCommonBases && (\n            <CommonBases\n              chainId={chainId}\n              onSelect={handleCurrencySelect}\n              selectedCurrency={selectedCurrency}\n              searchQuery={searchQuery}\n              isAddressSearch={isAddressSearch}\n            />\n          )}\n        </PaddedColumn>\n        <Separator />\n        {searchToken && !searchTokenIsAdded ? (\n          <Column style={{ padding: '20px 0', height: '100%' }}>\n            <CurrencyRow\n              currency={searchToken}\n              isSelected={Boolean(searchToken && selectedCurrency && selectedCurrency.equals(searchToken))}\n              onSelect={(hasWarning: boolean) => searchToken && handleCurrencySelect(searchToken, hasWarning)}\n              otherSelected={Boolean(searchToken && otherSelectedCurrency && otherSelectedCurrency.equals(searchToken))}\n              showCurrencyAmount={showCurrencyAmount}\n              eventProperties={formatAnalyticsEventProperties(\n                searchToken,\n                0,\n                [searchToken],\n                searchQuery,\n                isAddressSearch\n              )}\n            />\n          </Column>\n        ) : searchCurrencies?.length > 0 || filteredInactiveTokens?.length > 0 || isLoading ? (\n          <div style={{ flex: '1' }}>\n            <AutoSizer disableWidth>\n              {({ height }) => (\n                <CurrencyList\n                  height={height}\n                  currencies={searchCurrencies}\n                  otherListTokens={filteredInactiveTokens}\n                  onCurrencySelect={handleCurrencySelect}\n                  otherCurrency={otherSelectedCurrency}\n                  selectedCurrency={selectedCurrency}\n                  fixedListRef={fixedList}\n                  showCurrencyAmount={showCurrencyAmount}\n                  isLoading={isLoading}\n                  searchQuery={searchQuery}\n                  isAddressSearch={isAddressSearch}\n                />\n              )}\n            </AutoSizer>\n          </div>\n        ) : (\n          <Column style={{ padding: '20px', height: '100%' }}>\n            <ThemedText.DeprecatedMain color={theme.textTertiary} textAlign=\"center\" mb=\"20px\">\n              <Trans>No results found.</Trans>\n            </ThemedText.DeprecatedMain>\n          </Column>\n        )}\n      </Trace>\n    </ContentWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/components/NumericalInput/index.tsx",[],"/workspace/Physica-Interfae/src/components/CurrencyInputPanel/index.tsx",[],"/workspace/Physica-Interfae/src/components/ConnectedAccountBlocked/index.tsx",[],"/workspace/Physica-Interfae/src/components/earn/styled.ts",[],"/workspace/Physica-Interfae/src/utils/prices.ts",["3690","3691","3692","3693","3694"],"import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Fraction, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT,\n} from '../constants/misc'\n\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE)\n\nexport function computeRealizedPriceImpact(trade: Trade<Currency, Currency, TradeType>): Percent {\n  const realizedLpFeePercent = computeRealizedLPFeePercent(trade)\n  return trade.priceImpact.subtract(realizedLpFeePercent)\n}\n\n// computes realized lp fee as a percent\nfunction computeRealizedLPFeePercent(trade: Trade<Currency, Currency, TradeType>): Percent {\n  let percent: Percent\n\n  // Since routes are either all v2 or all v3 right now, calculate separately\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.swaps.reduce<Percent>(\n        (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  } else {\n    percent = ZERO_PERCENT\n    for (const swap of trade.swaps) {\n      const { numerator, denominator } = swap.inputAmount.divide(trade.inputAmount)\n      const overallPercent = new Percent(numerator, denominator)\n\n      const routeRealizedLPFeePercent = overallPercent.multiply(\n        ONE_HUNDRED_PERCENT.subtract(\n          swap.route.pools.reduce<Percent>((currentFee: Percent, pool): Percent => {\n            const fee =\n              pool instanceof Pair\n                ? // not currently possible given protocol check above, but not fatal\n                  FeeAmount.MEDIUM\n                : pool.fee\n            return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1_000_000)))\n          }, ONE_HUNDRED_PERCENT)\n        )\n      )\n\n      percent = percent.add(routeRealizedLPFeePercent)\n    }\n  }\n\n  return new Percent(percent.numerator, percent.denominator)\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(\n  trade?: Trade<Currency, Currency, TradeType> | null\n): CurrencyAmount<Currency> | undefined {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade)\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient)\n  }\n\n  return undefined\n}\n\nconst IMPACT_TIERS = [\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  ALLOWED_PRICE_IMPACT_LOW,\n]\n\ntype WarningSeverity = 0 | 1 | 2 | 3 | 4\nexport function warningSeverity(priceImpact: Percent | undefined): WarningSeverity {\n  if (!priceImpact) return 0\n  // This function is used to calculate the Severity level for % changes in USD value and Price Impact.\n  // Price Impact is always an absolute value (conceptually always negative, but represented in code with a positive value)\n  // The USD value change can be positive or negative, and it follows the same standard as Price Impact (positive value is the typical case of a loss due to slippage).\n  // We don't want to return a warning level for a favorable/profitable change, so when the USD value change is negative we return 0.\n  // TODO (WEB-3133): Disambiguate Price Impact and USD value change, and flip the sign of USD Value change.\n  if (priceImpact.lessThan(0)) return 0\n  let impact: WarningSeverity = IMPACT_TIERS.length as WarningSeverity\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact\n    impact--\n  }\n  return 0\n}\n\nexport function getPriceImpactWarning(priceImpact: Percent): 'warning' | 'error' | undefined {\n  if (priceImpact.greaterThan(ALLOWED_PRICE_IMPACT_HIGH)) return 'error'\n  if (priceImpact.greaterThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 'warning'\n  return\n}\n","/workspace/Physica-Interfae/src/nft/utils/nftRoute.ts",["3695"],"import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","/workspace/Physica-Interfae/src/nft/utils/tokenRoutes.ts",[],"/workspace/Physica-Interfae/src/hooks/useBestTrade.ts",["3696","3697","3698","3699","3700"],"import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { WRAPPED_NATIVE_CURRENCY } from 'constants/tokens'\nimport { useMemo } from 'react'\nimport { RouterPreference } from 'state/routing/slice'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade'\nimport { useClientSideRouter } from 'state/user/hooks'\n\nimport useAutoRouterSupported from './useAutoRouterSupported'\nimport { useClientSideV3Trade } from './useClientSideV3Trade'\nimport useDebounce from './useDebounce'\nimport useIsWindowVisible from './useIsWindowVisible'\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  const { chainId } = useWeb3React()\n  const autoRouterSupported = useAutoRouterSupported()\n  const isWindowVisible = useIsWindowVisible()\n\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(\n    useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]),\n    200\n  )\n\n  const isAWrapTransaction = useMemo(() => {\n    if (!chainId || !amountSpecified || !debouncedOtherCurrency) return false\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId]\n    return (\n      (amountSpecified.currency.isNative && weth?.equals(debouncedOtherCurrency)) ||\n      (debouncedOtherCurrency.isNative && weth?.equals(amountSpecified.currency))\n    )\n  }, [amountSpecified, chainId, debouncedOtherCurrency])\n\n  const shouldGetTrade = !isAWrapTransaction && isWindowVisible\n\n  const [clientSideRouter] = useClientSideRouter()\n  const routingAPITrade = useRoutingAPITrade(\n    tradeType,\n    autoRouterSupported && shouldGetTrade ? debouncedAmount : undefined,\n    debouncedOtherCurrency,\n    clientSideRouter ? RouterPreference.CLIENT : RouterPreference.API\n  )\n\n  const isLoading = routingAPITrade.state === TradeState.LOADING\n  const useFallback = (!autoRouterSupported || routingAPITrade.state === TradeState.NO_ROUTE_FOUND) && shouldGetTrade\n\n  // only use client side router if routing api trade failed or is not supported\n  const bestV3Trade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  // only return gas estimate from api if routing api trade is used\n  return useMemo(\n    () => ({\n      ...(useFallback ? bestV3Trade : routingAPITrade),\n      ...(isLoading ? { state: TradeState.LOADING } : {}),\n    }),\n    [bestV3Trade, isLoading, routingAPITrade, useFallback]\n  )\n}\n","/workspace/Physica-Interfae/src/nft/utils/bag.ts",["3701","3702","3703"],"import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","/workspace/Physica-Interfae/src/hooks/useAutoSlippageTolerance.ts",["3704"],"import { MixedRoute, partitionMixedRouteByProtocol, Protocol, Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'constants/chains'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport useGasPrice from './useGasPrice'\nimport useStablecoinPrice, { useStablecoinValue } from './useStablecoinPrice'\n\nconst DEFAULT_AUTO_SLIPPAGE = new Percent(1, 1000) // .10%\n\n// Base costs regardless of how many hops in the route\nconst V3_SWAP_BASE_GAS_ESTIMATE = 100_000\nconst V2_SWAP_BASE_GAS_ESTIMATE = 135_000\n\n// Extra cost per hop in the route\nconst V3_SWAP_HOP_GAS_ESTIMATE = 70_000\nconst V2_SWAP_HOP_GAS_ESTIMATE = 50_000\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n *\n * V3 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts\n * V2 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts\n */\nfunction guesstimateGas(trade: Trade<Currency, Currency, TradeType> | undefined): number | undefined {\n  if (trade) {\n    let gas = 0\n    for (const { route } of trade.swaps) {\n      if (route.protocol === Protocol.V2) {\n        gas += V2_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V2_SWAP_HOP_GAS_ESTIMATE\n      } else if (route.protocol === Protocol.V3) {\n        // V3 gas costs scale on initialized ticks being crossed, but we don't have that data here.\n        // We bake in some tick crossings into the base 100k cost.\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE\n      } else if (route.protocol === Protocol.MIXED) {\n        const sections = partitionMixedRouteByProtocol(route as MixedRoute<Currency, Currency>)\n        gas += sections.reduce((gas, section) => {\n          if (section.every((pool) => pool instanceof Pool)) {\n            return gas + V3_SWAP_BASE_GAS_ESTIMATE + section.length * V3_SWAP_HOP_GAS_ESTIMATE\n          } else if (section.every((pool) => pool instanceof Pair)) {\n            return gas + V2_SWAP_BASE_GAS_ESTIMATE + (section.length - 1) * V2_SWAP_HOP_GAS_ESTIMATE\n          } else {\n            console.warn('Invalid section')\n            return gas\n          }\n        }, 0)\n      } else {\n        // fallback general gas estimation\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE\n      }\n    }\n    return gas\n  }\n  return undefined\n}\n\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = DEFAULT_AUTO_SLIPPAGE\n// assuming normal gas speeds, most swaps complete within 3 blocks and\n// there's rarely price movement >5% in that time period\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 100) // 5%\n\n/**\n * Returns slippage tolerance based on values from current trade, gas estimates from api, and active network.\n */\nexport default function useAutoSlippageTolerance(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n): Percent {\n  const { chainId } = useWeb3React()\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId)\n  const outputDollarValue = useStablecoinValue(trade?.outputAmount)\n  const nativeGasPrice = useGasPrice()\n\n  const gasEstimate = guesstimateGas(trade)\n  const nativeCurrency = useNativeCurrency()\n  const nativeCurrencyPrice = useStablecoinPrice((trade && nativeCurrency) ?? undefined)\n\n  return useMemo(() => {\n    if (!trade || onL2) return DEFAULT_AUTO_SLIPPAGE\n\n    const nativeGasCost =\n      nativeGasPrice && typeof gasEstimate === 'number'\n        ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate))\n        : undefined\n    const dollarGasCost =\n      nativeCurrency && nativeGasCost && nativeCurrencyPrice\n        ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost))\n        : undefined\n\n    // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n    const dollarCostToUse =\n      chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && trade?.gasUseEstimateUSD\n        ? trade.gasUseEstimateUSD\n        : dollarGasCost\n\n    if (outputDollarValue && dollarCostToUse) {\n      // optimize for highest possible slippage without getting MEV'd\n      // so set slippage % such that the difference between expected amount out and minimum amount out < gas fee to sandwich the trade\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction)\n      const result = new Percent(fraction.numerator, fraction.denominator)\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MAX_AUTO_SLIPPAGE_TOLERANCE\n      }\n\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MIN_AUTO_SLIPPAGE_TOLERANCE\n      }\n\n      return result\n    }\n\n    return DEFAULT_AUTO_SLIPPAGE\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue])\n}\n","/workspace/Physica-Interfae/src/hooks/useTokenAllowance.ts",["3705","3706","3707"],"import { BigNumberish } from '@ethersproject/bignumber'\nimport { ContractTransaction } from '@ethersproject/contracts'\nimport { CurrencyAmount, MaxUint256, Token } from '@uniswap/sdk-core'\nimport { useTokenContract } from 'hooks/useContract'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { ApproveTransactionInfo, TransactionType } from 'state/transactions/types'\n\nexport function useTokenAllowance(\n  token?: Token,\n  owner?: string,\n  spender?: string\n): {\n  tokenAllowance: CurrencyAmount<Token> | undefined\n  isSyncing: boolean\n} {\n  const contract = useTokenContract(token?.address, false)\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n\n  // If there is no allowance yet, re-check next observed block.\n  // This guarantees that the tokenAllowance is marked isSyncing upon approval and updated upon being synced.\n  const [blocksPerFetch, setBlocksPerFetch] = useState<1>()\n  const { result, syncing: isSyncing } = useSingleCallResult(contract, 'allowance', inputs, { blocksPerFetch }) as {\n    result: Awaited<ReturnType<NonNullable<typeof contract>['allowance']>> | undefined\n    syncing: boolean\n  }\n\n  const rawAmount = result?.toString() // convert to a string before using in a hook, to avoid spurious rerenders\n  const allowance = useMemo(\n    () => (token && rawAmount ? CurrencyAmount.fromRawAmount(token, rawAmount) : undefined),\n    [token, rawAmount]\n  )\n  useEffect(() => setBlocksPerFetch(allowance?.equalTo(0) ? 1 : undefined), [allowance])\n\n  return useMemo(() => ({ tokenAllowance: allowance, isSyncing }), [allowance, isSyncing])\n}\n\nexport function useUpdateTokenAllowance(\n  amount: CurrencyAmount<Token> | undefined,\n  spender: string\n): () => Promise<{ response: ContractTransaction; info: ApproveTransactionInfo }> {\n  const contract = useTokenContract(amount?.currency.address)\n\n  return useCallback(async () => {\n    try {\n      if (!amount) throw new Error('missing amount')\n      if (!contract) throw new Error('missing contract')\n      if (!spender) throw new Error('missing spender')\n\n      const allowance: BigNumberish = MaxUint256.toString()\n      const response = await contract.approve(spender, allowance)\n      return {\n        response,\n        info: {\n          type: TransactionType.APPROVAL,\n          tokenAddress: contract.address,\n          spender,\n        },\n      }\n    } catch (e: unknown) {\n      const symbol = amount?.currency.symbol ?? 'Token'\n      throw new Error(`${symbol} token allowance failed: ${e instanceof Error ? e.message : e}`)\n    }\n  }, [amount, contract, spender])\n}\n","/workspace/Physica-Interfae/src/hooks/useENS.ts",["3708"],"import { useMemo } from 'react'\n\nimport { isAddress } from '../utils'\nimport useENSAddress from './useENSAddress'\nimport useENSName from './useENSName'\n\n/**\n * Given a name or address, does a lookup to resolve to an address and name\n * @param nameOrAddress ENS name or address\n */\nexport default function useENS(nameOrAddress?: string | null): {\n  loading: boolean\n  address: string | null\n  name: string | null\n} {\n  const validated = isAddress(nameOrAddress)\n  const reverseLookup = useENSName(validated ? validated : undefined)\n  const lookup = useENSAddress(nameOrAddress)\n\n  return useMemo(\n    () => ({\n      loading: reverseLookup.loading || lookup.loading,\n      address: validated ? validated : lookup.address,\n      name: reverseLookup.ENSName ? reverseLookup.ENSName : !validated && lookup.address ? nameOrAddress || null : null,\n    }),\n    [lookup.address, lookup.loading, nameOrAddress, reverseLookup.ENSName, reverseLookup.loading, validated]\n  )\n}\n","/workspace/Physica-Interfae/src/state/claim/hooks.ts",["3709","3710","3711"],"import type { TransactionResponse } from '@ethersproject/providers'\nimport { abi as MERKLE_DISTRIBUTOR_ABI } from '@uniswap/merkle-distributor/build/MerkleDistributor.json'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { MERKLE_DISTRIBUTOR_ADDRESS } from 'constants/addresses'\nimport JSBI from 'jsbi'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useEffect, useState } from 'react'\n\nimport { UNI } from '../../constants/tokens'\nimport { useContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { useTransactionAdder } from '../transactions/hooks'\nimport { TransactionType } from '../transactions/types'\n\nfunction useMerkleDistributorContract() {\n  return useContract(MERKLE_DISTRIBUTOR_ADDRESS, MERKLE_DISTRIBUTOR_ABI, true)\n}\n\ninterface UserClaimData {\n  index: number\n  amount: string\n  proof: string[]\n  flags?: {\n    isSOCKS: boolean\n    isLP: boolean\n    isUser: boolean\n  }\n}\n\ntype LastAddress = string\ntype ClaimAddressMapping = { [firstAddress: string]: LastAddress }\nlet FETCH_CLAIM_MAPPING_PROMISE: Promise<ClaimAddressMapping> | null = null\nfunction fetchClaimMapping(): Promise<ClaimAddressMapping> {\n  return (\n    FETCH_CLAIM_MAPPING_PROMISE ??\n    (FETCH_CLAIM_MAPPING_PROMISE = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error('Failed to get claims mapping', error)\n        FETCH_CLAIM_MAPPING_PROMISE = null\n      }))\n  )\n}\n\nconst FETCH_CLAIM_FILE_PROMISES: { [startingAddress: string]: Promise<{ [address: string]: UserClaimData }> } = {}\nfunction fetchClaimFile(key: string): Promise<{ [address: string]: UserClaimData }> {\n  return (\n    FETCH_CLAIM_FILE_PROMISES[key] ??\n    (FETCH_CLAIM_FILE_PROMISES[key] = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/${key}.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error(`Failed to get claim file mapping for starting address ${key}`, error)\n        delete FETCH_CLAIM_FILE_PROMISES[key]\n      }))\n  )\n}\n\nconst FETCH_CLAIM_PROMISES: { [key: string]: Promise<UserClaimData> } = {}\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account: string): Promise<UserClaimData> {\n  const formatted = isAddress(account)\n  if (!formatted) return Promise.reject(new Error('Invalid address'))\n\n  return (\n    FETCH_CLAIM_PROMISES[account] ??\n    (FETCH_CLAIM_PROMISES[account] = fetchClaimMapping()\n      .then((mapping) => {\n        const sorted = Object.keys(mapping).sort((a, b) => (a.toLowerCase() < b.toLowerCase() ? -1 : 1))\n\n        for (const startingAddress of sorted) {\n          const lastAddress = mapping[startingAddress]\n          if (startingAddress.toLowerCase() <= formatted.toLowerCase()) {\n            if (formatted.toLowerCase() <= lastAddress.toLowerCase()) {\n              return startingAddress\n            }\n          } else {\n            throw new Error(`Claim for ${formatted} was not found in partial search`)\n          }\n        }\n        throw new Error(`Claim for ${formatted} was not found after searching all mappings`)\n      })\n      .then(fetchClaimFile)\n      .then((result) => {\n        if (result[formatted]) return result[formatted]\n        throw new Error(`Claim for ${formatted} was not found in claim file!`)\n      })\n      .catch((error) => {\n        console.debug('Claim fetch failed', error)\n        throw error\n      }))\n  )\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nfunction useUserClaimData(account: string | null | undefined): UserClaimData | null {\n  const { chainId } = useWeb3React()\n\n  const [claimInfo, setClaimInfo] = useState<{ [account: string]: UserClaimData | null }>({})\n\n  useEffect(() => {\n    if (!account || chainId !== 1) return\n\n    fetchClaim(account)\n      .then((accountClaimInfo) =>\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: accountClaimInfo,\n          }\n        })\n      )\n      .catch(() => {\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: null,\n          }\n        })\n      })\n  }, [account, chainId])\n\n  return account && chainId === 1 ? claimInfo[account] : null\n}\n\n// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account: string | null | undefined): boolean {\n  const userClaimData = useUserClaimData(account)\n  const distributorContract = useMerkleDistributorContract()\n  const isClaimedResult = useSingleCallResult(distributorContract, 'isClaimed', [userClaimData?.index])\n  // user is in blob and contract marks as unclaimed\n  return Boolean(userClaimData && !isClaimedResult.loading && isClaimedResult.result?.[0] === false)\n}\n\nexport function useUserUnclaimedAmount(account: string | null | undefined): CurrencyAmount<Token> | undefined {\n  const { chainId } = useWeb3React()\n  const userClaimData = useUserClaimData(account)\n  const canClaim = useUserHasAvailableClaim(account)\n\n  const uni = chainId ? UNI[chainId] : undefined\n  if (!uni) return undefined\n  if (!canClaim || !userClaimData) {\n    return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(0))\n  }\n  return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(userClaimData.amount))\n}\n\nexport function useClaimCallback(account: string | null | undefined): {\n  claimCallback: () => Promise<string>\n} {\n  // get claim data for this account\n  const { provider, chainId } = useWeb3React()\n  const claimData = useUserClaimData(account)\n\n  // used for popup summary\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const addTransaction = useTransactionAdder()\n  const distributorContract = useMerkleDistributorContract()\n\n  const claimCallback = async function () {\n    if (!claimData || !account || !provider || !chainId || !distributorContract) return\n\n    const args = [claimData.index, account, claimData.amount, claimData.proof]\n\n    return distributorContract.estimateGas['claim'](...args, {}).then((estimatedGasLimit) => {\n      return distributorContract\n        .claim(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            type: TransactionType.CLAIM,\n            recipient: account,\n            uniAmountRaw: unclaimedAmount?.quotient.toString(),\n          })\n          return response.hash\n        })\n    })\n  }\n\n  return { claimCallback }\n}\n","/workspace/Physica-Interfae/src/nft/components/card/media.tsx",[],"/workspace/Physica-Interfae/src/nft/components/card/containers.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/DefaultMenu.tsx",[],"/workspace/Physica-Interfae/src/components/SearchModal/styleds.tsx",[],"/workspace/Physica-Interfae/src/hooks/usePermitAllowance.ts",["3712","3713","3714"],"import { signTypedData } from '@uniswap/conedison/provider/signing'\nimport { AllowanceTransfer, MaxAllowanceTransferAmount, PERMIT2_ADDRESS, PermitSingle } from '@uniswap/permit2-sdk'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport PERMIT2_ABI from 'abis/permit2.json'\nimport { Permit2 } from 'abis/types'\nimport { useContract } from 'hooks/useContract'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport ms from 'ms.macro'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nconst PERMIT_EXPIRATION = ms`30d`\nconst PERMIT_SIG_EXPIRATION = ms`30m`\n\nfunction toDeadline(expiration: number): number {\n  return Math.floor((Date.now() + expiration) / 1000)\n}\n\nexport function usePermitAllowance(token?: Token, owner?: string, spender?: string) {\n  const contract = useContract<Permit2>(PERMIT2_ADDRESS, PERMIT2_ABI)\n  const inputs = useMemo(() => [owner, token?.address, spender], [owner, spender, token?.address])\n\n  // If there is no allowance yet, re-check next observed block.\n  // This guarantees that the permitAllowance is synced upon submission and updated upon being synced.\n  const [blocksPerFetch, setBlocksPerFetch] = useState<1>()\n  const result = useSingleCallResult(contract, 'allowance', inputs, {\n    blocksPerFetch,\n  }).result as Awaited<ReturnType<Permit2['allowance']>> | undefined\n\n  const rawAmount = result?.amount.toString() // convert to a string before using in a hook, to avoid spurious rerenders\n  const allowance = useMemo(\n    () => (token && rawAmount ? CurrencyAmount.fromRawAmount(token, rawAmount) : undefined),\n    [token, rawAmount]\n  )\n  useEffect(() => setBlocksPerFetch(allowance?.equalTo(0) ? 1 : undefined), [allowance])\n\n  return useMemo(\n    () => ({ permitAllowance: allowance, expiration: result?.expiration, nonce: result?.nonce }),\n    [allowance, result?.expiration, result?.nonce]\n  )\n}\n\ninterface Permit extends PermitSingle {\n  sigDeadline: number\n}\n\nexport interface PermitSignature extends Permit {\n  signature: string\n}\n\nexport function useUpdatePermitAllowance(\n  token: Token | undefined,\n  spender: string | undefined,\n  nonce: number | undefined,\n  onPermitSignature: (signature: PermitSignature) => void\n) {\n  const { account, chainId, provider } = useWeb3React()\n\n  return useCallback(async () => {\n    try {\n      if (!chainId) throw new Error('missing chainId')\n      if (!provider) throw new Error('missing provider')\n      if (!token) throw new Error('missing token')\n      if (!spender) throw new Error('missing spender')\n      if (nonce === undefined) throw new Error('missing nonce')\n\n      const permit: Permit = {\n        details: {\n          token: token.address,\n          amount: MaxAllowanceTransferAmount,\n          expiration: toDeadline(PERMIT_EXPIRATION),\n          nonce,\n        },\n        spender,\n        sigDeadline: toDeadline(PERMIT_SIG_EXPIRATION),\n      }\n\n      const { domain, types, values } = AllowanceTransfer.getPermitData(permit, PERMIT2_ADDRESS, chainId)\n      // Use conedison's signTypedData for better x-wallet compatibility.\n      const signature = await signTypedData(provider.getSigner(account), domain, types, values)\n      onPermitSignature?.({ ...permit, signature })\n      return\n    } catch (e: unknown) {\n      const symbol = token?.symbol ?? 'Token'\n      throw new Error(`${symbol} permit allowance failed: ${e instanceof Error ? e.message : e}`)\n    }\n  }, [account, chainId, nonce, onPermitSignature, provider, spender, token])\n}\n","/workspace/Physica-Interfae/src/components/SearchModal/CommonBases.tsx",[],"/workspace/Physica-Interfae/src/hooks/useAssetLogoSource.ts",["3715"],"import TokenLogoLookupTable from 'constants/TokenLogoLookupTable'\nimport { chainIdToNetworkName, getNativeLogoURI } from 'lib/hooks/useCurrencyLogoURIs'\nimport uriToHttp from 'lib/utils/uriToHttp'\nimport { useCallback, useEffect, useState } from 'react'\nimport { isAddress } from 'utils'\n\nconst BAD_SRCS: { [tokenAddress: string]: true } = {}\n\n// Converts uri's into fetchable urls\nfunction parseLogoSources(uris: string[]) {\n  const urls: string[] = []\n  uris.forEach((uri) => urls.push(...uriToHttp(uri)))\n  return urls\n}\n\n// Parses uri's, favors non-coingecko images, and improves coingecko logo quality\nfunction prioritizeLogoSources(uris: string[]) {\n  const parsedUris = uris.map((uri) => uriToHttp(uri)).flat(1)\n  const preferredUris: string[] = []\n\n  // Consolidate duplicate coingecko urls into one fallback source\n  let coingeckoUrl: string | undefined = undefined\n\n  parsedUris.forEach((uri) => {\n    if (uri.startsWith('https://assets.coingecko')) {\n      if (!coingeckoUrl) {\n        coingeckoUrl = uri.replace(/small|thumb/g, 'large')\n      }\n    } else {\n      preferredUris.push(uri)\n    }\n  })\n  // Places coingecko urls in the back of the source array\n  return coingeckoUrl ? [...preferredUris, coingeckoUrl] : preferredUris\n}\n\nfunction getInitialUrl(address?: string | null, chainId?: number | null, isNative?: boolean) {\n  if (chainId && isNative) return getNativeLogoURI(chainId)\n\n  const networkName = chainId ? chainIdToNetworkName(chainId) : 'ethereum'\n  const checksummedAddress = isAddress(address)\n  if (checksummedAddress) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${checksummedAddress}/logo.png`\n  } else {\n    return undefined\n  }\n}\n\nexport default function useAssetLogoSource(\n  address?: string | null,\n  chainId?: number | null,\n  isNative?: boolean,\n  backupImg?: string | null\n): [string | undefined, () => void] {\n  const [current, setCurrent] = useState<string | undefined>(getInitialUrl(address, chainId, isNative))\n  const [fallbackSrcs, setFallbackSrcs] = useState<string[] | undefined>(undefined)\n\n  useEffect(() => {\n    setCurrent(getInitialUrl(address, chainId, isNative))\n    setFallbackSrcs(undefined)\n  }, [address, chainId, isNative])\n\n  const nextSrc = useCallback(() => {\n    if (current) {\n      BAD_SRCS[current] = true\n    }\n    // Parses and stores logo sources from tokenlists if assets repo url fails\n    if (!fallbackSrcs) {\n      const uris = TokenLogoLookupTable.getIcons(address, chainId) ?? []\n      if (backupImg) uris.push(backupImg)\n      const tokenListIcons = prioritizeLogoSources(parseLogoSources(uris))\n\n      setCurrent(tokenListIcons.find((src) => !BAD_SRCS[src]))\n      setFallbackSrcs(tokenListIcons)\n    } else {\n      setCurrent(fallbackSrcs.find((src) => !BAD_SRCS[src]))\n    }\n  }, [current, fallbackSrcs, address, chainId, backupImg])\n\n  return [current, nextSrc]\n}\n","/workspace/Physica-Interfae/src/components/CurrencyInputPanel/FiatValue.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/UniwalletModal.tsx",["3716"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceElementName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { WalletConnect } from '@web3-react/walletconnect'\nimport Column, { AutoColumn } from 'components/Column'\nimport Modal from 'components/Modal'\nimport { RowBetween } from 'components/Row'\nimport { uniwalletConnectConnection } from 'connection'\nimport { UniwalletConnect } from 'connection/WalletConnect'\nimport { QRCodeSVG } from 'qrcode.react'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useModalIsOpen, useToggleUniwalletModal } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { CloseIcon, ThemedText } from 'theme'\n\nimport uniPng from '../../assets/images/uniwallet_modal_icon.png'\nimport { DownloadButton } from './DownloadButton'\n\nconst UniwalletConnectWrapper = styled(RowBetween)`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 16px 16px;\n`\nconst HeaderRow = styled(RowBetween)`\n  display: flex;\n`\nconst QRCodeWrapper = styled(RowBetween)`\n  aspect-ratio: 1;\n  border-radius: 12px;\n  background-color: ${({ theme }) => theme.white};\n  margin: 24px 32px 20px;\n  padding: 10px;\n`\nconst Divider = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.backgroundOutline};\n  width: 100%;\n`\n\nexport default function UniwalletModal() {\n  const open = useModalIsOpen(ApplicationModal.UNIWALLET_CONNECT)\n  const toggle = useToggleUniwalletModal()\n\n  const [uri, setUri] = useState<string>()\n  useEffect(() => {\n    ;(uniwalletConnectConnection.connector as WalletConnect).events.addListener(\n      UniwalletConnect.UNI_URI_AVAILABLE,\n      (uri) => {\n        uri && setUri(uri)\n        toggle()\n      }\n    )\n  }, [toggle])\n\n  const { account } = useWeb3React()\n  useEffect(() => {\n    if (open) {\n      sendAnalyticsEvent('Uniswap wallet modal opened', { userConnected: !!account })\n      if (account) {\n        toggle()\n      }\n    }\n  }, [account, open, toggle])\n\n  const onClose = useCallback(() => {\n    uniwalletConnectConnection.connector.deactivate?.()\n    toggle()\n  }, [toggle])\n\n  const theme = useTheme()\n  return (\n    <Modal isOpen={open} onDismiss={onClose}>\n      <UniwalletConnectWrapper>\n        <HeaderRow>\n          <ThemedText.SubHeader>\n            <Trans>Scan with Uniswap Wallet</Trans>\n          </ThemedText.SubHeader>\n          <CloseIcon onClick={onClose} />\n        </HeaderRow>\n        <QRCodeWrapper>\n          {uri && (\n            <QRCodeSVG\n              value={uri}\n              width=\"100%\"\n              height=\"100%\"\n              level=\"M\"\n              fgColor={theme.darkMode ? theme.backgroundSurface : theme.black}\n              imageSettings={{\n                src: uniPng,\n                height: 33,\n                width: 33,\n                excavate: false,\n              }}\n            />\n          )}\n        </QRCodeWrapper>\n        <Divider />\n        <InfoSection />\n      </UniwalletConnectWrapper>\n    </Modal>\n  )\n}\n\nconst InfoSectionWrapper = styled(RowBetween)`\n  display: flex;\n  flex-direction: row;\n  padding-top: 20px;\n  gap: 20px;\n`\n\nfunction InfoSection() {\n  return (\n    <InfoSectionWrapper>\n      <AutoColumn gap=\"4px\">\n        <ThemedText.SubHeaderSmall color=\"textPrimary\">\n          <Trans>Don&apos;t have Uniswap Wallet?</Trans>\n        </ThemedText.SubHeaderSmall>\n        <ThemedText.Caption color=\"textSecondary\">\n          <Trans>\n            Download in the App Store to safely store your tokens and NFTs, swap tokens, and connect to crypto apps.\n          </Trans>\n        </ThemedText.Caption>\n      </AutoColumn>\n      <Column>\n        <DownloadButton element={InterfaceElementName.UNISWAP_WALLET_MODAL_DOWNLOAD_BUTTON} />\n      </Column>\n    </InfoSectionWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useClientSideV3Trade.ts",["3717","3718","3719","3720","3721","3722"],"import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Route, SwapQuoter } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useSingleContractWithCallData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isCelo } from '../constants/tokens'\nimport { useAllV3Routes } from './useAllV3Routes'\nimport { useQuoter } from './useContract'\n\nconst QUOTE_GAS_OVERRIDES: { [chainId: number]: number } = {\n  [SupportedChainId.ARBITRUM_ONE]: 25_000_000,\n  [SupportedChainId.ARBITRUM_GOERLI]: 25_000_000,\n  [SupportedChainId.CELO]: 50_000_000,\n  [SupportedChainId.CELO_ALFAJORES]: 50_000_000,\n  [SupportedChainId.POLYGON]: 40_000_000,\n  [SupportedChainId.POLYGON_MUMBAI]: 40_000_000,\n  [SupportedChainId.BNB]: 50_000_000,\n}\n\nconst DEFAULT_GAS_QUOTE = 2_000_000\n\n/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useClientSideV3Trade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): { state: TradeState; trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined } {\n  const [currencyIn, currencyOut] =\n    tradeType === TradeType.EXACT_INPUT\n      ? [amountSpecified?.currency, otherCurrency]\n      : [otherCurrency, amountSpecified?.currency]\n  const { routes, loading: routesLoading } = useAllV3Routes(currencyIn, currencyOut)\n\n  const { chainId } = useWeb3React()\n  // Chains deployed using the deploy-v3 script only deploy QuoterV2.\n  const useQuoterV2 = useMemo(() => Boolean(chainId && isCelo(chainId)), [chainId])\n  const quoter = useQuoter(useQuoterV2)\n  const callData = useMemo(\n    () =>\n      amountSpecified\n        ? routes.map(\n            (route) => SwapQuoter.quoteCallParameters(route, amountSpecified, tradeType, { useQuoterV2 }).calldata\n          )\n        : [],\n    [amountSpecified, routes, tradeType, useQuoterV2]\n  )\n\n  const quotesResults = useSingleContractWithCallData(quoter, callData, {\n    gasRequired: chainId ? QUOTE_GAS_OVERRIDES[chainId] ?? DEFAULT_GAS_QUOTE : undefined,\n  })\n\n  const currenciesAreTheSame = useMemo(\n    () => currencyIn && currencyOut && (currencyIn.equals(currencyOut) || currencyIn.wrapped.equals(currencyOut)),\n    [currencyIn, currencyOut]\n  )\n\n  return useMemo(() => {\n    if (\n      !amountSpecified ||\n      !currencyIn ||\n      !currencyOut ||\n      quotesResults.some(({ valid }) => !valid) ||\n      currenciesAreTheSame\n    ) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (routesLoading || quotesResults.some(({ loading }) => loading)) {\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    const { bestRoute, amountIn, amountOut } = quotesResults.reduce(\n      (\n        currentBest: {\n          bestRoute: Route<Currency, Currency> | null\n          amountIn: CurrencyAmount<Currency> | null\n          amountOut: CurrencyAmount<Currency> | null\n        },\n        { result },\n        i\n      ) => {\n        if (!result) return currentBest\n\n        // overwrite the current best if it's not defined or if this route is better\n        if (tradeType === TradeType.EXACT_INPUT) {\n          const amountOut = CurrencyAmount.fromRawAmount(currencyOut, result.amountOut.toString())\n          if (currentBest.amountOut === null || JSBI.lessThan(currentBest.amountOut.quotient, amountOut.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn: amountSpecified,\n              amountOut,\n            }\n          }\n        } else {\n          const amountIn = CurrencyAmount.fromRawAmount(currencyIn, result.amountIn.toString())\n          if (currentBest.amountIn === null || JSBI.greaterThan(currentBest.amountIn.quotient, amountIn.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn,\n              amountOut: amountSpecified,\n            }\n          }\n        }\n\n        return currentBest\n      },\n      {\n        bestRoute: null,\n        amountIn: null,\n        amountOut: null,\n      }\n    )\n\n    if (!bestRoute || !amountIn || !amountOut) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    return {\n      state: TradeState.VALID,\n      trade: new InterfaceTrade({\n        v2Routes: [],\n        v3Routes: [\n          {\n            routev3: bestRoute,\n            inputAmount: amountIn,\n            outputAmount: amountOut,\n          },\n        ],\n        tradeType,\n      }),\n    }\n  }, [amountSpecified, currenciesAreTheSame, currencyIn, currencyOut, quotesResults, routes, routesLoading, tradeType])\n}\n","/workspace/Physica-Interfae/src/hooks/useGasPrice.ts",[],"/workspace/Physica-Interfae/src/hooks/useENSName.ts",["3723","3724"],"import { namehash } from '@ethersproject/hash'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\nimport useDebounce from './useDebounce'\nimport useENSAddress from './useENSAddress'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    return [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)]\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const nameCallRes = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n  const name = nameCallRes.result?.[0]\n\n  /* ENS does not enforce that an address owns a .eth domain before setting it as a reverse proxy \n     and recommends that you perform a match on the forward resolution\n     see: https://docs.ens.domains/dapp-developer-guide/resolving-names#reverse-resolution\n  */\n  const fwdAddr = useENSAddress(name)\n  const checkedName = address === fwdAddr?.address ? name : null\n\n  const changed = debouncedAddress !== address\n  return useMemo(\n    () => ({\n      ENSName: changed ? null : checkedName,\n      loading: changed || resolverAddress.loading || nameCallRes.loading,\n    }),\n    [changed, nameCallRes.loading, checkedName, resolverAddress.loading]\n  )\n}\n","/workspace/Physica-Interfae/src/components/AddressInputPanel/index.tsx",["3725"],"import { Trans } from '@lingui/macro'\n// eslint-disable-next-line no-restricted-imports\nimport { t } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { ChangeEvent, ReactNode, useCallback } from 'react'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { flexColumnNoWrap } from 'theme/styles'\n\nimport useENS from '../../hooks/useENS'\nimport { ExternalLink, ThemedText } from '../../theme'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\n\nconst InputPanel = styled.div`\n  ${flexColumnNoWrap};\n  position: relative;\n  border-radius: 1.25rem;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  z-index: 1;\n  width: 100%;\n`\n\nconst ContainerRow = styled.div<{ error: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 1.25rem;\n  border: 1px solid ${({ error, theme }) => (error ? theme.accentFailure : theme.backgroundInteractive)};\n  transition: border-color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')},\n    color 500ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n`\n\nconst InputContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n`\n\nconst Input = styled.input<{ error?: boolean }>`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  color: ${({ error, theme }) => (error ? theme.accentFailure : theme.textPrimary)};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: ${({ theme }) => theme.deprecated_text4};\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.deprecated_text4};\n  }\n`\n\nexport default function AddressInputPanel({\n  id,\n  className = 'recipient-address-input',\n  label,\n  placeholder,\n  value,\n  onChange,\n}: {\n  id?: string\n  className?: string\n  label?: ReactNode\n  placeholder?: string\n  // the typed string value\n  value: string\n  // triggers whenever the typed value changes\n  onChange: (value: string) => void\n}) {\n  const { chainId } = useWeb3React()\n  const theme = useTheme()\n\n  const { address, loading, name } = useENS(value)\n\n  const handleInput = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const input = event.target.value\n      const withoutSpaces = input.replace(/\\s+/g, '')\n      onChange(withoutSpaces)\n    },\n    [onChange]\n  )\n\n  const error = Boolean(value.length > 0 && !loading && !address)\n\n  return (\n    <InputPanel id={id}>\n      <ContainerRow error={error}>\n        <InputContainer>\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <ThemedText.DeprecatedBlack color={theme.textSecondary} fontWeight={500} fontSize={14}>\n                {label ?? <Trans>Recipient</Trans>}\n              </ThemedText.DeprecatedBlack>\n              {address && chainId && (\n                <ExternalLink\n                  href={getExplorerLink(chainId, name ?? address, ExplorerDataType.ADDRESS)}\n                  style={{ fontSize: '14px' }}\n                >\n                  <Trans>(View on Explorer)</Trans>\n                </ExternalLink>\n              )}\n            </RowBetween>\n            <Input\n              className={className}\n              type=\"text\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              placeholder={placeholder ?? t`Wallet Address or ENS name`}\n              error={error}\n              pattern=\"^(0x[a-fA-F0-9]{40})$\"\n              onChange={handleInput}\n              value={value}\n            />\n          </AutoColumn>\n        </InputContainer>\n      </ContainerRow>\n    </InputPanel>\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useENSAddress.ts",["3726","3727"],"import { namehash } from '@ethersproject/hash'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\nimport useDebounce from './useDebounce'\n\n/**\n * Does a lookup for an ENS name to find its address.\n */\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\n  const debouncedName = useDebounce(ensName, 200)\n  const ensNodeArgument = useMemo(() => [debouncedName ? namehash(debouncedName) : undefined], [debouncedName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\n\n  const changed = debouncedName !== ensName\n  return useMemo(\n    () => ({\n      address: changed ? null : addr.result?.[0] ?? null,\n      loading: changed || resolverAddress.loading || addr.loading,\n    }),\n    [addr.loading, addr.result, changed, resolverAddress.loading]\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useAutoRouterSupported.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/SettingsMenu.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/AuthenticatedHeader.tsx",["3728","3729"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName, SharedEventName } from '@uniswap/analytics-events'\nimport { formatNumber, NumberType } from '@uniswap/conedison/format'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonEmphasis, ButtonSize, LoadingButtonSpinner, ThemeButton } from 'components/Button'\nimport Column from 'components/Column'\nimport { AutoRow } from 'components/Row'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { formatDelta } from 'components/Tokens/TokenDetails/PriceChart'\nimport Tooltip from 'components/Tooltip'\nimport { useGetConnection } from 'connection'\nimport { usePortfolioBalancesQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { useAtomValue } from 'jotai/utils'\nimport { useProfilePageState, useSellAsset, useWalletCollections } from 'nft/hooks'\nimport { useIsNftClaimAvailable } from 'nft/hooks/useIsNftClaimAvailable'\nimport { ProfilePageStateType } from 'nft/types'\nimport { useCallback, useState } from 'react'\nimport { ArrowDownRight, ArrowUpRight, Copy, CreditCard, IconProps, Info, Power, Settings } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport { shouldDisableNFTRoutesAtom } from 'state/application/atoms'\nimport { useAppDispatch } from 'state/hooks'\nimport { updateSelectedWallet } from 'state/user/reducer'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { CopyHelper, ExternalLink, ThemedText } from 'theme'\n\nimport { shortenAddress } from '../../nft/utils/address'\nimport { useCloseModal, useFiatOnrampAvailability, useOpenModal, useToggleModal } from '../../state/application/hooks'\nimport { ApplicationModal } from '../../state/application/reducer'\nimport { useUserHasAvailableClaim, useUserUnclaimedAmount } from '../../state/claim/hooks'\nimport StatusIcon from '../Identicon/StatusIcon'\nimport { useToggleAccountDrawer } from '.'\nimport IconButton, { IconHoverText } from './IconButton'\nimport MiniPortfolio from './MiniPortfolio'\nimport { portfolioFadeInAnimation } from './MiniPortfolio/PortfolioRow'\n\nconst AuthenticatedHeaderWrapper = styled.div`\n  padding: 20px 16px;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`\n\nconst HeaderButton = styled(ThemeButton)`\n  border-color: transparent;\n  border-radius: 12px;\n  border-style: solid;\n  border-width: 1px;\n  height: 40px;\n  margin-top: 8px;\n`\n\nconst WalletButton = styled(ThemeButton)`\n  border-radius: 12px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  margin-top: 4px;\n  color: white;\n  border: none;\n`\n\nconst UNIButton = styled(WalletButton)`\n  border-radius: 12px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  margin-top: 4px;\n  color: white;\n  border: none;\n  background: linear-gradient(to right, #9139b0 0%, #4261d6 100%);\n`\n\nconst IconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  & > a,\n  & > button {\n    margin-right: 8px;\n  }\n\n  & > button:last-child {\n    margin-right: 0px;\n    ${IconHoverText}:last-child {\n      left: 0px;\n    }\n  }\n`\nconst FiatOnrampNotAvailableText = styled(ThemedText.Caption)`\n  align-items: center;\n  color: ${({ theme }) => theme.textSecondary};\n  display: flex;\n  justify-content: center;\n`\nconst FiatOnrampAvailabilityExternalLink = styled(ExternalLink)`\n  align-items: center;\n  display: flex;\n  height: 14px;\n  justify-content: center;\n  margin-left: 6px;\n  width: 14px;\n`\n\nconst StatusWrapper = styled.div`\n  display: inline-block;\n  width: 70%;\n  padding-right: 4px;\n  display: inline-flex;\n`\n\nconst AccountNamesWrapper = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  justify-content: center;\n  gap: 4px;\n`\n\nconst StyledInfoIcon = styled(Info)`\n  height: 12px;\n  width: 12px;\n  flex: 1 1 auto;\n`\nconst StyledLoadingButtonSpinner = styled(LoadingButtonSpinner)`\n  fill: ${({ theme }) => theme.accentAction};\n`\n\nconst HeaderWrapper = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n`\n\nconst CopyText = styled(CopyHelper).attrs({\n  InitialIcon: Copy,\n  CopiedIcon: Copy,\n  gap: 4,\n  iconSize: 14,\n  iconPosition: 'right',\n})``\n\nconst FadeInColumn = styled(Column)`\n  ${portfolioFadeInAnimation}\n`\n\nconst PortfolioDrawerContainer = styled(Column)`\n  flex: 1;\n`\n\nexport function PortfolioArrow({ change, ...rest }: { change: number } & IconProps) {\n  const theme = useTheme()\n  return change < 0 ? (\n    <ArrowDownRight color={theme.accentCritical} size={20} {...rest} />\n  ) : (\n    <ArrowUpRight color={theme.accentSuccess} size={20} {...rest} />\n  )\n}\n\nexport default function AuthenticatedHeader({ account, openSettings }: { account: string; openSettings: () => void }) {\n  const { connector, ENSName } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n  const closeModal = useCloseModal()\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\n  const resetSellAssets = useSellAsset((state) => state.reset)\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\n  const isClaimAvailable = useIsNftClaimAvailable((state) => state.isClaimAvailable)\n\n  const shouldDisableNFTRoutes = useAtomValue(shouldDisableNFTRoutesAtom)\n\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const isUnclaimed = useUserHasAvailableClaim(account)\n  const getConnection = useGetConnection()\n  const connection = getConnection(connector)\n  const openClaimModal = useToggleModal(ApplicationModal.ADDRESS_CLAIM)\n  const openNftModal = useToggleModal(ApplicationModal.UNISWAP_NFT_AIRDROP_CLAIM)\n  const disconnect = useCallback(() => {\n    if (connector && connector.deactivate) {\n      connector.deactivate()\n    }\n    connector.resetState()\n    dispatch(updateSelectedWallet({ wallet: undefined }))\n  }, [connector, dispatch])\n\n  const toggleWalletDrawer = useToggleAccountDrawer()\n\n  const navigateToProfile = useCallback(() => {\n    toggleWalletDrawer()\n    resetSellAssets()\n    setSellPageState(ProfilePageStateType.VIEWING)\n    clearCollectionFilters()\n    navigate('/nfts/profile')\n    closeModal()\n  }, [clearCollectionFilters, closeModal, navigate, resetSellAssets, setSellPageState, toggleWalletDrawer])\n\n  const openFiatOnrampModal = useOpenModal(ApplicationModal.FIAT_ONRAMP)\n  const openFoRModalWithAnalytics = useCallback(() => {\n    toggleWalletDrawer()\n    sendAnalyticsEvent(InterfaceEventName.FIAT_ONRAMP_WIDGET_OPENED)\n    openFiatOnrampModal()\n  }, [openFiatOnrampModal, toggleWalletDrawer])\n\n  const [shouldCheck, setShouldCheck] = useState(false)\n  const {\n    available: fiatOnrampAvailable,\n    availabilityChecked: fiatOnrampAvailabilityChecked,\n    error,\n    loading: fiatOnrampAvailabilityLoading,\n  } = useFiatOnrampAvailability(shouldCheck, openFoRModalWithAnalytics)\n\n  const handleBuyCryptoClick = useCallback(() => {\n    if (!fiatOnrampAvailabilityChecked) {\n      setShouldCheck(true)\n    } else if (fiatOnrampAvailable) {\n      openFoRModalWithAnalytics()\n    }\n  }, [fiatOnrampAvailabilityChecked, fiatOnrampAvailable, openFoRModalWithAnalytics])\n  const disableBuyCryptoButton = Boolean(\n    error || (!fiatOnrampAvailable && fiatOnrampAvailabilityChecked) || fiatOnrampAvailabilityLoading\n  )\n  const [showFiatOnrampUnavailableTooltip, setShow] = useState<boolean>(false)\n  const openFiatOnrampUnavailableTooltip = useCallback(() => setShow(true), [setShow])\n  const closeFiatOnrampUnavailableTooltip = useCallback(() => setShow(false), [setShow])\n\n  const { data: portfolioBalances } = usePortfolioBalancesQuery({\n    variables: { ownerAddress: account ?? '' },\n    fetchPolicy: 'cache-only', // PrefetchBalancesWrapper handles balance fetching/staleness; this component only reads from cache\n  })\n  const portfolio = portfolioBalances?.portfolios?.[0]\n  const totalBalance = portfolio?.tokensTotalDenominatedValue?.value\n  const absoluteChange = portfolio?.tokensTotalDenominatedValueChange?.absolute?.value\n  const percentChange = portfolio?.tokensTotalDenominatedValueChange?.percentage?.value\n\n  return (\n    <AuthenticatedHeaderWrapper>\n      <HeaderWrapper>\n        <StatusWrapper>\n          <StatusIcon connection={connection} size={40} />\n          {account && (\n            <AccountNamesWrapper>\n              <ThemedText.SubHeader color=\"textPrimary\" fontWeight={500}>\n                <CopyText toCopy={ENSName ?? account}>{ENSName ?? shortenAddress(account, 4, 4)}</CopyText>\n              </ThemedText.SubHeader>\n              {/* Displays smaller view of account if ENS name was rendered above */}\n              {ENSName && (\n                <ThemedText.BodySmall color=\"textTertiary\">\n                  <CopyText toCopy={account}>{shortenAddress(account, 4, 4)}</CopyText>\n                </ThemedText.BodySmall>\n              )}\n            </AccountNamesWrapper>\n          )}\n        </StatusWrapper>\n        <IconContainer>\n          <IconButton data-testid=\"wallet-settings\" onClick={openSettings} Icon={Settings} />\n          <TraceEvent\n            events={[BrowserEvent.onClick]}\n            name={SharedEventName.ELEMENT_CLICKED}\n            element={InterfaceElementName.DISCONNECT_WALLET_BUTTON}\n          >\n            <IconButton data-testid=\"wallet-disconnect\" onClick={disconnect} Icon={Power} />\n          </TraceEvent>\n        </IconContainer>\n      </HeaderWrapper>\n      <PortfolioDrawerContainer>\n        {totalBalance !== undefined ? (\n          <FadeInColumn gap=\"xs\">\n            <ThemedText.HeadlineLarge fontWeight={500}>\n              {formatNumber(totalBalance, NumberType.PortfolioBalance)}\n            </ThemedText.HeadlineLarge>\n            <AutoRow marginBottom=\"20px\">\n              {absoluteChange !== 0 && percentChange && (\n                <>\n                  <PortfolioArrow change={absoluteChange as number} />\n                  <ThemedText.BodySecondary>\n                    {`${formatNumber(Math.abs(absoluteChange as number), NumberType.PortfolioBalance)} (${formatDelta(\n                      percentChange\n                    )})`}\n                  </ThemedText.BodySecondary>\n                </>\n              )}\n            </AutoRow>\n          </FadeInColumn>\n        ) : (\n          <Column gap=\"xs\">\n            <LoadingBubble height=\"44px\" width=\"170px\" />\n            <LoadingBubble height=\"16px\" width=\"100px\" margin=\"4px 0 20px 0\" />\n          </Column>\n        )}\n        {!shouldDisableNFTRoutes && (\n          <HeaderButton\n            data-testid=\"nft-view-self-nfts\"\n            onClick={navigateToProfile}\n            size={ButtonSize.medium}\n            emphasis={ButtonEmphasis.medium}\n          >\n            <Trans>View and sell NFTs</Trans>\n          </HeaderButton>\n        )}\n        <HeaderButton\n          size={ButtonSize.medium}\n          emphasis={ButtonEmphasis.medium}\n          onClick={handleBuyCryptoClick}\n          disabled={disableBuyCryptoButton}\n          data-testid=\"wallet-buy-crypto\"\n        >\n          {error ? (\n            <ThemedText.BodyPrimary>{error}</ThemedText.BodyPrimary>\n          ) : (\n            <>\n              {fiatOnrampAvailabilityLoading ? (\n                <StyledLoadingButtonSpinner />\n              ) : (\n                <CreditCard height=\"20px\" width=\"20px\" />\n              )}{' '}\n              <Trans>Buy crypto</Trans>\n            </>\n          )}\n        </HeaderButton>\n        {Boolean(!fiatOnrampAvailable && fiatOnrampAvailabilityChecked) && (\n          <FiatOnrampNotAvailableText marginTop=\"8px\">\n            <Trans>Not available in your region</Trans>\n            <Tooltip\n              show={showFiatOnrampUnavailableTooltip}\n              text={<Trans>Moonpay is not available in some regions. Click to learn more.</Trans>}\n            >\n              <FiatOnrampAvailabilityExternalLink\n                onMouseEnter={openFiatOnrampUnavailableTooltip}\n                onMouseLeave={closeFiatOnrampUnavailableTooltip}\n                style={{ color: 'inherit' }}\n                href=\"https://support.uniswap.org/hc/en-us/articles/11306664890381-Why-isn-t-MoonPay-available-in-my-region-\"\n              >\n                <StyledInfoIcon />\n              </FiatOnrampAvailabilityExternalLink>\n            </Tooltip>\n          </FiatOnrampNotAvailableText>\n        )}\n        <MiniPortfolio account={account} />\n        {isUnclaimed && (\n          <UNIButton onClick={openClaimModal} size={ButtonSize.medium} emphasis={ButtonEmphasis.medium}>\n            <Trans>Claim</Trans> {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} <Trans>reward</Trans>\n          </UNIButton>\n        )}\n        {isClaimAvailable && (\n          <UNIButton size={ButtonSize.medium} emphasis={ButtonEmphasis.medium} onClick={openNftModal}>\n            <Trans>Claim Uniswap NFT Airdrop</Trans>\n          </UNIButton>\n        )}\n      </PortfolioDrawerContainer>\n    </AuthenticatedHeaderWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/lib/hooks/useTokenList/sorting.ts",[],"/workspace/Physica-Interfae/src/components/TokenSafety/index.tsx",[],"/workspace/Physica-Interfae/src/lib/hooks/useTokenList/filtering.ts",[],"/workspace/Physica-Interfae/src/components/SearchModal/CurrencyList/index.tsx",["3730","3731"],"import { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport TokenSafetyIcon from 'components/TokenSafety/TokenSafetyIcon'\nimport { checkWarning } from 'constants/tokenSafety'\nimport { CSSProperties, MutableRefObject, useCallback, useMemo } from 'react'\nimport { Check } from 'react-feather'\nimport { FixedSizeList } from 'react-window'\nimport { Text } from 'rebass'\nimport styled from 'styled-components/macro'\n\nimport { useIsUserAddedToken } from '../../../hooks/Tokens'\nimport { useCurrencyBalance } from '../../../state/connection/hooks'\nimport { WrappedTokenInfo } from '../../../state/lists/wrappedTokenInfo'\nimport { ThemedText } from '../../../theme'\nimport Column, { AutoColumn } from '../../Column'\nimport CurrencyLogo from '../../Logo/CurrencyLogo'\nimport Row, { RowFixed } from '../../Row'\nimport { MouseoverTooltip } from '../../Tooltip'\nimport { LoadingRows, MenuItem } from '../styleds'\nimport { scrollbarStyle } from './index.css'\n\nfunction currencyKey(currency: Currency): string {\n  return currency.isToken ? currency.address : 'ETHER'\n}\n\nconst CheckIcon = styled(Check)`\n  height: 20px;\n  width: 20px;\n  margin-left: 4px;\n  color: ${({ theme }) => theme.accentAction};\n`\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`\n\nconst CurrencyName = styled(Text)`\n  font-weight: 500;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst Tag = styled.div`\n  background-color: ${({ theme }) => theme.deprecated_bg3};\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  border-radius: 4px;\n  padding: 0.25rem 0.3rem 0.25rem 0.3rem;\n  max-width: 6rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  justify-self: flex-end;\n  margin-right: 4px;\n`\n\nconst WarningContainer = styled.div`\n  margin-left: 0.3em;\n`\n\nconst ListWrapper = styled.div`\n  padding-right: 0.25rem;\n`\n\nfunction Balance({ balance }: { balance: CurrencyAmount<Currency> }) {\n  return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\n}\n\nconst TagContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n\nfunction TokenTags({ currency }: { currency: Currency }) {\n  if (!(currency instanceof WrappedTokenInfo)) {\n    return null\n  }\n\n  const tags = currency.tags\n  if (!tags || tags.length === 0) return <span />\n\n  const tag = tags[0]\n\n  return (\n    <TagContainer>\n      <MouseoverTooltip text={tag.description}>\n        <Tag key={tag.id}>{tag.name}</Tag>\n      </MouseoverTooltip>\n      {tags.length > 1 ? (\n        <MouseoverTooltip\n          text={tags\n            .slice(1)\n            .map(({ name, description }) => `${name}: ${description}`)\n            .join('; \\n')}\n        >\n          <Tag>...</Tag>\n        </MouseoverTooltip>\n      ) : null}\n    </TagContainer>\n  )\n}\n\nexport function CurrencyRow({\n  currency,\n  onSelect,\n  isSelected,\n  otherSelected,\n  style,\n  showCurrencyAmount,\n  eventProperties,\n}: {\n  currency: Currency\n  onSelect: (hasWarning: boolean) => void\n  isSelected: boolean\n  otherSelected: boolean\n  style?: CSSProperties\n  showCurrencyAmount?: boolean\n  eventProperties: Record<string, unknown>\n}) {\n  const { account } = useWeb3React()\n  const key = currencyKey(currency)\n  const customAdded = useIsUserAddedToken(currency)\n  const balance = useCurrencyBalance(account ?? undefined, currency)\n  const warning = currency.isNative ? null : checkWarning(currency.address)\n  const isBlockedToken = !!warning && !warning.canProceed\n  const blockedTokenOpacity = '0.6'\n\n  // only show add or remove buttons if not on selected list\n  return (\n    <TraceEvent\n      events={[BrowserEvent.onClick, BrowserEvent.onKeyPress]}\n      name={InterfaceEventName.TOKEN_SELECTED}\n      properties={{ is_imported_by_user: customAdded, ...eventProperties }}\n      element={InterfaceElementName.TOKEN_SELECTOR_ROW}\n    >\n      <MenuItem\n        tabIndex={0}\n        style={style}\n        className={`token-item-${key}`}\n        onKeyPress={(e) => (!isSelected && e.key === 'Enter' ? onSelect(!!warning) : null)}\n        onClick={() => (isSelected ? null : onSelect(!!warning))}\n        disabled={isSelected}\n        selected={otherSelected}\n        dim={isBlockedToken}\n      >\n        <Column>\n          <CurrencyLogo\n            currency={currency}\n            size=\"36px\"\n            style={{ opacity: isBlockedToken ? blockedTokenOpacity : '1' }}\n          />\n        </Column>\n        <AutoColumn style={{ opacity: isBlockedToken ? blockedTokenOpacity : '1' }}>\n          <Row>\n            <CurrencyName title={currency.name}>{currency.name}</CurrencyName>\n            <WarningContainer>\n              <TokenSafetyIcon warning={warning} />\n            </WarningContainer>\n          </Row>\n          <ThemedText.DeprecatedDarkGray ml=\"0px\" fontSize=\"12px\" fontWeight={300}>\n            {currency.symbol}\n          </ThemedText.DeprecatedDarkGray>\n        </AutoColumn>\n        <Column>\n          <RowFixed style={{ justifySelf: 'flex-end' }}>\n            <TokenTags currency={currency} />\n          </RowFixed>\n        </Column>\n        {showCurrencyAmount ? (\n          <RowFixed style={{ justifySelf: 'flex-end' }}>\n            {balance ? <Balance balance={balance} /> : account ? <Loader /> : null}\n            {isSelected && <CheckIcon />}\n          </RowFixed>\n        ) : (\n          isSelected && (\n            <RowFixed style={{ justifySelf: 'flex-end' }}>\n              <CheckIcon />\n            </RowFixed>\n          )\n        )}\n      </MenuItem>\n    </TraceEvent>\n  )\n}\n\ninterface TokenRowProps {\n  data: Array<Currency>\n  index: number\n  style: CSSProperties\n}\n\nexport const formatAnalyticsEventProperties = (\n  token: Token,\n  index: number,\n  data: any[],\n  searchQuery: string,\n  isAddressSearch: string | false\n) => ({\n  token_symbol: token?.symbol,\n  token_address: token?.address,\n  is_suggested_token: false,\n  is_selected_from_list: true,\n  scroll_position: '',\n  token_list_index: index,\n  token_list_length: data.length,\n  ...(isAddressSearch === false\n    ? { search_token_symbol_input: searchQuery }\n    : { search_token_address_input: isAddressSearch }),\n})\n\nconst LoadingRow = () => (\n  <LoadingRows data-testid=\"loading-rows\">\n    <div />\n    <div />\n    <div />\n  </LoadingRows>\n)\n\nexport default function CurrencyList({\n  height,\n  currencies,\n  otherListTokens,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  fixedListRef,\n  showCurrencyAmount,\n  isLoading,\n  searchQuery,\n  isAddressSearch,\n}: {\n  height: number\n  currencies: Currency[]\n  otherListTokens?: WrappedTokenInfo[]\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency, hasWarning?: boolean) => void\n  otherCurrency?: Currency | null\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>\n  showCurrencyAmount?: boolean\n  isLoading: boolean\n  searchQuery: string\n  isAddressSearch: string | false\n}) {\n  const itemData: Currency[] = useMemo(() => {\n    if (otherListTokens && otherListTokens?.length > 0) {\n      return [...currencies, ...otherListTokens]\n    }\n    return currencies\n  }, [currencies, otherListTokens])\n\n  const Row = useCallback(\n    function TokenRow({ data, index, style }: TokenRowProps) {\n      const row: Currency = data[index]\n\n      const currency = row\n\n      const isSelected = Boolean(currency && selectedCurrency && selectedCurrency.equals(currency))\n      const otherSelected = Boolean(currency && otherCurrency && otherCurrency.equals(currency))\n      const handleSelect = (hasWarning: boolean) => currency && onCurrencySelect(currency, hasWarning)\n\n      const token = currency?.wrapped\n\n      if (isLoading) {\n        return LoadingRow()\n      } else if (currency) {\n        return (\n          <CurrencyRow\n            style={style}\n            currency={currency}\n            isSelected={isSelected}\n            onSelect={handleSelect}\n            otherSelected={otherSelected}\n            showCurrencyAmount={showCurrencyAmount}\n            eventProperties={formatAnalyticsEventProperties(token, index, data, searchQuery, isAddressSearch)}\n          />\n        )\n      } else {\n        return null\n      }\n    },\n    [onCurrencySelect, otherCurrency, selectedCurrency, showCurrencyAmount, isLoading, isAddressSearch, searchQuery]\n  )\n\n  const itemKey = useCallback((index: number, data: typeof itemData) => {\n    const currency = data[index]\n    return currencyKey(currency)\n  }, [])\n\n  return (\n    <ListWrapper>\n      {isLoading ? (\n        <FixedSizeList\n          className={scrollbarStyle}\n          height={height}\n          ref={fixedListRef as any}\n          width=\"100%\"\n          itemData={[]}\n          itemCount={10}\n          itemSize={56}\n        >\n          {LoadingRow}\n        </FixedSizeList>\n      ) : (\n        <FixedSizeList\n          className={scrollbarStyle}\n          height={height}\n          ref={fixedListRef as any}\n          width=\"100%\"\n          itemData={itemData}\n          itemCount={itemData.length}\n          itemSize={56}\n          itemKey={itemKey}\n        >\n          {Row}\n        </FixedSizeList>\n      )}\n    </ListWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/utils/formatCurrencyAmount.ts",["3732"],"import { Currency, CurrencyAmount, Fraction } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SupportedLocale } from 'constants/locales'\nimport JSBI from 'jsbi'\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\n\nexport function formatCurrencyAmount(\n  amount: CurrencyAmount<Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE,\n  fixedDecimals?: number\n): string {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: amount, locale, sigFigs, fixedDecimals })\n}\n","/workspace/Physica-Interfae/src/lib/hooks/useNativeCurrency.ts",["3733"],"import { NativeCurrency, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { useMemo } from 'react'\n\nexport default function useNativeCurrency(): NativeCurrency | Token {\n  const { chainId } = useWeb3React()\n  return useMemo(\n    () =>\n      chainId\n        ? nativeOnChain(chainId)\n        : // display mainnet when not connected\n          nativeOnChain(SupportedChainId.MAINNET),\n    [chainId]\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useToggle.ts",[],"/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyIcon.tsx",[],"/workspace/Physica-Interfae/src/components/DoubleLogo/index.tsx",[],"/workspace/Physica-Interfae/src/hooks/useAllV3Routes.ts",["3734","3735","3736"],"import { Currency } from '@uniswap/sdk-core'\nimport { Pool, Route } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useMemo } from 'react'\n\nimport { useV3SwapPools } from './useV3SwapPools'\n\n/**\n * Returns true if poolA is equivalent to poolB\n * @param poolA one of the two pools\n * @param poolB the other pool\n */\nfunction poolEquals(poolA: Pool, poolB: Pool): boolean {\n  return (\n    poolA === poolB ||\n    (poolA.token0.equals(poolB.token0) && poolA.token1.equals(poolB.token1) && poolA.fee === poolB.fee)\n  )\n}\n\nfunction computeAllRoutes(\n  currencyIn: Currency,\n  currencyOut: Currency,\n  pools: Pool[],\n  chainId: number,\n  currentPath: Pool[] = [],\n  allPaths: Route<Currency, Currency>[] = [],\n  startCurrencyIn: Currency = currencyIn,\n  maxHops = 2\n): Route<Currency, Currency>[] {\n  const tokenIn = currencyIn?.wrapped\n  const tokenOut = currencyOut?.wrapped\n  if (!tokenIn || !tokenOut) throw new Error('Missing tokenIn/tokenOut')\n\n  for (const pool of pools) {\n    if (!pool.involvesToken(tokenIn) || currentPath.find((pathPool) => poolEquals(pool, pathPool))) continue\n\n    const outputToken = pool.token0.equals(tokenIn) ? pool.token1 : pool.token0\n    if (outputToken.equals(tokenOut)) {\n      allPaths.push(new Route([...currentPath, pool], startCurrencyIn, currencyOut))\n    } else if (maxHops > 1) {\n      computeAllRoutes(\n        outputToken,\n        currencyOut,\n        pools,\n        chainId,\n        [...currentPath, pool],\n        allPaths,\n        startCurrencyIn,\n        maxHops - 1\n      )\n    }\n  }\n\n  return allPaths\n}\n\n/**\n * Returns all the routes from an input currency to an output currency\n * @param currencyIn the input currency\n * @param currencyOut the output currency\n */\nexport function useAllV3Routes(\n  currencyIn?: Currency,\n  currencyOut?: Currency\n): { loading: boolean; routes: Route<Currency, Currency>[] } {\n  const { chainId } = useWeb3React()\n  const { pools, loading: poolsLoading } = useV3SwapPools(currencyIn, currencyOut)\n\n  return useMemo(() => {\n    if (poolsLoading || !chainId || !pools || !currencyIn || !currencyOut) return { loading: true, routes: [] }\n\n    const routes = computeAllRoutes(currencyIn, currencyOut, pools, chainId, [], [], currencyIn, 2)\n    return { loading: false, routes }\n  }, [chainId, currencyIn, currencyOut, pools, poolsLoading])\n}\n","/workspace/Physica-Interfae/src/utils/isZero.ts",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/DownloadButton.tsx",["3737"],"import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceElementName, InterfaceEventName, SharedEventName } from '@uniswap/analytics-events'\nimport { PropsWithChildren, useCallback } from 'react'\nimport styled from 'styled-components/macro'\nimport { ClickableStyle } from 'theme'\nimport { isIOS } from 'utils/userAgent'\n\nconst StyledButton = styled.button<{ padded?: boolean; branded?: boolean }>`\n  ${ClickableStyle}\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  gap: 6px;\n  padding: 8px 24px;\n  border: none;\n  white-space: nowrap;\n  background: ${({ theme, branded }) => (branded ? theme.promotionalGradient : theme.backgroundInteractive)};\n  border-radius: 12px;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n  color: ${({ theme, branded }) => (branded ? theme.accentTextLightPrimary : theme.textPrimary)};\n`\n\nfunction BaseButton({ onClick, branded, children }: PropsWithChildren<{ onClick?: () => void; branded?: boolean }>) {\n  return (\n    <StyledButton branded={branded} onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nconst APP_STORE_LINK = 'https://apps.apple.com/app/apple-store/id6443944476?pt=123625782&ct=In-App-Banners&mt=8'\nconst MICROSITE_LINK = 'https://wallet.uniswap.org/'\n\nconst openAppStore = () => {\n  window.open(APP_STORE_LINK, /* target = */ 'uniswap_wallet_appstore')\n}\nexport const openWalletMicrosite = () => {\n  sendAnalyticsEvent(InterfaceEventName.UNISWAP_WALLET_MICROSITE_OPENED)\n  window.open(MICROSITE_LINK, /* target = */ 'uniswap_wallet_microsite')\n}\n\nexport function openDownloadApp(element: InterfaceElementName) {\n  sendAnalyticsEvent(SharedEventName.ELEMENT_CLICKED, { element })\n  if (isIOS) openAppStore()\n  else openWalletMicrosite()\n}\n\n// Launches App Store if on an iOS device, else navigates to Uniswap Wallet microsite\nexport function DownloadButton({\n  onClick,\n  text = 'Download',\n  element,\n}: {\n  onClick?: () => void\n  text?: string\n  element: InterfaceElementName\n}) {\n  const onButtonClick = useCallback(() => {\n    // handles any actions required by the parent, i.e. cancelling wallet connection attempt or dismissing an ad\n    onClick?.()\n    openDownloadApp(element)\n  }, [element, onClick])\n\n  return (\n    <BaseButton branded onClick={onButtonClick}>\n      {text}\n    </BaseButton>\n  )\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/SmallBalanceToggle.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/PortfolioRow.tsx",[],"/workspace/Physica-Interfae/src/lib/utils/analytics.ts",["3738","3739","3740"],"import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, Price, Token, TradeType } from '@uniswap/sdk-core'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\nexport const getDurationUntilTimestampSeconds = (futureTimestampInSecondsSinceEpoch?: number): number | undefined => {\n  if (!futureTimestampInSecondsSinceEpoch) return undefined\n  return futureTimestampInSecondsSinceEpoch - new Date().getTime() / 1000\n}\n\nexport const getDurationFromDateMilliseconds = (start?: Date): number | undefined => {\n  if (!start) return undefined\n  return new Date().getTime() - start.getTime()\n}\n\nexport const formatToDecimal = (\n  intialNumberObject: Percent | CurrencyAmount<Token | Currency>,\n  decimalPlace: number\n): number => parseFloat(intialNumberObject.toFixed(decimalPlace))\n\nexport const getTokenAddress = (currency: Currency) => (currency.isNative ? NATIVE_CHAIN_ID : currency.address)\n\nexport const formatPercentInBasisPointsNumber = (percent: Percent): number => parseFloat(percent.toFixed(2)) * 100\n\nexport const formatPercentNumber = (percent: Percent): number => parseFloat(percent.toFixed(2))\n\nexport const getPriceUpdateBasisPoints = (\n  prevPrice: Price<Currency, Currency>,\n  newPrice: Price<Currency, Currency>\n): number => {\n  const changeFraction = newPrice.subtract(prevPrice).divide(prevPrice)\n  const changePercentage = new Percent(changeFraction.numerator, changeFraction.denominator)\n  return formatPercentInBasisPointsNumber(changePercentage)\n}\n\nexport const formatSwapSignedAnalyticsEventProperties = ({\n  trade,\n  fiatValues,\n  txHash,\n}: {\n  trade: InterfaceTrade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>\n  fiatValues: { amountIn: number | undefined; amountOut: number | undefined }\n  txHash: string\n}) => ({\n  transaction_hash: txHash,\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  token_in_amount_usd: fiatValues.amountIn,\n  token_out_amount_usd: fiatValues.amountOut,\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n})\n\nexport const formatSwapQuoteReceivedEventProperties = (\n  trade: Trade<Currency, Currency, TradeType>,\n  gasUseEstimateUSD?: CurrencyAmount<Token>,\n  fetchingSwapQuoteStartTime?: Date\n) => {\n  return {\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    price_impact_basis_points: trade ? formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)) : undefined,\n    estimated_network_fee_usd: gasUseEstimateUSD ? formatToDecimal(gasUseEstimateUSD, 2) : undefined,\n    chain_id:\n      trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n        ? trade.inputAmount.currency.chainId\n        : undefined,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    quote_latency_milliseconds: fetchingSwapQuoteStartTime\n      ? getDurationFromDateMilliseconds(fetchingSwapQuoteStartTime)\n      : undefined,\n  }\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/IconButton.tsx",[],"/workspace/Physica-Interfae/src/hooks/useTokenInfoFromActiveList.ts",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/SlideOutMenu.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/GitVersionRow.tsx",[],"/workspace/Physica-Interfae/src/components/Identicon/StatusIcon.tsx",[],"/workspace/Physica-Interfae/src/lib/hooks/useCurrencyLogoURIs.ts",["3741"],"import { SupportedChainId } from 'constants/chains'\nimport useHttpLocations from 'hooks/useHttpLocations'\nimport { useMemo } from 'react'\nimport { isAddress } from 'utils'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport BnbLogo from '../../assets/svg/bnb-logo.svg'\nimport CeloLogo from '../../assets/svg/celo_logo.svg'\nimport MaticLogo from '../../assets/svg/matic-token-icon.svg'\nimport { isCelo, NATIVE_CHAIN_ID, nativeOnChain } from '../../constants/tokens'\n\ntype Network = 'ethereum' | 'arbitrum' | 'optimism' | 'polygon' | 'smartchain'\n\nexport function chainIdToNetworkName(networkId: SupportedChainId): Network {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum'\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum'\n    case SupportedChainId.OPTIMISM:\n      return 'optimism'\n    case SupportedChainId.POLYGON:\n      return 'polygon'\n    case SupportedChainId.BNB:\n      return 'smartchain'\n    default:\n      return 'ethereum'\n  }\n}\n\nexport function getNativeLogoURI(chainId: SupportedChainId = SupportedChainId.MAINNET): string {\n  switch (chainId) {\n    case SupportedChainId.POLYGON:\n    case SupportedChainId.POLYGON_MUMBAI:\n      return MaticLogo\n    case SupportedChainId.BNB:\n      return BnbLogo\n    case SupportedChainId.CELO:\n    case SupportedChainId.CELO_ALFAJORES:\n      return CeloLogo\n    default:\n      return EthereumLogo\n  }\n}\n\nfunction getTokenLogoURI(address: string, chainId: SupportedChainId = SupportedChainId.MAINNET): string | void {\n  const networkName = chainIdToNetworkName(chainId)\n  const networksWithUrls = [\n    SupportedChainId.ARBITRUM_ONE,\n    SupportedChainId.MAINNET,\n    SupportedChainId.OPTIMISM,\n    SupportedChainId.BNB,\n  ]\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`\n  }\n\n  // Celo logo logo is hosted elsewhere.\n  if (isCelo(chainId)) {\n    if (address === nativeOnChain(chainId).wrapped.address) {\n      return 'https://raw.githubusercontent.com/ubeswap/default-token-list/master/assets/asset_CELO.png'\n    }\n  }\n}\n\nexport default function useCurrencyLogoURIs(\n  currency:\n    | {\n        isNative?: boolean\n        isToken?: boolean\n        address?: string\n        chainId: number\n        logoURI?: string | null\n      }\n    | null\n    | undefined\n): string[] {\n  const locations = useHttpLocations(currency?.logoURI)\n  return useMemo(() => {\n    const logoURIs = [...locations]\n    if (currency) {\n      if (currency.isNative || currency.address === NATIVE_CHAIN_ID) {\n        logoURIs.push(getNativeLogoURI(currency.chainId))\n      } else if (currency.isToken || currency.address) {\n        const checksummedAddress = isAddress(currency.address)\n        const logoURI = checksummedAddress && getTokenLogoURI(checksummedAddress, currency.chainId)\n        if (logoURI) {\n          logoURIs.push(logoURI)\n        }\n      }\n    }\n    return logoURIs\n  }, [currency, locations])\n}\n","/workspace/Physica-Interfae/src/hooks/useV3SwapPools.ts",["3742","3743"],"import { Currency, Token } from '@uniswap/sdk-core'\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport { useMemo } from 'react'\n\nimport { useAllCurrencyCombinations } from './useAllCurrencyCombinations'\nimport { PoolState, usePools } from './usePools'\n\n/**\n * Returns all the existing pools that should be considered for swapping between an input currency and an output currency\n * @param currencyIn the input currency\n * @param currencyOut the output currency\n */\nexport function useV3SwapPools(\n  currencyIn?: Currency,\n  currencyOut?: Currency\n): {\n  pools: Pool[]\n  loading: boolean\n} {\n  const { chainId } = useWeb3React()\n\n  const allCurrencyCombinations = useAllCurrencyCombinations(currencyIn, currencyOut)\n\n  const allCurrencyCombinationsWithAllFees: [Token, Token, FeeAmount][] = useMemo(\n    () =>\n      allCurrencyCombinations.reduce<[Token, Token, FeeAmount][]>((list, [tokenA, tokenB]) => {\n        return chainId === SupportedChainId.MAINNET\n          ? list.concat([\n              [tokenA, tokenB, FeeAmount.LOW],\n              [tokenA, tokenB, FeeAmount.MEDIUM],\n              [tokenA, tokenB, FeeAmount.HIGH],\n            ])\n          : list.concat([\n              [tokenA, tokenB, FeeAmount.LOWEST],\n              [tokenA, tokenB, FeeAmount.LOW],\n              [tokenA, tokenB, FeeAmount.MEDIUM],\n              [tokenA, tokenB, FeeAmount.HIGH],\n            ])\n      }, []),\n    [allCurrencyCombinations, chainId]\n  )\n\n  const pools = usePools(allCurrencyCombinationsWithAllFees)\n\n  return useMemo(() => {\n    return {\n      pools: pools\n        .filter((tuple): tuple is [PoolState.EXISTS, Pool] => {\n          return tuple[0] === PoolState.EXISTS && tuple[1] !== null\n        })\n        .map(([, pool]) => pool),\n      loading: pools.some(([state]) => state === PoolState.LOADING),\n    }\n  }, [pools])\n}\n","/workspace/Physica-Interfae/src/constants/TokenLogoLookupTable.ts",[],"/workspace/Physica-Interfae/src/components/WalletModal/index.tsx",["3744","3745","3746"],"import { sendAnalyticsEvent, user } from '@uniswap/analytics'\nimport { CustomUserProperties, InterfaceEventName, WalletConnectionResult } from '@uniswap/analytics-events'\nimport { getWalletMeta } from '@uniswap/conedison/provider/meta'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAccountDrawer } from 'components/AccountDrawer'\nimport IconButton from 'components/AccountDrawer/IconButton'\nimport { sendEvent } from 'components/analytics'\nimport { AutoColumn } from 'components/Column'\nimport { AutoRow } from 'components/Row'\nimport { Connection, ConnectionType, getConnections, networkConnection } from 'connection'\nimport { useGetConnection } from 'connection'\nimport { ErrorCode } from 'connection/utils'\nimport { isSupportedChain } from 'constants/chains'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { Settings } from 'react-feather'\nimport { useAppDispatch } from 'state/hooks'\nimport { updateSelectedWallet } from 'state/user/reducer'\nimport { useConnectedWallets } from 'state/wallets/hooks'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { flexColumnNoWrap } from 'theme/styles'\n\nimport ConnectionErrorView from './ConnectionErrorView'\nimport Option from './Option'\nimport PrivacyPolicyNotice from './PrivacyPolicyNotice'\n\nconst Wrapper = styled.div`\n  ${flexColumnNoWrap};\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  width: 100%;\n  padding: 14px 16px 16px;\n  flex: 1;\n`\n\nconst OptionGrid = styled.div`\n  display: grid;\n  grid-gap: 2px;\n  border-radius: 12px;\n  overflow: hidden;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToMedium`\n    grid-template-columns: 1fr;\n  `};\n`\n\nconst PrivacyPolicyWrapper = styled.div`\n  padding: 0 4px;\n`\n\nconst sendAnalyticsEventAndUserInfo = (\n  account: string,\n  walletType: string,\n  chainId: number | undefined,\n  isReconnect: boolean,\n  peerWalletAgent: string | undefined\n) => {\n  // User properties *must* be set before sending corresponding event properties,\n  // so that the event contains the correct and up-to-date user properties.\n  user.set(CustomUserProperties.WALLET_ADDRESS, account)\n  user.set(CustomUserProperties.WALLET_TYPE, walletType)\n  user.set(CustomUserProperties.PEER_WALLET_AGENT, peerWalletAgent ?? '')\n  if (chainId) {\n    user.postInsert(CustomUserProperties.ALL_WALLET_CHAIN_IDS, chainId)\n  }\n  user.postInsert(CustomUserProperties.ALL_WALLET_ADDRESSES_CONNECTED, account)\n\n  sendAnalyticsEvent(InterfaceEventName.WALLET_CONNECT_TXN_COMPLETED, {\n    result: WalletConnectionResult.SUCCEEDED,\n    wallet_address: account,\n    wallet_type: walletType,\n    is_reconnect: isReconnect,\n    peer_wallet_agent: peerWalletAgent,\n  })\n}\n\nfunction didUserReject(connection: Connection, error: any): boolean {\n  return (\n    error?.code === ErrorCode.USER_REJECTED_REQUEST ||\n    (connection.type === ConnectionType.WALLET_CONNECT && error?.toString?.() === ErrorCode.WC_MODAL_CLOSED) ||\n    (connection.type === ConnectionType.COINBASE_WALLET && error?.toString?.() === ErrorCode.CB_REJECTED_REQUEST)\n  )\n}\n\nexport default function WalletModal({ openSettings }: { openSettings: () => void }) {\n  const dispatch = useAppDispatch()\n  const { connector, account, chainId, provider } = useWeb3React()\n  const [drawerOpen, toggleWalletDrawer] = useAccountDrawer()\n\n  const [connectedWallets, addWalletToConnectedWallets] = useConnectedWallets()\n  const [lastActiveWalletAddress, setLastActiveWalletAddress] = useState<string | undefined>(account)\n  const [pendingConnection, setPendingConnection] = useState<Connection | undefined>()\n  const [pendingError, setPendingError] = useState<any>()\n\n  const connections = getConnections()\n  const getConnection = useGetConnection()\n\n  useEffect(() => {\n    // Clean up errors when the dropdown closes\n    return () => setPendingError(undefined)\n  }, [setPendingError])\n\n  const openOptions = useCallback(() => {\n    if (pendingConnection) {\n      setPendingError(undefined)\n      setPendingConnection(undefined)\n    }\n  }, [pendingConnection, setPendingError])\n\n  // Keep the network connector in sync with any active user connector to prevent chain-switching on wallet disconnection.\n  useEffect(() => {\n    if (chainId && isSupportedChain(chainId) && connector !== networkConnection.connector) {\n      networkConnection.connector.activate(chainId)\n    }\n  }, [chainId, connector])\n\n  // When new wallet is successfully set by the user, trigger logging of Amplitude analytics event.\n  useEffect(() => {\n    if (account && account !== lastActiveWalletAddress) {\n      const walletName = getConnection(connector).getName()\n      const peerWalletAgent = provider ? getWalletMeta(provider)?.agent : undefined\n      const isReconnect =\n        connectedWallets.filter((wallet) => wallet.account === account && wallet.walletType === walletName).length > 0\n      sendAnalyticsEventAndUserInfo(account, walletName, chainId, isReconnect, peerWalletAgent)\n      if (!isReconnect) addWalletToConnectedWallets({ account, walletType: walletName })\n    }\n    setLastActiveWalletAddress(account)\n  }, [\n    connectedWallets,\n    addWalletToConnectedWallets,\n    lastActiveWalletAddress,\n    account,\n    connector,\n    chainId,\n    provider,\n    getConnection,\n  ])\n\n  // Used to track the state of the drawer in async function\n  const drawerOpenRef = useRef(drawerOpen)\n  drawerOpenRef.current = drawerOpen\n\n  const tryActivation = useCallback(\n    async (connection: Connection) => {\n      // Skips wallet connection if the connection should override the default behavior, i.e. install metamask or launch coinbase app\n      if (connection.overrideActivate?.()) return\n\n      // log selected wallet\n      sendEvent({\n        category: 'Wallet',\n        action: 'Change Wallet',\n        label: connection.type,\n      })\n\n      try {\n        setPendingConnection(connection)\n        setPendingError(undefined)\n\n        await connection.connector.activate()\n        console.debug(`connection activated: ${connection.getName()}`)\n        dispatch(updateSelectedWallet({ wallet: connection.type }))\n        if (drawerOpenRef.current) toggleWalletDrawer()\n      } catch (error) {\n        console.debug(`web3-react connection error: ${JSON.stringify(error)}`)\n        // TODO(WEB-3162): re-add special treatment for already-pending injected errors\n        if (didUserReject(connection, error)) {\n          setPendingConnection(undefined)\n        } else {\n          setPendingError(error)\n\n          sendAnalyticsEvent(InterfaceEventName.WALLET_CONNECT_TXN_COMPLETED, {\n            result: WalletConnectionResult.FAILED,\n            wallet_type: connection.getName(),\n          })\n        }\n      }\n    },\n    [dispatch, setPendingError, toggleWalletDrawer]\n  )\n\n  return (\n    <Wrapper data-testid=\"wallet-modal\">\n      <AutoRow justify=\"space-between\" width=\"100%\" marginBottom=\"16px\">\n        <ThemedText.SubHeader fontWeight={500}>Connect a wallet</ThemedText.SubHeader>\n        <IconButton Icon={Settings} onClick={openSettings} data-testid=\"wallet-settings\" />\n      </AutoRow>\n      {pendingError ? (\n        pendingConnection && (\n          <ConnectionErrorView openOptions={openOptions} retryActivation={() => tryActivation(pendingConnection)} />\n        )\n      ) : (\n        <AutoColumn gap=\"16px\">\n          <OptionGrid data-testid=\"option-grid\">\n            {connections.map((connection) =>\n              connection.shouldDisplay() ? (\n                <Option\n                  key={connection.getName()}\n                  connection={connection}\n                  activate={() => tryActivation(connection)}\n                  pendingConnectionType={pendingConnection?.type}\n                />\n              ) : null\n            )}\n          </OptionGrid>\n          <PrivacyPolicyWrapper>\n            <PrivacyPolicyNotice />\n          </PrivacyPolicyWrapper>\n        </AutoColumn>\n      )}\n    </Wrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useLocationLinkProps.ts",["3747"],"import { sendEvent } from 'components/analytics'\nimport { SupportedLocale } from 'constants/locales'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { stringify } from 'qs'\nimport { useMemo } from 'react'\nimport type { To } from 'react-router-dom'\nimport { useLocation } from 'react-router-dom'\n\nimport { useActiveLocale } from './useActiveLocale'\n\nexport function useLocationLinkProps(locale: SupportedLocale | null): {\n  to?: To\n  onClick?: () => void\n} {\n  const location = useLocation()\n  const qs = useParsedQueryString()\n  const activeLocale = useActiveLocale()\n\n  return useMemo(\n    () =>\n      !locale\n        ? {}\n        : {\n            to: {\n              ...location,\n              search: stringify({ ...qs, lng: locale }),\n            },\n            onClick: () => {\n              sendEvent({\n                category: 'Localization',\n                action: 'Switch Locale',\n                label: `${activeLocale} -> ${locale}`,\n              })\n            },\n          },\n    [location, qs, activeLocale, locale]\n  )\n}\n","/workspace/Physica-Interfae/src/lib/utils/formatLocaleNumber.ts",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/index.tsx",[],"/workspace/Physica-Interfae/src/constants/tokenSafety.tsx",["3748","3749"],"import { Plural, Trans } from '@lingui/macro'\nimport { TokenStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { SearchToken } from 'graphql/data/SearchTokens'\n\nimport { ZERO_ADDRESS } from './misc'\nimport { NATIVE_CHAIN_ID } from './tokens'\nimport WarningCache, { TOKEN_LIST_TYPES } from './TokenSafetyLookupTable'\n\nexport const TOKEN_SAFETY_ARTICLE = 'https://support.uniswap.org/hc/en-us/articles/8723118437133'\n\nexport enum WARNING_LEVEL {\n  MEDIUM,\n  UNKNOWN,\n  BLOCKED,\n}\n\nexport function getWarningCopy(warning: Warning | null, plural = false) {\n  let heading = null,\n    description = null\n  if (warning) {\n    switch (warning.level) {\n      case WARNING_LEVEL.MEDIUM:\n        heading = (\n          <Plural\n            value={plural ? 2 : 1}\n            _1=\"This token isn't provide Listing by us.\"\n            other=\"Please DYOR.\"\n          />\n        )\n        description = <Trans>Always conduct your own research before trading.</Trans>\n        break\n      case WARNING_LEVEL.UNKNOWN:\n        heading = (\n          <Plural\n            value={plural ? 2 : 1}\n            _1=\"This token isn't provide Listing by us.\"\n            other=\"Please DYOR.\"\n          />\n        )\n        description = <Trans>Always conduct your own research before trading.</Trans>\n        break\n      case WARNING_LEVEL.BLOCKED:\n        description = (\n          <Plural\n            value={plural ? 2 : 1}\n            _1=\"You can't trade this token using the Physica finance App.\"\n            other=\"You can't trade these tokens using the Physica Finance App.\"\n          />\n        )\n        break\n    }\n  }\n  return { heading, description }\n}\n\nexport type Warning = {\n  level: WARNING_LEVEL\n  message: JSX.Element\n  /* canProceed determines whether triangle/slash alert icon is used, and\n    whether this token is supported/able to be traded */\n  canProceed: boolean\n}\n\nconst MediumWarning: Warning = {\n  level: WARNING_LEVEL.MEDIUM,\n  message: <Trans>Caution</Trans>,\n  canProceed: true,\n}\n\nconst StrongWarning: Warning = {\n  level: WARNING_LEVEL.UNKNOWN,\n  message: <Trans>Warning</Trans>,\n  canProceed: true,\n}\n\nconst BlockedWarning: Warning = {\n  level: WARNING_LEVEL.BLOCKED,\n  message: <Trans>Not Available</Trans>,\n  canProceed: false,\n}\n\nexport function checkWarning(tokenAddress: string) {\n  if (tokenAddress === NATIVE_CHAIN_ID || tokenAddress === ZERO_ADDRESS) {\n    return null\n  }\n  switch (WarningCache.checkToken(tokenAddress.toLowerCase())) {\n    case TOKEN_LIST_TYPES.UNI_DEFAULT:\n      return null\n    case TOKEN_LIST_TYPES.UNI_EXTENDED:\n      return MediumWarning\n    case TOKEN_LIST_TYPES.UNKNOWN:\n      return StrongWarning\n    case TOKEN_LIST_TYPES.BLOCKED:\n      return BlockedWarning\n    case TOKEN_LIST_TYPES.BROKEN:\n      return BlockedWarning\n  }\n}\n\n// TODO(cartcrom): Replace all usage of WARNING_LEVEL with SafetyLevel\nexport function checkSearchTokenWarning(token: SearchToken) {\n  if (!token.address) {\n    return token.standard === TokenStandard.Native ? null : StrongWarning\n  }\n  return checkWarning(token.address)\n}\n","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyLabel.tsx",[],"/workspace/Physica-Interfae/src/hooks/useAllCurrencyCombinations.ts",["3750","3751"],"import { Currency, Token } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\n\nimport { ADDITIONAL_BASES, BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants/routing'\n\nexport function useAllCurrencyCombinations(currencyA?: Currency, currencyB?: Currency): [Token, Token][] {\n  const chainId = currencyA?.chainId\n\n  const [tokenA, tokenB] = chainId ? [currencyA?.wrapped, currencyB?.wrapped] : [undefined, undefined]\n\n  const bases: Token[] = useMemo(() => {\n    if (!chainId || chainId !== tokenB?.chainId) return []\n\n    const common = BASES_TO_CHECK_TRADES_AGAINST[chainId] ?? []\n    const additionalA = tokenA ? ADDITIONAL_BASES[chainId]?.[tokenA.address] ?? [] : []\n    const additionalB = tokenB ? ADDITIONAL_BASES[chainId]?.[tokenB.address] ?? [] : []\n\n    return [...common, ...additionalA, ...additionalB]\n  }, [chainId, tokenA, tokenB])\n\n  const basePairs: [Token, Token][] = useMemo(\n    () =>\n      bases\n        .flatMap((base): [Token, Token][] => bases.map((otherBase) => [base, otherBase]))\n        // though redundant with the first filter below, that expression runs more often, so this is probably worthwhile\n        .filter(([t0, t1]) => !t0.equals(t1)),\n    [bases]\n  )\n\n  return useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB] as [Token, Token],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            // filter out invalid pairs comprised of the same asset (e.g. WETH<>WETH)\n            .filter(([t0, t1]) => !t0.equals(t1))\n            // filter out duplicate pairs\n            .filter(([t0, t1], i, otherPairs) => {\n              // find the first index in the array at which there are the same 2 tokens as the current\n              const firstIndexInOtherPairs = otherPairs.findIndex(([t0Other, t1Other]) => {\n                return (t0.equals(t0Other) && t1.equals(t1Other)) || (t0.equals(t1Other) && t1.equals(t0Other))\n              })\n              // only accept the first occurrence of the same 2 tokens\n              return firstIndexInOtherPairs === i\n            })\n            // optionally filter out some pairs for tokens with custom bases defined\n            .filter(([tokenA, tokenB]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n\n              const customBasesA: Token[] | undefined = customBases?.[tokenA.address]\n              const customBasesB: Token[] | undefined = customBases?.[tokenB.address]\n\n              if (!customBasesA && !customBasesB) return true\n\n              if (customBasesA && !customBasesA.find((base) => tokenB.equals(base))) return false\n              if (customBasesB && !customBasesB.find((base) => tokenA.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId]\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/usePools.ts",["3752","3753","3754","3755","3756"],"import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, Token } from '@uniswap/sdk-core'\nimport { abi as IUniswapV3PoolStateABI } from '@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json'\nimport { computePoolAddress } from '@uniswap/v3-sdk'\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { V3_CORE_FACTORY_ADDRESSES } from '../constants/addresses'\nimport { IUniswapV3PoolStateInterface } from '../types/v3/IUniswapV3PoolState'\n\nconst POOL_STATE_INTERFACE = new Interface(IUniswapV3PoolStateABI) as IUniswapV3PoolStateInterface\n\n// Classes are expensive to instantiate, so this caches the recently instantiated pools.\n// This avoids re-instantiating pools as the other pools in the same request are loaded.\nclass PoolCache {\n  // Evict after 128 entries. Empirically, a swap uses 64 entries.\n  private static MAX_ENTRIES = 128\n\n  // These are FIFOs, using unshift/pop. This makes recent entries faster to find.\n  private static pools: Pool[] = []\n  private static addresses: { key: string; address: string }[] = []\n\n  static getPoolAddress(factoryAddress: string, tokenA: Token, tokenB: Token, fee: FeeAmount): string {\n    if (this.addresses.length > this.MAX_ENTRIES) {\n      this.addresses = this.addresses.slice(0, this.MAX_ENTRIES / 2)\n    }\n\n    const { address: addressA } = tokenA\n    const { address: addressB } = tokenB\n    const key = `${factoryAddress}:${addressA}:${addressB}:${fee.toString()}`\n    const found = this.addresses.find((address) => address.key === key)\n    if (found) return found.address\n\n    const address = {\n      key,\n      address: computePoolAddress({\n        factoryAddress,\n        tokenA,\n        tokenB,\n        fee,\n      }),\n    }\n    this.addresses.unshift(address)\n    return address.address\n  }\n\n  static getPool(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtPriceX96: BigintIsh,\n    liquidity: BigintIsh,\n    tick: number\n  ): Pool {\n    if (this.pools.length > this.MAX_ENTRIES) {\n      this.pools = this.pools.slice(0, this.MAX_ENTRIES / 2)\n    }\n\n    const found = this.pools.find(\n      (pool) =>\n        pool.token0 === tokenA &&\n        pool.token1 === tokenB &&\n        pool.fee === fee &&\n        JSBI.EQ(pool.sqrtRatioX96, sqrtPriceX96) &&\n        JSBI.EQ(pool.liquidity, liquidity) &&\n        pool.tickCurrent === tick\n    )\n    if (found) return found\n\n    const pool = new Pool(tokenA, tokenB, fee, sqrtPriceX96, liquidity, tick)\n    this.pools.unshift(pool)\n    return pool\n  }\n}\n\nexport enum PoolState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID,\n}\n\nexport function usePools(\n  poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][]\n): [PoolState, Pool | null][] {\n  const { chainId } = useWeb3React()\n\n  const poolTokens: ([Token, Token, FeeAmount] | undefined)[] = useMemo(() => {\n    if (!chainId) return new Array(poolKeys.length)\n\n    return poolKeys.map(([currencyA, currencyB, feeAmount]) => {\n      if (currencyA && currencyB && feeAmount) {\n        const tokenA = currencyA.wrapped\n        const tokenB = currencyB.wrapped\n        if (tokenA.equals(tokenB)) return undefined\n\n        return tokenA.sortsBefore(tokenB) ? [tokenA, tokenB, feeAmount] : [tokenB, tokenA, feeAmount]\n      }\n      return undefined\n    })\n  }, [chainId, poolKeys])\n\n  const poolAddresses: (string | undefined)[] = useMemo(() => {\n    const v3CoreFactoryAddress = chainId && V3_CORE_FACTORY_ADDRESSES[chainId]\n    if (!v3CoreFactoryAddress) return new Array(poolTokens.length)\n\n    return poolTokens.map((value) => value && PoolCache.getPoolAddress(v3CoreFactoryAddress, ...value))\n  }, [chainId, poolTokens])\n\n  const slot0s = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'slot0')\n  const liquidities = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'liquidity')\n\n  return useMemo(() => {\n    return poolKeys.map((_key, index) => {\n      const tokens = poolTokens[index]\n      if (!tokens) return [PoolState.INVALID, null]\n      const [token0, token1, fee] = tokens\n\n      if (!slot0s[index]) return [PoolState.INVALID, null]\n      const { result: slot0, loading: slot0Loading, valid: slot0Valid } = slot0s[index]\n\n      if (!liquidities[index]) return [PoolState.INVALID, null]\n      const { result: liquidity, loading: liquidityLoading, valid: liquidityValid } = liquidities[index]\n\n      if (!tokens || !slot0Valid || !liquidityValid) return [PoolState.INVALID, null]\n      if (slot0Loading || liquidityLoading) return [PoolState.LOADING, null]\n      if (!slot0 || !liquidity) return [PoolState.NOT_EXISTS, null]\n      if (!slot0.sqrtPriceX96 || slot0.sqrtPriceX96.eq(0)) return [PoolState.NOT_EXISTS, null]\n\n      try {\n        const pool = PoolCache.getPool(token0, token1, fee, slot0.sqrtPriceX96, liquidity[0], slot0.tick)\n        return [PoolState.EXISTS, pool]\n      } catch (error) {\n        console.error('Error when constructing the pool', error)\n        return [PoolState.NOT_EXISTS, null]\n      }\n    })\n  }, [liquidities, poolKeys, slot0s, poolTokens])\n}\n\nexport function usePool(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined\n): [PoolState, Pool | null] {\n  const poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][] = useMemo(\n    () => [[currencyA, currencyB, feeAmount]],\n    [currencyA, currencyB, feeAmount]\n  )\n\n  return usePools(poolKeys)[0]\n}\n","/workspace/Physica-Interfae/src/hooks/useSocksBalance.ts",[],"/workspace/Physica-Interfae/src/components/SearchModal/CurrencyList/index.css.ts",[],"/workspace/Physica-Interfae/src/components/WalletModal/PrivacyPolicyNotice.tsx",[],"/workspace/Physica-Interfae/src/components/WalletModal/Option.tsx",[],"/workspace/Physica-Interfae/src/components/WalletModal/ConnectionErrorView.tsx",[],"/workspace/Physica-Interfae/src/constants/TokenSafetyLookupTable.ts",["3757","3758","3759"],"import { TokenInfo } from '@uniswap/token-lists'\n\nimport store from '../state'\nimport { UNI_EXTENDED_LIST, UNI_LIST, UNSUPPORTED_LIST_URLS, PLANQ_LIST } from './lists'\nimport brokenTokenList from './tokenLists/broken.tokenlist.json'\nimport { NATIVE_CHAIN_ID } from './tokens'\n\nexport enum TOKEN_LIST_TYPES {\n  UNI_DEFAULT = 1,\n  UNI_EXTENDED,\n  UNKNOWN,\n  BLOCKED,\n  BROKEN,\n}\n\nclass TokenSafetyLookupTable {\n  dict: { [key: string]: TOKEN_LIST_TYPES } | null = null\n\n  createMap() {\n    const dict: { [key: string]: TOKEN_LIST_TYPES } = {}\n\n    // Initialize extended tokens first\n    store.getState().lists.byUrl[UNI_EXTENDED_LIST].current?.tokens.forEach((token) => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.UNI_EXTENDED\n    })\n\n    // Initialize default tokens second, so that any tokens on both default and extended will display as default (no warning)\n    store.getState().lists.byUrl[PLANQ_LIST].current?.tokens.forEach((token) => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.UNI_DEFAULT\n    })\n\n    // TODO: Figure out if this list is still relevant\n    brokenTokenList.tokens.forEach((token) => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.BROKEN\n    })\n\n    // Initialize blocked tokens from all urls included\n    UNSUPPORTED_LIST_URLS.map((url) => store.getState().lists.byUrl[url].current?.tokens)\n      .filter((x): x is TokenInfo[] => !!x)\n      .flat(1)\n      .forEach((token) => {\n        dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.BLOCKED\n      })\n    return dict\n  }\n\n  checkToken(address: string) {\n    if (!this.dict) {\n      this.dict = this.createMap()\n    }\n    if (address === NATIVE_CHAIN_ID.toLowerCase()) {\n      return TOKEN_LIST_TYPES.UNI_DEFAULT\n    }\n    return this.dict[address] ?? TOKEN_LIST_TYPES.UNKNOWN\n  }\n}\n\nexport default new TokenSafetyLookupTable()\n","/workspace/Physica-Interfae/src/hooks/useHttpLocations.ts",[],"/workspace/Physica-Interfae/src/hooks/useENSAvatar.ts",["3760","3761","3762","3763","3764","3765","3766","3767"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { hexZeroPad } from '@ethersproject/bytes'\nimport { namehash } from '@ethersproject/hash'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport uriToHttp from 'lib/utils/uriToHttp'\nimport { useEffect, useMemo, useState } from 'react'\n\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract, useERC721Contract, useERC1155Contract } from './useContract'\nimport useDebounce from './useDebounce'\nimport useENSName from './useENSName'\n\n/**\n * Returns the ENS avatar URI, if available.\n * Spec: https://gist.github.com/Arachnid/9db60bd75277969ee1689c8742b75182.\n */\nexport default function useENSAvatar(\n  address?: string,\n  enforceOwnership = true\n): { avatar: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const node = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return undefined\n    return namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)\n  }, [debouncedAddress])\n\n  const addressAvatar = useAvatarFromNode(node)\n  const ENSName = useENSName(address).ENSName\n  const nameAvatar = useAvatarFromNode(ENSName === null ? undefined : namehash(ENSName))\n  let avatar = addressAvatar.avatar || nameAvatar.avatar\n\n  const nftAvatar = useAvatarFromNFT(avatar, enforceOwnership)\n  avatar = nftAvatar.avatar || avatar\n\n  const http = avatar && uriToHttp(avatar)[0]\n\n  const changed = debouncedAddress !== address\n  return useMemo(\n    () => ({\n      avatar: changed ? null : http ?? null,\n      loading: changed || addressAvatar.loading || nameAvatar.loading || nftAvatar.loading,\n    }),\n    [addressAvatar.loading, changed, http, nameAvatar.loading, nftAvatar.loading]\n  )\n}\n\nfunction useAvatarFromNode(node?: string): { avatar?: string; loading: boolean } {\n  const nodeArgument = useMemo(() => [node], [node])\n  const textArgument = useMemo(() => [node, 'avatar'], [node])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', nodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const avatar = useSingleCallResult(resolverContract, 'text', textArgument)\n\n  return useMemo(\n    () => ({\n      avatar: avatar.result?.[0],\n      loading: resolverAddress.loading || avatar.loading,\n    }),\n    [avatar.loading, avatar.result, resolverAddress.loading]\n  )\n}\n\nfunction useAvatarFromNFT(nftUri = '', enforceOwnership: boolean): { avatar?: string; loading: boolean } {\n  const parts = nftUri.toLowerCase().split(':')\n  const protocol = parts[0]\n  // ignore the chain from eip155\n  // TODO: when we are able, pull only from the specified chain\n  const [, erc] = parts[1]?.split('/') ?? []\n  const [contractAddress, id] = parts[2]?.split('/') ?? []\n  const isERC721 = protocol === 'eip155' && erc === 'erc721'\n  const isERC1155 = protocol === 'eip155' && erc === 'erc1155'\n  const erc721 = useERC721Uri(isERC721 ? contractAddress : undefined, isERC721 ? id : undefined, enforceOwnership)\n  const erc1155 = useERC1155Uri(isERC1155 ? contractAddress : undefined, isERC1155 ? id : undefined, enforceOwnership)\n  const uri = erc721.uri || erc1155.uri\n  const http = uri && uriToHttp(uri)[0]\n\n  const [loading, setLoading] = useState(false)\n  const [avatar, setAvatar] = useState(undefined)\n  useEffect(() => {\n    setAvatar(undefined)\n    if (http) {\n      setLoading(true)\n      fetch(http)\n        .then((res) => res.json())\n        .then(({ image }) => {\n          setAvatar(image)\n        })\n        .catch((e) => console.warn(e))\n        .finally(() => {\n          setLoading(false)\n        })\n    }\n  }, [http])\n\n  return useMemo(\n    () => ({ avatar, loading: erc721.loading || erc1155.loading || loading }),\n    [avatar, erc1155.loading, erc721.loading, loading]\n  )\n}\n\nfunction useERC721Uri(\n  contractAddress: string | undefined,\n  id: string | undefined,\n  enforceOwnership: boolean\n): { uri?: string; loading: boolean } {\n  const idArgument = useMemo(() => [id], [id])\n  const { account } = useWeb3React()\n  const contract = useERC721Contract(contractAddress)\n  const owner = useSingleCallResult(contract, 'ownerOf', idArgument)\n  const uri = useSingleCallResult(contract, 'tokenURI', idArgument)\n  return useMemo(\n    () => ({\n      uri: !enforceOwnership || account === owner.result?.[0] ? uri.result?.[0] : undefined,\n      loading: owner.loading || uri.loading,\n    }),\n    [account, enforceOwnership, owner.loading, owner.result, uri.loading, uri.result]\n  )\n}\n\nfunction useERC1155Uri(\n  contractAddress: string | undefined,\n  id: string | undefined,\n  enforceOwnership: boolean\n): { uri?: string; loading: boolean } {\n  const { account } = useWeb3React()\n  const idArgument = useMemo(() => [id], [id])\n  const accountArgument = useMemo(() => [account || '', id], [account, id])\n  const contract = useERC1155Contract(contractAddress)\n  const balance = useSingleCallResult(contract, 'balanceOf', accountArgument)\n  const uri = useSingleCallResult(contract, 'uri', idArgument)\n  return useMemo(() => {\n    try {\n      // ERC-1155 allows a generic {id} in the URL, so prepare to replace if relevant,\n      // in lowercase hexadecimal (with no 0x prefix) and leading zero padded to 64 hex characters.\n      const idHex = id ? hexZeroPad(BigNumber.from(id).toHexString(), 32).substring(2) : id\n      return {\n        uri: !enforceOwnership || balance.result?.[0] > 0 ? uri.result?.[0]?.replaceAll('{id}', idHex) : undefined,\n        loading: balance.loading || uri.loading,\n      }\n    } catch (error) {\n      console.error('Invalid token id', error)\n      return { loading: false }\n    }\n  }, [balance.loading, balance.result, enforceOwnership, uri.loading, uri.result, id])\n}\n","/workspace/Physica-Interfae/src/components/Identicon/index.tsx",[],"/workspace/Physica-Interfae/src/hooks/useTokenWarningColor.ts",[],"/workspace/Physica-Interfae/src/state/wallets/hooks.tsx",["3768"],"import { useCallback } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { addConnectedWallet } from './reducer'\nimport { Wallet } from './types'\n\nexport function useConnectedWallets(): [Wallet[], (wallet: Wallet) => void] {\n  const dispatch = useAppDispatch()\n  const connectedWallets = useAppSelector((state) => state.wallets.connectedWallets)\n  const addWallet = useCallback(\n    (wallet: Wallet) => {\n      dispatch(addConnectedWallet(wallet))\n    },\n    [dispatch]\n  )\n  return [connectedWallets, addWallet]\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Tokens/index.tsx",["3769","3770","3771","3772"],"import { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, SharedEventName } from '@uniswap/analytics-events'\nimport { formatNumber, NumberType } from '@uniswap/conedison/format'\nimport Row from 'components/Row'\nimport { formatDelta } from 'components/Tokens/TokenDetails/PriceChart'\nimport { PortfolioBalancesQuery, usePortfolioBalancesQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { getTokenDetailsURL, gqlToCurrency } from 'graphql/data/util'\nimport { useAtomValue } from 'jotai/utils'\nimport { EmptyWalletModule } from 'nft/components/profile/view/EmptyWalletContent'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { EllipsisStyle, ThemedText } from 'theme'\n\nimport { useToggleAccountDrawer } from '../..'\nimport { PortfolioArrow } from '../../AuthenticatedHeader'\nimport { hideSmallBalancesAtom } from '../../SmallBalanceToggle'\nimport { ExpandoRow } from '../ExpandoRow'\nimport { PortfolioLogo } from '../PortfolioLogo'\nimport PortfolioRow, { PortfolioSkeleton, PortfolioTabWrapper } from '../PortfolioRow'\n\nconst HIDE_SMALL_USD_BALANCES_THRESHOLD = 1\n\nfunction meetsThreshold(tokenBalance: TokenBalance, hideSmallBalances: boolean) {\n  return !hideSmallBalances || (tokenBalance.denominatedValue?.value ?? 0) > HIDE_SMALL_USD_BALANCES_THRESHOLD\n}\n\nexport default function Tokens({ account }: { account: string }) {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const hideSmallBalances = useAtomValue(hideSmallBalancesAtom)\n  const [showHiddenTokens, setShowHiddenTokens] = useState(false)\n\n  const { data } = usePortfolioBalancesQuery({\n    variables: { ownerAddress: account },\n    fetchPolicy: 'cache-only', // PrefetchBalancesWrapper handles balance fetching/staleness; this component only reads from cache\n    errorPolicy: 'all',\n  })\n\n  const visibleTokens = useMemo(() => {\n    return !hideSmallBalances\n      ? data?.portfolios?.[0].tokenBalances ?? []\n      : data?.portfolios?.[0].tokenBalances?.filter((tokenBalance) =>\n          meetsThreshold(tokenBalance, hideSmallBalances)\n        ) ?? []\n  }, [data?.portfolios, hideSmallBalances])\n\n  const hiddenTokens = useMemo(() => {\n    return !hideSmallBalances\n      ? []\n      : data?.portfolios?.[0].tokenBalances?.filter(\n          (tokenBalance) => !meetsThreshold(tokenBalance, hideSmallBalances)\n        ) ?? []\n  }, [data?.portfolios, hideSmallBalances])\n\n  if (!data) {\n    return <PortfolioSkeleton />\n  }\n\n  if (data?.portfolios?.[0].tokenBalances?.length === 0) {\n    // TODO: consider launching moonpay here instead of just closing the drawer\n    return <EmptyWalletModule type=\"token\" onNavigateClick={toggleWalletDrawer} />\n  }\n\n  const toggleHiddenTokens = () => setShowHiddenTokens((showHiddenTokens) => !showHiddenTokens)\n\n  return (\n    <PortfolioTabWrapper>\n      {visibleTokens.map(\n        (tokenBalance) =>\n          tokenBalance.token &&\n          meetsThreshold(tokenBalance, hideSmallBalances) && (\n            <TokenRow key={tokenBalance.id} {...tokenBalance} token={tokenBalance.token} />\n          )\n      )}\n      <ExpandoRow isExpanded={showHiddenTokens} toggle={toggleHiddenTokens} numItems={hiddenTokens.length}>\n        {hiddenTokens.map(\n          (tokenBalance) =>\n            tokenBalance.token && <TokenRow key={tokenBalance.id} {...tokenBalance} token={tokenBalance.token} />\n        )}\n      </ExpandoRow>\n    </PortfolioTabWrapper>\n  )\n}\n\nconst TokenBalanceText = styled(ThemedText.BodySecondary)`\n  ${EllipsisStyle}\n`\n\ntype TokenBalance = NonNullable<\n  NonNullable<NonNullable<PortfolioBalancesQuery['portfolios']>[number]>['tokenBalances']\n>[number]\n\ntype PortfolioToken = NonNullable<TokenBalance['token']>\n\nfunction TokenRow({ token, quantity, denominatedValue, tokenProjectMarket }: TokenBalance & { token: PortfolioToken }) {\n  const percentChange = tokenProjectMarket?.pricePercentChange?.value ?? 0\n\n  const navigate = useNavigate()\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const navigateToTokenDetails = useCallback(async () => {\n    navigate(getTokenDetailsURL(token))\n    toggleWalletDrawer()\n  }, [navigate, token, toggleWalletDrawer])\n\n  const currency = gqlToCurrency(token)\n  return (\n    <TraceEvent\n      events={[BrowserEvent.onClick]}\n      name={SharedEventName.ELEMENT_CLICKED}\n      element={InterfaceElementName.MINI_PORTFOLIO_TOKEN_ROW}\n      properties={{ chain_id: currency.chainId, token_name: token?.name, address: token?.address }}\n    >\n      <PortfolioRow\n        left={<PortfolioLogo chainId={currency.chainId} currencies={[currency]} size=\"40px\" />}\n        title={<ThemedText.SubHeader fontWeight={500}>{token?.name}</ThemedText.SubHeader>}\n        descriptor={\n          <TokenBalanceText>\n            {formatNumber(quantity, NumberType.TokenNonTx)} {token?.symbol}\n          </TokenBalanceText>\n        }\n        onClick={navigateToTokenDetails}\n        right={\n          denominatedValue && (\n            <>\n              <ThemedText.SubHeader fontWeight={500}>\n                {formatNumber(denominatedValue?.value, NumberType.PortfolioBalance)}\n              </ThemedText.SubHeader>\n              <Row justify=\"flex-end\">\n                <PortfolioArrow change={percentChange} size={20} strokeWidth={1.75} />\n                <ThemedText.BodySecondary>{formatDelta(percentChange)}</ThemedText.BodySecondary>\n              </Row>\n            </>\n          )\n        }\n      />\n    </TraceEvent>\n  )\n}\n","/workspace/Physica-Interfae/src/components/WalletModal/NewBadge.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/index.tsx",["3773","3774","3775","3776"],"import { t } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, SharedEventName } from '@uniswap/analytics-events'\nimport { formatNumber, NumberType } from '@uniswap/conedison/format'\nimport { Position } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { useFilterPossiblyMaliciousPositions } from 'hooks/useFilterPossiblyMaliciousPositions'\nimport { EmptyWalletModule } from 'nft/components/profile/view/EmptyWalletContent'\nimport { useCallback, useMemo, useReducer } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { switchChain } from 'utils/switchChain'\n\nimport { ExpandoRow } from '../ExpandoRow'\nimport { PortfolioLogo } from '../PortfolioLogo'\nimport PortfolioRow, { PortfolioSkeleton, PortfolioTabWrapper } from '../PortfolioRow'\nimport { PositionInfo } from './cache'\nimport { useFeeValues } from './hooks'\nimport useMultiChainPositions from './useMultiChainPositions'\n\n/*\n  This hook takes an array of PositionInfo objects (format used by the Uniswap Labs gql API).\n  The hook access PositionInfo.details (format used by the NFT position contract),\n  filters the PositionDetails data for malicious content,\n  and then returns the original data in its original format. \n*/\nfunction useFilterPossiblyMaliciousPositionInfo(positions: PositionInfo[] | undefined): PositionInfo[] {\n  const tokenIdsToPositionInfo: Record<string, PositionInfo> = useMemo(\n    () =>\n      positions\n        ? positions.reduce((acc, position) => ({ ...acc, [position.details.tokenId.toString()]: position }), {})\n        : {},\n    [positions]\n  )\n  const positionDetails = useMemo(() => positions?.map((position) => position.details) ?? [], [positions])\n  const filteredPositionDetails = useFilterPossiblyMaliciousPositions(positionDetails)\n\n  return useMemo(\n    () => filteredPositionDetails.map((positionDetails) => tokenIdsToPositionInfo[positionDetails.tokenId.toString()]),\n    [filteredPositionDetails, tokenIdsToPositionInfo]\n  )\n}\n\nexport default function Pools({ account }: { account: string }) {\n  const { positions, loading } = useMultiChainPositions(account)\n  const filteredPositions = useFilterPossiblyMaliciousPositionInfo(positions)\n  const [showClosed, toggleShowClosed] = useReducer((showClosed) => !showClosed, false)\n\n  const [openPositions, closedPositions] = useMemo(() => {\n    const openPositions: PositionInfo[] = []\n    const closedPositions: PositionInfo[] = []\n    for (let i = 0; i < filteredPositions.length; i++) {\n      const position = filteredPositions[i]\n      if (position.closed) {\n        closedPositions.push(position)\n      } else {\n        openPositions.push(position)\n      }\n    }\n    return [openPositions, closedPositions]\n  }, [filteredPositions])\n\n  const toggleWalletDrawer = useToggleAccountDrawer()\n\n  if (!filteredPositions || loading) {\n    return <PortfolioSkeleton />\n  }\n\n  if (filteredPositions.length === 0) {\n    return <EmptyWalletModule type=\"pool\" onNavigateClick={toggleWalletDrawer} />\n  }\n\n  return (\n    <PortfolioTabWrapper>\n      {openPositions.map((positionInfo) => (\n        <PositionListItem\n          key={positionInfo.details.tokenId.toString() + positionInfo.chainId}\n          positionInfo={positionInfo}\n        />\n      ))}\n      <ExpandoRow\n        title={t`Closed Positions`}\n        isExpanded={showClosed}\n        toggle={toggleShowClosed}\n        numItems={closedPositions.length}\n      >\n        {closedPositions.map((positionInfo) => (\n          <PositionListItem\n            key={positionInfo.details.tokenId.toString() + positionInfo.chainId}\n            positionInfo={positionInfo}\n          />\n        ))}\n      </ExpandoRow>\n    </PortfolioTabWrapper>\n  )\n}\n\nconst ActiveDot = styled.span<{ closed: boolean; outOfRange: boolean }>`\n  background-color: ${({ theme, closed, outOfRange }) =>\n    closed ? theme.textSecondary : outOfRange ? theme.accentWarning : theme.accentSuccess};\n  border-radius: 50%;\n  height: 8px;\n  width: 8px;\n  margin-left: 4px;\n  margin-top: 1px;\n`\n\nfunction calculcateLiquidityValue(price0: number | undefined, price1: number | undefined, position: Position) {\n  if (!price0 || !price1) return undefined\n\n  const value0 = parseFloat(position.amount0.toExact()) * price0\n  const value1 = parseFloat(position.amount1.toExact()) * price1\n  return value0 + value1\n}\n\nfunction PositionListItem({ positionInfo }: { positionInfo: PositionInfo }) {\n  const { chainId, position, pool, details, inRange, closed } = positionInfo\n\n  const { priceA, priceB, fees: feeValue } = useFeeValues(positionInfo)\n  const liquidityValue = calculcateLiquidityValue(priceA, priceB, position)\n\n  const navigate = useNavigate()\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const { chainId: walletChainId, connector } = useWeb3React()\n  const onClick = useCallback(async () => {\n    if (walletChainId !== chainId) await switchChain(connector, chainId)\n    toggleWalletDrawer()\n    navigate('/pool/' + details.tokenId)\n  }, [walletChainId, chainId, connector, toggleWalletDrawer, navigate, details.tokenId])\n  const analyticsEventProperties = useMemo(\n    () => ({\n      chain_id: chainId,\n      pool_token_0_symbol: pool.token0.symbol,\n      pool_token_1_symbol: pool.token1.symbol,\n      pool_token_0_address: pool.token0.address,\n      pool_token_1_address: pool.token1.address,\n    }),\n    [chainId, pool.token0.address, pool.token0.symbol, pool.token1.address, pool.token1.symbol]\n  )\n\n  return (\n    <TraceEvent\n      events={[BrowserEvent.onClick]}\n      name={SharedEventName.ELEMENT_CLICKED}\n      element={InterfaceElementName.MINI_PORTFOLIO_POOLS_ROW}\n      properties={analyticsEventProperties}\n    >\n      <PortfolioRow\n        onClick={onClick}\n        left={<PortfolioLogo chainId={chainId} currencies={[pool.token0, pool.token1]} />}\n        title={\n          <Row>\n            <ThemedText.SubHeader fontWeight={500}>\n              {pool.token0.symbol} / {pool.token1?.symbol}\n            </ThemedText.SubHeader>\n          </Row>\n        }\n        descriptor={<ThemedText.Caption>{`${pool.fee / 10000}%`}</ThemedText.Caption>}\n        right={\n          <>\n            <MouseoverTooltip\n              placement=\"left\"\n              text={\n                <div style={{ padding: '4px 0px' }}>\n                  <ThemedText.Caption>{`${formatNumber(\n                    liquidityValue,\n                    NumberType.PortfolioBalance\n                  )} (liquidity) + ${formatNumber(feeValue, NumberType.PortfolioBalance)} (fees)`}</ThemedText.Caption>\n                </div>\n              }\n            >\n              <ThemedText.SubHeader fontWeight={500}>\n                {formatNumber((liquidityValue ?? 0) + (feeValue ?? 0), NumberType.PortfolioBalance)}\n              </ThemedText.SubHeader>\n            </MouseoverTooltip>\n\n            <Row justify=\"flex-end\">\n              <ThemedText.Caption color=\"textSecondary\">\n                {closed ? t`Closed` : inRange ? t`In range` : t`Out of range`}\n              </ThemedText.Caption>\n              <ActiveDot closed={closed} outOfRange={!inRange} />\n            </Row>\n          </>\n        }\n      />\n    </TraceEvent>\n  )\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/NFTs/index.tsx",["3777"],"import { useNftBalance } from 'graphql/data/nft/NftBalance'\nimport { LoadingAssets } from 'nft/components/collection/CollectionAssetLoading'\nimport { EmptyWalletModule } from 'nft/components/profile/view/EmptyWalletContent'\nimport { useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport styled from 'styled-components/macro'\n\nimport { useAccountDrawer } from '../..'\nimport { DEFAULT_NFT_QUERY_AMOUNT } from '../constants'\nimport { NFT } from './NFTItem'\n\nexport default function NFTs({ account }: { account: string }) {\n  const [walletDrawerOpen, toggleWalletDrawer] = useAccountDrawer()\n  const { walletAssets, loading, hasNext, loadMore } = useNftBalance(\n    account,\n    [],\n    [],\n    DEFAULT_NFT_QUERY_AMOUNT,\n    undefined,\n    undefined,\n    undefined,\n    !walletDrawerOpen\n  )\n\n  const [currentTokenPlayingMedia, setCurrentTokenPlayingMedia] = useState<string | undefined>()\n\n  if (loading && !walletAssets)\n    return (\n      <AssetsContainer>\n        <LoadingAssets count={2} />\n      </AssetsContainer>\n    )\n\n  if (!walletAssets || walletAssets?.length === 0) {\n    return <EmptyWalletModule onNavigateClick={toggleWalletDrawer} />\n  }\n\n  return (\n    <InfiniteScroll\n      next={loadMore}\n      hasMore={hasNext ?? false}\n      loader={\n        Boolean(hasNext && walletAssets?.length) && (\n          <AssetsContainer>\n            <LoadingAssets count={2} />\n          </AssetsContainer>\n        )\n      }\n      dataLength={walletAssets?.length ?? 0}\n      style={{ overflow: 'unset' }}\n      scrollableTarget=\"wallet-dropdown-scroll-wrapper\"\n    >\n      <AssetsContainer>\n        {walletAssets?.length\n          ? walletAssets.map((asset, index) => {\n              return (\n                <NFT\n                  setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n                  mediaShouldBePlaying={currentTokenPlayingMedia === asset.tokenId}\n                  key={index}\n                  asset={asset}\n                />\n              )\n            })\n          : null}\n      </AssetsContainer>\n    </InfiniteScroll>\n  )\n}\n\nconst AssetsContainer = styled.div`\n  display: grid;\n  gap: 12px;\n\n  // use minmax to not let grid items escape the parent container\n  grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n  margin: 16px;\n`\n","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/index.tsx",[],"/workspace/Physica-Interfae/src/hooks/useENSContentHash.ts",["3778","3779"],"import { namehash } from '@ethersproject/hash'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\n\n/**\n * Does a lookup for an ENS name to find its contenthash.\n */\nexport default function useENSContentHash(ensName?: string | null): { loading: boolean; contenthash: string | null } {\n  const ensNodeArgument = useMemo(() => [ensName ? namehash(ensName) : undefined], [ensName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddress = resolverAddressResult.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress,\n    false\n  )\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument)\n\n  return useMemo(\n    () => ({\n      contenthash: contenthash.result?.[0] ?? null,\n      loading: resolverAddressResult.loading || contenthash.loading,\n    }),\n    [contenthash.loading, contenthash.result, resolverAddressResult.loading]\n  )\n}\n","/workspace/Physica-Interfae/src/components/Unicon/index.tsx",[],"/workspace/Physica-Interfae/src/components/Toggle/index.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/parseLocal.ts",["3780","3781","3782","3783","3784","3785"],"import { t } from '@lingui/macro'\nimport { formatCurrencyAmount } from '@uniswap/conedison/format'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { nativeOnChain } from '@uniswap/smart-order-router'\nimport { SupportedChainId } from 'constants/chains'\nimport { TransactionPartsFragment, TransactionStatus } from 'graphql/data/__generated__/types-and-hooks'\nimport { useMemo } from 'react'\nimport { TokenAddressMap, useCombinedActiveList } from 'state/lists/hooks'\nimport { useMultichainTransactions } from 'state/transactions/hooks'\nimport {\n  AddLiquidityV2PoolTransactionInfo,\n  AddLiquidityV3PoolTransactionInfo,\n  ApproveTransactionInfo,\n  CollectFeesTransactionInfo,\n  CreateV3PoolTransactionInfo,\n  ExactInputSwapTransactionInfo,\n  ExactOutputSwapTransactionInfo,\n  MigrateV2LiquidityToV3TransactionInfo,\n  RemoveLiquidityV3TransactionInfo,\n  TransactionDetails,\n  TransactionType,\n  WrapTransactionInfo,\n} from 'state/transactions/types'\n\nimport { getActivityTitle } from '../constants'\nimport { Activity, ActivityMap } from './types'\n\nfunction getCurrency(currencyId: string, chainId: SupportedChainId, tokens: TokenAddressMap): Currency | undefined {\n  return currencyId === 'ETH' ? nativeOnChain(chainId) : tokens[chainId]?.[currencyId]?.token\n}\n\nfunction buildCurrencyDescriptor(\n  currencyA: Currency | undefined,\n  amtA: string,\n  currencyB: Currency | undefined,\n  amtB: string,\n  delimiter = t`for`\n) {\n  const formattedA = currencyA ? formatCurrencyAmount(CurrencyAmount.fromRawAmount(currencyA, amtA)) : t`Unknown`\n  const symbolA = currencyA?.symbol ?? ''\n  const formattedB = currencyB ? formatCurrencyAmount(CurrencyAmount.fromRawAmount(currencyB, amtB)) : t`Unknown`\n  const symbolB = currencyB?.symbol ?? ''\n  return [formattedA, symbolA, delimiter, formattedB, symbolB].filter(Boolean).join(' ')\n}\n\nfunction parseSwap(\n  swap: ExactInputSwapTransactionInfo | ExactOutputSwapTransactionInfo,\n  chainId: SupportedChainId,\n  tokens: TokenAddressMap\n): Partial<Activity> {\n  const tokenIn = getCurrency(swap.inputCurrencyId, chainId, tokens)\n  const tokenOut = getCurrency(swap.outputCurrencyId, chainId, tokens)\n  const [inputRaw, outputRaw] =\n    swap.tradeType === TradeType.EXACT_INPUT\n      ? [swap.inputCurrencyAmountRaw, swap.expectedOutputCurrencyAmountRaw]\n      : [swap.expectedInputCurrencyAmountRaw, swap.outputCurrencyAmountRaw]\n\n  return {\n    descriptor: buildCurrencyDescriptor(tokenIn, inputRaw, tokenOut, outputRaw),\n    currencies: [tokenIn, tokenOut],\n  }\n}\n\nfunction parseWrap(wrap: WrapTransactionInfo, chainId: SupportedChainId, status: TransactionStatus): Partial<Activity> {\n  const native = nativeOnChain(chainId)\n  const wrapped = native.wrapped\n  const [input, output] = wrap.unwrapped ? [wrapped, native] : [native, wrapped]\n\n  const descriptor = buildCurrencyDescriptor(input, wrap.currencyAmountRaw, output, wrap.currencyAmountRaw)\n  const title = getActivityTitle(TransactionType.WRAP, status, wrap.unwrapped)\n  const currencies = wrap.unwrapped ? [wrapped, native] : [native, wrapped]\n\n  return { title, descriptor, currencies }\n}\n\nfunction parseApproval(\n  approval: ApproveTransactionInfo,\n  chainId: SupportedChainId,\n  tokens: TokenAddressMap\n): Partial<Activity> {\n  // TODO: Add 'amount' approved to ApproveTransactionInfo so we can distinguish between revoke and approve\n  const currency = getCurrency(approval.tokenAddress, chainId, tokens)\n  const descriptor = currency?.symbol ?? currency?.name ?? t`Unknown`\n  return {\n    descriptor,\n    currencies: [currency],\n  }\n}\n\ntype GenericLPInfo = Omit<\n  AddLiquidityV3PoolTransactionInfo | RemoveLiquidityV3TransactionInfo | AddLiquidityV2PoolTransactionInfo,\n  'type'\n>\nfunction parseLP(lp: GenericLPInfo, chainId: SupportedChainId, tokens: TokenAddressMap): Partial<Activity> {\n  const baseCurrency = getCurrency(lp.baseCurrencyId, chainId, tokens)\n  const quoteCurrency = getCurrency(lp.quoteCurrencyId, chainId, tokens)\n  const [baseRaw, quoteRaw] = [lp.expectedAmountBaseRaw, lp.expectedAmountQuoteRaw]\n  const descriptor = buildCurrencyDescriptor(baseCurrency, baseRaw, quoteCurrency, quoteRaw, t`and`)\n\n  return { descriptor, currencies: [baseCurrency, quoteCurrency] }\n}\n\nfunction parseCollectFees(\n  collect: CollectFeesTransactionInfo,\n  chainId: SupportedChainId,\n  tokens: TokenAddressMap\n): Partial<Activity> {\n  // Adapts CollectFeesTransactionInfo to generic LP type\n  const {\n    currencyId0: baseCurrencyId,\n    currencyId1: quoteCurrencyId,\n    expectedCurrencyOwed0: expectedAmountBaseRaw,\n    expectedCurrencyOwed1: expectedAmountQuoteRaw,\n  } = collect\n  return parseLP({ baseCurrencyId, quoteCurrencyId, expectedAmountBaseRaw, expectedAmountQuoteRaw }, chainId, tokens)\n}\n\nfunction parseMigrateCreateV3(\n  lp: MigrateV2LiquidityToV3TransactionInfo | CreateV3PoolTransactionInfo,\n  chainId: SupportedChainId,\n  tokens: TokenAddressMap\n): Partial<Activity> {\n  const baseCurrency = getCurrency(lp.baseCurrencyId, chainId, tokens)\n  const baseSymbol = baseCurrency?.symbol ?? t`Unknown`\n  const quoteCurrency = getCurrency(lp.quoteCurrencyId, chainId, tokens)\n  const quoteSymbol = quoteCurrency?.symbol ?? t`Unknown`\n  const descriptor = t`${baseSymbol} and ${quoteSymbol}`\n\n  return { descriptor, currencies: [baseCurrency, quoteCurrency] }\n}\n\nexport function parseLocalActivity(\n  details: TransactionDetails,\n  chainId: SupportedChainId,\n  tokens: TokenAddressMap\n): Activity | undefined {\n  try {\n    const status = !details.receipt\n      ? TransactionStatus.Pending\n      : details.receipt.status === 1 || details.receipt?.status === undefined\n      ? TransactionStatus.Confirmed\n      : TransactionStatus.Failed\n\n    const receipt: TransactionPartsFragment | undefined = details.receipt\n      ? {\n          id: details.receipt.transactionHash,\n          ...details.receipt,\n          ...details,\n          status,\n        }\n      : undefined\n\n    const defaultFields = {\n      hash: details.hash,\n      chainId,\n      title: getActivityTitle(details.info.type, status),\n      status,\n      timestamp: (details.confirmedTime ?? details.addedTime) / 1000,\n      receipt,\n    }\n\n    let additionalFields: Partial<Activity> = {}\n    const info = details.info\n    if (info.type === TransactionType.SWAP) {\n      additionalFields = parseSwap(info, chainId, tokens)\n    } else if (info.type === TransactionType.APPROVAL) {\n      additionalFields = parseApproval(info, chainId, tokens)\n    } else if (info.type === TransactionType.WRAP) {\n      additionalFields = parseWrap(info, chainId, status)\n    } else if (\n      info.type === TransactionType.ADD_LIQUIDITY_V3_POOL ||\n      info.type === TransactionType.REMOVE_LIQUIDITY_V3 ||\n      info.type === TransactionType.ADD_LIQUIDITY_V2_POOL\n    ) {\n      additionalFields = parseLP(info, chainId, tokens)\n    } else if (info.type === TransactionType.COLLECT_FEES) {\n      additionalFields = parseCollectFees(info, chainId, tokens)\n    } else if (info.type === TransactionType.MIGRATE_LIQUIDITY_V3 || info.type === TransactionType.CREATE_V3_POOL) {\n      additionalFields = parseMigrateCreateV3(info, chainId, tokens)\n    }\n\n    return { ...defaultFields, ...additionalFields }\n  } catch (error) {\n    console.debug(`Failed to parse transaction ${details.hash}`, error)\n    return undefined\n  }\n}\n\nexport function useLocalActivities(account: string): ActivityMap {\n  const allTransactions = useMultichainTransactions()\n  const tokens = useCombinedActiveList()\n\n  return useMemo(() => {\n    const activityByHash: ActivityMap = {}\n    for (const [transaction, chainId] of allTransactions) {\n      if (transaction.from !== account) continue\n\n      activityByHash[transaction.hash] = parseLocalActivity(transaction, chainId, tokens)\n    }\n    return activityByHash\n  }, [account, allTransactions, tokens])\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/ExpandoRow.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/PortfolioLogo.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/parseRemote.tsx",["3786","3787"],"import { t } from '@lingui/macro'\nimport { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { SupportedChainId } from '@uniswap/sdk-core'\nimport { NONFUNGIBLE_POSITION_MANAGER_ADDRESSES, UNI_ADDRESS } from 'constants/addresses'\nimport { nativeOnChain } from 'constants/tokens'\nimport {\n  ActivityType,\n  AssetActivityPartsFragment,\n  NftApprovalPartsFragment,\n  NftApproveForAllPartsFragment,\n  NftTransferPartsFragment,\n  TokenApprovalPartsFragment,\n  TokenTransferPartsFragment,\n} from 'graphql/data/__generated__/types-and-hooks'\nimport { fromGraphQLChain } from 'graphql/data/util'\nimport ms from 'ms.macro'\nimport { useEffect, useState } from 'react'\nimport { isAddress } from 'utils'\n\nimport { Activity } from './types'\n\ntype TransactionChanges = {\n  NftTransfer: NftTransferPartsFragment[]\n  TokenTransfer: TokenTransferPartsFragment[]\n  TokenApproval: TokenApprovalPartsFragment[]\n  NftApproval: NftApprovalPartsFragment[]\n  NftApproveForAll: NftApproveForAllPartsFragment[]\n}\n\n// TODO: Move common contract metadata to a backend service\nconst UNI_IMG =\n  'https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/ethereum/assets/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984/logo.png'\n\nconst ENS_IMG =\n  'https://464911102-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/collections%2F2TjMAeHSzwlQgcOdL48E%2Ficon%2FKWP0gk2C6bdRPliWIA6o%2Fens%20transparent%20background.png?alt=media&token=bd28b063-5a75-4971-890c-97becea09076'\n\nconst COMMON_CONTRACTS: { [key: string]: Partial<Activity> | undefined } = {\n  [UNI_ADDRESS[SupportedChainId.MAINNET].toLowerCase()]: {\n    title: t`UNI Governance`,\n    descriptor: t`Contract Interaction`,\n    logos: [UNI_IMG],\n  },\n  // TODO(cartcrom): Add permit2-specific logo\n  '0x000000000022d473030f116ddee9f6b43ac78ba3': {\n    title: t`Permit2`,\n    descriptor: t`Uniswap Protocol`,\n    logos: [UNI_IMG],\n  },\n  '0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`Public Resolver`,\n    logos: [ENS_IMG],\n  },\n  '0x58774bb8acd458a640af0b88238369a167546ef2': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`DNS Registrar`,\n    logos: [ENS_IMG],\n  },\n  '0x084b1c3c81545d370f3634392de611caabff8148': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`Reverse Registrar`,\n    logos: [ENS_IMG],\n  },\n  '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`ETH Registrar Controller`,\n    logos: [ENS_IMG],\n  },\n}\n\nfunction isSameAddress(a?: string, b?: string) {\n  return a === b || a?.toLowerCase() === b?.toLowerCase() // Lazy-lowercases the addresses\n}\n\nfunction callsPositionManagerContract(assetActivity: AssetActivityPartsFragment) {\n  return isSameAddress(\n    assetActivity.transaction.to,\n    NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[fromGraphQLChain(assetActivity.chain)]\n  )\n}\n\n// Gets counts for number of NFTs in each collection present\nfunction getCollectionCounts(nftTransfers: NftTransferPartsFragment[]): { [key: string]: number | undefined } {\n  return nftTransfers.reduce((acc, NFTChange) => {\n    const key = NFTChange.asset.collection?.name ?? NFTChange.asset.name\n    if (key) {\n      acc[key] = (acc?.[key] ?? 0) + 1\n    }\n    return acc\n  }, {} as { [key: string]: number | undefined })\n}\n\nfunction getSwapTitle(sent: TokenTransferPartsFragment, received: TokenTransferPartsFragment) {\n  if (\n    sent.tokenStandard === 'NATIVE' &&\n    isSameAddress(nativeOnChain(fromGraphQLChain(sent.asset.chain)).wrapped.address, received.asset.address)\n  )\n    return t`Wrapped`\n  else if (\n    received.tokenStandard === 'NATIVE' &&\n    isSameAddress(nativeOnChain(fromGraphQLChain(received.asset.chain)).wrapped.address, received.asset.address)\n  ) {\n    return t`Unwrapped`\n  } else {\n    return t`Swapped`\n  }\n}\n\nfunction parseSwap(changes: TransactionChanges) {\n  if (changes.NftTransfer.length > 0 && changes.TokenTransfer.length === 1) {\n    const collectionCounts = getCollectionCounts(changes.NftTransfer)\n\n    const title = changes.NftTransfer[0].direction === 'IN' ? t`Bought` : t`Sold`\n    const descriptor = Object.entries(collectionCounts)\n      .map(([collectionName, count]) => `${count} ${collectionName}`)\n      .join()\n\n    return { title, descriptor }\n  } else if (changes.TokenTransfer.length === 2) {\n    const sent = changes.TokenTransfer.find((t) => t?.__typename === 'TokenTransfer' && t.direction === 'OUT')\n    const received = changes.TokenTransfer.find((t) => t?.__typename === 'TokenTransfer' && t.direction === 'IN')\n    if (sent && received) {\n      const inputAmount = formatNumberOrString(sent.quantity, NumberType.TokenNonTx)\n      const outputAmount = formatNumberOrString(received.quantity, NumberType.TokenNonTx)\n      return {\n        title: getSwapTitle(sent, received),\n        descriptor: `${inputAmount} ${sent.asset.symbol} for ${outputAmount} ${received.asset.symbol}`,\n      }\n    }\n  }\n  return { title: t`Unknown Swap` }\n}\n\nfunction parseApprove(changes: TransactionChanges) {\n  if (changes.TokenApproval.length === 1) {\n    const title = parseInt(changes.TokenApproval[0].quantity) === 0 ? t`Revoked Approval` : t`Approved`\n    const descriptor = `${changes.TokenApproval[0].asset.symbol}`\n    return { title, descriptor }\n  }\n  return { title: t`Unknown Approval` }\n}\n\nfunction parseLPTransfers(changes: TransactionChanges) {\n  const poolTokenA = changes.TokenTransfer[0]\n  const poolTokenB = changes.TokenTransfer[1]\n\n  const tokenAQuanitity = formatNumberOrString(poolTokenA.quantity, NumberType.TokenNonTx)\n  const tokenBQuantity = formatNumberOrString(poolTokenB.quantity, NumberType.TokenNonTx)\n\n  return {\n    descriptor: `${tokenAQuanitity} ${poolTokenA.asset.symbol} and ${tokenBQuantity} ${poolTokenB.asset.symbol}`,\n    logos: [poolTokenA.asset.project?.logo?.url, poolTokenB.asset.project?.logo?.url],\n  }\n}\n\nfunction parseSendReceive(changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) {\n  // TODO(cartcrom): remove edge cases after backend implements\n  // Edge case: Receiving two token transfers in interaction w/ V3 manager === removing liquidity. These edge cases should potentially be moved to backend\n  if (changes.TokenTransfer.length === 2 && callsPositionManagerContract(assetActivity)) {\n    return { title: t`Removed Liquidity`, ...parseLPTransfers(changes) }\n  }\n\n  let transfer: NftTransferPartsFragment | TokenTransferPartsFragment | undefined\n  let assetName: string | undefined\n  let amount: string | undefined\n\n  if (changes.NftTransfer.length === 1) {\n    transfer = changes.NftTransfer[0]\n    assetName = transfer.asset.collection?.name\n    amount = '1'\n  } else if (changes.TokenTransfer.length === 1) {\n    transfer = changes.TokenTransfer[0]\n    assetName = transfer.asset.symbol\n    amount = formatNumberOrString(transfer.quantity, NumberType.TokenNonTx)\n  }\n\n  if (transfer && assetName && amount) {\n    return transfer.direction === 'IN'\n      ? {\n          title: t`Received`,\n          descriptor: `${amount} ${assetName} ${t`from`} `,\n          otherAccount: isAddress(transfer.sender) || undefined,\n        }\n      : {\n          title: t`Sent`,\n          descriptor: `${amount} ${assetName} ${t`to`} `,\n          otherAccount: isAddress(transfer.recipient) || undefined,\n        }\n  }\n  return { title: t`Unknown Send` }\n}\n\nfunction parseMint(changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) {\n  const collectionMap = getCollectionCounts(changes.NftTransfer)\n  if (Object.keys(collectionMap).length === 1) {\n    const collectionName = Object.keys(collectionMap)[0]\n\n    // Edge case: Minting a v3 positon represents adding liquidity\n    if (changes.TokenTransfer.length === 2 && callsPositionManagerContract(assetActivity)) {\n      return { title: t`Added Liquidity`, ...parseLPTransfers(changes) }\n    }\n    return { title: t`Minted`, descriptor: `${collectionMap[collectionName]} ${collectionName}` }\n  }\n  return { title: t`Unknown Mint` }\n}\n\nfunction parseUnknown(_changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) {\n  return { title: t`Contract Interaction`, ...COMMON_CONTRACTS[assetActivity.transaction.to.toLowerCase()] }\n}\n\ntype ActivityTypeParser = (changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) => Partial<Activity>\nconst ActivityParserByType: { [key: string]: ActivityTypeParser | undefined } = {\n  [ActivityType.Swap]: parseSwap,\n  [ActivityType.Approve]: parseApprove,\n  [ActivityType.Send]: parseSendReceive,\n  [ActivityType.Receive]: parseSendReceive,\n  [ActivityType.Mint]: parseMint,\n  [ActivityType.Unknown]: parseUnknown,\n}\n\nfunction getLogoSrcs(changes: TransactionChanges): string[] {\n  // Uses set to avoid duplicate logos (e.g. nft's w/ same image url)\n  const logoSet = new Set<string | undefined>()\n  // Uses only NFT logos if they are present (will not combine nft image w/ token image)\n  if (changes.NftTransfer.length > 0) {\n    changes.NftTransfer.forEach((nftChange) => logoSet.add(nftChange.asset.image?.url))\n  } else {\n    changes.TokenTransfer.forEach((tokenChange) => logoSet.add(tokenChange.asset.project?.logo?.url))\n    changes.TokenApproval.forEach((tokenChange) => logoSet.add(tokenChange.asset.project?.logo?.url))\n  }\n  return Array.from(logoSet).filter(Boolean) as string[]\n}\n\nfunction parseRemoteActivity(assetActivity: AssetActivityPartsFragment): Activity | undefined {\n  try {\n    const changes = assetActivity.assetChanges.reduce(\n      (acc: TransactionChanges, assetChange) => {\n        if (assetChange.__typename === 'NftApproval') acc.NftApproval.push(assetChange)\n        else if (assetChange.__typename === 'NftApproveForAll') acc.NftApproveForAll.push(assetChange)\n        else if (assetChange.__typename === 'NftTransfer') acc.NftTransfer.push(assetChange)\n        else if (assetChange.__typename === 'TokenTransfer') acc.TokenTransfer.push(assetChange)\n        else if (assetChange.__typename === 'TokenApproval') acc.TokenApproval.push(assetChange)\n\n        return acc\n      },\n      { NftTransfer: [], TokenTransfer: [], TokenApproval: [], NftApproval: [], NftApproveForAll: [] }\n    )\n    const defaultFields = {\n      hash: assetActivity.transaction.hash,\n      chainId: fromGraphQLChain(assetActivity.chain),\n      status: assetActivity.transaction.status,\n      timestamp: assetActivity.timestamp,\n      logos: getLogoSrcs(changes),\n      title: assetActivity.type,\n      descriptor: assetActivity.transaction.to,\n      receipt: assetActivity.transaction,\n    }\n    const parsedFields = ActivityParserByType[assetActivity.type]?.(changes, assetActivity)\n\n    return { ...defaultFields, ...parsedFields }\n  } catch (e) {\n    console.error('Failed to parse activity', e, assetActivity)\n    return undefined\n  }\n}\n\nexport function parseRemoteActivities(assetActivities?: AssetActivityPartsFragment[]) {\n  return assetActivities?.reduce((acc: { [hash: string]: Activity }, assetActivity) => {\n    const activity = parseRemoteActivity(assetActivity)\n    if (activity) acc[activity.hash] = activity\n    return acc\n  }, {})\n}\n\nconst getTimeSince = (timestamp: number) => {\n  const seconds = Math.floor(Date.now() - timestamp * 1000)\n\n  let interval\n  // TODO(cartcrom): use locale to determine date shorthands to use for non-english\n  if ((interval = seconds / ms`1y`) > 1) return Math.floor(interval) + 'y'\n  if ((interval = seconds / ms`30d`) > 1) return Math.floor(interval) + 'mo'\n  if ((interval = seconds / ms`1d`) > 1) return Math.floor(interval) + 'd'\n  if ((interval = seconds / ms`1h`) > 1) return Math.floor(interval) + 'h'\n  if ((interval = seconds / ms`1m`) > 1) return Math.floor(interval) + 'm'\n  else return Math.floor(seconds / ms`1s`) + 's'\n}\n\n/**\n * Keeps track of the time since a given timestamp, keeping it up to date every second when necessary\n * @param timestamp\n * @returns\n */\nexport function useTimeSince(timestamp: number) {\n  const [timeSince, setTimeSince] = useState<string>(getTimeSince(timestamp))\n\n  useEffect(() => {\n    const refreshTime = () => {\n      if (Math.floor(Date.now() - timestamp * 1000) / ms`61s` <= 1) {\n        setTimeSince(getTimeSince(timestamp))\n        setTimeout(() => {\n          refreshTime()\n        }, ms`1s`)\n      }\n    }\n    refreshTime()\n  }, [timestamp])\n\n  return timeSince\n}\n","/workspace/Physica-Interfae/src/components/Unicon/utils.ts",["3788"],"import { isAddress } from 'ethers/lib/utils'\n\nimport { svgPaths as containerPaths } from './Container'\nimport { svgPaths as emblemPaths } from './Emblem'\nimport {\n  gradientEnds,\n  gradientStarts,\n  UniconAttributeData,\n  UniconAttributes,\n  UniconAttributesArray,\n  UniconAttributesToIndices,\n  UniconNumOptions,\n} from './types'\n\nconst NUM_CHARS_TO_USE_PER_ATTRIBUTE = 2\n\nexport const isEthAddress = (address: string) => {\n  return address.startsWith('0x') && isAddress(address.toLowerCase())\n}\n\nexport const deriveUniconAttributeIndices = (\n  address: string,\n  randomSeed = 0\n): UniconAttributesToIndices | undefined => {\n  if (!isEthAddress(address)) return\n\n  const hexAddr = address.slice(-40)\n  const newIndices = {\n    [UniconAttributes.GradientStart]: 0,\n    [UniconAttributes.GradientEnd]: 0,\n    [UniconAttributes.Container]: 0,\n    [UniconAttributes.Shape]: 0,\n  } as UniconAttributesToIndices\n  for (const a of UniconAttributesArray) {\n    const optionHex = hexAddr.slice(NUM_CHARS_TO_USE_PER_ATTRIBUTE * a, NUM_CHARS_TO_USE_PER_ATTRIBUTE * (a + 1))\n    const optionDec = parseInt(optionHex, 16) + randomSeed\n    const optionIndex = optionDec % UniconNumOptions[a]\n    newIndices[a] = optionIndex\n  }\n  return newIndices\n}\n\nexport const getUniconAttributeData = (attributeIndices: UniconAttributesToIndices): UniconAttributeData => {\n  return {\n    [UniconAttributes.GradientStart]: gradientStarts[attributeIndices[UniconAttributes.GradientStart]],\n    [UniconAttributes.GradientEnd]: gradientEnds[attributeIndices[UniconAttributes.GradientEnd]],\n    [UniconAttributes.Container]: containerPaths[attributeIndices[UniconAttributes.Container]],\n    [UniconAttributes.Shape]: emblemPaths[attributeIndices[UniconAttributes.Shape]],\n  } as UniconAttributeData\n}\n","/workspace/Physica-Interfae/src/components/Unicon/types.ts",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/constants.ts",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/hooks.ts",["3789","3790"],"import { Token } from '@uniswap/sdk-core'\nimport { AddressMap } from '@uniswap/smart-order-router'\nimport { abi as MulticallABI } from '@uniswap/v3-periphery/artifacts/contracts/lens/UniswapInterfaceMulticall.sol/UniswapInterfaceMulticall.json'\nimport { abi as NFTPositionManagerABI } from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport { useWeb3React } from '@web3-react/core'\nimport { MULTICALL_ADDRESS, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES as V3NFT_ADDRESSES } from 'constants/addresses'\nimport { isSupportedChain, SupportedChainId } from 'constants/chains'\nimport { RPC_PROVIDERS } from 'constants/providers'\nimport { BaseContract } from 'ethers/lib/ethers'\nimport { ContractInput, useUniswapPricesQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { toContractInput } from 'graphql/data/util'\nimport useStablecoinPrice from 'hooks/useStablecoinPrice'\nimport { useMemo } from 'react'\nimport { NonfungiblePositionManager, UniswapInterfaceMulticall } from 'types/v3'\nimport { getContract } from 'utils'\nimport { CurrencyKey, currencyKey, currencyKeyFromGraphQL } from 'utils/currencyKey'\n\nimport { PositionInfo } from './cache'\n\ntype ContractMap<T extends BaseContract> = { [key: number]: T }\n\n// Constructs a chain-to-contract map, using the wallet's provider when available\nfunction useContractMultichain<T extends BaseContract>(\n  addressMap: AddressMap,\n  ABI: any,\n  chainIds?: SupportedChainId[]\n): ContractMap<T> {\n  const { chainId: walletChainId, provider: walletProvider } = useWeb3React()\n\n  return useMemo(() => {\n    const relevantChains =\n      chainIds ??\n      Object.keys(addressMap)\n        .map((chainId) => parseInt(chainId))\n        .filter(isSupportedChain)\n\n    return relevantChains.reduce((acc: ContractMap<T>, chainId) => {\n      const provider = walletProvider && walletChainId === chainId ? walletProvider : RPC_PROVIDERS[chainId]\n      acc[chainId] = getContract(addressMap[chainId], ABI, provider) as T\n      return acc\n    }, {})\n  }, [ABI, addressMap, chainIds, walletChainId, walletProvider])\n}\n\nexport function useV3ManagerContracts(chainIds: SupportedChainId[]): ContractMap<NonfungiblePositionManager> {\n  return useContractMultichain<NonfungiblePositionManager>(V3NFT_ADDRESSES, NFTPositionManagerABI, chainIds)\n}\n\nexport function useInterfaceMulticallContracts(chainIds: SupportedChainId[]): ContractMap<UniswapInterfaceMulticall> {\n  return useContractMultichain<UniswapInterfaceMulticall>(MULTICALL_ADDRESS, MulticallABI, chainIds)\n}\n\ntype PriceMap = { [key: CurrencyKey]: number | undefined }\nexport function usePoolPriceMap(positions: PositionInfo[] | undefined) {\n  const contracts = useMemo(() => {\n    if (!positions || !positions.length) return []\n    // Avoids fetching duplicate tokens by placing in map\n    const contractMap = positions.reduce((acc: { [key: string]: ContractInput }, { pool: { token0, token1 } }) => {\n      acc[currencyKey(token0)] = toContractInput(token0)\n      acc[currencyKey(token1)] = toContractInput(token1)\n      return acc\n    }, {})\n    return Object.values(contractMap)\n  }, [positions])\n\n  const { data, loading } = useUniswapPricesQuery({ variables: { contracts }, skip: !contracts.length })\n\n  const priceMap = useMemo(\n    () =>\n      data?.tokens?.reduce((acc: PriceMap, current) => {\n        if (current) acc[currencyKeyFromGraphQL(current)] = current.project?.markets?.[0]?.price?.value\n        return acc\n      }, {}) ?? {},\n    [data?.tokens]\n  )\n\n  return { priceMap, pricesLoading: loading && !data }\n}\n\nfunction useFeeValue(token: Token, fee: number | undefined, queriedPrice: number | undefined) {\n  const stablecoinPrice = useStablecoinPrice(!queriedPrice ? token : undefined)\n  return useMemo(() => {\n    // Prefers gql price, as fetching stablecoinPrice will trigger multiple infura calls for each pool position\n    const price = queriedPrice ?? (stablecoinPrice ? parseFloat(stablecoinPrice.toSignificant()) : undefined)\n    const feeValue = fee && price ? fee * price : undefined\n\n    return [price, feeValue]\n  }, [fee, queriedPrice, stablecoinPrice])\n}\n\nexport function useFeeValues(position: PositionInfo) {\n  const [priceA, feeValueA] = useFeeValue(position.pool.token0, position.fees?.[0], position.prices?.[0])\n  const [priceB, feeValueB] = useFeeValue(position.pool.token1, position.fees?.[1], position.prices?.[1])\n\n  return { priceA, priceB, fees: (feeValueA || 0) + (feeValueB || 0) }\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Activity/ActivityRow.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/NFTs/NFTItem.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/useMultiChainPositions.tsx",["3791","3792","3793","3794","3795","3796","3797","3798","3799","3800"],"import { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { abi as IUniswapV3PoolStateABI } from '@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json'\nimport { computePoolAddress, Pool, Position } from '@uniswap/v3-sdk'\nimport { V3_CORE_FACTORY_ADDRESSES } from 'constants/addresses'\nimport { SupportedChainId } from 'constants/chains'\nimport { DEFAULT_ERC20_DECIMALS } from 'constants/tokens'\nimport { BigNumber } from 'ethers/lib/ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { PositionDetails } from 'types/position'\nimport { NonfungiblePositionManager, UniswapInterfaceMulticall } from 'types/v3'\nimport { UniswapV3PoolInterface } from 'types/v3/UniswapV3Pool'\nimport { currencyKey } from 'utils/currencyKey'\n\nimport { PositionInfo, useCachedPositions, useGetCachedTokens, usePoolAddressCache } from './cache'\nimport { Call, DEFAULT_GAS_LIMIT } from './getTokensAsync'\nimport { useInterfaceMulticallContracts, usePoolPriceMap, useV3ManagerContracts } from './hooks'\n\nfunction createPositionInfo(\n  owner: string,\n  chainId: SupportedChainId,\n  details: PositionDetails,\n  slot0: any,\n  tokenA: Token,\n  tokenB: Token\n): PositionInfo {\n  /* Instantiates a Pool with a hardcoded 0 liqudity value since the sdk only uses this value for swap state and this avoids an RPC fetch */\n  const pool = new Pool(tokenA, tokenB, details.fee, slot0.sqrtPriceX96.toString(), 0, slot0.tick)\n  const position = new Position({\n    pool,\n    liquidity: details.liquidity.toString(),\n    tickLower: details.tickLower,\n    tickUpper: details.tickUpper,\n  })\n  const inRange = slot0.tick >= details.tickLower && slot0.tick < details.tickUpper\n  const closed = details.liquidity.eq(0)\n  return { owner, chainId, pool, position, details, inRange, closed }\n}\n\ntype FeeAmounts = [BigNumber, BigNumber]\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\nconst DEFAULT_CHAINS = [\n  SupportedChainId.MAINNET,\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.POLYGON,\n  SupportedChainId.CELO,\n]\n\ntype UseMultiChainPositionsData = { positions: PositionInfo[] | undefined; loading: boolean }\n\n/**\n * Returns all positions for a given account on multiple chains.\n *\n * This hook doesn't use the redux-multicall library to avoid having to manually fetching blocknumbers for each chain.\n *\n * @param account - account to fetch positions for\n * @param chains - chains to fetch positions from\n * @returns positions, fees\n */\nexport default function useMultiChainPositions(account: string, chains = DEFAULT_CHAINS): UseMultiChainPositionsData {\n  const pms = useV3ManagerContracts(chains)\n  const multicalls = useInterfaceMulticallContracts(chains)\n\n  const getTokens = useGetCachedTokens(chains)\n  const poolAddressCache = usePoolAddressCache()\n\n  const [cachedPositions, setPositions] = useCachedPositions(account)\n  const positions = cachedPositions?.result\n  const positionsFetching = useRef(false)\n  const positionsLoading = !cachedPositions?.result && positionsFetching.current\n\n  const [feeMap, setFeeMap] = useState<{ [key: string]: FeeAmounts }>({})\n\n  const { priceMap, pricesLoading } = usePoolPriceMap(positions)\n\n  const fetchPositionFees = useCallback(\n    async (pm: NonfungiblePositionManager, positionIds: BigNumber[], chainId: number) => {\n      const callData = positionIds.map((id) =>\n        pm.interface.encodeFunctionData('collect', [\n          { tokenId: id, recipient: account, amount0Max: MAX_UINT128, amount1Max: MAX_UINT128 },\n        ])\n      )\n      const fees = (await pm.callStatic.multicall(callData)).reduce((acc, feeBytes, index) => {\n        const key = chainId.toString() + positionIds[index]\n        acc[key] = pm.interface.decodeFunctionResult('collect', feeBytes) as FeeAmounts\n        return acc\n      }, {} as { [key: string]: FeeAmounts })\n\n      setFeeMap((prev) => ({ ...prev, ...fees }))\n    },\n    [account]\n  )\n\n  const fetchPositionIds = useCallback(\n    async (pm: NonfungiblePositionManager, balance: BigNumber) => {\n      const callData = Array.from({ length: balance.toNumber() }, (_, i) =>\n        pm.interface.encodeFunctionData('tokenOfOwnerByIndex', [account, i])\n      )\n      return (await pm.callStatic.multicall(callData)).map((idByte) => BigNumber.from(idByte))\n    },\n    [account]\n  )\n\n  const fetchPositionDetails = useCallback(async (pm: NonfungiblePositionManager, positionIds: BigNumber[]) => {\n    const callData = positionIds.map((id) => pm.interface.encodeFunctionData('positions', [id]))\n    return (await pm.callStatic.multicall(callData)).map(\n      (positionBytes, index) =>\n        ({\n          ...pm.interface.decodeFunctionResult('positions', positionBytes),\n          tokenId: positionIds[index],\n        } as unknown as PositionDetails)\n    )\n  }, [])\n\n  // Combines PositionDetails with Pool data to build our return type\n  const fetchPositionInfo = useCallback(\n    async (positionDetails: PositionDetails[], chainId: SupportedChainId, multicall: UniswapInterfaceMulticall) => {\n      const poolInterface = new Interface(IUniswapV3PoolStateABI) as UniswapV3PoolInterface\n      const tokens = await getTokens(\n        positionDetails.flatMap((details) => [details.token0, details.token1]),\n        chainId\n      )\n\n      const calls: Call[] = []\n      const poolPairs: [Token, Token][] = []\n      positionDetails.forEach((details) => {\n        const tokenA = tokens[details.token0] ?? new Token(chainId, details.token0, DEFAULT_ERC20_DECIMALS)\n        const tokenB = tokens[details.token1] ?? new Token(chainId, details.token1, DEFAULT_ERC20_DECIMALS)\n\n        let poolAddress = poolAddressCache.get(details, chainId)\n        if (!poolAddress) {\n          const factoryAddress = V3_CORE_FACTORY_ADDRESSES[chainId]\n          poolAddress = computePoolAddress({ factoryAddress, tokenA, tokenB, fee: details.fee })\n          poolAddressCache.set(details, chainId, poolAddress)\n        }\n        poolPairs.push([tokenA, tokenB])\n        calls.push({\n          target: poolAddress,\n          callData: poolInterface.encodeFunctionData('slot0'),\n          gasLimit: DEFAULT_GAS_LIMIT,\n        })\n      }, [])\n\n      return (await multicall.callStatic.multicall(calls)).returnData.reduce((acc: PositionInfo[], result, i) => {\n        if (result.success) {\n          const slot0 = poolInterface.decodeFunctionResult('slot0', result.returnData)\n          acc.push(createPositionInfo(account, chainId, positionDetails[i], slot0, ...poolPairs[i]))\n        } else {\n          console.debug('slot0 fetch errored', result)\n        }\n        return acc\n      }, [])\n    },\n    [account, poolAddressCache, getTokens]\n  )\n\n  const fetchPositionsForChain = useCallback(\n    async (chainId: SupportedChainId): Promise<PositionInfo[]> => {\n      try {\n        const pm = pms[chainId]\n        const multicall = multicalls[chainId]\n        const balance = await pm?.balanceOf(account)\n        if (!pm || !multicall || balance.lt(1)) return []\n\n        const positionIds = await fetchPositionIds(pm, balance)\n        // Fetches fees in the background and stores them separetely from the results of this function\n        fetchPositionFees(pm, positionIds, chainId)\n\n        const postionDetails = await fetchPositionDetails(pm, positionIds)\n        return fetchPositionInfo(postionDetails, chainId, multicall)\n      } catch (error) {\n        console.error(`Failed to fetch positions for chain ${chainId}`, error)\n        return []\n      }\n    },\n    [account, fetchPositionDetails, fetchPositionFees, fetchPositionIds, fetchPositionInfo, pms, multicalls]\n  )\n\n  const fetchAllPositions = useCallback(async () => {\n    positionsFetching.current = true\n    const positions = (await Promise.all(chains.map(fetchPositionsForChain))).flat()\n    positionsFetching.current = false\n    setPositions(positions)\n  }, [chains, fetchPositionsForChain, setPositions])\n\n  // Fetches positions when existing positions are stale and the document has focus\n  useEffect(() => {\n    if (positionsFetching.current || cachedPositions?.stale === false) return\n    else if (document.hasFocus()) {\n      fetchAllPositions()\n    } else {\n      // Avoids refetching positions until the user returns to Interface to avoid polling unnused rpc data\n      const onFocus = () => {\n        fetchAllPositions()\n        window.removeEventListener('focus', onFocus)\n      }\n      window.addEventListener('focus', onFocus)\n      return () => {\n        window.removeEventListener('focus', onFocus)\n      }\n    }\n    return\n  }, [fetchAllPositions, positionsFetching, cachedPositions?.stale])\n\n  const positionsWithFeesAndPrices: PositionInfo[] | undefined = useMemo(\n    () =>\n      positions?.map((position) => {\n        const key = position.chainId.toString() + position.details.tokenId\n        const fees = feeMap[key]\n          ? [\n              // We parse away from SDK/ethers types so fees can be multiplied by primitive number prices\n              parseFloat(CurrencyAmount.fromRawAmount(position.pool.token0, feeMap[key]?.[0].toString()).toExact()),\n              parseFloat(CurrencyAmount.fromRawAmount(position.pool.token1, feeMap[key]?.[1].toString()).toExact()),\n            ]\n          : undefined\n        const prices = [priceMap[currencyKey(position.pool.token0)], priceMap[currencyKey(position.pool.token1)]]\n        return { ...position, fees, prices } as PositionInfo\n      }),\n    [feeMap, positions, priceMap]\n  )\n\n  return { positions: positionsWithFeesAndPrices, loading: pricesLoading || positionsLoading }\n}\n","/workspace/Physica-Interfae/src/components/Unicon/Emblem.ts",[],"/workspace/Physica-Interfae/src/components/Unicon/Container.ts",[],"/workspace/Physica-Interfae/src/graphql/data/nft/NftBalance.ts",["3801","3802"],"import { parseEther } from 'ethers/lib/utils'\nimport gql from 'graphql-tag'\nimport { GenieCollection, WalletAsset } from 'nft/types'\nimport { wrapScientificNotation } from 'nft/utils'\nimport { useCallback, useMemo } from 'react'\n\nimport { NftAsset, useNftBalanceQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftBalance(\n    $ownerAddress: String!\n    $filter: NftBalancesFilterInput\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n  ) {\n    nftBalances(\n      ownerAddress: $ownerAddress\n      filter: $filter\n      first: $first\n      after: $after\n      last: $last\n      before: $before\n    ) {\n      edges {\n        node {\n          ownedAsset {\n            id\n            animationUrl\n            collection {\n              id\n              isVerified\n              image {\n                id\n                url\n              }\n              name\n              twitterName\n              nftContracts {\n                id\n                address\n                chain\n                name\n                standard\n                symbol\n                totalSupply\n              }\n              markets(currencies: ETH) {\n                id\n                floorPrice {\n                  id\n                  value\n                }\n              }\n            }\n            description\n            flaggedBy\n            image {\n              id\n              url\n            }\n            originalImage {\n              id\n              url\n            }\n            name\n            ownerAddress\n            smallImage {\n              id\n              url\n            }\n            suspiciousFlag\n            tokenId\n            thumbnail {\n              id\n              url\n            }\n            listings(first: 1) {\n              edges {\n                node {\n                  price {\n                    id\n                    value\n                    currency\n                  }\n                  createdAt\n                  marketplace\n                  endAt\n                }\n              }\n            }\n          }\n          listedMarketplaces\n          listingFees {\n            id\n            payoutAddress\n            basisPoints\n          }\n          lastPrice {\n            id\n            currency\n            timestamp\n            value\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\nexport function useNftBalance(\n  ownerAddress: string,\n  collectionFilters?: string[],\n  assetsFilter?: { address: string; tokenId: string }[],\n  first?: number,\n  after?: string,\n  last?: number,\n  before?: string,\n  skip = false\n) {\n  const { data, loading, fetchMore } = useNftBalanceQuery({\n    variables: {\n      ownerAddress,\n      filter:\n        assetsFilter && assetsFilter.length > 0\n          ? {\n              assets: assetsFilter,\n            }\n          : {\n              addresses: collectionFilters,\n            },\n      first,\n      after,\n      last,\n      before,\n    },\n    skip,\n  })\n\n  const hasNext = data?.nftBalances?.pageInfo?.hasNextPage\n  const loadMore = useCallback(\n    () =>\n      fetchMore({\n        variables: {\n          after: data?.nftBalances?.pageInfo?.endCursor,\n        },\n      }),\n    [data?.nftBalances?.pageInfo?.endCursor, fetchMore]\n  )\n\n  const walletAssets: WalletAsset[] | undefined = data?.nftBalances?.edges?.map((queryAsset) => {\n    const asset = queryAsset?.node.ownedAsset as NonNullable<NftAsset>\n    const ethPrice = parseEther(wrapScientificNotation(asset?.listings?.edges[0]?.node.price.value ?? 0)).toString()\n    return {\n      id: asset?.id,\n      imageUrl: asset?.image?.url,\n      smallImageUrl: asset?.smallImage?.url,\n      notForSale: asset?.listings?.edges?.length === 0,\n      animationUrl: asset?.animationUrl,\n      susFlag: asset?.suspiciousFlag,\n      priceInfo: {\n        ETHPrice: ethPrice,\n        baseAsset: 'ETH',\n        baseDecimals: '18',\n        basePrice: ethPrice,\n      },\n      name: asset?.name,\n      tokenId: asset?.tokenId,\n      asset_contract: {\n        address: asset?.collection?.nftContracts?.[0]?.address,\n        tokenType: asset?.collection?.nftContracts?.[0]?.standard,\n        name: asset?.collection?.name,\n        description: asset?.description,\n        image_url: asset?.collection?.image?.url,\n        payout_address: queryAsset?.node?.listingFees?.[0]?.payoutAddress,\n      },\n      collection: {\n        name: asset.collection?.name,\n        isVerified: asset.collection?.isVerified,\n        imageUrl: asset.collection?.image?.url,\n        twitterUrl: asset.collection?.twitterName ? `@${asset.collection?.twitterName}` : undefined,\n      } as GenieCollection,\n      collectionIsVerified: asset?.collection?.isVerified,\n      lastPrice: queryAsset.node.lastPrice?.value,\n      floorPrice: asset?.collection?.markets?.[0]?.floorPrice?.value,\n      basisPoints: queryAsset?.node?.listingFees?.[0]?.basisPoints ?? 0 / 10000,\n      listing_date: asset?.listings?.edges?.[0]?.node?.createdAt?.toString(),\n      date_acquired: queryAsset.node.lastPrice?.timestamp?.toString(),\n      sellOrders: asset?.listings?.edges.map((edge: any) => edge.node),\n      floor_sell_order_price: asset?.listings?.edges?.[0]?.node?.price?.value,\n    }\n  })\n  return useMemo(() => ({ walletAssets, hasNext, loadMore, loading }), [hasNext, loadMore, loading, walletAssets])\n}\n","/workspace/Physica-Interfae/src/hooks/useFilterPossiblyMaliciousPositions.ts",["3803","3804","3805"],"import { Token } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { PositionDetails } from 'types/position'\nimport { hasURL } from 'utils/urlChecks'\n\nimport { useDefaultActiveTokens } from './Tokens'\nimport { useTokenContractsConstant } from './useTokenContractsConstant'\n\nfunction getUniqueAddressesFromPositions(positions: PositionDetails[]): string[] {\n  return Array.from(\n    new Set(positions.reduce<string[]>((acc, position) => acc.concat(position.token0, position.token1), []))\n  )\n}\n/*\n * This function is an attempt to filter out an observed phishing attack from LP list UIs.\n * Attackers would airdrop valueless LP positions with urls in the symbol to render phishing sites into users' LP position list view.\n *\n * Our approach to filtering these out without naively prohibiting all valid URL symbols is to:\n * 1. allow any pair if both tokens are in the supported list\n * 2. allow one url if one token is in the supported list\n * 3. allow no urls if neither token is in the supported list\n *\n * The hope is that this approach removes the cheapest version of the attack without punishing non-malicious url symbols\n */\nexport function useFilterPossiblyMaliciousPositions(positions: PositionDetails[]): PositionDetails[] {\n  const activeTokensList = useDefaultActiveTokens()\n\n  const nonListPositionTokenAddresses = useMemo(\n    () => getUniqueAddressesFromPositions(positions).filter((address) => !activeTokensList[address]),\n    [positions, activeTokensList]\n  )\n\n  const symbolCallStates = useTokenContractsConstant(nonListPositionTokenAddresses, 'symbol')\n\n  const addressesToSymbol: Record<string, string> = useMemo(() => {\n    const result: Record<string, string> = {}\n    for (let i = 0; i < nonListPositionTokenAddresses.length; i++) {\n      const callResult = symbolCallStates[i].result\n      if (!callResult) continue\n      const address = nonListPositionTokenAddresses[i]\n      result[address] = callResult as unknown as string\n    }\n    return result\n  }, [nonListPositionTokenAddresses, symbolCallStates])\n\n  return useMemo(\n    () =>\n      positions.filter((position) => {\n        let tokensInListCount = 0\n        const token0FromList = activeTokensList[position.token0] as Token | undefined\n        const token1FromList = activeTokensList[position.token1] as Token | undefined\n        if (token0FromList) tokensInListCount++\n        if (token1FromList) tokensInListCount++\n        // if both tokens are in the list, then we let both have url symbols (so we don't check)\n        if (tokensInListCount === 2) return true\n\n        // check the token symbols to see if they contain a url\n        // prioritize the token entity from the list if it exists\n        // if the token isn't in the list, then use the data returned from chain calls\n        let urlSymbolCount = 0\n        if (hasURL(token0FromList?.symbol ?? addressesToSymbol[position.token0])) urlSymbolCount++\n        if (hasURL(token1FromList?.symbol ?? addressesToSymbol[position.token1])) urlSymbolCount++\n        // if one token is in the list, then one token can have a url symbol\n        if (tokensInListCount === 1 && urlSymbolCount < 2) return true\n\n        // if neither token is in the list, then neither can have a url symbol\n        return urlSymbolCount === 0\n      }),\n    [addressesToSymbol, positions, activeTokensList]\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/view/EmptyWalletContent.tsx",[],"/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/getTokensAsync.ts",["3806","3807"],"import { Token } from '@uniswap/sdk-core'\nimport ERC20_ABI from 'abis/erc20.json'\nimport { Erc20Interface } from 'abis/types/Erc20'\nimport { Erc20Bytes32Interface } from 'abis/types/Erc20Bytes32'\nimport { SupportedChainId } from 'constants/chains'\nimport { DEFAULT_ERC20_DECIMALS } from 'constants/tokens'\nimport { Interface } from 'ethers/lib/utils'\nimport { UniswapInterfaceMulticall } from 'types/v3'\nimport { isAddress } from 'utils'\nimport { arrayToSlices } from 'utils/arrays'\nimport { buildCurrencyKey, CurrencyKey, currencyKey } from 'utils/currencyKey'\n\ntype TokenMap = { [address: string]: Token | undefined }\nexport type Call = { target: string; callData: string; gasLimit: number }\ntype CallResult = { success: boolean; returnData: string }\nexport const DEFAULT_GAS_LIMIT = 1_000_000\n\nconst Erc20 = new Interface(ERC20_ABI) as Erc20Interface\nconst Erc20Bytes32 = new Interface(ERC20_ABI) as Erc20Bytes32Interface // Used for tokens that return bytes32 for name/symbol rather than string\n\n// TODO(WEB-3060): cartcrom - adapt support for multi-function multi-interface multicalls into redux-multicall to remove than this custom cache/chunking logic\n// Infura rejects calls with gas costs > 10x the current block gas limit; in such case we split the call into 2 chunks\nasync function fetchChunk(multicall: UniswapInterfaceMulticall, chunk: Call[]): Promise<CallResult[]> {\n  try {\n    return (await multicall.callStatic.multicall(chunk)).returnData\n  } catch (error) {\n    if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        const half = Math.floor(chunk.length / 2)\n        return Promise.all([\n          fetchChunk(multicall, chunk.slice(0, half)),\n          fetchChunk(multicall, chunk.slice(half, chunk.length)),\n        ]).then(([c0, c1]) => [...c0, ...c1])\n      }\n    }\n    console.error('Failed to fetch chunk', error)\n    throw error\n  }\n}\n\nfunction tryParseToken(address: string, chainId: SupportedChainId, data: CallResult[]) {\n  try {\n    const [nameData, symbolData, decimalsData, nameDataBytes32, symbolDataBytes32] = data\n\n    const name = nameData.success\n      ? (Erc20.decodeFunctionResult('name', nameData.returnData)[0] as string)\n      : nameDataBytes32.success\n      ? (Erc20Bytes32.decodeFunctionResult('name', nameDataBytes32.returnData)[0] as string)\n      : undefined\n    const symbol = symbolData.success\n      ? (Erc20.decodeFunctionResult('symbol', symbolData.returnData)[0] as string)\n      : symbolDataBytes32.success\n      ? (Erc20Bytes32.decodeFunctionResult('symbol', symbolDataBytes32.returnData)[0] as string)\n      : undefined\n    const decimals = decimalsData.success ? parseInt(decimalsData.returnData) : DEFAULT_ERC20_DECIMALS\n\n    return new Token(chainId, address, decimals, symbol, name)\n  } catch (error) {\n    console.error(`Failed to fetch token at address ${address} on chain ${chainId}`)\n    return undefined\n  }\n}\n\nfunction parseTokens(addresses: string[], chainId: SupportedChainId, returnData: CallResult[]) {\n  const tokenDataSlices = arrayToSlices(returnData, 5)\n\n  return tokenDataSlices.reduce((acc: TokenMap, slice, index) => {\n    const parsedToken = tryParseToken(addresses[index], chainId, slice)\n    if (parsedToken) acc[parsedToken.address] = parsedToken\n    return acc\n  }, {})\n}\n\nconst createCalls = (target: string, callData: string[]): Call[] =>\n  callData.map((callData) => ({ target, callData, gasLimit: DEFAULT_GAS_LIMIT }))\n\nfunction createCallsForToken(address: string) {\n  return createCalls(address, [\n    Erc20.encodeFunctionData('name'),\n    Erc20.encodeFunctionData('symbol'),\n    Erc20.encodeFunctionData('decimals'),\n    Erc20Bytes32.encodeFunctionData('name'),\n    Erc20Bytes32.encodeFunctionData('symbol'),\n  ])\n}\n\n// Prevents tokens from being fetched multiple times\nconst TokenPromiseCache: { [key: CurrencyKey]: Promise<Token | undefined> | undefined } = {}\n\n// Returns tokens using a single RPC call to the multicall contract\nexport async function getTokensAsync(\n  addresses: string[],\n  chainId: SupportedChainId,\n  multicall: UniswapInterfaceMulticall\n): Promise<TokenMap> {\n  if (addresses.length === 0) return {}\n  const formattedAddresses: string[] = []\n  const calls: Call[] = []\n  const previouslyCalledTokens: Promise<Token | undefined>[] = []\n\n  addresses.forEach((tokenAddress) => {\n    const key = buildCurrencyKey(chainId, tokenAddress)\n    const previousCall = TokenPromiseCache[key]\n    if (previousCall !== undefined) {\n      previouslyCalledTokens.push(previousCall)\n    } else {\n      const formattedAddress = isAddress(tokenAddress)\n      if (!formattedAddress) return\n      formattedAddresses.push(formattedAddress)\n      calls.push(...createCallsForToken(formattedAddress))\n    }\n  })\n\n  const calledTokens = fetchChunk(multicall, calls).then((returnData) => parseTokens(addresses, chainId, returnData))\n\n  // Caches tokens currently being fetched for further calls to use\n  formattedAddresses.forEach(\n    (address) =>\n      (TokenPromiseCache[buildCurrencyKey(chainId, address)] = calledTokens.then((tokenMap) => tokenMap[address]))\n  )\n\n  const tokenMap = await calledTokens\n  // Add tokens from previous calls to the map of tokens fetched in this call\n  const resolvedPreviousTokens = await Promise.all(previouslyCalledTokens)\n  resolvedPreviousTokens.forEach((token) => token && (tokenMap[currencyKey(token)] = token))\n\n  return tokenMap\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/MiniPortfolio/Pools/cache.ts",["3808","3809","3810","3811","3812","3813","3814","3815"],"import { Token } from '@uniswap/sdk-core'\nimport { Pool, Position } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { useAllTokensMultichain } from 'hooks/Tokens'\nimport { atom, useAtom } from 'jotai'\nimport { atomWithStorage } from 'jotai/utils'\nimport ms from 'ms.macro'\nimport { useCallback } from 'react'\nimport { deserializeToken, serializeToken } from 'state/user/hooks'\nimport { SerializedToken } from 'state/user/types'\nimport { PositionDetails } from 'types/position'\nimport { buildCurrencyKey, currencyKey } from 'utils/currencyKey'\n\nimport { getTokensAsync } from './getTokensAsync'\nimport { useInterfaceMulticallContracts } from './hooks'\n\nexport type PositionInfo = {\n  owner: string\n  chainId: SupportedChainId\n  position: Position\n  pool: Pool\n  details: PositionDetails\n  inRange: boolean\n  closed: boolean\n  fees?: [number?, number?]\n  prices?: [number?, number?]\n}\n\nconst POSITION_CACHE_EXPIRY = ms`1m` // 1 minute is arbitrary here\n// Allows reusing recently fetched positions between component mounts\ntype CachedPositionsEntry = { result: PositionInfo[]; stale: boolean }\nconst cachedPositionsAtom = atom<{ [address: string]: CachedPositionsEntry | undefined }>({})\ntype UseCachedPositionsReturnType = [CachedPositionsEntry | undefined, (positions: PositionInfo[]) => void]\n/**\n * Caches positions to allow reusing between component mounts\n * @param account address to cache positions for\n * @returns cached positions for the account, whether the cache is stale, and a function to update the positions and cache\n */\nexport function useCachedPositions(account: string): UseCachedPositionsReturnType {\n  const [cachedPositions, setCachedPositions] = useAtom(cachedPositionsAtom)\n  const setPositionsAndStaleTimeout = useCallback(\n    (positions: PositionInfo[]) => {\n      setCachedPositions((cache) => ({ ...cache, [account]: { result: positions, stale: false } }))\n      setTimeout(\n        () =>\n          setCachedPositions((cache) => {\n            // sets stale to true if the positions haven't been updated since the timeout\n            if (positions === cache[account]?.result) {\n              return { ...cache, [account]: { result: positions, stale: true } }\n            } else {\n              return cache\n            }\n          }),\n        POSITION_CACHE_EXPIRY\n      )\n    },\n    [account, setCachedPositions]\n  )\n  return [cachedPositions[account], setPositionsAndStaleTimeout]\n}\n\nconst poolAddressKey = (details: PositionDetails, chainId: SupportedChainId) =>\n  `${chainId}-${details.token0}-${details.token1}-${details.fee}`\n\ntype PoolAddressMap = { [key: string]: string | undefined }\nconst poolAddressCacheAtom = atomWithStorage<PoolAddressMap>('poolCache', {})\n/**\n * Caches pool addresses to prevent components from having to re-compute them\n * @returns get and set functions for the cache\n */\nexport function usePoolAddressCache() {\n  const [cache, updateCache] = useAtom(poolAddressCacheAtom)\n  const get = useCallback(\n    (details: PositionDetails, chainId: SupportedChainId) => cache[poolAddressKey(details, chainId)],\n    [cache]\n  )\n  const set = useCallback(\n    (details: PositionDetails, chainId: SupportedChainId, address: string) =>\n      updateCache((c) => ({ ...c, [poolAddressKey(details, chainId)]: address })),\n    [updateCache]\n  )\n  return { get, set }\n}\n\n// These values are static, so we can persist them across sessions using `WithStorage`\nconst tokenCacheAtom = atomWithStorage<{ [key: string]: SerializedToken | undefined }>('cachedAsyncTokens', {})\nfunction useTokenCache() {\n  const [cache, setCache] = useAtom(tokenCacheAtom)\n  const get = useCallback(\n    (chainId: number, address: string) => {\n      const entry = cache[buildCurrencyKey(chainId, address)]\n      return entry ? deserializeToken(entry) : undefined\n    },\n    [cache]\n  )\n  const set = useCallback(\n    (token?: Token) => {\n      if (token) {\n        setCache((cache) => ({ ...cache, [currencyKey(token)]: serializeToken(token) }))\n      }\n    },\n    [setCache]\n  )\n  return { get, set }\n}\n\ntype TokenGetterFn = (addresses: string[], chainId: SupportedChainId) => Promise<{ [key: string]: Token | undefined }>\nexport function useGetCachedTokens(chains: SupportedChainId[]): TokenGetterFn {\n  const allTokens = useAllTokensMultichain()\n  const multicallContracts = useInterfaceMulticallContracts(chains)\n  const tokenCache = useTokenCache()\n\n  // Used to fetch tokens not available in local state\n  const fetchRemoteTokens: TokenGetterFn = useCallback(\n    async (addresses, chainId) => {\n      const fetched = await getTokensAsync(addresses, chainId, multicallContracts[chainId])\n      Object.values(fetched).forEach(tokenCache.set)\n      return fetched\n    },\n    [multicallContracts, tokenCache]\n  )\n\n  // Uses tokens from local state if available, otherwise fetches them\n  const getTokens: TokenGetterFn = useCallback(\n    async (addresses, chainId) => {\n      const local: { [address: string]: Token | undefined } = {}\n      const missing = new Set<string>()\n      addresses.forEach((address) => {\n        const cached = tokenCache.get(chainId, address) ?? allTokens[chainId][address]?.token\n        cached ? (local[address] = cached) : missing.add(address)\n      })\n\n      const fetched = await fetchRemoteTokens([...missing], chainId)\n      return { ...local, ...fetched }\n    },\n    [allTokens, fetchRemoteTokens, tokenCache]\n  )\n\n  return getTokens\n}\n","/workspace/Physica-Interfae/src/components/Badge/index.tsx",[],"/workspace/Physica-Interfae/src/utils/currencyKey.ts",[],"/workspace/Physica-Interfae/src/hooks/useTokenContractsConstant.ts",[],"/workspace/Physica-Interfae/src/components/Icons/AlertTriangleFilled.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/view/icons.tsx",[],"/workspace/Physica-Interfae/src/utils/arrays.ts",[],"/workspace/Physica-Interfae/src/utils/urlChecks.ts",["3816"],"export function hasURL(str?: string): boolean {\n  if (!str) return false\n  const pattern = new RegExp(\n    '([a-zA-Z0-9]+://)?' + // optional protocol\n      '([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?' + //  optional username:password\n      '([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})' + // host name and subdomain\n      '(:[0-9]+)?(/.*)?' // optional port and path\n  )\n\n  return pattern.test(str)\n}\n","/workspace/Physica-Interfae/src/components/Icons/shared.tsx",[],"/workspace/Physica-Interfae/src/hooks/useTransactionDeadline.ts",[],"/workspace/Physica-Interfae/src/hooks/useApproveCallback.ts",["3817"],"import { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { ApprovalState, useApproval } from 'lib/hooks/useApproval'\nimport { useCallback } from 'react'\n\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks'\nimport { TransactionType } from '../state/transactions/types'\nexport { ApprovalState } from 'lib/hooks/useApproval'\n\nfunction useGetAndTrackApproval(getApproval: ReturnType<typeof useApproval>[1]) {\n  const addTransaction = useTransactionAdder()\n  return useCallback(() => {\n    return getApproval().then((pending) => {\n      if (pending) {\n        const { response, tokenAddress, spenderAddress: spender } = pending\n        addTransaction(response, { type: TransactionType.APPROVAL, tokenAddress, spender })\n      }\n    })\n  }, [addTransaction, getApproval])\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount<Currency>,\n  spender?: string\n): [ApprovalState, () => Promise<void>] {\n  const [approval, getApproval] = useApproval(amountToApprove, spender, useHasPendingApproval)\n  return [approval, useGetAndTrackApproval(getApproval)]\n}\n","/workspace/Physica-Interfae/src/hooks/useV2Pairs.ts",["3818","3819","3820"],"import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { computePairAddress, Pair } from '@uniswap/v2-sdk'\nimport { useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { V2_FACTORY_ADDRESSES } from '../constants/addresses'\n\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\n\nexport enum PairState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID,\n}\n\nexport function useV2Pairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\n  const tokens = useMemo(\n    () => currencies.map(([currencyA, currencyB]) => [currencyA?.wrapped, currencyB?.wrapped]),\n    [currencies]\n  )\n\n  const pairAddresses = useMemo(\n    () =>\n      tokens.map(([tokenA, tokenB]) => {\n        return tokenA &&\n          tokenB &&\n          tokenA.chainId === tokenB.chainId &&\n          !tokenA.equals(tokenB) &&\n          V2_FACTORY_ADDRESSES[tokenA.chainId]\n          ? computePairAddress({ factoryAddress: V2_FACTORY_ADDRESSES[tokenA.chainId], tokenA, tokenB })\n          : undefined\n      }),\n    [tokens]\n  )\n\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const { result: reserves, loading } = result\n      const tokenA = tokens[i][0]\n      const tokenB = tokens[i][1]\n\n      if (loading) return [PairState.LOADING, null]\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\n      if (!reserves) return [PairState.NOT_EXISTS, null]\n      const { reserve0, reserve1 } = reserves\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n      return [\n        PairState.EXISTS,\n        new Pair(\n          CurrencyAmount.fromRawAmount(token0, reserve0.toString()),\n          CurrencyAmount.fromRawAmount(token1, reserve1.toString())\n        ),\n      ]\n    })\n  }, [results, tokens])\n}\n\nexport function useV2Pair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\n  const inputs: [[Currency | undefined, Currency | undefined]] = useMemo(() => [[tokenA, tokenB]], [tokenA, tokenB])\n  return useV2Pairs(inputs)[0]\n}\n","/workspace/Physica-Interfae/src/hooks/useIsSwapUnsupported.ts",[],"/workspace/Physica-Interfae/src/state/mint/hooks.tsx",["3821","3822","3823","3824","3825","3826","3827"],"import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, Price, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { PairState, useV2Pair } from '../../hooks/useV2Pairs'\nimport { useCurrencyBalances } from '../connection/hooks'\nimport { AppState } from '../types'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useAppSelector((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  price?: Price<Currency, Currency>\n  noLiquidity?: boolean\n  liquidityMinted?: CurrencyAmount<Token>\n  poolTokenPercentage?: Percent\n  error?: ReactNode\n} {\n  const { account } = useWeb3React()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB]\n  )\n\n  // pair\n  const [pairState, pair] = useV2Pair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(totalSupply && JSBI.equal(totalSupply.quotient, ZERO)) ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.quotient, ZERO) &&\n        JSBI.equal(pair.reserve1.quotient, ZERO)\n    )\n\n  // balances\n  const balances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]], [currencies])\n  )\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseCurrencyAmount(\n    typedValue,\n    currencies[independentField]\n  )\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseCurrencyAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    } else if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = independentAmount?.wrapped\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency?.isNative\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n          : dependentTokenAmount\n      }\n      return undefined\n    } else {\n      return undefined\n    }\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(() => {\n    return {\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }\n  }, [dependentAmount, independentAmount, independentField])\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount?.greaterThan(0) && currencyBAmount?.greaterThan(0)) {\n        const value = currencyBAmount.divide(currencyAAmount)\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, value.denominator, value.numerator)\n      }\n      return undefined\n    } else {\n      const wrappedCurrencyA = currencyA?.wrapped\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n    }\n  }, [currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [currencyAAmount?.wrapped, currencyBAmount?.wrapped]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    } else {\n      return undefined\n    }\n  }, [parsedAmounts, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    } else {\n      return undefined\n    }\n  }, [liquidityMinted, totalSupply])\n\n  let error: ReactNode | undefined\n  if (!account) {\n    error = <Trans>Connect Wallet</Trans>\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? <Trans>Invalid pair</Trans>\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? <Trans>Enter an amount</Trans>\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = <Trans>Insufficient {currencies[Field.CURRENCY_A]?.symbol} balance</Trans>\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = <Trans>Insufficient {currencies[Field.CURRENCY_B]?.symbol} balance</Trans>\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n","/workspace/Physica-Interfae/src/pages/Vote/VotePage.tsx",["3828","3829","3830","3831","3832","3833"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Fraction, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport ExecuteModal from 'components/vote/ExecuteModal'\nimport QueueModal from 'components/vote/QueueModal'\nimport { useActiveLocale } from 'hooks/useActiveLocale'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport JSBI from 'jsbi'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport ms from 'ms.macro'\nimport { useState } from 'react'\nimport { ArrowLeft } from 'react-feather'\nimport ReactMarkdown from 'react-markdown'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { ButtonPrimary } from '../../components/Button'\nimport { GrayCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport { CardSection, DataCard } from '../../components/earn/styled'\nimport { RowBetween, RowFixed } from '../../components/Row'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport DelegateModal from '../../components/vote/DelegateModal'\nimport VoteModal from '../../components/vote/VoteModal'\nimport {\n  AVERAGE_BLOCK_TIME_IN_SECS,\n  COMMON_CONTRACT_NAMES,\n  DEFAULT_AVERAGE_BLOCK_TIME_IN_SECS,\n} from '../../constants/governance'\nimport { ZERO_ADDRESS } from '../../constants/misc'\nimport { UNI } from '../../constants/tokens'\nimport {\n  useModalIsOpen,\n  useToggleDelegateModal,\n  useToggleExecuteModal,\n  useToggleQueueModal,\n  useToggleVoteModal,\n} from '../../state/application/hooks'\nimport { ApplicationModal } from '../../state/application/reducer'\nimport { useTokenBalance } from '../../state/connection/hooks'\nimport {\n  ProposalData,\n  ProposalState,\n  useProposalData,\n  useQuorum,\n  useUserDelegatee,\n  useUserVotesAsOfBlock,\n} from '../../state/governance/hooks'\nimport { VoteOption } from '../../state/governance/types'\nimport { ExternalLink, StyledInternalLink, ThemedText } from '../../theme'\nimport { isAddress } from '../../utils'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { ProposalStatus } from './styled'\n\nconst PageWrapper = styled(AutoColumn)`\n  padding-top: 68px;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    padding: 48px 8px 0px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-top: 20px;\n  }\n`\n\nconst ProposalInfo = styled(AutoColumn)`\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 12px;\n  padding: 1.5rem;\n  position: relative;\n  max-width: 640px;\n  width: 100%;\n`\n\nconst ArrowWrapper = styled(StyledInternalLink)`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  height: 24px;\n  color: ${({ theme }) => theme.textPrimary};\n\n  a {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n  }\n  :hover {\n    text-decoration: none;\n  }\n`\nconst CardWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n  width: 100%;\n`\n\nconst StyledDataCard = styled(DataCard)`\n  width: 100%;\n  background: none;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  height: fit-content;\n  z-index: 2;\n`\n\nconst ProgressWrapper = styled.div`\n  width: 100%;\n  margin-top: 1rem;\n  height: 4px;\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.deprecated_bg3};\n  position: relative;\n`\n\nconst Progress = styled.div<{ status: 'for' | 'against'; percentageString?: string }>`\n  height: 4px;\n  border-radius: 4px;\n  background-color: ${({ theme, status }) => (status === 'for' ? theme.accentSuccess : theme.accentFailure)};\n  width: ${({ percentageString }) => percentageString ?? '0%'};\n`\n\nconst MarkDownWrapper = styled.div`\n  max-width: 640px;\n  overflow: hidden;\n`\n\nconst WrapSmall = styled(RowBetween)`\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    align-items: flex-start;\n    flex-direction: column;\n  `};\n`\n\nconst DetailText = styled.div`\n  word-break: break-all;\n`\n\nconst ProposerAddressLink = styled(ExternalLink)`\n  word-break: break-all;\n`\n\nfunction getDateFromBlock(\n  targetBlock: number | undefined,\n  currentBlock: number | undefined,\n  averageBlockTimeInSeconds: number | undefined,\n  currentTimestamp: BigNumber | undefined\n): Date | undefined {\n  if (targetBlock && currentBlock && averageBlockTimeInSeconds && currentTimestamp) {\n    const date = new Date()\n    date.setTime(\n      currentTimestamp\n        .add(BigNumber.from(averageBlockTimeInSeconds).mul(BigNumber.from(targetBlock - currentBlock)))\n        .toNumber() * ms`1 second`\n    )\n    return date\n  }\n  return undefined\n}\n\nexport default function VotePage() {\n  // see https://github.com/remix-run/react-router/issues/8200#issuecomment-962520661\n  const { governorIndex, id } = useParams() as { governorIndex: string; id: string }\n  const parsedGovernorIndex = Number.parseInt(governorIndex)\n\n  const { chainId, account } = useWeb3React()\n\n  const quorumAmount = useQuorum(parsedGovernorIndex)\n\n  // get data for this specific proposal\n  const proposalData: ProposalData | undefined = useProposalData(parsedGovernorIndex, id)\n\n  // update vote option based on button interactions\n  const [voteOption, setVoteOption] = useState<VoteOption | undefined>(undefined)\n\n  // modal for casting votes\n  const showVoteModal = useModalIsOpen(ApplicationModal.VOTE)\n  const toggleVoteModal = useToggleVoteModal()\n\n  // toggle for showing delegation modal\n  const showDelegateModal = useModalIsOpen(ApplicationModal.DELEGATE)\n  const toggleDelegateModal = useToggleDelegateModal()\n\n  // toggle for showing queue modal\n  const showQueueModal = useModalIsOpen(ApplicationModal.QUEUE)\n  const toggleQueueModal = useToggleQueueModal()\n\n  // toggle for showing execute modal\n  const showExecuteModal = useModalIsOpen(ApplicationModal.EXECUTE)\n  const toggleExecuteModal = useToggleExecuteModal()\n\n  // get and format date from data\n  const currentTimestamp = useCurrentBlockTimestamp()\n  const currentBlock = useBlockNumber()\n  const startDate = getDateFromBlock(\n    proposalData?.startBlock,\n    currentBlock,\n    (chainId && AVERAGE_BLOCK_TIME_IN_SECS[chainId]) ?? DEFAULT_AVERAGE_BLOCK_TIME_IN_SECS,\n    currentTimestamp\n  )\n  const endDate = getDateFromBlock(\n    proposalData?.endBlock,\n    currentBlock,\n    (chainId && AVERAGE_BLOCK_TIME_IN_SECS[chainId]) ?? DEFAULT_AVERAGE_BLOCK_TIME_IN_SECS,\n    currentTimestamp\n  )\n  const now = new Date()\n  const locale = useActiveLocale()\n  const dateFormat: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    timeZoneName: 'short',\n  }\n  // convert the eta to milliseconds before it's a date\n  const eta = proposalData?.eta ? new Date(proposalData.eta.mul(ms`1 second`).toNumber()) : undefined\n\n  // get total votes and format percentages for UI\n  const totalVotes = proposalData?.forCount?.add(proposalData.againstCount)\n  const forPercentage = totalVotes\n    ? proposalData?.forCount?.asFraction?.divide(totalVotes.asFraction)?.multiply(100)\n    : undefined\n  const againstPercentage = forPercentage ? new Fraction(100).subtract(forPercentage) : undefined\n\n  // only count available votes as of the proposal start block\n  const availableVotes: CurrencyAmount<Token> | undefined = useUserVotesAsOfBlock(proposalData?.startBlock ?? undefined)\n\n  // only show voting if user has > 0 votes at proposal start block and proposal is active,\n  const showVotingButtons =\n    availableVotes &&\n    JSBI.greaterThan(availableVotes.quotient, JSBI.BigInt(0)) &&\n    proposalData &&\n    proposalData.status === ProposalState.ACTIVE\n\n  // we only show the button if there's an account connected and the proposal state is correct\n  const showQueueButton = account && proposalData?.status === ProposalState.SUCCEEDED\n\n  // we only show the button if there's an account connected and the proposal state is correct\n  const showExecuteButton = account && proposalData?.status === ProposalState.QUEUED\n\n  const uniBalance: CurrencyAmount<Token> | undefined = useTokenBalance(\n    account ?? undefined,\n    chainId ? UNI[chainId] : undefined\n  )\n  const userDelegatee: string | undefined = useUserDelegatee()\n\n  // in blurb link to home page if they are able to unlock\n  const showLinkForUnlock = Boolean(\n    uniBalance && JSBI.notEqual(uniBalance.quotient, JSBI.BigInt(0)) && userDelegatee === ZERO_ADDRESS\n  )\n\n  // show links in propsoal details if content is an address\n  // if content is contract with common name, replace address with common name\n  const linkIfAddress = (content: string) => {\n    if (isAddress(content) && chainId) {\n      const commonName = COMMON_CONTRACT_NAMES[chainId]?.[content] ?? content\n      return (\n        <ExternalLink href={getExplorerLink(chainId, content, ExplorerDataType.ADDRESS)}>{commonName}</ExternalLink>\n      )\n    }\n    return <span>{content}</span>\n  }\n\n  function MarkdownImage({ ...rest }) {\n    return <img {...rest} style={{ width: '100%', height: '100$', objectFit: 'cover' }} alt=\"\" />\n  }\n\n  return (\n    <Trace page={InterfacePageName.VOTE_PAGE} shouldLogImpression>\n      <>\n        <PageWrapper gap=\"lg\" justify=\"center\">\n          <VoteModal\n            isOpen={showVoteModal}\n            onDismiss={toggleVoteModal}\n            proposalId={proposalData?.id}\n            voteOption={voteOption}\n          />\n          <DelegateModal\n            isOpen={showDelegateModal}\n            onDismiss={toggleDelegateModal}\n            title={<Trans>Unlock Votes</Trans>}\n          />\n          <QueueModal isOpen={showQueueModal} onDismiss={toggleQueueModal} proposalId={proposalData?.id} />\n          <ExecuteModal isOpen={showExecuteModal} onDismiss={toggleExecuteModal} proposalId={proposalData?.id} />\n          <ProposalInfo gap=\"lg\" justify=\"start\">\n            <RowBetween style={{ width: '100%' }}>\n              <ArrowWrapper to=\"/vote\">\n                <Trans>\n                  <ArrowLeft size={20} /> All Proposals\n                </Trans>\n              </ArrowWrapper>\n              {proposalData && <ProposalStatus status={proposalData.status} />}\n            </RowBetween>\n            <AutoColumn gap=\"10px\" style={{ width: '100%' }}>\n              <ThemedText.DeprecatedLargeHeader style={{ marginBottom: '.5rem' }}>\n                {proposalData?.title}\n              </ThemedText.DeprecatedLargeHeader>\n              <RowBetween>\n                <ThemedText.DeprecatedMain>\n                  {startDate && startDate > now ? (\n                    <Trans>Voting starts approximately {startDate.toLocaleString(locale, dateFormat)}</Trans>\n                  ) : null}\n                </ThemedText.DeprecatedMain>\n              </RowBetween>\n              <RowBetween>\n                <ThemedText.DeprecatedMain>\n                  {endDate &&\n                    (endDate < now ? (\n                      <Trans>Voting ended {endDate.toLocaleString(locale, dateFormat)}</Trans>\n                    ) : (\n                      <Trans>Voting ends approximately {endDate.toLocaleString(locale, dateFormat)}</Trans>\n                    ))}\n                </ThemedText.DeprecatedMain>\n              </RowBetween>\n              {proposalData && proposalData.status === ProposalState.ACTIVE && !showVotingButtons && (\n                <GrayCard>\n                  <ThemedText.DeprecatedBlack>\n                    <Trans>\n                      Only UNI votes that were self delegated or delegated to another address before block{' '}\n                      {proposalData.startBlock} are eligible for voting.\n                    </Trans>{' '}\n                    {showLinkForUnlock && (\n                      <span>\n                        <Trans>\n                          <StyledInternalLink to=\"/vote\">Unlock voting</StyledInternalLink> to prepare for the next\n                          proposal.\n                        </Trans>\n                      </span>\n                    )}\n                  </ThemedText.DeprecatedBlack>\n                </GrayCard>\n              )}\n            </AutoColumn>\n            {showVotingButtons && (\n              <RowFixed style={{ width: '100%', gap: '12px' }}>\n                <ButtonPrimary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  onClick={() => {\n                    setVoteOption(VoteOption.For)\n                    toggleVoteModal()\n                  }}\n                >\n                  <Trans>Vote For</Trans>\n                </ButtonPrimary>\n                <ButtonPrimary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  onClick={() => {\n                    setVoteOption(VoteOption.Against)\n                    toggleVoteModal()\n                  }}\n                >\n                  <Trans>Vote Against</Trans>\n                </ButtonPrimary>\n              </RowFixed>\n            )}\n            {showQueueButton && (\n              <RowFixed style={{ width: '100%', gap: '12px' }}>\n                <ButtonPrimary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  onClick={() => {\n                    toggleQueueModal()\n                  }}\n                >\n                  <Trans>Queue</Trans>\n                </ButtonPrimary>\n              </RowFixed>\n            )}\n            {showExecuteButton && (\n              <>\n                {eta && (\n                  <RowBetween>\n                    <ThemedText.DeprecatedBlack>\n                      <Trans>This proposal may be executed after {eta.toLocaleString(locale, dateFormat)}.</Trans>\n                    </ThemedText.DeprecatedBlack>\n                  </RowBetween>\n                )}\n                <RowFixed style={{ width: '100%', gap: '12px' }}>\n                  <ButtonPrimary\n                    padding=\"8px\"\n                    $borderRadius=\"8px\"\n                    onClick={() => {\n                      toggleExecuteModal()\n                    }}\n                    // can't execute until the eta has arrived\n                    disabled={!currentTimestamp || !proposalData?.eta || currentTimestamp.lt(proposalData.eta)}\n                  >\n                    <Trans>Execute</Trans>\n                  </ButtonPrimary>\n                </RowFixed>\n              </>\n            )}\n            <CardWrapper>\n              <StyledDataCard>\n                <CardSection>\n                  <AutoColumn gap=\"md\">\n                    <WrapSmall>\n                      <ThemedText.DeprecatedBlack fontWeight={600}>\n                        <Trans>For</Trans>\n                      </ThemedText.DeprecatedBlack>\n                      {proposalData && (\n                        <ThemedText.DeprecatedBlack fontWeight={600}>\n                          {proposalData.forCount.toFixed(0, { groupSeparator: ',' })}\n                          {quorumAmount && (\n                            <span style={{ fontWeight: 400 }}>{` / ${quorumAmount.toExact({\n                              groupSeparator: ',',\n                            })}`}</span>\n                          )}\n                        </ThemedText.DeprecatedBlack>\n                      )}\n                    </WrapSmall>\n                  </AutoColumn>\n                  <ProgressWrapper>\n                    <Progress\n                      status=\"for\"\n                      percentageString={\n                        proposalData?.forCount.greaterThan(0) ? `${forPercentage?.toFixed(0) ?? 0}%` : '0%'\n                      }\n                    />\n                  </ProgressWrapper>\n                </CardSection>\n              </StyledDataCard>\n              <StyledDataCard>\n                <CardSection>\n                  <AutoColumn gap=\"md\">\n                    <WrapSmall>\n                      <ThemedText.DeprecatedBlack fontWeight={600}>\n                        <Trans>Against</Trans>\n                      </ThemedText.DeprecatedBlack>\n                      {proposalData && (\n                        <ThemedText.DeprecatedBlack fontWeight={600}>\n                          {proposalData.againstCount.toFixed(0, { groupSeparator: ',' })}\n                        </ThemedText.DeprecatedBlack>\n                      )}\n                    </WrapSmall>\n                  </AutoColumn>\n                  <ProgressWrapper>\n                    <Progress\n                      status=\"against\"\n                      percentageString={\n                        proposalData?.againstCount?.greaterThan(0) ? `${againstPercentage?.toFixed(0) ?? 0}%` : '0%'\n                      }\n                    />\n                  </ProgressWrapper>\n                </CardSection>\n              </StyledDataCard>\n            </CardWrapper>\n            <AutoColumn gap=\"md\">\n              <ThemedText.DeprecatedMediumHeader fontWeight={600}>\n                <Trans>Details</Trans>\n              </ThemedText.DeprecatedMediumHeader>\n              {proposalData?.details?.map((d, i) => {\n                return (\n                  <DetailText key={i}>\n                    {i + 1}: {linkIfAddress(d.target)}.{d.functionSig}(\n                    {d.callData.split(',').map((content, i) => {\n                      return (\n                        <span key={i}>\n                          {linkIfAddress(content)}\n                          {d.callData.split(',').length - 1 === i ? '' : ','}\n                        </span>\n                      )\n                    })}\n                    )\n                  </DetailText>\n                )\n              })}\n            </AutoColumn>\n            <AutoColumn gap=\"md\">\n              <ThemedText.DeprecatedMediumHeader fontWeight={600}>\n                <Trans>Description</Trans>\n              </ThemedText.DeprecatedMediumHeader>\n              <MarkDownWrapper>\n                <ReactMarkdown\n                  source={proposalData?.description}\n                  renderers={{\n                    image: MarkdownImage,\n                  }}\n                />\n              </MarkDownWrapper>\n            </AutoColumn>\n            <AutoColumn gap=\"md\">\n              <ThemedText.DeprecatedMediumHeader fontWeight={600}>\n                <Trans>Proposer</Trans>\n              </ThemedText.DeprecatedMediumHeader>\n              <ProposerAddressLink\n                href={\n                  proposalData?.proposer && chainId\n                    ? getExplorerLink(chainId, proposalData?.proposer, ExplorerDataType.ADDRESS)\n                    : ''\n                }\n              >\n                <ReactMarkdown source={proposalData?.proposer} />\n              </ProposerAddressLink>\n            </AutoColumn>\n          </ProposalInfo>\n        </PageWrapper>\n        <SwitchLocaleLink />\n      </>\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/Vote/Landing.tsx",["3834","3835"],"import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonPrimary } from 'components/Button'\nimport { AutoColumn } from 'components/Column'\nimport { CardBGImage, CardNoise, CardSection, DataCard } from 'components/earn/styled'\nimport FormattedCurrencyAmount from 'components/FormattedCurrencyAmount'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Row'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport Toggle from 'components/Toggle'\nimport DelegateModal from 'components/vote/DelegateModal'\nimport ProposalEmptyState from 'components/vote/ProposalEmptyState'\nimport JSBI from 'jsbi'\nimport { darken } from 'polished'\nimport { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button } from 'rebass/styled-components'\nimport { useModalIsOpen, useToggleDelegateModal } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport { useTokenBalance } from 'state/connection/hooks'\nimport { ProposalData, ProposalState } from 'state/governance/hooks'\nimport { useAllProposalData, useUserDelegatee, useUserVotes } from 'state/governance/hooks'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ExternalLink, ThemedText } from 'theme'\nimport { shortenAddress } from 'utils'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nimport { ZERO_ADDRESS } from '../../constants/misc'\nimport { UNI } from '../../constants/tokens'\nimport { ProposalStatus } from './styled'\n\nconst PageWrapper = styled(AutoColumn)`\n  padding-top: 68px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    padding: 48px 8px 0px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-top: 20px;\n  }\n`\n\nconst TopSection = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`\n\nconst Proposal = styled(Button)`\n  padding: 0.75rem 1rem;\n  width: 100%;\n  margin-top: 1rem;\n  border-radius: 12px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-align: left;\n  outline: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  &:focus {\n    background-color: ${({ theme }) => darken(0.05, theme.deprecated_bg1)};\n  }\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n  }\n`\n\nconst ProposalNumber = styled.span`\n  opacity: ${({ theme }) => theme.opacity.hover};\n  flex: 0 0 40px;\n`\n\nconst ProposalTitle = styled.span`\n  font-weight: 600;\n  flex: 1;\n  max-width: 420px;\n  white-space: initial;\n  word-wrap: break-word;\n  padding-right: 10px;\n`\n\nconst VoteCard = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n  overflow: hidden;\n`\n\nconst WrapSmall = styled(RowBetween)`\n  margin-bottom: 1rem;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    flex-wrap: wrap;\n  `};\n`\n\nconst TextButton = styled(ThemedText.DeprecatedMain)`\n  color: ${({ theme }) => theme.accentAction};\n  :hover {\n    cursor: pointer;\n    text-decoration: underline;\n  }\n`\n\nconst AddressButton = styled.div`\n  padding: 2px 4px;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${({ theme }) => theme.accentAction};\n`\n\nconst StyledExternalLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nexport default function Landing() {\n  const theme = useTheme()\n  const { account, chainId } = useWeb3React()\n\n  const [hideCancelled, setHideCancelled] = useState(true)\n\n  // toggle for showing delegation modal\n  const showDelegateModal = useModalIsOpen(ApplicationModal.DELEGATE)\n  const toggleDelegateModal = useToggleDelegateModal()\n\n  // get data to list all proposals\n  const { data: allProposals, loading: loadingProposals } = useAllProposalData()\n\n  // user data\n  const { loading: loadingAvailableVotes, votes: availableVotes } = useUserVotes()\n  const uniBalance: CurrencyAmount<Token> | undefined = useTokenBalance(\n    account ?? undefined,\n    chainId ? UNI[chainId] : undefined\n  )\n  const userDelegatee: string | undefined = useUserDelegatee()\n\n  // show delegation option if they have have a balance, but have not delegated\n  const showUnlockVoting = Boolean(\n    uniBalance && JSBI.notEqual(uniBalance.quotient, JSBI.BigInt(0)) && userDelegatee === ZERO_ADDRESS\n  )\n  return (\n    <>\n      <Trace page={InterfacePageName.VOTE_PAGE} shouldLogImpression>\n        <PageWrapper gap=\"lg\" justify=\"center\">\n          <DelegateModal\n            isOpen={showDelegateModal}\n            onDismiss={toggleDelegateModal}\n            title={showUnlockVoting ? <Trans>Unlock Votes</Trans> : <Trans>Update Delegation</Trans>}\n          />\n          <TopSection gap=\"md\">\n            <VoteCard>\n              <CardBGImage />\n              <CardNoise />\n              <CardSection>\n                <AutoColumn gap=\"md\">\n                  <RowBetween>\n                    <ThemedText.DeprecatedWhite fontWeight={600}>\n                      <Trans>Uniswap Governance</Trans>\n                    </ThemedText.DeprecatedWhite>\n                  </RowBetween>\n                  <RowBetween>\n                    <ThemedText.DeprecatedWhite fontSize={14}>\n                      <Trans>\n                        UNI tokens represent voting shares in Uniswap governance. You can vote on each proposal yourself\n                        or delegate your votes to a third party.\n                      </Trans>\n                    </ThemedText.DeprecatedWhite>\n                  </RowBetween>\n                  <ExternalLink\n                    style={{\n                      color: theme.white,\n                      textDecoration: 'underline',\n                    }}\n                    href=\"https://uniswap.org/blog/uni\"\n                    target=\"_blank\"\n                  >\n                    <ThemedText.DeprecatedWhite fontSize={14}>\n                      <Trans>Read more about Uniswap governance</Trans>\n                    </ThemedText.DeprecatedWhite>\n                  </ExternalLink>\n                </AutoColumn>\n              </CardSection>\n              <CardBGImage />\n              <CardNoise />\n            </VoteCard>\n          </TopSection>\n          <TopSection gap=\"2px\">\n            <WrapSmall>\n              <ThemedText.DeprecatedMediumHeader style={{ margin: '0.5rem 0.5rem 0.5rem 0', flexShrink: 0 }}>\n                <Trans>Proposals</Trans>\n              </ThemedText.DeprecatedMediumHeader>\n              <AutoRow gap=\"6px\" justify=\"flex-end\">\n                {loadingProposals || loadingAvailableVotes ? <Loader /> : null}\n                {showUnlockVoting ? (\n                  <ButtonPrimary\n                    style={{ width: 'fit-content', height: '40px' }}\n                    padding=\"8px\"\n                    $borderRadius=\"8px\"\n                    onClick={toggleDelegateModal}\n                  >\n                    <Trans>Unlock Voting</Trans>\n                  </ButtonPrimary>\n                ) : availableVotes && JSBI.notEqual(JSBI.BigInt(0), availableVotes?.quotient) ? (\n                  <ThemedText.DeprecatedBody fontWeight={500} mr=\"6px\">\n                    <Trans>\n                      <FormattedCurrencyAmount currencyAmount={availableVotes} /> Votes\n                    </Trans>\n                  </ThemedText.DeprecatedBody>\n                ) : uniBalance &&\n                  userDelegatee &&\n                  userDelegatee !== ZERO_ADDRESS &&\n                  JSBI.notEqual(JSBI.BigInt(0), uniBalance?.quotient) ? (\n                  <ThemedText.DeprecatedBody fontWeight={500} mr=\"6px\">\n                    <Trans>\n                      <FormattedCurrencyAmount currencyAmount={uniBalance} /> Votes\n                    </Trans>\n                  </ThemedText.DeprecatedBody>\n                ) : (\n                  ''\n                )}\n                <ButtonPrimary\n                  as={Link}\n                  to=\"/create-proposal\"\n                  style={{ width: 'fit-content', borderRadius: '8px', height: '40px' }}\n                  padding=\"8px\"\n                >\n                  <Trans>Create Proposal</Trans>\n                </ButtonPrimary>\n              </AutoRow>\n            </WrapSmall>\n            {!showUnlockVoting && (\n              <RowBetween>\n                <div />\n                {userDelegatee && userDelegatee !== ZERO_ADDRESS ? (\n                  <RowFixed>\n                    <ThemedText.DeprecatedBody fontWeight={500} mr=\"4px\">\n                      <Trans>Delegated to:</Trans>\n                    </ThemedText.DeprecatedBody>\n                    <AddressButton>\n                      <StyledExternalLink\n                        href={getExplorerLink(1, userDelegatee, ExplorerDataType.ADDRESS)}\n                        style={{ margin: '0 4px' }}\n                      >\n                        {userDelegatee === account ? <Trans>Self</Trans> : shortenAddress(userDelegatee)}\n                      </StyledExternalLink>\n                      <TextButton onClick={toggleDelegateModal} style={{ marginLeft: '4px' }}>\n                        <Trans>(edit)</Trans>\n                      </TextButton>\n                    </AddressButton>\n                  </RowFixed>\n                ) : (\n                  ''\n                )}\n              </RowBetween>\n            )}\n\n            {allProposals?.length === 0 && <ProposalEmptyState />}\n\n            {allProposals?.length > 0 && (\n              <AutoColumn gap=\"md\">\n                <RowBetween></RowBetween>\n                <RowBetween>\n                  <ThemedText.DeprecatedMain>\n                    <Trans>Show Cancelled</Trans>\n                  </ThemedText.DeprecatedMain>\n                  <Toggle\n                    isActive={!hideCancelled}\n                    toggle={() => setHideCancelled((hideCancelled) => !hideCancelled)}\n                  />\n                </RowBetween>\n              </AutoColumn>\n            )}\n\n            {allProposals\n              ?.slice(0)\n              ?.reverse()\n              ?.filter((p: ProposalData) => (hideCancelled ? p.status !== ProposalState.CANCELED : true))\n              ?.map((p: ProposalData) => {\n                return (\n                  <Proposal as={Link} to={`/vote/${p.governorIndex}/${p.id}`} key={`${p.governorIndex}${p.id}`}>\n                    <ProposalNumber>\n                      {p.governorIndex}.{p.id}\n                    </ProposalNumber>\n                    <ProposalTitle>{p.title}</ProposalTitle>\n                    <ProposalStatus status={p.status} />\n                  </Proposal>\n                )\n              })}\n          </TopSection>\n\n          <ThemedText.DeprecatedSubHeader color=\"text3\">\n            <Trans>A minimum threshold of 0.25% of the total UNI supply is required to submit proposals</Trans>\n          </ThemedText.DeprecatedSubHeader>\n        </PageWrapper>\n      </Trace>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/utils/approveAmountCalldata.ts",["3836"],"import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nimport { Erc20Interface } from '../abis/types/Erc20'\n\nconst ERC20_INTERFACE = new Interface([\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]) as Erc20Interface\n\nexport default function approveAmountCalldata(\n  amount: CurrencyAmount<Currency>,\n  spender: string\n): { to: string; data: string; value: '0x0' } {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token')\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)])\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0',\n  }\n}\n","/workspace/Physica-Interfae/src/hooks/useCurrentBlockTimestamp.ts",["3837"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { useInterfaceMulticall } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useInterfaceMulticall()\n  const resultStr: string | undefined = useSingleCallResult(\n    multicall,\n    'getCurrentBlockTimestamp'\n  )?.result?.[0]?.toString()\n  return useMemo(() => (typeof resultStr === 'string' ? BigNumber.from(resultStr) : undefined), [resultStr])\n}\n","/workspace/Physica-Interfae/src/pages/AddLiquidity/Review.tsx",[],"/workspace/Physica-Interfae/src/hooks/useV3Positions.ts",[],"/workspace/Physica-Interfae/src/hooks/useDerivedPositionInfo.ts",[],"/workspace/Physica-Interfae/src/hooks/useArgentWalletContract.ts",["3838"],"import { useWeb3React } from '@web3-react/core'\n\nimport ArgentWalletContractABI from '../abis/argent-wallet-contract.json'\nimport { ArgentWalletContract } from '../abis/types'\nimport { useContract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\n\nexport function useArgentWalletContract(): ArgentWalletContract | null {\n  const { account } = useWeb3React()\n  const isArgentWallet = useIsArgentWallet()\n  return useContract(\n    isArgentWallet ? account ?? undefined : undefined,\n    ArgentWalletContractABI,\n    true\n  ) as ArgentWalletContract\n}\n","/workspace/Physica-Interfae/src/components/TransactionConfirmationModal/index.tsx",[],"/workspace/Physica-Interfae/src/components/PositionCard/index.tsx",[],"/workspace/Physica-Interfae/src/components/Card/index.tsx",[],"/workspace/Physica-Interfae/src/components/NavigationTabs/index.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/Skeleton.tsx",[],"/workspace/Physica-Interfae/src/hooks/useTotalSupply.ts",["3839"],"import { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from './useContract'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nexport function useTotalSupply(token?: Currency): CurrencyAmount<Token> | undefined {\n  const contract = useTokenContract(token?.isToken ? token.address : undefined, false)\n\n  const totalSupplyStr: string | undefined = useSingleCallResult(contract, 'totalSupply')?.result?.[0]?.toString()\n\n  return useMemo(\n    () => (token?.isToken && totalSupplyStr ? CurrencyAmount.fromRawAmount(token, totalSupplyStr) : undefined),\n    [token, totalSupplyStr]\n  )\n}\n","/workspace/Physica-Interfae/src/components/swap/UnsupportedCurrencyFooter.tsx",[],"/workspace/Physica-Interfae/src/components/RangeSelector/PresetsButtons.tsx",[],"/workspace/Physica-Interfae/src/graphql/data/nft/Details.ts",["3840","3841"],"import { parseEther } from '@ethersproject/units'\nimport gql from 'graphql-tag'\nimport { CollectionInfoForAsset, GenieAsset, Markets, SellOrder } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftAsset, useDetailsQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Details($address: String!, $tokenId: String!) {\n    nftAssets(address: $address, filter: { listed: false, tokenIds: [$tokenId] }) {\n      edges {\n        node {\n          id\n          name\n          ownerAddress\n          image {\n            url\n          }\n          smallImage {\n            url\n          }\n          originalImage {\n            url\n          }\n          tokenId\n          description\n          animationUrl\n          suspiciousFlag\n          creator {\n            address\n            profileImage {\n              url\n            }\n            isVerified\n          }\n          collection {\n            name\n            isVerified\n            numAssets\n            twitterName\n            discordUrl\n            homepageUrl\n            image {\n              url\n            }\n            nftContracts {\n              address\n              standard\n            }\n            description\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                address\n                createdAt\n                endAt\n                id\n                maker\n                marketplace\n                marketplaceUrl\n                orderHash\n                price {\n                  currency\n                  value\n                }\n                quantity\n                startAt\n                status\n                taker\n                tokenId\n                type\n                protocolParameters\n              }\n              cursor\n            }\n          }\n          rarities {\n            provider\n            rank\n            score\n          }\n          metadataUrl\n          traits {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useNftAssetDetails(\n  address: string,\n  tokenId: string\n): { data: [GenieAsset, CollectionInfoForAsset]; loading: boolean } {\n  const { data: queryData, loading } = useDetailsQuery({\n    variables: {\n      address,\n      tokenId,\n    },\n  })\n\n  const asset = queryData?.nftAssets?.edges[0]?.node as NonNullable<NftAsset> | undefined\n  const collection = asset?.collection\n  const listing = asset?.listings?.edges[0]?.node\n  const ethPrice = parseEther(listing?.price?.value?.toString() ?? '0').toString()\n\n  return useMemo(\n    () => ({\n      data: [\n        {\n          id: asset?.id,\n          address,\n          notForSale: asset?.listings === null,\n          collectionName: asset?.collection?.name,\n          collectionSymbol: asset?.collection?.image?.url,\n          imageUrl: asset?.image?.url,\n          animationUrl: asset?.animationUrl,\n          marketplace: listing?.marketplace.toLowerCase() as unknown as Markets,\n          name: asset?.name,\n          priceInfo: {\n            ETHPrice: ethPrice,\n            baseAsset: 'ETH',\n            baseDecimals: '18',\n            basePrice: ethPrice,\n          },\n          susFlag: asset?.suspiciousFlag,\n          sellorders: asset?.listings?.edges.map((listingNode) => {\n            return {\n              ...listingNode.node,\n              protocolParameters: listingNode.node.protocolParameters\n                ? JSON.parse(listingNode.node.protocolParameters.toString())\n                : undefined,\n            } as SellOrder\n          }),\n          smallImageUrl: asset?.smallImage?.url,\n          tokenId,\n          tokenType: asset?.collection?.nftContracts?.[0]?.standard,\n          collectionIsVerified: asset?.collection?.isVerified,\n          rarity: {\n            primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n            providers: asset?.rarities?.map((rarity) => {\n              return {\n                rank: rarity.rank,\n                score: rarity.score,\n                provider: 'Rarity Sniper',\n              }\n            }),\n          },\n          ownerAddress: asset?.ownerAddress,\n          creator: {\n            profile_img_url: asset?.creator?.profileImage?.url ?? '',\n            address: asset?.creator?.address ?? '',\n          },\n          metadataUrl: asset?.metadataUrl ?? '',\n          traits: asset?.traits?.map((trait) => {\n            return { trait_type: trait.name ?? '', trait_value: trait.value ?? '' }\n          }),\n        },\n        {\n          collectionDescription: collection?.description,\n          collectionImageUrl: collection?.image?.url,\n          collectionName: collection?.name,\n          isVerified: collection?.isVerified,\n          totalSupply: collection?.numAssets,\n          twitterUrl: collection?.twitterName,\n          discordUrl: collection?.discordUrl,\n          externalUrl: collection?.homepageUrl,\n        },\n      ],\n      loading,\n    }),\n    [address, asset, collection, ethPrice, listing?.marketplace, loading, tokenId]\n  )\n}\n","/workspace/Physica-Interfae/src/lib/hooks/useCurrency.ts",["3842","3843","3844"],"import { arrayify } from '@ethersproject/bytes'\nimport { parseBytes32String } from '@ethersproject/strings'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { isSupportedChain } from 'constants/chains'\nimport { useBytes32TokenContract, useTokenContract } from 'hooks/useContract'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { useMemo } from 'react'\n\nimport { DEFAULT_ERC20_DECIMALS } from '../../constants/tokens'\nimport { TOKEN_SHORTHANDS } from '../../constants/tokens'\nimport { isAddress } from '../../utils'\nimport { supportedChainId } from '../../utils/supportedChainId'\n\n// parse a name or symbol from a token response\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\n\nfunction parseStringOrBytes32(str: string | undefined, bytes32: string | undefined, defaultValue: string): string {\n  return str && str.length > 0\n    ? str\n    : // need to check for proper bytes string and valid terminator\n    bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0\n    ? parseBytes32String(bytes32)\n    : defaultValue\n}\n\nexport const UNKNOWN_TOKEN_SYMBOL = 'UNKNOWN'\nconst UNKNOWN_TOKEN_NAME = 'Unknown Token'\n\n/**\n * Returns a Token from the tokenAddress.\n * Returns null if token is loading or null was passed.\n * Returns undefined if tokenAddress is invalid or token does not exist.\n */\nexport function useTokenFromActiveNetwork(tokenAddress: string | undefined): Token | null | undefined {\n  const { chainId } = useWeb3React()\n\n  const formattedAddress = isAddress(tokenAddress)\n  const tokenContract = useTokenContract(formattedAddress ? formattedAddress : undefined, false)\n  const tokenContractBytes32 = useBytes32TokenContract(formattedAddress ? formattedAddress : undefined, false)\n\n  // TODO (WEB-3009): reduce this to one RPC call instead of 5\n  // TODO: Fix redux-multicall so that these values do not reload.\n  const tokenName = useSingleCallResult(tokenContract, 'name', undefined, NEVER_RELOAD)\n  const tokenNameBytes32 = useSingleCallResult(tokenContractBytes32, 'name', undefined, NEVER_RELOAD)\n  const symbol = useSingleCallResult(tokenContract, 'symbol', undefined, NEVER_RELOAD)\n  const symbolBytes32 = useSingleCallResult(tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\n  const decimals = useSingleCallResult(tokenContract, 'decimals', undefined, NEVER_RELOAD)\n\n  const isLoading = useMemo(\n    () => decimals.loading || symbol.loading || tokenName.loading,\n    [decimals.loading, symbol.loading, tokenName.loading]\n  )\n  const parsedDecimals = useMemo(() => decimals?.result?.[0] ?? DEFAULT_ERC20_DECIMALS, [decimals.result])\n\n  const parsedSymbol = useMemo(\n    () => parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], UNKNOWN_TOKEN_SYMBOL),\n    [symbol.result, symbolBytes32.result]\n  )\n  const parsedName = useMemo(\n    () => parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], UNKNOWN_TOKEN_NAME),\n    [tokenName.result, tokenNameBytes32.result]\n  )\n\n  return useMemo(() => {\n    // If the token is on another chain, we cannot fetch it on-chain, and it is invalid.\n    if (typeof tokenAddress !== 'string' || !isSupportedChain(chainId) || !formattedAddress) return undefined\n    if (isLoading || !chainId) return null\n\n    return new Token(chainId, formattedAddress, parsedDecimals, parsedSymbol, parsedName)\n  }, [chainId, tokenAddress, formattedAddress, isLoading, parsedDecimals, parsedSymbol, parsedName])\n}\n\ntype TokenMap = { [address: string]: Token }\n\n/**\n * Returns a Token from the tokenAddress.\n * Returns null if token is loading or null was passed.\n * Returns undefined if tokenAddress is invalid or token does not exist.\n */\nexport function useTokenFromMapOrNetwork(tokens: TokenMap, tokenAddress?: string | null): Token | null | undefined {\n  const address = isAddress(tokenAddress)\n  const token: Token | undefined = address ? tokens[address] : undefined\n  const tokenFromNetwork = useTokenFromActiveNetwork(token ? undefined : address ? address : undefined)\n\n  return tokenFromNetwork ?? token\n}\n\n/**\n * Returns a Currency from the currencyId.\n * Returns null if currency is loading or null was passed.\n * Returns undefined if currencyId is invalid or token does not exist.\n */\nexport function useCurrencyFromMap(tokens: TokenMap, currencyId?: string | null): Currency | null | undefined {\n  const nativeCurrency = useNativeCurrency()\n  const { chainId } = useWeb3React()\n  const isNative = Boolean(nativeCurrency && currencyId?.toUpperCase() === 'ETH')\n  const shorthandMatchAddress = useMemo(() => {\n    const chain = supportedChainId(chainId)\n    return chain && currencyId ? TOKEN_SHORTHANDS[currencyId.toUpperCase()]?.[chain] : undefined\n  }, [chainId, currencyId])\n\n  const token = useTokenFromMapOrNetwork(tokens, isNative ? undefined : shorthandMatchAddress ?? currencyId)\n\n  if (currencyId === null || currencyId === undefined || !isSupportedChain(chainId)) return null\n\n  // this case so we use our builtin wrapped token instead of wrapped tokens on token lists\n  const wrappedNative = nativeCurrency?.wrapped\n  if (wrappedNative?.address?.toUpperCase() === currencyId?.toUpperCase()) return wrappedNative\n\n  return isNative ? nativeCurrency : token\n}\n","/workspace/Physica-Interfae/src/featureFlags/flags/nftDetails.ts",[],"/workspace/Physica-Interfae/src/components/swap/styleds.tsx",[],"/workspace/Physica-Interfae/src/featureFlags/flags/swapWidget.ts",[],"/workspace/Physica-Interfae/src/nft/components/profile/view/ProfilePage.tsx",["3845","3846","3847"],"import { useNftBalance } from 'graphql/data/nft/NftBalance'\nimport { AnimatedBox, Box } from 'nft/components/Box'\nimport { LoadingAssets } from 'nft/components/collection/CollectionAssetLoading'\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\nimport { FilterButton } from 'nft/components/collection/FilterButton'\nimport { ClearAllButton } from 'nft/components/collection/shared'\nimport { Column, Row } from 'nft/components/Flex'\nimport { CrossIcon } from 'nft/components/icons'\nimport { FilterSidebar } from 'nft/components/profile/view/FilterSidebar'\nimport { subhead } from 'nft/css/common.css'\nimport {\n  useBag,\n  useFiltersExpanded,\n  useIsMobile,\n  useSellAsset,\n  useWalletBalance,\n  useWalletCollections,\n} from 'nft/hooks'\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\nimport { OSCollectionsFetcher } from 'nft/queries'\nimport { WalletCollection } from 'nft/types'\nimport { Dispatch, SetStateAction, Suspense, useCallback, useEffect, useMemo, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery } from 'react-query'\nimport { easings, useSpring } from 'react-spring'\nimport styled from 'styled-components/macro'\nimport { shallow } from 'zustand/shallow'\n\nimport { EmptyWalletModule } from './EmptyWalletContent'\nimport * as styles from './ProfilePage.css'\nimport { ProfileBodyLoadingSkeleton } from './ProfilePageLoadingSkeleton'\nimport { ViewMyNftsAsset } from './ViewMyNftsAsset'\n\nconst ProfilePageColumn = styled(Column)`\n  ${ScreenBreakpointsPaddings}\n`\n\nconst ProfileHeader = styled.div`\n  font-size: 28px;\n  font-weight: 500;\n  line-height: 38px;\n  padding-bottom: 16px;\n  margin-bottom: 8px;\n  border-bottom: 1px solid ${({ theme }) => theme.backgroundOutline};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n    margin-bottom: 0px;\n  }\n`\n\nconst EmptyStateContainer = styled.div`\n  margin-top: 164px;\n`\n\nexport const DEFAULT_WALLET_ASSET_QUERY_AMOUNT = 25\nexport const WALLET_COLLECTIONS_PAGINATION_LIMIT = 300\nconst FILTER_SIDEBAR_WIDTH = 300\nconst PADDING = 16\n\nexport const ProfilePage = () => {\n  const { address } = useWalletBalance()\n  const walletCollections = useWalletCollections((state) => state.walletCollections)\n  const setWalletCollections = useWalletCollections((state) => state.setWalletCollections)\n  const { resetSellAssets } = useSellAsset(\n    ({ reset }) => ({\n      resetSellAssets: reset,\n    }),\n    shallow\n  )\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const toggleBag = useBag((state) => state.toggleBag)\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\n  const isMobile = useIsMobile()\n\n  const getOwnerCollections = async ({ pageParam = 0 }) => {\n    const res = await OSCollectionsFetcher({\n      params: {\n        asset_owner: address,\n        offset: `${pageParam * WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\n        limit: `${WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\n      },\n    })\n    return {\n      data: res,\n      nextPage: pageParam + 1,\n    }\n  }\n\n  const {\n    data: ownerCollectionsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n  } = useInfiniteQuery(['ownerCollections', { address }], getOwnerCollections, {\n    getNextPageParam: (lastGroup) => (lastGroup.data.length === 0 ? undefined : lastGroup.nextPage),\n    refetchInterval: 15000,\n    refetchIntervalInBackground: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n  })\n\n  const ownerCollections = useMemo(\n    () => (isSuccess ? ownerCollectionsData?.pages.map((page) => page.data).flat() : null),\n    [isSuccess, ownerCollectionsData]\n  )\n\n  useEffect(() => {\n    ownerCollections && setWalletCollections(ownerCollections)\n  }, [ownerCollections, setWalletCollections])\n\n  return (\n    <ProfilePageColumn width=\"full\" paddingTop={{ sm: `${PADDING}`, md: '40' }}>\n      <>\n        <ProfileHeader>My NFTs</ProfileHeader>\n        <Row alignItems=\"flex-start\" position=\"relative\">\n          <FilterSidebar\n            fetchNextPage={fetchNextPage}\n            hasNextPage={hasNextPage}\n            isFetchingNextPage={isFetchingNextPage}\n            walletCollections={walletCollections}\n          />\n          {(!isMobile || !isFiltersExpanded) && (\n            <Suspense fallback={<ProfileBodyLoadingSkeleton />}>\n              <ProfilePageNfts\n                walletCollections={walletCollections}\n                isFiltersExpanded={isFiltersExpanded}\n                setFiltersExpanded={setFiltersExpanded}\n              />\n            </Suspense>\n          )}\n        </Row>\n      </>\n      {sellAssets.length > 0 && (\n        <Row\n          display={{ sm: 'flex', md: 'none' }}\n          position=\"fixed\"\n          left=\"16\"\n          height=\"56\"\n          borderRadius=\"12\"\n          paddingX=\"16\"\n          paddingY=\"12\"\n          background=\"backgroundSurface\"\n          borderStyle=\"solid\"\n          borderColor=\"backgroundOutline\"\n          borderWidth=\"1px\"\n          style={{ bottom: '68px', width: 'calc(100% - 32px)', lineHeight: '24px' }}\n          className={subhead}\n        >\n          {sellAssets.length} NFT{sellAssets.length === 1 ? '' : 's'}\n          <Box\n            fontWeight=\"semibold\"\n            fontSize=\"14\"\n            cursor=\"pointer\"\n            color=\"textSecondary\"\n            marginRight=\"20\"\n            marginLeft=\"auto\"\n            onClick={resetSellAssets}\n            lineHeight=\"16\"\n          >\n            Clear\n          </Box>\n          <Box\n            color=\"white\"\n            marginRight=\"0\"\n            fontWeight=\"medium\"\n            fontSize=\"14\"\n            cursor=\"pointer\"\n            backgroundColor=\"accentAction\"\n            onClick={toggleBag}\n            lineHeight=\"16\"\n            borderRadius=\"12\"\n            paddingY=\"8\"\n            paddingX=\"28\"\n          >\n            List for sale\n          </Box>\n        </Row>\n      )}\n    </ProfilePageColumn>\n  )\n}\n\nconst ProfilePageNfts = ({\n  walletCollections,\n  isFiltersExpanded,\n  setFiltersExpanded,\n}: {\n  walletCollections: WalletCollection[]\n  isFiltersExpanded: boolean\n  setFiltersExpanded: (filtersExpanded: boolean) => void\n}) => {\n  const { address } = useWalletBalance()\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\n  const isBagExpanded = useBag((state) => state.bagExpanded)\n  const [currentTokenPlayingMedia, setCurrentTokenPlayingMedia] = useState<string | undefined>()\n  const isMobile = useIsMobile()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n\n  const {\n    walletAssets: ownerAssets,\n    loading,\n    hasNext,\n    loadMore,\n  } = useNftBalance(address, collectionFilters, [], DEFAULT_WALLET_ASSET_QUERY_AMOUNT)\n\n  const { gridX } = useSpring({\n    gridX: isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING,\n    config: {\n      duration: 250,\n      easing: easings.easeOutSine,\n    },\n  })\n\n  if (loading) return <ProfileBodyLoadingSkeleton />\n\n  return (\n    <Column width=\"full\">\n      {ownerAssets?.length === 0 ? (\n        <EmptyStateContainer>\n          <EmptyWalletModule />\n        </EmptyStateContainer>\n      ) : (\n        <AnimatedBox\n          flexShrink=\"0\"\n          position={isMobile && isBagExpanded ? 'fixed' : 'static'}\n          style={{\n            transform: gridX.to(\n              (x) => `translate(${Number(x) - (!isMobile && isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING)}px)`\n            ),\n          }}\n          paddingY=\"20\"\n        >\n          <Row gap=\"8\" flexWrap=\"nowrap\" justifyContent=\"space-between\">\n            <FilterButton\n              isMobile={isMobile}\n              isFiltersExpanded={isFiltersExpanded}\n              onClick={() => setFiltersExpanded(!isFiltersExpanded)}\n            />\n          </Row>\n          <Row>\n            <CollectionFiltersRow\n              collections={walletCollections}\n              collectionFilters={collectionFilters}\n              setCollectionFilters={setCollectionFilters}\n              clearCollectionFilters={clearCollectionFilters}\n            />\n          </Row>\n          <InfiniteScroll\n            next={loadMore}\n            hasMore={hasNext ?? false}\n            loader={\n              Boolean(hasNext && ownerAssets?.length) && <LoadingAssets count={DEFAULT_WALLET_ASSET_QUERY_AMOUNT} />\n            }\n            dataLength={ownerAssets?.length ?? 0}\n            className={ownerAssets?.length ? assetList : undefined}\n            style={{ overflow: 'unset' }}\n          >\n            {ownerAssets?.length\n              ? ownerAssets.map((asset, index) => (\n                  <div key={index}>\n                    <ViewMyNftsAsset\n                      asset={asset}\n                      mediaShouldBePlaying={asset.tokenId === currentTokenPlayingMedia}\n                      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n                      hideDetails={sellAssets.length > 0}\n                    />\n                  </div>\n                ))\n              : null}\n          </InfiniteScroll>\n        </AnimatedBox>\n      )}\n    </Column>\n  )\n}\n\nconst CollectionFiltersRow = ({\n  collections,\n  collectionFilters,\n  setCollectionFilters,\n  clearCollectionFilters,\n}: {\n  collections: WalletCollection[]\n  collectionFilters: Array<string>\n  setCollectionFilters: (address: string) => void\n  clearCollectionFilters: Dispatch<SetStateAction<void>>\n}) => {\n  const getCollection = (collectionAddress: string) => {\n    return collections?.find((collection) => collection.address === collectionAddress)\n  }\n  const handleClearAllClick = useCallback(() => clearCollectionFilters(), [clearCollectionFilters])\n  return (\n    <Row paddingY=\"18\" gap=\"8\" flexWrap=\"wrap\">\n      {Boolean(collectionFilters?.length) &&\n        collectionFilters.map((collectionAddress, index) => (\n          <CollectionFilterItem\n            collection={getCollection(collectionAddress)}\n            key={`CollectionFilterItem-${collectionAddress}-${index}`}\n            setCollectionFilters={setCollectionFilters}\n          />\n        ))}\n      {Boolean(collectionFilters?.length) && <ClearAllButton onClick={handleClearAllClick}>Clear all</ClearAllButton>}\n    </Row>\n  )\n}\n\nconst CollectionFilterItem = ({\n  collection,\n  setCollectionFilters,\n}: {\n  collection: WalletCollection | undefined\n  setCollectionFilters: (address: string) => void\n}) => {\n  if (!collection) return null\n  return (\n    <Row\n      justifyContent=\"center\"\n      paddingTop=\"6\"\n      paddingRight=\"6\"\n      paddingBottom=\"6\"\n      paddingLeft=\"12\"\n      borderRadius=\"8\"\n      background=\"backgroundOutline\"\n      fontSize=\"14\"\n    >\n      <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\n      <Box marginLeft=\"6\" className={styles.collectionFilterBubbleText}>\n        {collection?.name}\n      </Box>\n      <Box\n        color=\"textSecondary\"\n        background=\"none\"\n        height=\"28\"\n        width=\"28\"\n        padding=\"0\"\n        as=\"button\"\n        border=\"none\"\n        cursor=\"pointer\"\n        onClick={() => setCollectionFilters(collection.address)}\n      >\n        <CrossIcon />\n      </Box>\n    </Row>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/list/ListPage.tsx",["3848","3849"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\nimport { useWeb3React } from '@web3-react/core'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ListingButton } from 'nft/components/profile/list/ListingButton'\nimport {\n  approveCollectionRow,\n  getTotalEthValue,\n  useSubscribeListingState,\n  verifyStatus,\n} from 'nft/components/profile/list/utils'\nimport { useIsMobile, useNFTList, useProfilePageState, useSellAsset } from 'nft/hooks'\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from 'nft/pages/profile/shared'\nimport { looksRareNonceFetcher } from 'nft/queries'\nimport { ProfilePageStateType } from 'nft/types'\nimport { formatEth } from 'nft/utils'\nimport { ListingMarkets } from 'nft/utils/listNfts'\nimport { useEffect, useMemo, useReducer, useState } from 'react'\nimport { ArrowLeft } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport { ListModal } from './Modal/ListModal'\nimport { NFTListingsGrid } from './NFTListingsGrid'\nimport { SelectMarketplacesDropdown } from './SelectMarketplacesDropdown'\nimport { SetDurationModal } from './SetDurationModal'\n\nconst ListingHeader = styled(Column)`\n  gap: 16px;\n  margin-top: 36px;\n\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\n    gap: 4px;\n  }\n`\n\nconst ArrowContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 4px;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    height: 40px;\n    width: 40px;\n  }\n`\n\nconst BackArrow = styled(ArrowLeft)`\n  height: 16px;\n  width: 16px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.textSecondary};\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    height: 20px;\n    width: 20px;\n  }\n`\n\nconst TitleWrapper = styled(Row)`\n  gap: 4px;\n  margin-bottom: 12px;\n  white-space: nowrap;\n  width: min-content;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 28px;\n\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\n    margin-bottom: 0px;\n    font-weight: 500;\n    font-size: 28px;\n    line-height: 36px;\n  }\n`\n\nconst ButtonsWrapper = styled(Row)`\n  gap: 12px;\n  width: min-content;\n`\n\nconst MarketWrap = styled.section`\n  gap: 48px;\n  margin: 0px auto;\n  width: 100%;\n  max-width: 1200px;\n`\n\nconst ListingHeaderRow = styled(Row)`\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    padding-left: 40px;\n  }\n`\n\nconst GridWrapper = styled.div`\n  margin-top: 24px;\n  margin-bottom: 48px;\n`\n\nconst FloatingConfirmationBar = styled(Row)<{ issues: boolean }>`\n  padding: 12px 12px 12px 32px;\n  border: 1px solid;\n  border-color: ${({ theme, issues }) => (issues ? theme.backgroundOutline : theme.accentAction)};\n  border-radius: 20px;\n  white-space: nowrap;\n  justify-content: space-between;\n  background: ${({ theme }) => theme.backgroundSurface};\n  position: fixed;\n  bottom: 32px;\n  width: calc(100vw - ${LIST_PAGE_MARGIN * 2}px);\n  left: 50%;\n  transform: translateX(-50%);\n  max-width: ${({ theme }) => theme.maxWidth};\n  z-index: ${Z_INDEX.under_dropdown};\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n\n  @media screen and (max-width: ${BREAKPOINTS.lg}px) {\n    bottom: 68px;\n  }\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: calc(100% - ${LIST_PAGE_MARGIN_MOBILE * 2}px);\n    padding: 8px 8px 8px 16px;\n  }\n`\n\nconst Overlay = styled.div`\n  position: fixed;\n  bottom: 0px;\n  height: 158px;\n  width: 100vw;\n  background: ${({ theme }) => `linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, ${theme.backgroundBackdrop} 100%)`};\n`\n\nconst UsdValue = styled(ThemedText.SubHeader)`\n  line-height: 24px;\n  color: ${({ theme }) => theme.textSecondary};\n  display: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    display: flex;\n  }\n`\n\nconst ProceedsAndButtonWrapper = styled(Row)`\n  width: min-content;\n  gap: 40px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    gap: 20px;\n  }\n`\n\nconst ProceedsWrapper = styled(Row)`\n  width: min-content;\n  gap: 16px;\n`\n\nconst EthValueWrapper = styled.span<{ totalEthListingValue: boolean }>`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 28px;\n  color: ${({ theme, totalEthListingValue }) => (totalEthListingValue ? theme.textPrimary : theme.textSecondary)};\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    font-size: 16px;\n    line-height: 24px;\n  }\n`\n\nexport const ListPage = () => {\n  const { setProfilePageState: setSellPageState } = useProfilePageState()\n  const { provider } = useWeb3React()\n  const isMobile = useIsMobile()\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\n  const { setGlobalMarketplaces, sellAssets, issues } = useSellAsset(\n    ({ setGlobalMarketplaces, sellAssets, issues }) => ({\n      setGlobalMarketplaces,\n      sellAssets,\n      issues,\n    }),\n    shallow\n  )\n  const { listings, collectionsRequiringApproval, setLooksRareNonce, setCollectionStatusAndCallback } = useNFTList(\n    ({ listings, collectionsRequiringApproval, setLooksRareNonce, setCollectionStatusAndCallback }) => ({\n      listings,\n      collectionsRequiringApproval,\n      setLooksRareNonce,\n      setCollectionStatusAndCallback,\n    }),\n    shallow\n  )\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n  const nativeCurrency = useNativeCurrency()\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\n  const usdcValue = useStablecoinValue(parsedAmount)\n  const usdcAmount = formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)\n  const [showListModal, toggleShowListModal] = useReducer((s) => !s, false)\n  const [selectedMarkets, setSelectedMarkets] = useState([ListingMarkets[0]]) // default marketplace: x2y2\n  const signer = provider?.getSigner()\n\n  // instantiate listings and collections to approve when users modify input data\n  useSubscribeListingState()\n\n  useEffect(() => {\n    setGlobalMarketplaces(selectedMarkets)\n  }, [selectedMarkets, setGlobalMarketplaces])\n\n  const startListingEventProperties = {\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n    token_ids: sellAssets.map((asset) => asset.tokenId),\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\n    list_quantity: listings.length,\n    usd_value: usdcAmount,\n    ...trace,\n  }\n\n  const startListingFlow = async () => {\n    if (!signer) return\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\n    const signerAddress = await signer.getAddress()\n    const nonce = await looksRareNonceFetcher(signerAddress)\n    setLooksRareNonce(nonce ?? 0)\n\n    // for all unique collection, marketplace combos -> approve collections\n    for (const collectionRow of collectionsRequiringApproval) {\n      verifyStatus(collectionRow.status) &&\n        (isMobile\n          ? await approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\n          : approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback))\n    }\n  }\n\n  const showModalAndStartListing = () => {\n    toggleShowListModal()\n    startListingFlow()\n  }\n\n  const BannerText = isMobile ? (\n    <ThemedText.SubHeader lineHeight=\"24px\">\n      <Trans>Receive</Trans>\n    </ThemedText.SubHeader>\n  ) : (\n    <ThemedText.HeadlineSmall lineHeight=\"28px\">\n      <Trans>You receive</Trans>\n    </ThemedText.HeadlineSmall>\n  )\n\n  return (\n    <Column>\n      <MarketWrap>\n        <ListingHeader>\n          <Row>\n            <ArrowContainer>\n              <BackArrow onClick={() => setSellPageState(ProfilePageStateType.VIEWING)} />\n            </ArrowContainer>\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"textSecondary\">\n              <Trans>My NFTs</Trans>\n            </ThemedText.BodySmall>\n          </Row>\n          <ListingHeaderRow>\n            <TitleWrapper>\n              <Trans>Sell NFTs</Trans>\n            </TitleWrapper>\n            <ButtonsWrapper>\n              <SelectMarketplacesDropdown setSelectedMarkets={setSelectedMarkets} selectedMarkets={selectedMarkets} />\n              <SetDurationModal />\n            </ButtonsWrapper>\n          </ListingHeaderRow>\n        </ListingHeader>\n        <GridWrapper>\n          <NFTListingsGrid selectedMarkets={selectedMarkets} />\n        </GridWrapper>\n      </MarketWrap>\n\n      <FloatingConfirmationBar issues={!!issues}>\n        {BannerText}\n        <ProceedsAndButtonWrapper>\n          <ProceedsWrapper>\n            <EthValueWrapper totalEthListingValue={!!totalEthListingValue}>\n              {totalEthListingValue > 0 ? formatEth(totalEthListingValue) : '-'} ETH\n            </EthValueWrapper>\n            {!!usdcValue && <UsdValue>{usdcAmount}</UsdValue>}\n          </ProceedsWrapper>\n          <ListingButton onClick={showModalAndStartListing} />\n        </ProceedsAndButtonWrapper>\n      </FloatingConfirmationBar>\n      <Overlay />\n\n      {showListModal && <ListModal overlayClick={toggleShowListModal} />}\n    </Column>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/details/AssetPriceDetails.tsx",["3850","3851","3852"],"import { useTrace } from '@uniswap/analytics'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { OpacityHoverState } from 'components/Common'\nimport { useNftBalance } from 'graphql/data/nft/NftBalance'\nimport { CancelListingIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useBag, useProfilePageState, useSellAsset } from 'nft/hooks'\nimport { CollectionInfoForAsset, GenieAsset, ProfilePageStateType, WalletAsset } from 'nft/types'\nimport {\n  ethNumberStandardFormatter,\n  fetchPrice,\n  formatEthPrice,\n  generateTweetForAsset,\n  getMarketplaceIcon,\n  timeLeft,\n  useUsdPrice,\n} from 'nft/utils'\nimport { shortenAddress } from 'nft/utils/address'\nimport { useMemo } from 'react'\nimport { Upload } from 'react-feather'\nimport { useQuery } from 'react-query'\nimport { Link, useNavigate } from 'react-router-dom'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { ExternalLink, ThemedText } from 'theme'\n\nconst TWITTER_WIDTH = 560\nconst TWITTER_HEIGHT = 480\n\ninterface AssetPriceDetailsProps {\n  asset: GenieAsset\n  collection: CollectionInfoForAsset\n}\n\nconst hoverState = css`\n  :hover::after {\n    border-radius: 12px;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${({ theme }) => theme.stateOverlayHover};\n    z-index: 0;\n  }\n\n  :active::after {\n    border-radius: 12px;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${({ theme }) => theme.stateOverlayPressed};\n    z-index: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 24px;\n\n  @media (min-width: calc(960px + 1px)) {\n    position: fixed;\n    width: 360px;\n    margin-top: 20px;\n  }\n`\n\nconst BestPriceContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 12px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n`\n\nconst HeaderRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst PriceRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  margin-top: auto;\n  margin-bottom: auto;\n`\n\nconst BuyNowButton = styled.div<{ assetInBag: boolean; margin: boolean; useAccentColor: boolean }>`\n  position: relative;\n  width: 100%;\n  background-color: ${({ theme, assetInBag, useAccentColor }) =>\n    assetInBag ? theme.accentFailure : useAccentColor ? theme.accentAction : theme.backgroundInteractive};\n  border-radius: 12px;\n  padding: 10px 12px;\n  margin-top: ${({ margin }) => (margin ? '12px' : '0px')};\n  text-align: center;\n  cursor: pointer;\n\n  ${hoverState}\n`\n\nconst BuyNowButtonContainer = styled.div`\n  position: relative;\n`\n\nconst Tertiary = styled(ThemedText.BodySecondary)`\n  color: ${({ theme }) => theme.textTertiary};\n`\n\nconst UploadLink = styled.a`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst NotForSaleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 48px 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst DiscoveryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst OwnerText = styled.a`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  color: ${({ theme }) => theme.textSecondary};\n  text-decoration: none;\n\n  ${OpacityHoverState}\n`\n\nconst OwnerInformationContainer = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0 8px;\n`\n\nconst AssetInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`\n\nconst AssetHeader = styled.div`\n  display: -webkit-box;\n  align-items: center;\n  font-size: 28px;\n  font-weight: 500;\n  line-height: 36px;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nconst CollectionNameContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst CollectionHeader = styled.span`\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 24px;\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n  ${OpacityHoverState};\n`\n\nconst VerifiedIconContainer = styled.span`\n  position: relative;\n`\n\nconst StyledVerifiedIcon = styled(VerifiedIcon)`\n  position: absolute;\n  top: 0px;\n`\n\nconst DefaultLink = styled(Link)`\n  text-decoration: none;\n`\n\nconst OwnerContainer = ({ asset }: { asset: WalletAsset }) => {\n  const navigate = useNavigate()\n  const { data: USDValue } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\n  const selectSellAsset = useSellAsset((state) => state.selectSellAsset)\n  const resetSellAssets = useSellAsset((state) => state.reset)\n\n  const listing = asset.sellOrders && asset.sellOrders.length > 0 ? asset.sellOrders[0] : undefined\n  const expirationDate = listing?.endAt ? new Date(listing.endAt) : undefined\n\n  const USDPrice = useMemo(\n    () => (USDValue && asset.floor_sell_order_price ? USDValue * asset.floor_sell_order_price : undefined),\n    [USDValue, asset.floor_sell_order_price]\n  )\n  const trace = useTrace()\n\n  const goToListPage = () => {\n    resetSellAssets()\n    navigate('/nfts/profile')\n    selectSellAsset(asset)\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_ITEM_ADDED, {\n      collection_address: asset.asset_contract.address,\n      token_id: asset.tokenId,\n      ...trace,\n    })\n    setSellPageState(ProfilePageStateType.LISTING)\n  }\n\n  return (\n    <BestPriceContainer>\n      <HeaderRow>\n        <ThemedText.SubHeader color=\"accentAction\" fontWeight={500} lineHeight=\"24px\">\n          {listing ? 'Your Price' : 'List for Sale'}\n        </ThemedText.SubHeader>\n        {listing && (\n          <ExternalLink href={listing.marketplaceUrl}>\n            <MarketplaceIcon alt={listing.marketplace} src={getMarketplaceIcon(listing.marketplace)} />\n          </ExternalLink>\n        )}\n      </HeaderRow>\n      <PriceRow>\n        {listing ? (\n          <>\n            <ThemedText.MediumHeader fontSize=\"28px\" lineHeight=\"36px\">\n              {formatEthPrice(asset.priceInfo?.ETHPrice)} ETH\n            </ThemedText.MediumHeader>\n            {USDPrice && (\n              <ThemedText.BodySecondary lineHeight=\"24px\">\n                {ethNumberStandardFormatter(USDPrice, true, true)}\n              </ThemedText.BodySecondary>\n            )}\n          </>\n        ) : (\n          <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n            Get the best price for your NFT by selling with Uniswap.\n          </ThemedText.BodySecondary>\n        )}\n      </PriceRow>\n      {expirationDate && (\n        <ThemedText.BodySecondary fontSize=\"14px\">Sale ends: {timeLeft(expirationDate)}</ThemedText.BodySecondary>\n      )}\n      {!listing ? (\n        <BuyNowButton assetInBag={false} margin={true} useAccentColor={true} onClick={goToListPage}>\n          <ThemedText.SubHeader lineHeight=\"20px\" color=\"white\">\n            List\n          </ThemedText.SubHeader>\n        </BuyNowButton>\n      ) : (\n        <>\n          <BuyNowButton assetInBag={false} margin={true} useAccentColor={false} onClick={goToListPage}>\n            <ThemedText.SubHeader lineHeight=\"20px\">Adjust listing</ThemedText.SubHeader>\n          </BuyNowButton>\n        </>\n      )}\n    </BestPriceContainer>\n  )\n}\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  ${OpacityHoverState}\n`\n\nconst NotForSale = ({ collectionName, collectionUrl }: { collectionName: string; collectionUrl: string }) => {\n  const theme = useTheme()\n\n  return (\n    <BestPriceContainer>\n      <NotForSaleContainer>\n        <CancelListingIcon width=\"79px\" height=\"79px\" color={theme.textTertiary} />\n        <ThemedText.SubHeader fontWeight={500} lineHeight=\"24px\">\n          Not for sale\n        </ThemedText.SubHeader>\n        <DiscoveryContainer>\n          <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n            Discover similar NFTs for sale in\n          </ThemedText.BodySecondary>\n          <StyledLink to={`/nfts/collection/${collectionUrl}`}>\n            <ThemedText.Link lineHeight=\"20px\">{collectionName}</ThemedText.Link>\n          </StyledLink>\n        </DiscoveryContainer>\n      </NotForSaleContainer>\n    </BestPriceContainer>\n  )\n}\n\nexport const AssetPriceDetails = ({ asset, collection }: AssetPriceDetailsProps) => {\n  const { account } = useWeb3React()\n\n  const cheapestOrder = asset.sellorders && asset.sellorders.length > 0 ? asset.sellorders[0] : undefined\n  const expirationDate = cheapestOrder?.endAt ? new Date(cheapestOrder.endAt) : undefined\n\n  const itemsInBag = useBag((s) => s.itemsInBag)\n  const addAssetsToBag = useBag((s) => s.addAssetsToBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n  const toggleBag = useBag((s) => s.toggleBag)\n  const bagExpanded = useBag((s) => s.bagExpanded)\n\n  const USDPrice = useUsdPrice(asset)\n\n  const assetsFilter = [{ address: asset.address, tokenId: asset.tokenId }]\n  const { walletAssets: ownerAssets } = useNftBalance(account ?? '', [], assetsFilter, 1)\n  const walletAsset: WalletAsset | undefined = useMemo(() => ownerAssets?.[0], [ownerAssets])\n\n  const { assetInBag } = useMemo(() => {\n    return {\n      assetInBag: itemsInBag.some(\n        (item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address\n      ),\n    }\n  }, [asset, itemsInBag])\n\n  const shareTweet = () => {\n    window.open(\n      generateTweetForAsset(asset),\n      'newwindow',\n      `left=${(window.screen.width - TWITTER_WIDTH) / 2}, top=${\n        (window.screen.height - TWITTER_HEIGHT) / 2\n      }, width=${TWITTER_WIDTH}, height=${TWITTER_HEIGHT}`\n    )\n  }\n\n  const isOwner = asset.ownerAddress && !!walletAsset && account?.toLowerCase() === asset.ownerAddress?.toLowerCase()\n  const isForSale = cheapestOrder && asset.priceInfo\n\n  return (\n    <Container>\n      <AssetInfoContainer>\n        <CollectionNameContainer>\n          <DefaultLink to={`/nfts/collection/${asset.address}`}>\n            <CollectionHeader>\n              {collection.collectionName}\n              <VerifiedIconContainer>{collection.isVerified && <StyledVerifiedIcon />}</VerifiedIconContainer>\n            </CollectionHeader>\n          </DefaultLink>\n          <UploadLink onClick={shareTweet} target=\"_blank\">\n            <Upload size={20} strokeWidth={2} />\n          </UploadLink>\n        </CollectionNameContainer>\n        <AssetHeader>{asset.name ?? `${asset.collectionName} #${asset.tokenId}`}</AssetHeader>\n      </AssetInfoContainer>\n      {isOwner ? (\n        <OwnerContainer asset={walletAsset} />\n      ) : isForSale ? (\n        <BestPriceContainer>\n          <HeaderRow>\n            <ThemedText.SubHeader color=\"accentAction\" fontWeight={500} lineHeight=\"24px\">\n              Best Price\n            </ThemedText.SubHeader>\n            <ExternalLink href={cheapestOrder.marketplaceUrl}>\n              <MarketplaceIcon alt={cheapestOrder.marketplace} src={getMarketplaceIcon(cheapestOrder.marketplace)} />\n            </ExternalLink>\n          </HeaderRow>\n          <PriceRow>\n            <ThemedText.MediumHeader fontSize=\"28px\" lineHeight=\"36px\">\n              {formatEthPrice(asset.priceInfo.ETHPrice)} ETH\n            </ThemedText.MediumHeader>\n            {USDPrice && (\n              <ThemedText.BodySecondary lineHeight=\"24px\">\n                {ethNumberStandardFormatter(USDPrice, true, true)}\n              </ThemedText.BodySecondary>\n            )}\n          </PriceRow>\n          {expirationDate && expirationDate > new Date() && (\n            <Tertiary fontSize=\"14px\">Sale ends: {timeLeft(expirationDate)}</Tertiary>\n          )}\n          <div>\n            <BuyNowButtonContainer>\n              <BuyNowButton\n                assetInBag={assetInBag}\n                margin={true}\n                useAccentColor={true}\n                onClick={() => {\n                  assetInBag ? removeAssetsFromBag([asset]) : addAssetsToBag([asset])\n                  if (!assetInBag && !bagExpanded) {\n                    toggleBag()\n                  }\n                }}\n              >\n                <ThemedText.SubHeader color=\"white\" lineHeight=\"20px\">\n                  <span data-testid=\"nft-details-toggle-bag\">{assetInBag ? 'Remove' : 'Add to Bag'}</span>\n                </ThemedText.SubHeader>\n              </BuyNowButton>\n            </BuyNowButtonContainer>\n          </div>\n        </BestPriceContainer>\n      ) : (\n        <NotForSale collectionName={collection.collectionName ?? 'this collection'} collectionUrl={asset.address} />\n      )}\n      {isForSale && (\n        <OwnerInformationContainer>\n          {asset.tokenType !== 'ERC1155' && asset.ownerAddress && (\n            <ThemedText.BodySmall color=\"textSecondary\" lineHeight=\"20px\">\n              Seller:\n            </ThemedText.BodySmall>\n          )}\n          <OwnerText\n            target=\"_blank\"\n            href={`https://etherscan.io/address/${asset.ownerAddress}`}\n            rel=\"noopener noreferrer\"\n          >\n            {asset.tokenType === 'ERC1155' ? (\n              ''\n            ) : (\n              <span> {isOwner ? 'You' : asset.ownerAddress && shortenAddress(asset.ownerAddress, 2, 4)}</span>\n            )}\n          </OwnerText>\n        </OwnerInformationContainer>\n      )}\n    </Container>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/view/ProfilePageLoadingSkeleton.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/NftDetails.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/AssetDetails.tsx",["3853","3854","3855","3856","3857","3858","3859","3860","3861"],"import { OpacityHoverState, ScrollBarStyles } from 'components/Common'\nimport Resource from 'components/Tokens/TokenDetails/Resource'\nimport { MouseoverTooltip } from 'components/Tooltip/index'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { NftActivityType } from 'graphql/data/__generated__/types-and-hooks'\nimport { useNftActivity } from 'graphql/data/nft/NftActivity'\nimport { Box } from 'nft/components/Box'\nimport { reduceFilters } from 'nft/components/collection/Activity'\nimport { LoadingSparkle } from 'nft/components/common/Loading/LoadingSparkle'\nimport { AssetPriceDetails } from 'nft/components/details/AssetPriceDetails'\nimport { Center } from 'nft/components/Flex'\nimport { themeVars, vars } from 'nft/css/sprinkles.css'\nimport { ActivityFetcher } from 'nft/queries/genie/ActivityFetcher'\nimport { ActivityEventResponse, ActivityEventType, CollectionInfoForAsset, GenieAsset } from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { formatEth, formatEthPrice } from 'nft/utils/currency'\nimport { isAudio } from 'nft/utils/isAudio'\nimport { isVideo } from 'nft/utils/isVideo'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { useCallback, useMemo, useReducer, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery, useQuery } from 'react-query'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\n\nimport AssetActivity, { LoadingAssetActivity } from './AssetActivity'\nimport * as styles from './AssetDetails.css'\nimport DetailsContainer from './DetailsContainer'\nimport InfoContainer from './InfoContainer'\nimport TraitsContainer from './TraitsContainer'\n\nconst AssetPriceDetailsContainer = styled.div`\n  margin-top: 20px;\n  display: none;\n  @media (max-width: 960px) {\n    display: block;\n  }\n`\n\nconst MediaContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 780px;\n`\n\nconst AddressTextLink = styled.a`\n  display: inline-block;\n  color: ${({ theme }) => theme.textSecondary};\n  text-decoration: none;\n  max-width: 100%;\n  word-wrap: break-word;\n  ${OpacityHoverState};\n`\n\nconst SocialsContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-top: 20px;\n`\n\nconst DescriptionText = styled.div`\n  margin-top: 8px;\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst RarityWrap = styled.span`\n  display: flex;\n  color: ${({ theme }) => theme.textSecondary};\n  padding: 2px 4px;\n  border-radius: 4px;\n  align-items: center;\n  gap: 4px;\n`\n\nconst EmptyActivitiesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 28px;\n  line-height: 36px;\n  padding: 56px 0px;\n`\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.accentAction};\n  text-decoration: none;\n  font-size: 14px;\n  line-height: 16px;\n  margin-top: 12px;\n  cursor: pointer;\n  ${OpacityHoverState};\n`\n\nconst ActivitySelectContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-bottom: 34px;\n  overflow-x: auto;\n  ${ScrollBarStyles}\n\n  @media (max-width: 720px) {\n    padding-bottom: 8px;\n  }\n`\n\nconst ContentNotAvailable = styled.div`\n  display: flex;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  line-height: 20px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 12px;\n  width: 450px;\n  height: 450px;\n`\n\nconst FilterBox = styled.div<{ backgroundColor: string }>`\n  box-sizing: border-box;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 14px;\n  color: ${({ theme }) => theme.textPrimary};\n  padding: 8px 16px;\n  border-radius: 12px;\n  cursor: pointer;\n  box-sizing: border-box;\n  ${OpacityHoverState};\n`\n\nconst ByText = styled.span`\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst Img = styled.img`\n  background-color: white;\n`\n\nconst HoverImageContainer = styled.div`\n  display: flex;\n  margin-right: 4px;\n`\n\nconst HoverContainer = styled.div`\n  display: flex;\n`\n\nconst ContainerText = styled.span`\n  font-size: 14px;\n`\n\nconst AudioPlayer = ({\n  imageUrl,\n  animationUrl,\n  name,\n  collectionName,\n  dominantColor,\n}: GenieAsset & { dominantColor: [number, number, number] }) => {\n  return (\n    <Box position=\"relative\" display=\"inline-block\" alignSelf=\"center\">\n      <Box as=\"audio\" className={styles.audioControls} width=\"292\" controls src={animationUrl} />\n      <img\n        className={styles.image}\n        src={imageUrl}\n        alt={name || collectionName}\n        style={{\n          ['--shadow' as string]: `rgba(${dominantColor.join(', ')}, 0.5)`,\n          minWidth: '300px',\n          minHeight: '300px',\n        }}\n      />\n    </Box>\n  )\n}\n\nconst initialFilterState = {\n  [ActivityEventType.Listing]: true,\n  [ActivityEventType.Sale]: true,\n  [ActivityEventType.Transfer]: false,\n  [ActivityEventType.CancelListing]: false,\n}\n\nenum MediaType {\n  Audio = 'audio',\n  Video = 'video',\n  Image = 'image',\n  Embed = 'embed',\n}\n\nconst AssetView = ({\n  mediaType,\n  asset,\n  dominantColor,\n}: {\n  mediaType: MediaType\n  asset: GenieAsset\n  dominantColor: [number, number, number]\n}) => {\n  const style = { ['--shadow' as string]: `rgba(${dominantColor.join(', ')}, 0.5)` }\n\n  switch (mediaType) {\n    case MediaType.Video:\n      return <video src={asset.animationUrl} className={styles.image} autoPlay controls muted loop style={style} />\n    case MediaType.Image:\n      return (\n        <img className={styles.image} src={asset.imageUrl} alt={asset.name || asset.collectionName} style={style} />\n      )\n    case MediaType.Audio:\n      return <AudioPlayer {...asset} dominantColor={dominantColor} />\n    case MediaType.Embed:\n      return (\n        <div className={styles.embedContainer}>\n          <iframe\n            title={asset.name ?? `${asset.collectionName} #${asset.tokenId}`}\n            src={asset.animationUrl}\n            className={styles.embed}\n            style={style}\n            frameBorder={0}\n            height=\"100%\"\n            width=\"100%\"\n            sandbox=\"allow-scripts\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n      )\n  }\n}\n\ninterface AssetDetailsProps {\n  asset: GenieAsset\n  collection: CollectionInfoForAsset\n}\n\nexport const AssetDetails = ({ asset, collection }: AssetDetailsProps) => {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const [dominantColor] = useState<[number, number, number]>([0, 0, 0])\n\n  const { rarityProvider } = useMemo(\n    () =>\n      asset.rarity\n        ? {\n            rarityProvider: asset?.rarity?.providers?.find(\n              ({ provider: _provider }) => _provider === asset.rarity?.primaryProvider\n            ),\n          }\n        : {},\n    [asset.rarity]\n  )\n\n  const assetMediaType = useMemo(() => {\n    if (isAudio(asset.animationUrl ?? '')) {\n      return MediaType.Audio\n    } else if (isVideo(asset.animationUrl ?? '')) {\n      return MediaType.Video\n    } else if (asset.animationUrl) {\n      return MediaType.Embed\n    }\n    return MediaType.Image\n  }, [asset])\n\n  const { address: contractAddress, tokenId: token_id } = asset\n\n  const { data: priceData } = useQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          token_id,\n          eventTypes: [ActivityEventType.Sale],\n        },\n        pageParam,\n        '1'\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n  const { nftActivity: gqlPriceData } = useNftActivity(\n    {\n      activityTypes: [NftActivityType.Sale],\n      address: contractAddress,\n      tokenId: token_id,\n    },\n    1,\n    'no-cache'\n  )\n\n  let formattedPrice\n  if (isNftGraphqlEnabled) {\n    const weiPrice = gqlPriceData?.[0]?.price\n    formattedPrice = weiPrice ? formatEth(parseFloat(weiPrice)) : undefined\n  } else {\n    const ethPrice = priceData?.events[0]?.price\n    formattedPrice = ethPrice ? putCommas(formatEthPrice(priceData?.events[0]?.price)).toString() : undefined\n  }\n\n  const [activeFilters, filtersDispatch] = useReducer(reduceFilters, initialFilterState)\n  const Filter = useCallback(\n    function ActivityFilter({ eventType }: { eventType: ActivityEventType }) {\n      const isActive = activeFilters[eventType]\n      const isDarkMode = useIsDarkMode()\n\n      return (\n        <FilterBox\n          backgroundColor={\n            isActive ? (isDarkMode ? vars.color.gray500 : vars.color.gray200) : themeVars.colors.backgroundInteractive\n          }\n          onClick={() => filtersDispatch({ eventType })}\n        >\n          {eventType === ActivityEventType.CancelListing\n            ? 'Cancellations'\n            : eventType.charAt(0) + eventType.slice(1).toLowerCase() + 's'}\n        </FilterBox>\n      )\n    },\n    [activeFilters]\n  )\n\n  const {\n    data: eventsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n    isLoading: isActivityLoading,\n  } = useInfiniteQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n        activeFilters,\n        token_id,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          token_id,\n          eventTypes: Object.keys(activeFilters)\n            .map((key) => key as ActivityEventType)\n            .filter((key) => activeFilters[key]),\n        },\n        pageParam\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const {\n    nftActivity: gqlEventsData,\n    hasNext,\n    loadMore,\n    loading,\n    error,\n  } = useNftActivity(\n    {\n      activityTypes: Object.keys(activeFilters)\n        .map((key) => key as NftActivityType)\n        .filter((key) => activeFilters[key]),\n      address: contractAddress,\n      tokenId: token_id,\n    },\n    25\n  )\n\n  const { events, gatedHasNext, gatedLoadMore, gatedLoading, gatedSuccess } = useMemo(() => {\n    return {\n      events: isNftGraphqlEnabled ? gqlEventsData : eventsData?.pages.map((page) => page.events).flat(),\n      gatedHasNext: isNftGraphqlEnabled ? hasNext : hasNextPage,\n      gatedLoadMore: isNftGraphqlEnabled ? loadMore : fetchNextPage,\n      gatedLoading: isNftGraphqlEnabled ? loading : isActivityLoading,\n      gatedSuccess: isNftGraphqlEnabled ? !error : isSuccess,\n    }\n  }, [\n    error,\n    eventsData?.pages,\n    fetchNextPage,\n    gqlEventsData,\n    hasNext,\n    hasNextPage,\n    isActivityLoading,\n    isNftGraphqlEnabled,\n    isSuccess,\n    loadMore,\n    loading,\n  ])\n\n  const rarity = asset?.rarity?.providers?.[0]\n  const [showHolder, setShowHolder] = useState(false)\n\n  return (\n    <Column>\n      <MediaContainer>\n        {asset.imageUrl === undefined || showHolder ? (\n          <ContentNotAvailable>Content not available yet</ContentNotAvailable>\n        ) : assetMediaType === MediaType.Image ? (\n          <Img\n            className={styles.image}\n            src={asset.imageUrl}\n            alt={asset.name || collection.collectionName}\n            onError={() => setShowHolder(true)}\n          />\n        ) : (\n          <AssetView asset={asset} mediaType={assetMediaType} dominantColor={dominantColor} />\n        )}\n      </MediaContainer>\n      <AssetPriceDetailsContainer>\n        <AssetPriceDetails asset={asset} collection={collection} />\n      </AssetPriceDetailsContainer>\n      {asset.traits && (\n        <InfoContainer\n          data-testid=\"nft-details-traits\"\n          primaryHeader=\"Traits\"\n          defaultOpen\n          secondaryHeader={\n            rarityProvider && rarity && rarity.score ? (\n              <MouseoverTooltip\n                text={\n                  <HoverContainer>\n                    <HoverImageContainer>\n                      <img src=\"/nft/svgs/gem.svg\" alt=\"cardLogo\" width={16} />\n                    </HoverImageContainer>\n                    <ContainerText>Ranking by Rarity Sniper</ContainerText>\n                  </HoverContainer>\n                }\n                placement=\"top\"\n              >\n                <RarityWrap>Rarity: {putCommas(rarity.score)}</RarityWrap>\n              </MouseoverTooltip>\n            ) : null\n          }\n        >\n          <TraitsContainer asset={asset} />\n        </InfoContainer>\n      )}\n      <InfoContainer\n        primaryHeader=\"Activity\"\n        defaultOpen\n        secondaryHeader={formattedPrice ? `Last Sale: ${formattedPrice} ETH` : undefined}\n        data-testid=\"nft-details-activity\"\n      >\n        <>\n          <ActivitySelectContainer $isHorizontalScroll>\n            <Filter eventType={ActivityEventType.Listing} />\n            <Filter eventType={ActivityEventType.Sale} />\n            <Filter eventType={ActivityEventType.Transfer} />\n            <Filter eventType={ActivityEventType.CancelListing} />\n          </ActivitySelectContainer>\n          {gatedLoading ? (\n            <LoadingAssetActivity rowCount={10} />\n          ) : events && events.length > 0 ? (\n            <InfiniteScroll\n              next={gatedLoadMore}\n              hasMore={!!gatedHasNext}\n              loader={\n                isFetchingNextPage && (\n                  <Center>\n                    <LoadingSparkle />\n                  </Center>\n                )\n              }\n              dataLength={events?.length ?? 0}\n              scrollableTarget=\"activityContainer\"\n            >\n              <AssetActivity events={events} />\n            </InfiniteScroll>\n          ) : (\n            <>\n              {gatedSuccess && events && (\n                <EmptyActivitiesContainer>\n                  <div>No activities yet</div>\n                  <Link to={`/nfts/collection/${asset.address}`}>View collection items</Link>{' '}\n                </EmptyActivitiesContainer>\n              )}\n            </>\n          )}\n        </>\n      </InfoContainer>\n      <InfoContainer\n        primaryHeader=\"Description\"\n        defaultOpen\n        secondaryHeader={null}\n        data-testid=\"nft-details-description\"\n      >\n        <>\n          <ByText>By </ByText>\n          {asset?.creator && asset.creator?.address && (\n            <AddressTextLink\n              href={`https://etherscan.io/address/${asset.creator.address}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {shortenAddress(asset.creator.address, 2, 4)}\n            </AddressTextLink>\n          )}\n\n          <DescriptionText data-testid=\"nft-details-description-text\">\n            {collection.collectionDescription}\n          </DescriptionText>\n          <SocialsContainer>\n            {collection.externalUrl && <Resource name=\"Website\" link={`${collection.externalUrl}`} />}\n            {collection.twitterUrl && <Resource name=\"Twitter\" link={`https://twitter.com/${collection.twitterUrl}`} />}\n            {collection.discordUrl && <Resource name=\"Discord\" link={collection.discordUrl} />}\n          </SocialsContainer>\n        </>\n      </InfoContainer>\n      <InfoContainer primaryHeader=\"Details\" defaultOpen secondaryHeader={null} data-testid=\"nft-details-asset-details\">\n        <DetailsContainer asset={asset} collection={collection} />\n      </InfoContainer>\n    </Column>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/details/AssetDetailsLoading.tsx",[],"/workspace/Physica-Interfae/src/pages/Vote/styled.tsx",[],"/workspace/Physica-Interfae/src/utils/chains.tsx",[],"/workspace/Physica-Interfae/src/state/governance/types.ts",[],"/workspace/Physica-Interfae/src/state/governance/hooks.ts",["3862","3863","3864","3865","3866","3867","3868","3869"],"import { defaultAbiCoder, Interface } from '@ethersproject/abi'\nimport { isAddress } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { toUtf8String, Utf8ErrorFuncs, Utf8ErrorReason } from '@ethersproject/strings'\n// eslint-disable-next-line no-restricted-imports\nimport { t } from '@lingui/macro'\nimport { abi as GOVERNANCE_ABI } from '@uniswap/governance/build/GovernorAlpha.json'\nimport { abi as UNI_ABI } from '@uniswap/governance/build/Uni.json'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport GOVERNOR_BRAVO_ABI from 'abis/governor-bravo.json'\nimport {\n  GOVERNANCE_ALPHA_V0_ADDRESSES,\n  GOVERNANCE_ALPHA_V1_ADDRESSES,\n  GOVERNANCE_BRAVO_ADDRESSES,\n} from 'constants/addresses'\nimport { SupportedChainId } from 'constants/chains'\nimport { LATEST_GOVERNOR_INDEX } from 'constants/governance'\nimport { POLYGON_PROPOSAL_TITLE } from 'constants/proposals/polygon_proposal_title'\nimport { UNISWAP_GRANTS_PROPOSAL_DESCRIPTION } from 'constants/proposals/uniswap_grants_proposal_description'\nimport { useContract } from 'hooks/useContract'\nimport { useSingleCallResult, useSingleContractMultipleData } from 'lib/hooks/multicall'\nimport { useCallback, useMemo } from 'react'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\n\nimport {\n  BRAVO_START_BLOCK,\n  MOONBEAN_START_BLOCK,\n  ONE_BIP_START_BLOCK,\n  POLYGON_START_BLOCK,\n  UNISWAP_GRANTS_START_BLOCK,\n} from '../../constants/proposals'\nimport { UNI } from '../../constants/tokens'\nimport { useLogs } from '../logs/hooks'\nimport { useTransactionAdder } from '../transactions/hooks'\nimport { TransactionType } from '../transactions/types'\nimport { VoteOption } from './types'\n\nfunction useGovernanceV0Contract(): Contract | null {\n  return useContract(GOVERNANCE_ALPHA_V0_ADDRESSES, GOVERNANCE_ABI, false)\n}\n\nfunction useGovernanceV1Contract(): Contract | null {\n  return useContract(GOVERNANCE_ALPHA_V1_ADDRESSES, GOVERNANCE_ABI, false)\n}\n\nfunction useGovernanceBravoContract(): Contract | null {\n  return useContract(GOVERNANCE_BRAVO_ADDRESSES, GOVERNOR_BRAVO_ABI, true)\n}\n\nconst useLatestGovernanceContract = useGovernanceBravoContract\n\nfunction useUniContract() {\n  const { chainId } = useWeb3React()\n  const uniAddress = useMemo(() => (chainId ? UNI[chainId]?.address : undefined), [chainId])\n  return useContract(uniAddress, UNI_ABI, true)\n}\n\ninterface ProposalDetail {\n  target: string\n  functionSig: string\n  callData: string\n}\n\nexport interface ProposalData {\n  id: string\n  title: string\n  description: string\n  proposer: string\n  status: ProposalState\n  forCount: CurrencyAmount<Token>\n  againstCount: CurrencyAmount<Token>\n  startBlock: number\n  endBlock: number\n  eta: BigNumber\n  details: ProposalDetail[]\n  governorIndex: number // index in the governance address array for which this proposal pertains\n}\n\nexport interface CreateProposalData {\n  targets: string[]\n  values: string[]\n  signatures: string[]\n  calldatas: string[]\n  description: string\n}\n\nexport enum ProposalState {\n  UNDETERMINED = -1,\n  PENDING,\n  ACTIVE,\n  CANCELED,\n  DEFEATED,\n  SUCCEEDED,\n  QUEUED,\n  EXPIRED,\n  EXECUTED,\n}\n\nconst GovernanceInterface = new Interface(GOVERNANCE_ABI)\n\n// get count of all proposals made in the latest governor contract\nfunction useProposalCount(contract: Contract | null): number | undefined {\n  const { result } = useSingleCallResult(contract, 'proposalCount')\n\n  return result?.[0]?.toNumber()\n}\n\ninterface FormattedProposalLog {\n  description: string\n  details: { target: string; functionSig: string; callData: string }[]\n}\n\nconst FOUR_BYTES_DIR: { [sig: string]: string } = {\n  '0x5ef2c7f0': 'setSubnodeRecord(bytes32,bytes32,address,address,uint64)',\n  '0x10f13a8c': 'setText(bytes32,string,string)',\n  '0xb4720477': 'sendMessageToChild(address,bytes)',\n  '0xa9059cbb': 'transfer(address,uint256)',\n  '0x095ea7b3': 'approve(address,uint256)',\n  '0x7b1837de': 'fund(address,uint256)',\n}\n\n/**\n * Need proposal events to get description data emitted from\n * new proposal event.\n */\nfunction useFormattedProposalCreatedLogs(\n  contract: Contract | null,\n  indices: number[][],\n  fromBlock?: number,\n  toBlock?: number\n): FormattedProposalLog[] | undefined {\n  // create filters for ProposalCreated events\n  const filter = useMemo(() => {\n    const filter = contract?.filters?.ProposalCreated()\n    if (!filter) return undefined\n    return {\n      ...filter,\n      fromBlock,\n      toBlock,\n    }\n  }, [contract, fromBlock, toBlock])\n\n  const useLogsResult = useLogs(filter)\n\n  return useMemo(() => {\n    return useLogsResult?.logs\n      ?.map((log) => {\n        const parsed = GovernanceInterface.parseLog(log).args\n        return parsed\n      })\n      ?.filter((parsed) => indices.flat().some((i) => i === parsed.id.toNumber()))\n      ?.map((parsed) => {\n        let description!: string\n\n        const startBlock = parseInt(parsed.startBlock?.toString())\n        try {\n          description = parsed.description\n        } catch (error) {\n          // replace invalid UTF-8 in the description with replacement characters\n          let onError = Utf8ErrorFuncs.replace\n\n          // Bravo proposal reverses the codepoints for U+2018 (‘) and U+2026 (…)\n          if (startBlock === BRAVO_START_BLOCK) {\n            const U2018 = [0xe2, 0x80, 0x98].toString()\n            const U2026 = [0xe2, 0x80, 0xa6].toString()\n            onError = (reason, offset, bytes, output) => {\n              if (reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n                const charCode = [bytes[offset], bytes[offset + 1], bytes[offset + 2]].reverse().toString()\n                if (charCode === U2018) {\n                  output.push(0x2018)\n                  return 2\n                } else if (charCode === U2026) {\n                  output.push(0x2026)\n                  return 2\n                }\n              }\n              return Utf8ErrorFuncs.replace(reason, offset, bytes, output)\n            }\n          }\n\n          description = JSON.parse(toUtf8String(error.error.value, onError)) || ''\n        }\n\n        // some proposals omit newlines\n        if (\n          startBlock === BRAVO_START_BLOCK ||\n          startBlock === ONE_BIP_START_BLOCK ||\n          startBlock === MOONBEAN_START_BLOCK\n        ) {\n          description = description.replace(/ {2}/g, '\\n').replace(/\\d\\. /g, '\\n$&')\n        }\n\n        return {\n          description,\n          details: parsed.targets.map((target: string, i: number) => {\n            const signature = parsed.signatures[i]\n            let calldata = parsed.calldatas[i]\n            let name: string\n            let types: string\n            if (signature === '') {\n              const fourbyte = calldata.slice(0, 10)\n              const sig = FOUR_BYTES_DIR[fourbyte] ?? 'UNKNOWN()'\n              if (!sig) throw new Error('Missing four byte sig')\n              ;[name, types] = sig.substring(0, sig.length - 1).split('(')\n              calldata = `0x${calldata.slice(10)}`\n            } else {\n              ;[name, types] = signature.substring(0, signature.length - 1).split('(')\n            }\n            const decoded = defaultAbiCoder.decode(types.split(','), calldata)\n            return {\n              target,\n              functionSig: name,\n              callData: decoded.join(', '),\n            }\n          }),\n        }\n      })\n  }, [indices, useLogsResult])\n}\n\nconst V0_PROPOSAL_IDS = [[1], [2], [3], [4]]\nconst V1_PROPOSAL_IDS = [[1], [2], [3]]\n\nfunction countToIndices(count: number | undefined, skip = 0) {\n  return typeof count === 'number' ? new Array(count - skip).fill(0).map((_, i) => [i + 1 + skip]) : []\n}\n\n// get data for all past and active proposals\nexport function useAllProposalData(): { data: ProposalData[]; loading: boolean } {\n  const { chainId } = useWeb3React()\n  const gov0 = useGovernanceV0Contract()\n  const gov1 = useGovernanceV1Contract()\n  const gov2 = useGovernanceBravoContract()\n\n  const proposalCount0 = useProposalCount(gov0)\n  const proposalCount1 = useProposalCount(gov1)\n  const proposalCount2 = useProposalCount(gov2)\n\n  const gov0ProposalIndexes = useMemo(() => {\n    return chainId === SupportedChainId.MAINNET ? V0_PROPOSAL_IDS : countToIndices(proposalCount0)\n  }, [chainId, proposalCount0])\n  const gov1ProposalIndexes = useMemo(() => {\n    return chainId === SupportedChainId.MAINNET ? V1_PROPOSAL_IDS : countToIndices(proposalCount1)\n  }, [chainId, proposalCount1])\n  const gov2ProposalIndexes = useMemo(() => {\n    return countToIndices(proposalCount2, 8)\n  }, [proposalCount2])\n\n  const proposalsV0 = useSingleContractMultipleData(gov0, 'proposals', gov0ProposalIndexes)\n  const proposalsV1 = useSingleContractMultipleData(gov1, 'proposals', gov1ProposalIndexes)\n  const proposalsV2 = useSingleContractMultipleData(gov2, 'proposals', gov2ProposalIndexes)\n\n  // get all proposal states\n  const proposalStatesV0 = useSingleContractMultipleData(gov0, 'state', gov0ProposalIndexes)\n  const proposalStatesV1 = useSingleContractMultipleData(gov1, 'state', gov1ProposalIndexes)\n  const proposalStatesV2 = useSingleContractMultipleData(gov2, 'state', gov2ProposalIndexes)\n\n  // get metadata from past events\n  const formattedLogsV0 = useFormattedProposalCreatedLogs(gov0, gov0ProposalIndexes, 11042287, 12563484)\n  const formattedLogsV1 = useFormattedProposalCreatedLogs(gov1, gov1ProposalIndexes, 12686656, 13059343)\n  const formattedLogsV2 = useFormattedProposalCreatedLogs(gov2, gov2ProposalIndexes, 13538153)\n\n  const uni = useMemo(() => (chainId ? UNI[chainId] : undefined), [chainId])\n\n  // early return until events are fetched\n  return useMemo(() => {\n    const proposalsCallData = [...proposalsV0, ...proposalsV1, ...proposalsV2]\n    const proposalStatesCallData = [...proposalStatesV0, ...proposalStatesV1, ...proposalStatesV2]\n    const formattedLogs = [...(formattedLogsV0 ?? []), ...(formattedLogsV1 ?? []), ...(formattedLogsV2 ?? [])]\n\n    if (\n      !uni ||\n      proposalsCallData.some((p) => p.loading) ||\n      proposalStatesCallData.some((p) => p.loading) ||\n      (gov0 && !formattedLogsV0) ||\n      (gov1 && !formattedLogsV1) ||\n      (gov2 && !formattedLogsV2)\n    ) {\n      return { data: [], loading: true }\n    }\n\n    return {\n      data: proposalsCallData.map((proposal, i) => {\n        const startBlock = parseInt(proposal?.result?.startBlock?.toString())\n\n        let description = formattedLogs[i]?.description ?? ''\n        if (startBlock === UNISWAP_GRANTS_START_BLOCK) {\n          description = UNISWAP_GRANTS_PROPOSAL_DESCRIPTION\n        }\n\n        let title = description?.split(/#+\\s|\\n/g)[1]\n        if (startBlock === POLYGON_START_BLOCK) {\n          title = POLYGON_PROPOSAL_TITLE\n        }\n\n        return {\n          id: proposal?.result?.id.toString(),\n          title: title ?? t`Untitled`,\n          description: description ?? t`No description.`,\n          proposer: proposal?.result?.proposer,\n          status: proposalStatesCallData[i]?.result?.[0] ?? ProposalState.UNDETERMINED,\n          forCount: CurrencyAmount.fromRawAmount(uni, proposal?.result?.forVotes),\n          againstCount: CurrencyAmount.fromRawAmount(uni, proposal?.result?.againstVotes),\n          startBlock,\n          endBlock: parseInt(proposal?.result?.endBlock?.toString()),\n          eta: proposal?.result?.eta,\n          details: formattedLogs[i]?.details,\n          governorIndex: i >= proposalsV0.length + proposalsV1.length ? 2 : i >= proposalsV0.length ? 1 : 0,\n        }\n      }),\n      loading: false,\n    }\n  }, [\n    formattedLogsV0,\n    formattedLogsV1,\n    formattedLogsV2,\n    gov0,\n    gov1,\n    gov2,\n    proposalStatesV0,\n    proposalStatesV1,\n    proposalStatesV2,\n    proposalsV0,\n    proposalsV1,\n    proposalsV2,\n    uni,\n  ])\n}\n\nexport function useProposalData(governorIndex: number, id: string): ProposalData | undefined {\n  const { data } = useAllProposalData()\n  return data.filter((p) => p.governorIndex === governorIndex)?.find((p) => p.id === id)\n}\n\nexport function useQuorum(governorIndex: number): CurrencyAmount<Token> | undefined {\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const quorumVotes = useSingleCallResult(latestGovernanceContract, 'quorumVotes')?.result?.[0]\n  const { chainId } = useWeb3React()\n  const uni = useMemo(() => (chainId ? UNI[chainId] : undefined), [chainId])\n\n  if (\n    !latestGovernanceContract ||\n    !quorumVotes ||\n    chainId !== SupportedChainId.MAINNET ||\n    !uni ||\n    governorIndex !== LATEST_GOVERNOR_INDEX\n  )\n    return undefined\n\n  return CurrencyAmount.fromRawAmount(uni, quorumVotes)\n}\n\n// get the users delegatee if it exists\nexport function useUserDelegatee(): string {\n  const { account } = useWeb3React()\n  const uniContract = useUniContract()\n  const { result } = useSingleCallResult(uniContract, 'delegates', [account ?? undefined])\n  return result?.[0] ?? undefined\n}\n\n// gets the users current votes\nexport function useUserVotes(): { loading: boolean; votes: CurrencyAmount<Token> | undefined } {\n  const { account, chainId } = useWeb3React()\n  const uniContract = useUniContract()\n\n  // check for available votes\n  const { result, loading } = useSingleCallResult(uniContract, 'getCurrentVotes', [account ?? undefined])\n  return useMemo(() => {\n    const uni = chainId ? UNI[chainId] : undefined\n    return { loading, votes: uni && result ? CurrencyAmount.fromRawAmount(uni, result?.[0]) : undefined }\n  }, [chainId, loading, result])\n}\n\n// fetch available votes as of block (usually proposal start block)\nexport function useUserVotesAsOfBlock(block: number | undefined): CurrencyAmount<Token> | undefined {\n  const { account, chainId } = useWeb3React()\n  const uniContract = useUniContract()\n\n  // check for available votes\n  const uni = useMemo(() => (chainId ? UNI[chainId] : undefined), [chainId])\n  const votes = useSingleCallResult(uniContract, 'getPriorVotes', [account ?? undefined, block ?? undefined])\n    ?.result?.[0]\n  return votes && uni ? CurrencyAmount.fromRawAmount(uni, votes) : undefined\n}\n\nexport function useDelegateCallback(): (delegatee: string | undefined) => undefined | Promise<string> {\n  const { account, chainId, provider } = useWeb3React()\n  const addTransaction = useTransactionAdder()\n\n  const uniContract = useUniContract()\n\n  return useCallback(\n    (delegatee: string | undefined) => {\n      if (!provider || !chainId || !account || !delegatee || !isAddress(delegatee ?? '')) return undefined\n      const args = [delegatee]\n      if (!uniContract) throw new Error('No UNI Contract!')\n      return uniContract.estimateGas.delegate(...args, {}).then((estimatedGasLimit) => {\n        return uniContract\n          .delegate(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              type: TransactionType.DELEGATE,\n              delegatee,\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, chainId, provider, uniContract]\n  )\n}\n\nexport function useVoteCallback(): (\n  proposalId: string | undefined,\n  voteOption: VoteOption\n) => undefined | Promise<string> {\n  const { account, chainId } = useWeb3React()\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const addTransaction = useTransactionAdder()\n\n  return useCallback(\n    (proposalId: string | undefined, voteOption: VoteOption) => {\n      if (!account || !latestGovernanceContract || !proposalId || !chainId) return\n      const args = [proposalId, voteOption === VoteOption.Against ? 0 : voteOption === VoteOption.For ? 1 : 2]\n      return latestGovernanceContract.estimateGas.castVote(...args, {}).then((estimatedGasLimit) => {\n        return latestGovernanceContract\n          .castVote(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              type: TransactionType.VOTE,\n              decision: voteOption,\n              governorAddress: latestGovernanceContract.address,\n              proposalId: parseInt(proposalId),\n              reason: '',\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, latestGovernanceContract, chainId]\n  )\n}\n\nexport function useQueueCallback(): (proposalId: string | undefined) => undefined | Promise<string> {\n  const { account, chainId } = useWeb3React()\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const addTransaction = useTransactionAdder()\n\n  return useCallback(\n    (proposalId: string | undefined) => {\n      if (!account || !latestGovernanceContract || !proposalId || !chainId) return\n      const args = [proposalId]\n      return latestGovernanceContract.estimateGas.queue(...args, {}).then((estimatedGasLimit) => {\n        return latestGovernanceContract\n          .queue(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              type: TransactionType.QUEUE,\n              governorAddress: latestGovernanceContract.address,\n              proposalId: parseInt(proposalId),\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, latestGovernanceContract, chainId]\n  )\n}\n\nexport function useExecuteCallback(): (proposalId: string | undefined) => undefined | Promise<string> {\n  const { account, chainId } = useWeb3React()\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const addTransaction = useTransactionAdder()\n\n  return useCallback(\n    (proposalId: string | undefined) => {\n      if (!account || !latestGovernanceContract || !proposalId || !chainId) return\n      const args = [proposalId]\n      return latestGovernanceContract.estimateGas.execute(...args, {}).then((estimatedGasLimit) => {\n        return latestGovernanceContract\n          .execute(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              type: TransactionType.EXECUTE,\n              governorAddress: latestGovernanceContract.address,\n              proposalId: parseInt(proposalId),\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, latestGovernanceContract, chainId]\n  )\n}\n\nexport function useCreateProposalCallback(): (\n  createProposalData: CreateProposalData | undefined\n) => undefined | Promise<string> {\n  const { account, chainId } = useWeb3React()\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const addTransaction = useTransactionAdder()\n\n  return useCallback(\n    (createProposalData: CreateProposalData | undefined) => {\n      if (!account || !latestGovernanceContract || !createProposalData || !chainId) return undefined\n\n      const args = [\n        createProposalData.targets,\n        createProposalData.values,\n        createProposalData.signatures,\n        createProposalData.calldatas,\n        createProposalData.description,\n      ]\n\n      return latestGovernanceContract.estimateGas.propose(...args).then((estimatedGasLimit) => {\n        return latestGovernanceContract\n          .propose(...args, { gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              type: TransactionType.SUBMIT_PROPOSAL,\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, latestGovernanceContract, chainId]\n  )\n}\n\nexport function useLatestProposalId(address: string | undefined): string | undefined {\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const res = useSingleCallResult(latestGovernanceContract, 'latestProposalIds', [address])\n  return res?.result?.[0]?.toString()\n}\n\nexport function useProposalThreshold(): CurrencyAmount<Token> | undefined {\n  const { chainId } = useWeb3React()\n\n  const latestGovernanceContract = useLatestGovernanceContract()\n  const res = useSingleCallResult(latestGovernanceContract, 'proposalThreshold')\n  const uni = useMemo(() => (chainId ? UNI[chainId] : undefined), [chainId])\n\n  if (res?.result?.[0] && uni) {\n    return CurrencyAmount.fromRawAmount(uni, res.result[0])\n  }\n\n  return undefined\n}\n","/workspace/Physica-Interfae/src/constants/governance.ts",[],"/workspace/Physica-Interfae/src/components/About/ProtocolBanner.tsx",[],"/workspace/Physica-Interfae/src/components/About/constants.tsx",[],"/workspace/Physica-Interfae/src/components/About/Card.tsx",[],"/workspace/Physica-Interfae/src/components/About/AboutFooter.tsx",[],"/workspace/Physica-Interfae/src/components/vote/DelegateModal.tsx",[],"/workspace/Physica-Interfae/src/components/vote/VoteModal.tsx",[],"/workspace/Physica-Interfae/src/lib/hooks/useApproval.ts",["3870","3871","3872"],"import { MaxUint256 } from '@ethersproject/constants'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTokenContract } from 'hooks/useContract'\nimport { useTokenAllowance } from 'hooks/useTokenAllowance'\nimport { getTokenAddress } from 'lib/utils/analytics'\nimport { useCallback, useMemo } from 'react'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\n\nexport enum ApprovalState {\n  UNKNOWN = 'UNKNOWN',\n  NOT_APPROVED = 'NOT_APPROVED',\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n}\n\nfunction useApprovalStateForSpender(\n  amountToApprove: CurrencyAmount<Currency> | undefined,\n  spender: string | undefined,\n  useIsPendingApproval: (token?: Token, spender?: string) => boolean\n): ApprovalState {\n  const { account } = useWeb3React()\n  const token = amountToApprove?.currency?.isToken ? amountToApprove.currency : undefined\n\n  const { tokenAllowance } = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useIsPendingApproval(token, spender)\n\n  return useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency.isNative) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!tokenAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if tokenAllowance is\n    return tokenAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, pendingApproval, spender, tokenAllowance])\n}\n\nexport function useApproval(\n  amountToApprove: CurrencyAmount<Currency> | undefined,\n  spender: string | undefined,\n  useIsPendingApproval: (token?: Token, spender?: string) => boolean\n): [\n  ApprovalState,\n  () => Promise<{ response: TransactionResponse; tokenAddress: string; spenderAddress: string } | undefined>\n] {\n  const { chainId } = useWeb3React()\n  const token = amountToApprove?.currency?.isToken ? amountToApprove.currency : undefined\n\n  // check the current approval status\n  const approvalState = useApprovalStateForSpender(amountToApprove, spender, useIsPendingApproval)\n\n  const tokenContract = useTokenContract(token?.address)\n\n  const approve = useCallback(async () => {\n    function logFailure(error: Error | string): undefined {\n      console.warn(`${token?.symbol || 'Token'} approval failed:`, error)\n      return\n    }\n\n    // Bail early if there is an issue.\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      return logFailure('approve was called unnecessarily')\n    } else if (!chainId) {\n      return logFailure('no chainId')\n    } else if (!token) {\n      return logFailure('no token')\n    } else if (!tokenContract) {\n      return logFailure('tokenContract is null')\n    } else if (!amountToApprove) {\n      return logFailure('missing amount to approve')\n    } else if (!spender) {\n      return logFailure('no spender')\n    }\n\n    let useExact = false\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens which restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.quotient.toString())\n    })\n\n    return tokenContract\n      .approve(spender, useExact ? amountToApprove.quotient.toString() : MaxUint256, {\n        gasLimit: calculateGasMargin(estimatedGas),\n      })\n      .then((response) => {\n        const eventProperties = {\n          chain_id: chainId,\n          token_symbol: token?.symbol,\n          token_address: getTokenAddress(token),\n        }\n        sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, eventProperties)\n        return {\n          response,\n          tokenAddress: token.address,\n          spenderAddress: spender,\n        }\n      })\n      .catch((error: Error) => {\n        logFailure(error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, chainId])\n\n  return [approvalState, approve]\n}\n","/workspace/Physica-Interfae/src/hooks/useIsArgentWallet.ts",[],"/workspace/Physica-Interfae/src/components/SwitchLocaleLink/index.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/index.tsx",["3873","3874","3875","3876","3877","3878","3879","3880","3881","3882"],"import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { Currency, Field } from '@uniswap/widgets'\nimport { useWeb3React } from '@web3-react/core'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { AboutSection } from 'components/Tokens/TokenDetails/About'\nimport AddressSection from 'components/Tokens/TokenDetails/AddressSection'\nimport BalanceSummary from 'components/Tokens/TokenDetails/BalanceSummary'\nimport { BreadcrumbNavLink } from 'components/Tokens/TokenDetails/BreadcrumbNavLink'\nimport ChartSection from 'components/Tokens/TokenDetails/ChartSection'\nimport MobileBalanceSummaryFooter from 'components/Tokens/TokenDetails/MobileBalanceSummaryFooter'\nimport ShareButton from 'components/Tokens/TokenDetails/ShareButton'\nimport TokenDetailsSkeleton, {\n  Hr,\n  LeftPanel,\n  RightPanel,\n  TokenDetailsLayout,\n  TokenInfoContainer,\n  TokenNameCell,\n} from 'components/Tokens/TokenDetails/Skeleton'\nimport StatsSection from 'components/Tokens/TokenDetails/StatsSection'\nimport TokenSafetyMessage from 'components/TokenSafety/TokenSafetyMessage'\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\nimport Widget from 'components/Widget'\nimport { SwapTokens } from 'components/Widget/inputs'\nimport { NATIVE_CHAIN_ID, nativeOnChain } from 'constants/tokens'\nimport { checkWarning } from 'constants/tokenSafety'\nimport { TokenPriceQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { Chain, TokenQuery, TokenQueryData } from 'graphql/data/Token'\nimport { QueryToken } from 'graphql/data/Token'\nimport { CHAIN_NAME_TO_CHAIN_ID, getTokenDetailsURL } from 'graphql/data/util'\nimport { useIsUserAddedTokenOnChain } from 'hooks/Tokens'\nimport { useOnGlobalChainSwitch } from 'hooks/useGlobalChainSwitch'\nimport { UNKNOWN_TOKEN_SYMBOL, useTokenFromActiveNetwork } from 'lib/hooks/useCurrency'\nimport { getTokenAddress } from 'lib/utils/analytics'\nimport { useCallback, useMemo, useState, useTransition } from 'react'\nimport { ArrowLeft } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { isAddress } from 'utils'\n\nimport { OnChangeTimePeriod } from './ChartSection'\nimport InvalidTokenDetails from './InvalidTokenDetails'\n\nconst TokenSymbol = styled.span`\n  text-transform: uppercase;\n  color: ${({ theme }) => theme.textSecondary};\n`\nconst TokenActions = styled.div`\n  display: flex;\n  gap: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nfunction useOnChainToken(address: string | undefined, skip: boolean) {\n  const token = useTokenFromActiveNetwork(skip || !address ? undefined : address)\n\n  if (skip || !address || (token && token?.symbol === UNKNOWN_TOKEN_SYMBOL)) {\n    return undefined\n  } else {\n    return token\n  }\n}\n\n// Selects most relevant token based on data available, preferring native > query > on-chain\n// Token will be null if still loading from on-chain, and undefined if unavailable\nfunction useRelevantToken(\n  address: string | undefined,\n  pageChainId: number,\n  tokenQueryData: TokenQueryData | undefined\n) {\n  const { chainId: activeChainId } = useWeb3React()\n  const queryToken = useMemo(() => {\n    if (!address) return undefined\n    if (address === NATIVE_CHAIN_ID) return nativeOnChain(pageChainId)\n    if (tokenQueryData) return new QueryToken(address, tokenQueryData)\n    return undefined\n  }, [pageChainId, address, tokenQueryData])\n  // fetches on-chain token if query data is missing and page chain matches global chain (else fetch won't work)\n  const skipOnChainFetch = Boolean(queryToken) || pageChainId !== activeChainId\n  const onChainToken = useOnChainToken(address, skipOnChainFetch)\n\n  return useMemo(\n    () => ({ token: queryToken ?? onChainToken, didFetchFromChain: !queryToken }),\n    [onChainToken, queryToken]\n  )\n}\n\ntype TokenDetailsProps = {\n  urlAddress: string | undefined\n  inputTokenAddress?: string\n  chain: Chain\n  tokenQuery: TokenQuery\n  tokenPriceQuery: TokenPriceQuery | undefined\n  onChangeTimePeriod: OnChangeTimePeriod\n}\nexport default function TokenDetails({\n  urlAddress,\n  inputTokenAddress,\n  chain,\n  tokenQuery,\n  tokenPriceQuery,\n  onChangeTimePeriod,\n}: TokenDetailsProps) {\n  if (!urlAddress) {\n    throw new Error('Invalid token details route: tokenAddress param is undefined')\n  }\n  const address = useMemo(\n    () => (urlAddress === NATIVE_CHAIN_ID ? urlAddress : isAddress(urlAddress) || undefined),\n    [urlAddress]\n  )\n\n  const pageChainId = CHAIN_NAME_TO_CHAIN_ID[chain]\n\n  const tokenQueryData = tokenQuery.token\n  const crossChainMap = useMemo(\n    () =>\n      tokenQueryData?.project?.tokens.reduce((map, current) => {\n        if (current) map[current.chain] = current.address\n        return map\n      }, {} as { [key: string]: string | undefined }) ?? {},\n    [tokenQueryData]\n  )\n\n  const { token: detailedToken, didFetchFromChain } = useRelevantToken(address, pageChainId, tokenQueryData)\n  const { token: inputToken } = useRelevantToken(inputTokenAddress, pageChainId, undefined)\n\n  const tokenWarning = address ? checkWarning(address) : null\n  const isBlockedToken = tokenWarning?.canProceed === false\n  const navigate = useNavigate()\n\n  // Wrapping navigate in a transition prevents Suspense from unnecessarily showing fallbacks again.\n  const [isPending, startTokenTransition] = useTransition()\n  const navigateToTokenForChain = useCallback(\n    (update: Chain) => {\n      if (!address) return\n      const bridgedAddress = crossChainMap[update]\n      if (bridgedAddress) {\n        startTokenTransition(() => navigate(getTokenDetailsURL({ address: bridgedAddress, chain: update })))\n      } else if (didFetchFromChain || detailedToken?.isNative) {\n        startTokenTransition(() => navigate(getTokenDetailsURL({ address, chain: update })))\n      }\n    },\n    [address, crossChainMap, didFetchFromChain, navigate, detailedToken?.isNative]\n  )\n  useOnGlobalChainSwitch(navigateToTokenForChain)\n\n  const navigateToWidgetSelectedToken = useCallback(\n    (tokens: SwapTokens) => {\n      const newDefaultToken = tokens[Field.OUTPUT] ?? tokens.default\n      const address = newDefaultToken?.isNative ? NATIVE_CHAIN_ID : newDefaultToken?.address\n      startTokenTransition(() =>\n        navigate(\n          getTokenDetailsURL({\n            address,\n            chain,\n            inputAddress: tokens[Field.INPUT] ? getTokenAddress(tokens[Field.INPUT] as Currency) : null,\n          })\n        )\n      )\n    },\n    [chain, navigate]\n  )\n\n  const [continueSwap, setContinueSwap] = useState<{ resolve: (value: boolean | PromiseLike<boolean>) => void }>()\n\n  const [openTokenSafetyModal, setOpenTokenSafetyModal] = useState(false)\n\n  // Show token safety modal if Swap-reviewing a warning token, at all times if the current token is blocked\n  const shouldShowSpeedbump = !useIsUserAddedTokenOnChain(address, pageChainId) && tokenWarning !== null\n  const onReviewSwapClick = useCallback(\n    () => new Promise<boolean>((resolve) => (shouldShowSpeedbump ? setContinueSwap({ resolve }) : resolve(true))),\n    [shouldShowSpeedbump]\n  )\n\n  const onResolveSwap = useCallback(\n    (value: boolean) => {\n      continueSwap?.resolve(value)\n      setContinueSwap(undefined)\n    },\n    [continueSwap, setContinueSwap]\n  )\n  // address will never be undefined if token is defined; address is checked here to appease typechecker\n  if (detailedToken === undefined || !address) {\n    return <InvalidTokenDetails pageChainId={pageChainId} isInvalidAddress={!address} />\n  }\n  return (\n    <Trace\n      page={InterfacePageName.TOKEN_DETAILS_PAGE}\n      properties={{ tokenAddress: address, tokenName: detailedToken?.name }}\n      shouldLogImpression\n    >\n      <TokenDetailsLayout>\n        {detailedToken && !isPending ? (\n          <LeftPanel>\n            <BreadcrumbNavLink to={`/tokens/${chain.toLowerCase()}`}>\n              <ArrowLeft data-testid=\"token-details-return-button\" size={14} /> Tokens\n            </BreadcrumbNavLink>\n            <TokenInfoContainer data-testid=\"token-info-container\">\n              <TokenNameCell>\n                <CurrencyLogo currency={detailedToken} size=\"32px\" hideL2Icon={false} />\n\n                {detailedToken.name ?? <Trans>Name not found</Trans>}\n                <TokenSymbol>{detailedToken.symbol ?? <Trans>Symbol not found</Trans>}</TokenSymbol>\n              </TokenNameCell>\n              <TokenActions>\n                <ShareButton currency={detailedToken} />\n              </TokenActions>\n            </TokenInfoContainer>\n            <ChartSection tokenPriceQuery={tokenPriceQuery} onChangeTimePeriod={onChangeTimePeriod} />\n\n            <StatsSection\n              chainId={pageChainId}\n              address={address}\n              TVL={tokenQueryData?.market?.totalValueLocked?.value}\n              volume24H={tokenQueryData?.market?.volume24H?.value}\n              priceHigh52W={tokenQueryData?.market?.priceHigh52W?.value}\n              priceLow52W={tokenQueryData?.market?.priceLow52W?.value}\n            />\n            <Hr />\n            <AboutSection\n              address={address}\n              chainId={pageChainId}\n              description={tokenQueryData?.project?.description}\n              homepageUrl={tokenQueryData?.project?.homepageUrl}\n              twitterName={tokenQueryData?.project?.twitterName}\n            />\n            {!detailedToken.isNative && <AddressSection address={address} />}\n          </LeftPanel>\n        ) : (\n          <TokenDetailsSkeleton />\n        )}\n\n        <RightPanel onClick={() => isBlockedToken && setOpenTokenSafetyModal(true)}>\n          <div style={{ pointerEvents: isBlockedToken ? 'none' : 'auto' }}>\n            <Widget\n              defaultTokens={{\n                [Field.INPUT]: inputToken ?? undefined,\n                default: detailedToken ?? undefined,\n              }}\n              onDefaultTokenChange={navigateToWidgetSelectedToken}\n              onReviewSwapClick={onReviewSwapClick}\n            />\n          </div>\n          {tokenWarning && <TokenSafetyMessage tokenAddress={address} warning={tokenWarning} />}\n          {detailedToken && <BalanceSummary token={detailedToken} />}\n        </RightPanel>\n        {detailedToken && <MobileBalanceSummaryFooter token={detailedToken} />}\n\n        <TokenSafetyModal\n          isOpen={openTokenSafetyModal || !!continueSwap}\n          tokenAddress={address}\n          onContinue={() => onResolveSwap(true)}\n          onBlocked={() => {\n            setOpenTokenSafetyModal(false)\n          }}\n          onCancel={() => onResolveSwap(false)}\n          showCancel={true}\n        />\n      </TokenDetailsLayout>\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/utils/addressesAreEquivalent.ts",[],"/workspace/Physica-Interfae/src/components/RateToggle/index.tsx",[],"/workspace/Physica-Interfae/src/components/RangeSelector/index.tsx",[],"/workspace/Physica-Interfae/src/hooks/useColor.ts",[],"/workspace/Physica-Interfae/src/utils/unwrappedToken.ts",[],"/workspace/Physica-Interfae/src/hooks/usePrevious.ts",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/StatsSection.tsx",[],"/workspace/Physica-Interfae/src/components/PositionPreview/index.tsx",["3883"],"import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { Position } from '@uniswap/v3-sdk'\nimport RangeBadge from 'components/Badge/RangeBadge'\nimport { LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport { Break } from 'components/earn/styled'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport RateToggle from 'components/RateToggle'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport JSBI from 'jsbi'\nimport { ReactNode, useCallback, useState } from 'react'\nimport { Bound } from 'state/mint/v3/actions'\nimport { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { formatTickPrice } from 'utils/formatTickPrice'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nexport const PositionPreview = ({\n  position,\n  title,\n  inRange,\n  baseCurrencyDefault,\n  ticksAtLimit,\n}: {\n  position: Position\n  title?: ReactNode\n  inRange: boolean\n  baseCurrencyDefault?: Currency | undefined\n  ticksAtLimit: { [bound: string]: boolean | undefined }\n}) => {\n  const theme = useTheme()\n\n  const currency0 = unwrappedToken(position.pool.token0)\n  const currency1 = unwrappedToken(position.pool.token1)\n\n  // track which currency should be base\n  const [baseCurrency, setBaseCurrency] = useState(\n    baseCurrencyDefault\n      ? baseCurrencyDefault === currency0\n        ? currency0\n        : baseCurrencyDefault === currency1\n        ? currency1\n        : currency0\n      : currency0\n  )\n\n  const sorted = baseCurrency === currency0\n  const quoteCurrency = sorted ? currency1 : currency0\n\n  const price = sorted ? position.pool.priceOf(position.pool.token0) : position.pool.priceOf(position.pool.token1)\n\n  const priceLower = sorted ? position.token0PriceLower : position.token0PriceUpper.invert()\n  const priceUpper = sorted ? position.token0PriceUpper : position.token0PriceLower.invert()\n\n  const handleRateChange = useCallback(() => {\n    setBaseCurrency(quoteCurrency)\n  }, [quoteCurrency])\n\n  const removed = position?.liquidity && JSBI.equal(position?.liquidity, JSBI.BigInt(0))\n\n  return (\n    <AutoColumn gap=\"md\" style={{ marginTop: '0.5rem' }}>\n      <RowBetween style={{ marginBottom: '0.5rem' }}>\n        <RowFixed>\n          <DoubleCurrencyLogo\n            currency0={currency0 ?? undefined}\n            currency1={currency1 ?? undefined}\n            size={24}\n            margin={true}\n          />\n          <ThemedText.DeprecatedLabel ml=\"10px\" fontSize=\"24px\">\n            {currency0?.symbol} / {currency1?.symbol}\n          </ThemedText.DeprecatedLabel>\n        </RowFixed>\n        <RangeBadge removed={removed} inRange={inRange} />\n      </RowBetween>\n\n      <LightCard>\n        <AutoColumn gap=\"md\">\n          <RowBetween>\n            <RowFixed>\n              <CurrencyLogo currency={currency0} />\n              <ThemedText.DeprecatedLabel ml=\"8px\">{currency0?.symbol}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n            <RowFixed>\n              <ThemedText.DeprecatedLabel mr=\"8px\">{position.amount0.toSignificant(4)}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <CurrencyLogo currency={currency1} />\n              <ThemedText.DeprecatedLabel ml=\"8px\">{currency1?.symbol}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n            <RowFixed>\n              <ThemedText.DeprecatedLabel mr=\"8px\">{position.amount1.toSignificant(4)}</ThemedText.DeprecatedLabel>\n            </RowFixed>\n          </RowBetween>\n          <Break />\n          <RowBetween>\n            <ThemedText.DeprecatedLabel>\n              <Trans>Fee Tier</Trans>\n            </ThemedText.DeprecatedLabel>\n            <ThemedText.DeprecatedLabel>\n              <Trans>{position?.pool?.fee / 10000}%</Trans>\n            </ThemedText.DeprecatedLabel>\n          </RowBetween>\n        </AutoColumn>\n      </LightCard>\n\n      <AutoColumn gap=\"md\">\n        <RowBetween>\n          {title ? <ThemedText.DeprecatedMain>{title}</ThemedText.DeprecatedMain> : <div />}\n          <RateToggle\n            currencyA={sorted ? currency0 : currency1}\n            currencyB={sorted ? currency1 : currency0}\n            handleRateToggle={handleRateChange}\n          />\n        </RowBetween>\n\n        <RowBetween>\n          <LightCard width=\"48%\" padding=\"8px\">\n            <AutoColumn gap=\"4px\" justify=\"center\">\n              <ThemedText.DeprecatedMain fontSize=\"12px\">\n                <Trans>Min Price</Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                {formatTickPrice({\n                  price: priceLower,\n                  atLimit: ticksAtLimit,\n                  direction: Bound.LOWER,\n                })}\n              </ThemedText.DeprecatedMediumHeader>\n              <ThemedText.DeprecatedMain textAlign=\"center\" fontSize=\"12px\">\n                <Trans>\n                  {quoteCurrency.symbol} per {baseCurrency.symbol}\n                </Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedSmall textAlign=\"center\" color={theme.textTertiary} style={{ marginTop: '4px' }}>\n                <Trans>Your position will be 100% composed of {baseCurrency?.symbol} at this price</Trans>\n              </ThemedText.DeprecatedSmall>\n            </AutoColumn>\n          </LightCard>\n\n          <LightCard width=\"48%\" padding=\"8px\">\n            <AutoColumn gap=\"4px\" justify=\"center\">\n              <ThemedText.DeprecatedMain fontSize=\"12px\">\n                <Trans>Max Price</Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                {formatTickPrice({\n                  price: priceUpper,\n                  atLimit: ticksAtLimit,\n                  direction: Bound.UPPER,\n                })}\n              </ThemedText.DeprecatedMediumHeader>\n              <ThemedText.DeprecatedMain textAlign=\"center\" fontSize=\"12px\">\n                <Trans>\n                  {quoteCurrency.symbol} per {baseCurrency.symbol}\n                </Trans>\n              </ThemedText.DeprecatedMain>\n              <ThemedText.DeprecatedSmall textAlign=\"center\" color={theme.textTertiary} style={{ marginTop: '4px' }}>\n                <Trans>Your position will be 100% composed of {quoteCurrency?.symbol} at this price</Trans>\n              </ThemedText.DeprecatedSmall>\n            </AutoColumn>\n          </LightCard>\n        </RowBetween>\n        <LightCard padding=\"12px \">\n          <AutoColumn gap=\"4px\" justify=\"center\">\n            <ThemedText.DeprecatedMain fontSize=\"12px\">\n              <Trans>Current price</Trans>\n            </ThemedText.DeprecatedMain>\n            <ThemedText.DeprecatedMediumHeader>{`${price.toSignificant(5)} `}</ThemedText.DeprecatedMediumHeader>\n            <ThemedText.DeprecatedMain textAlign=\"center\" fontSize=\"12px\">\n              <Trans>\n                {quoteCurrency.symbol} per {baseCurrency.symbol}\n              </Trans>\n            </ThemedText.DeprecatedMain>\n          </AutoColumn>\n        </LightCard>\n      </AutoColumn>\n    </AutoColumn>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/About.tsx",["3884"],"import { Trans } from '@lingui/macro'\nimport { getChainInfo } from 'constants/chainInfo'\nimport { SupportedChainId } from 'constants/chains'\nimport { darken } from 'polished'\nimport { useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { textFadeIn } from 'theme/styles'\n\nimport Resource from './Resource'\n\nconst NoInfoAvailable = styled.span`\n  color: ${({ theme }) => theme.textTertiary};\n  font-weight: 400;\n  font-size: 16px;\n`\nconst TokenDescriptionContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  max-height: fit-content;\n  padding-top: 16px;\n  line-height: 24px;\n  white-space: pre-wrap;\n`\n\nconst TruncateDescriptionButton = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 400;\n  font-size: 0.85em;\n  padding-top: 0.5em;\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => darken(0.1, theme.textSecondary)};\n    cursor: pointer;\n  }\n`\n\nconst truncateDescription = (desc: string) => {\n  //trim the string to the maximum length\n  let tokenDescriptionTruncated = desc.slice(0, TRUNCATE_CHARACTER_COUNT)\n  //re-trim if we are in the middle of a word\n  tokenDescriptionTruncated = `${tokenDescriptionTruncated.slice(\n    0,\n    Math.min(tokenDescriptionTruncated.length, tokenDescriptionTruncated.lastIndexOf(' '))\n  )}...`\n  return tokenDescriptionTruncated\n}\n\nconst TRUNCATE_CHARACTER_COUNT = 400\n\nexport const AboutContainer = styled.div`\n  gap: 16px;\n  padding: 24px 0px;\n  ${textFadeIn}\n`\nexport const AboutHeader = styled(ThemedText.MediumHeader)`\n  font-size: 28px !important;\n`\n\nconst ResourcesContainer = styled.div`\n  display: flex;\n  padding-top: 12px;\n  gap: 14px;\n`\n\ntype AboutSectionProps = {\n  address: string\n  chainId: SupportedChainId\n  description?: string | null | undefined\n  homepageUrl?: string | null | undefined\n  twitterName?: string | null | undefined\n}\n\nexport function AboutSection({ address, chainId, description, homepageUrl, twitterName }: AboutSectionProps) {\n  const [isDescriptionTruncated, setIsDescriptionTruncated] = useState(true)\n  const shouldTruncate = !!description && description.length > TRUNCATE_CHARACTER_COUNT\n\n  const tokenDescription = shouldTruncate && isDescriptionTruncated ? truncateDescription(description) : description\n\n  const { explorer, infoLink } = getChainInfo(chainId)\n\n  return (\n    <AboutContainer data-testid=\"token-details-about-section\">\n      <AboutHeader>\n        <Trans>About</Trans>\n      </AboutHeader>\n      <TokenDescriptionContainer>\n        {!description && (\n          <NoInfoAvailable>\n            <Trans>No token information available</Trans>\n          </NoInfoAvailable>\n        )}\n        {tokenDescription}\n        {shouldTruncate && (\n          <TruncateDescriptionButton onClick={() => setIsDescriptionTruncated(!isDescriptionTruncated)}>\n            {isDescriptionTruncated ? <Trans>Show more</Trans> : <Trans>Hide</Trans>}\n          </TruncateDescriptionButton>\n        )}\n      </TokenDescriptionContainer>\n      <br />\n      <ThemedText.SubHeaderSmall>\n        <Trans>Links</Trans>\n      </ThemedText.SubHeaderSmall>\n      <ResourcesContainer data-cy=\"resources-container\">\n        <Resource\n          name={chainId === SupportedChainId.MAINNET ? 'Etherscan' : 'Block Explorer'}\n          link={`${explorer}${address === 'NATIVE' ? '' : 'address/' + address}`}\n        />\n        <Resource name=\"More analytics\" link={`${infoLink}tokens/${address}`} />\n        {homepageUrl && <Resource name=\"Website\" link={homepageUrl} />}\n        {twitterName && <Resource name=\"Twitter\" link={`https://twitter.com/${twitterName}`} />}\n      </ResourcesContainer>\n    </AboutContainer>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/BreadcrumbNavLink.tsx",[],"/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/index.tsx",["3885","3886"],"import { Trans } from '@lingui/macro'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport { AutoColumn, ColumnCenter } from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport { format } from 'd3'\nimport { useColor } from 'hooks/useColor'\nimport { saturate } from 'polished'\nimport React, { ReactNode, useCallback, useMemo } from 'react'\nimport { BarChart2, CloudOff, Inbox } from 'react-feather'\nimport { batch } from 'react-redux'\nimport { Bound } from 'state/mint/v3/actions'\nimport styled, { useTheme } from 'styled-components/macro'\n\nimport { ThemedText } from '../../theme'\nimport { Chart } from './Chart'\nimport { useDensityChartData } from './hooks'\nimport { ZoomLevels } from './types'\n\nconst ZOOM_LEVELS: Record<FeeAmount, ZoomLevels> = {\n  [FeeAmount.LOWEST]: {\n    initialMin: 0.999,\n    initialMax: 1.001,\n    min: 0.00001,\n    max: 1.5,\n  },\n  [FeeAmount.LOW]: {\n    initialMin: 0.999,\n    initialMax: 1.001,\n    min: 0.00001,\n    max: 1.5,\n  },\n  [FeeAmount.MEDIUM]: {\n    initialMin: 0.5,\n    initialMax: 2,\n    min: 0.00001,\n    max: 20,\n  },\n  [FeeAmount.HIGH]: {\n    initialMin: 0.5,\n    initialMax: 2,\n    min: 0.00001,\n    max: 20,\n  },\n}\n\nconst ChartWrapper = styled.div`\n  position: relative;\n\n  justify-content: center;\n  align-content: center;\n`\n\nfunction InfoBox({ message, icon }: { message?: ReactNode; icon: ReactNode }) {\n  return (\n    <ColumnCenter style={{ height: '100%', justifyContent: 'center' }}>\n      {icon}\n      {message && (\n        <ThemedText.DeprecatedMediumHeader padding={10} marginTop=\"20px\" textAlign=\"center\">\n          {message}\n        </ThemedText.DeprecatedMediumHeader>\n      )}\n    </ColumnCenter>\n  )\n}\n\nexport default function LiquidityChartRangeInput({\n  currencyA,\n  currencyB,\n  feeAmount,\n  ticksAtLimit,\n  price,\n  priceLower,\n  priceUpper,\n  onLeftRangeInput,\n  onRightRangeInput,\n  interactive,\n}: {\n  currencyA: Currency | undefined\n  currencyB: Currency | undefined\n  feeAmount?: FeeAmount\n  ticksAtLimit: { [bound in Bound]?: boolean | undefined }\n  price: number | undefined\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  onLeftRangeInput: (typedValue: string) => void\n  onRightRangeInput: (typedValue: string) => void\n  interactive: boolean\n}) {\n  const theme = useTheme()\n\n  const tokenAColor = useColor(currencyA?.wrapped)\n  const tokenBColor = useColor(currencyB?.wrapped)\n\n  const isSorted = currencyA && currencyB && currencyA?.wrapped.sortsBefore(currencyB?.wrapped)\n\n  const { isLoading, error, formattedData } = useDensityChartData({\n    currencyA,\n    currencyB,\n    feeAmount,\n  })\n\n  const onBrushDomainChangeEnded = useCallback(\n    (domain: [number, number], mode: string | undefined) => {\n      let leftRangeValue = Number(domain[0])\n      const rightRangeValue = Number(domain[1])\n\n      if (leftRangeValue <= 0) {\n        leftRangeValue = 1 / 10 ** 6\n      }\n\n      batch(() => {\n        // simulate user input for auto-formatting and other validations\n        if (\n          (!ticksAtLimit[isSorted ? Bound.LOWER : Bound.UPPER] || mode === 'handle' || mode === 'reset') &&\n          leftRangeValue > 0\n        ) {\n          onLeftRangeInput(leftRangeValue.toFixed(6))\n        }\n\n        if ((!ticksAtLimit[isSorted ? Bound.UPPER : Bound.LOWER] || mode === 'reset') && rightRangeValue > 0) {\n          // todo: remove this check. Upper bound for large numbers\n          // sometimes fails to parse to tick.\n          if (rightRangeValue < 1e35) {\n            onRightRangeInput(rightRangeValue.toFixed(6))\n          }\n        }\n      })\n    },\n    [isSorted, onLeftRangeInput, onRightRangeInput, ticksAtLimit]\n  )\n\n  interactive = interactive && Boolean(formattedData?.length)\n\n  const brushDomain: [number, number] | undefined = useMemo(() => {\n    const leftPrice = isSorted ? priceLower : priceUpper?.invert()\n    const rightPrice = isSorted ? priceUpper : priceLower?.invert()\n\n    return leftPrice && rightPrice\n      ? [parseFloat(leftPrice?.toSignificant(6)), parseFloat(rightPrice?.toSignificant(6))]\n      : undefined\n  }, [isSorted, priceLower, priceUpper])\n\n  const brushLabelValue = useCallback(\n    (d: 'w' | 'e', x: number) => {\n      if (!price) return ''\n\n      if (d === 'w' && ticksAtLimit[isSorted ? Bound.LOWER : Bound.UPPER]) return '0'\n      if (d === 'e' && ticksAtLimit[isSorted ? Bound.UPPER : Bound.LOWER]) return '∞'\n\n      const percent = (x < price ? -1 : 1) * ((Math.max(x, price) - Math.min(x, price)) / price) * 100\n\n      return price ? `${format(Math.abs(percent) > 1 ? '.2~s' : '.2~f')(percent)}%` : ''\n    },\n    [isSorted, price, ticksAtLimit]\n  )\n\n  const isUninitialized = !currencyA || !currencyB || (formattedData === undefined && !isLoading)\n\n  return (\n    <AutoColumn gap=\"md\" style={{ minHeight: '200px' }}>\n      {isUninitialized ? (\n        <InfoBox\n          message={<Trans>Your position will appear here.</Trans>}\n          icon={<Inbox size={56} stroke={theme.textPrimary} />}\n        />\n      ) : isLoading ? (\n        <InfoBox icon={<Loader size=\"40px\" stroke={theme.deprecated_text4} />} />\n      ) : error ? (\n        <InfoBox\n          message={<Trans>Liquidity data not available.</Trans>}\n          icon={<CloudOff size={56} stroke={theme.deprecated_text4} />}\n        />\n      ) : !formattedData || formattedData.length === 0 || !price ? (\n        <InfoBox\n          message={<Trans>There is no liquidity data.</Trans>}\n          icon={<BarChart2 size={56} stroke={theme.deprecated_text4} />}\n        />\n      ) : (\n        <ChartWrapper>\n          <Chart\n            data={{ series: formattedData, current: price }}\n            dimensions={{ width: 400, height: 200 }}\n            margins={{ top: 10, right: 2, bottom: 20, left: 0 }}\n            styles={{\n              area: {\n                selection: theme.accentAction,\n              },\n              brush: {\n                handle: {\n                  west: saturate(0.1, tokenAColor) ?? theme.accentFailure,\n                  east: saturate(0.1, tokenBColor) ?? theme.accentAction,\n                },\n              },\n            }}\n            interactive={interactive}\n            brushLabels={brushLabelValue}\n            brushDomain={brushDomain}\n            onBrushDomainChange={onBrushDomainChangeEnded}\n            zoomLevels={ZOOM_LEVELS[feeAmount ?? FeeAmount.MEDIUM]}\n            ticksAtLimit={ticksAtLimit}\n          />\n        </ChartWrapper>\n      )}\n    </AutoColumn>\n  )\n}\n","/workspace/Physica-Interfae/src/components/HoverInlineText/index.tsx",[],"/workspace/Physica-Interfae/src/components/FeeSelector/index.tsx",["3887","3888","3889"],"import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendEvent } from 'components/analytics'\nimport { ButtonGray } from 'components/Button'\nimport Card from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport { RowBetween } from 'components/Row'\nimport { useFeeTierDistribution } from 'hooks/useFeeTierDistribution'\nimport { PoolState, usePools } from 'hooks/usePools'\nimport usePrevious from 'hooks/usePrevious'\nimport { DynamicSection } from 'pages/AddLiquidity/styled'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Box } from 'rebass'\nimport styled, { keyframes } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { FeeOption } from './FeeOption'\nimport { FeeTierPercentageBadge } from './FeeTierPercentageBadge'\nimport { FEE_AMOUNT_DETAIL } from './shared'\n\nconst pulse = (color: string) => keyframes`\n  0% {\n    box-shadow: 0 0 0 0 ${color};\n  }\n\n  70% {\n    box-shadow: 0 0 0 2px ${color};\n  }\n\n  100% {\n    box-shadow: 0 0 0 0 ${color};\n  }\n`\nconst FocusedOutlineCard = styled(Card)<{ pulsing: boolean }>`\n  border: 1px solid ${({ theme }) => theme.backgroundInteractive};\n  animation: ${({ pulsing, theme }) => pulsing && pulse(theme.accentAction)} 0.6s linear;\n  align-self: center;\n`\n\nconst Select = styled.div`\n  align-items: flex-start;\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 8px;\n`\n\nexport default function FeeSelector({\n  disabled = false,\n  feeAmount,\n  handleFeePoolSelect,\n  currencyA,\n  currencyB,\n}: {\n  disabled?: boolean\n  feeAmount?: FeeAmount\n  handleFeePoolSelect: (feeAmount: FeeAmount) => void\n  currencyA?: Currency | undefined\n  currencyB?: Currency | undefined\n}) {\n  const { chainId } = useWeb3React()\n\n  const { isLoading, isError, largestUsageFeeTier, distributions } = useFeeTierDistribution(currencyA, currencyB)\n\n  // get pool data on-chain for latest states\n  const pools = usePools([\n    [currencyA, currencyB, FeeAmount.LOWEST],\n    [currencyA, currencyB, FeeAmount.LOW],\n    [currencyA, currencyB, FeeAmount.MEDIUM],\n    [currencyA, currencyB, FeeAmount.HIGH],\n  ])\n\n  const poolsByFeeTier: Record<FeeAmount, PoolState> = useMemo(\n    () =>\n      pools.reduce(\n        (acc, [curPoolState, curPool]) => {\n          acc = {\n            ...acc,\n            ...{ [curPool?.fee as FeeAmount]: curPoolState },\n          }\n          return acc\n        },\n        {\n          // default all states to NOT_EXISTS\n          [FeeAmount.LOWEST]: PoolState.NOT_EXISTS,\n          [FeeAmount.LOW]: PoolState.NOT_EXISTS,\n          [FeeAmount.MEDIUM]: PoolState.NOT_EXISTS,\n          [FeeAmount.HIGH]: PoolState.NOT_EXISTS,\n        }\n      ),\n    [pools]\n  )\n\n  const [showOptions, setShowOptions] = useState(false)\n  const [pulsing, setPulsing] = useState(false)\n\n  const previousFeeAmount = usePrevious(feeAmount)\n\n  const recommended = useRef(false)\n\n  const handleFeePoolSelectWithEvent = useCallback(\n    (fee: FeeAmount) => {\n      sendEvent({\n        category: 'FeePoolSelect',\n        action: 'Manual',\n      })\n      handleFeePoolSelect(fee)\n    },\n    [handleFeePoolSelect]\n  )\n\n  useEffect(() => {\n    if (feeAmount || isLoading || isError) {\n      return\n    }\n\n    if (!largestUsageFeeTier) {\n      // cannot recommend, open options\n      setShowOptions(true)\n    } else {\n      setShowOptions(false)\n\n      recommended.current = true\n      sendEvent({\n        category: 'FeePoolSelect',\n        action: ' Recommended',\n      })\n\n      handleFeePoolSelect(largestUsageFeeTier)\n    }\n  }, [feeAmount, isLoading, isError, largestUsageFeeTier, handleFeePoolSelect])\n\n  useEffect(() => {\n    setShowOptions(isError)\n  }, [isError])\n\n  useEffect(() => {\n    if (feeAmount && previousFeeAmount !== feeAmount) {\n      setPulsing(true)\n    }\n  }, [previousFeeAmount, feeAmount])\n\n  return (\n    <AutoColumn gap=\"16px\">\n      <DynamicSection gap=\"md\" disabled={disabled}>\n        <FocusedOutlineCard pulsing={pulsing} onAnimationEnd={() => setPulsing(false)}>\n          <RowBetween>\n            <AutoColumn id=\"add-liquidity-selected-fee\">\n              {!feeAmount ? (\n                <>\n                  <ThemedText.DeprecatedLabel>\n                    <Trans>Fee tier</Trans>\n                  </ThemedText.DeprecatedLabel>\n                  <ThemedText.DeprecatedMain fontWeight={400} fontSize=\"12px\" textAlign=\"left\">\n                    <Trans>The % you will earn in fees.</Trans>\n                  </ThemedText.DeprecatedMain>\n                </>\n              ) : (\n                <>\n                  <ThemedText.DeprecatedLabel className=\"selected-fee-label\">\n                    <Trans>{FEE_AMOUNT_DETAIL[feeAmount].label}% fee tier</Trans>\n                  </ThemedText.DeprecatedLabel>\n                  <Box style={{ width: 'fit-content', marginTop: '8px' }} className=\"selected-fee-percentage\">\n                    {distributions && (\n                      <FeeTierPercentageBadge\n                        distributions={distributions}\n                        feeAmount={feeAmount}\n                        poolState={poolsByFeeTier[feeAmount]}\n                      />\n                    )}\n                  </Box>\n                </>\n              )}\n            </AutoColumn>\n\n            <ButtonGray onClick={() => setShowOptions(!showOptions)} width=\"auto\" padding=\"4px\" $borderRadius=\"6px\">\n              {showOptions ? <Trans>Hide</Trans> : <Trans>Edit</Trans>}\n            </ButtonGray>\n          </RowBetween>\n        </FocusedOutlineCard>\n\n        {chainId && showOptions && (\n          <Select>\n            {[FeeAmount.LOWEST, FeeAmount.LOW, FeeAmount.MEDIUM, FeeAmount.HIGH].map((_feeAmount, i) => {\n              const { supportedChains } = FEE_AMOUNT_DETAIL[_feeAmount]\n              if (supportedChains.includes(chainId)) {\n                return (\n                  <FeeOption\n                    feeAmount={_feeAmount}\n                    active={feeAmount === _feeAmount}\n                    onClick={() => handleFeePoolSelectWithEvent(_feeAmount)}\n                    distributions={distributions}\n                    poolState={poolsByFeeTier[_feeAmount]}\n                    key={i}\n                  />\n                )\n              }\n              return null\n            })}\n          </Select>\n        )}\n      </DynamicSection>\n    </AutoColumn>\n  )\n}\n","/workspace/Physica-Interfae/src/components/TransactionConfirmationModal/AnimatedConfirmation.tsx",[],"/workspace/Physica-Interfae/src/pages/Pool/PositionPage.tsx",["3890","3891","3892"],"import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { formatPrice, NumberType } from '@uniswap/conedison/format'\nimport { Currency, CurrencyAmount, Fraction, Percent, Price, Token } from '@uniswap/sdk-core'\nimport { NonfungiblePositionManager, Pool, Position } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from '@uniswap/widgets'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendEvent } from 'components/analytics'\nimport Badge from 'components/Badge'\nimport { ButtonConfirmed, ButtonGray, ButtonPrimary } from 'components/Button'\nimport { DarkCard, LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport { Dots } from 'components/swap/styleds'\nimport Toggle from 'components/Toggle'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\nimport { CHAIN_IDS_TO_NAMES, isSupportedChain } from 'constants/chains'\nimport { isGqlSupportedChain } from 'graphql/data/util'\nimport { useToken } from 'hooks/Tokens'\nimport { useV3NFTPositionManagerContract } from 'hooks/useContract'\nimport useIsTickAtLimit from 'hooks/useIsTickAtLimit'\nimport { PoolState, usePool } from 'hooks/usePools'\nimport useStablecoinPrice from 'hooks/useStablecoinPrice'\nimport { useV3PositionFees } from 'hooks/useV3PositionFees'\nimport { useV3PositionFromTokenId } from 'hooks/useV3Positions'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { useCallback, useMemo, useRef, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Bound } from 'state/mint/v3/actions'\nimport { useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ExternalLink, HideExtraSmall, HideSmall, ThemedText } from 'theme'\nimport { currencyId } from 'utils/currencyId'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\nimport { formatTickPrice } from 'utils/formatTickPrice'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport RangeBadge from '../../components/Badge/RangeBadge'\nimport { SmallButtonPrimary } from '../../components/Button/index'\nimport { getPriceOrderingFromPositionForUI } from '../../components/PositionListItem'\nimport RateToggle from '../../components/RateToggle'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { usePositionTokenURI } from '../../hooks/usePositionTokenURI'\nimport { TransactionType } from '../../state/transactions/types'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { LoadingRows } from './styleds'\n\nconst getTokenLink = (chainId: SupportedChainId, address: string) => {\n  if (isGqlSupportedChain(chainId)) {\n    const chainName = CHAIN_IDS_TO_NAMES[chainId]\n    return `${window.location.origin}/#/tokens/${chainName}/${address}`\n  } else {\n    return getExplorerLink(chainId, address, ExplorerDataType.TOKEN)\n  }\n}\n\nconst PositionPageButtonPrimary = styled(ButtonPrimary)`\n  width: 228px;\n  height: 40px;\n  font-size: 16px;\n  line-height: 20px;\n  border-radius: 12px;\n`\n\nconst PageWrapper = styled.div`\n  padding: 68px 16px 16px 16px;\n\n  min-width: 800px;\n  max-width: 960px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    min-width: 100%;\n    padding: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    min-width: 100%;\n    padding: 16px;\n  }\n`\n\nconst BadgeText = styled.div`\n  font-weight: 500;\n  font-size: 14px;\n`\n\n// responsive text\n// disable the warning because we don't use the end prop, we just want to filter it out\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Label = styled(({ end, ...props }) => <ThemedText.DeprecatedLabel {...props} />)<{ end?: boolean }>`\n  display: flex;\n  font-size: 16px;\n  justify-content: ${({ end }) => (end ? 'flex-end' : 'flex-start')};\n  align-items: center;\n`\n\nconst ExtentsText = styled.span`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  text-align: center;\n  margin-right: 4px;\n  font-weight: 500;\n`\n\nconst HoverText = styled(ThemedText.DeprecatedMain)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.textTertiary};\n  :hover {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n  }\n`\n\nconst DoubleArrow = styled.span`\n  color: ${({ theme }) => theme.textTertiary};\n  margin: 0 1rem;\n`\nconst ResponsiveRow = styled(RowBetween)`\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    align-items: flex-start;\n    row-gap: 16px;\n    width: 100%;\n  }\n`\n\nconst ActionButtonResponsiveRow = styled(ResponsiveRow)`\n  width: 50%;\n  justify-content: flex-end;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    width: 100%;\n    flex-direction: row;\n    * {\n      width: 100%;\n    }\n  }\n`\n\nconst ResponsiveButtonConfirmed = styled(ButtonConfirmed)`\n  border-radius: 12px;\n  padding: 6px 8px;\n  width: fit-content;\n  font-size: 16px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    width: fit-content;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    width: fit-content;\n  }\n`\n\nconst NFTGrid = styled.div`\n  display: grid;\n  grid-template: 'overlap';\n  min-height: 400px;\n`\n\nconst NFTCanvas = styled.canvas`\n  grid-area: overlap;\n`\n\nconst NFTImage = styled.img`\n  grid-area: overlap;\n  height: 400px;\n  /* Ensures SVG appears on top of canvas. */\n  z-index: 1;\n`\n\nfunction CurrentPriceCard({\n  inverted,\n  pool,\n  currencyQuote,\n  currencyBase,\n}: {\n  inverted?: boolean\n  pool?: Pool | null\n  currencyQuote?: Currency\n  currencyBase?: Currency\n}) {\n  if (!pool || !currencyQuote || !currencyBase) {\n    return null\n  }\n\n  return (\n    <LightCard padding=\"12px\">\n      <AutoColumn gap=\"sm\" justify=\"center\">\n        <ExtentsText>\n          <Trans>Current price</Trans>\n        </ExtentsText>\n        <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n          {formatPrice(inverted ? pool.token1Price : pool.token0Price, NumberType.TokenTx)}\n        </ThemedText.DeprecatedMediumHeader>\n        <ExtentsText>\n          <Trans>\n            {currencyQuote?.symbol} per {currencyBase?.symbol}\n          </Trans>\n        </ExtentsText>\n      </AutoColumn>\n    </LightCard>\n  )\n}\n\nfunction LinkedCurrency({ chainId, currency }: { chainId?: number; currency?: Currency }) {\n  const address = (currency as Token)?.address\n\n  if (typeof chainId === 'number' && address) {\n    return (\n      <ExternalLink href={getTokenLink(chainId, address)}>\n        <RowFixed>\n          <CurrencyLogo currency={currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n          <ThemedText.DeprecatedMain>{currency?.symbol} ↗</ThemedText.DeprecatedMain>\n        </RowFixed>\n      </ExternalLink>\n    )\n  }\n\n  return (\n    <RowFixed>\n      <CurrencyLogo currency={currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n      <ThemedText.DeprecatedMain>{currency?.symbol}</ThemedText.DeprecatedMain>\n    </RowFixed>\n  )\n}\n\nfunction getRatio(\n  lower: Price<Currency, Currency>,\n  current: Price<Currency, Currency>,\n  upper: Price<Currency, Currency>\n) {\n  try {\n    if (!current.greaterThan(lower)) {\n      return 100\n    } else if (!current.lessThan(upper)) {\n      return 0\n    }\n\n    const a = Number.parseFloat(lower.toSignificant(15))\n    const b = Number.parseFloat(upper.toSignificant(15))\n    const c = Number.parseFloat(current.toSignificant(15))\n\n    const ratio = Math.floor((1 / ((Math.sqrt(a * b) - Math.sqrt(b * c)) / (c - Math.sqrt(b * c)) + 1)) * 100)\n\n    if (ratio < 0 || ratio > 100) {\n      throw Error('Out of range')\n    }\n\n    return ratio\n  } catch {\n    return undefined\n  }\n}\n\n// snapshots a src img into a canvas\nfunction getSnapshot(src: HTMLImageElement, canvas: HTMLCanvasElement, targetHeight: number) {\n  const context = canvas.getContext('2d')\n\n  if (context) {\n    let { width, height } = src\n\n    // src may be hidden and not have the target dimensions\n    const ratio = width / height\n    height = targetHeight\n    width = Math.round(ratio * targetHeight)\n\n    // Ensure crispness at high DPIs\n    canvas.width = width * devicePixelRatio\n    canvas.height = height * devicePixelRatio\n    canvas.style.width = width + 'px'\n    canvas.style.height = height + 'px'\n    context.scale(devicePixelRatio, devicePixelRatio)\n\n    context.clearRect(0, 0, width, height)\n    context.drawImage(src, 0, 0, width, height)\n  }\n}\n\nfunction NFT({ image, height: targetHeight }: { image: string; height: number }) {\n  const [animate, setAnimate] = useState(false)\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const imageRef = useRef<HTMLImageElement>(null)\n\n  return (\n    <NFTGrid\n      onMouseEnter={() => {\n        setAnimate(true)\n      }}\n      onMouseLeave={() => {\n        // snapshot the current frame so the transition to the canvas is smooth\n        if (imageRef.current && canvasRef.current) {\n          getSnapshot(imageRef.current, canvasRef.current, targetHeight)\n        }\n        setAnimate(false)\n      }}\n    >\n      <NFTCanvas ref={canvasRef} />\n      <NFTImage\n        ref={imageRef}\n        src={image}\n        hidden={!animate}\n        onLoad={() => {\n          // snapshot for the canvas\n          if (imageRef.current && canvasRef.current) {\n            getSnapshot(imageRef.current, canvasRef.current, targetHeight)\n          }\n        }}\n      />\n    </NFTGrid>\n  )\n}\n\nconst useInverter = ({\n  priceLower,\n  priceUpper,\n  quote,\n  base,\n  invert,\n}: {\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  quote?: Token\n  base?: Token\n  invert?: boolean\n}): {\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  quote?: Token\n  base?: Token\n} => {\n  return {\n    priceUpper: invert ? priceLower?.invert() : priceUpper,\n    priceLower: invert ? priceUpper?.invert() : priceLower,\n    quote: invert ? base : quote,\n    base: invert ? quote : base,\n  }\n}\n\nexport function PositionPageUnsupportedContent() {\n  return (\n    <PageWrapper>\n      <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n        <ThemedText.HeadlineLarge style={{ marginBottom: '8px' }}>\n          <Trans>Position unavailable</Trans>\n        </ThemedText.HeadlineLarge>\n        <ThemedText.BodyPrimary style={{ marginBottom: '32px' }}>\n          <Trans>To view a position, you must be connected to the network it belongs to.</Trans>\n        </ThemedText.BodyPrimary>\n        <PositionPageButtonPrimary as={Link} to=\"/pools\" width=\"fit-content\">\n          <Trans>Back to Pools</Trans>\n        </PositionPageButtonPrimary>\n      </div>\n    </PageWrapper>\n  )\n}\n\nexport default function PositionPage() {\n  const { chainId } = useWeb3React()\n  if (isSupportedChain(chainId)) {\n    return <PositionPageContent />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\n\nfunction PositionPageContent() {\n  const { tokenId: tokenIdFromUrl } = useParams<{ tokenId?: string }>()\n  const { chainId, account, provider } = useWeb3React()\n  const theme = useTheme()\n\n  const parsedTokenId = tokenIdFromUrl ? BigNumber.from(tokenIdFromUrl) : undefined\n  const { loading, position: positionDetails } = useV3PositionFromTokenId(parsedTokenId)\n\n  const {\n    token0: token0Address,\n    token1: token1Address,\n    fee: feeAmount,\n    liquidity,\n    tickLower,\n    tickUpper,\n    tokenId,\n  } = positionDetails || {}\n\n  const removed = liquidity?.eq(0)\n\n  const metadata = usePositionTokenURI(parsedTokenId)\n\n  const token0 = useToken(token0Address)\n  const token1 = useToken(token1Address)\n\n  const currency0 = token0 ? unwrappedToken(token0) : undefined\n  const currency1 = token1 ? unwrappedToken(token1) : undefined\n\n  // flag for receiving WETH\n  const [receiveWETH, setReceiveWETH] = useState(false)\n  const nativeCurrency = useNativeCurrency()\n  const nativeWrappedSymbol = nativeCurrency.wrapped.symbol\n\n  // construct Position from details returned\n  const [poolState, pool] = usePool(token0 ?? undefined, token1 ?? undefined, feeAmount)\n  const position = useMemo(() => {\n    if (pool && liquidity && typeof tickLower === 'number' && typeof tickUpper === 'number') {\n      return new Position({ pool, liquidity: liquidity.toString(), tickLower, tickUpper })\n    }\n    return undefined\n  }, [liquidity, pool, tickLower, tickUpper])\n\n  const tickAtLimit = useIsTickAtLimit(feeAmount, tickLower, tickUpper)\n\n  const pricesFromPosition = getPriceOrderingFromPositionForUI(position)\n  const [manuallyInverted, setManuallyInverted] = useState(false)\n\n  // handle manual inversion\n  const { priceLower, priceUpper, base } = useInverter({\n    priceLower: pricesFromPosition.priceLower,\n    priceUpper: pricesFromPosition.priceUpper,\n    quote: pricesFromPosition.quote,\n    base: pricesFromPosition.base,\n    invert: manuallyInverted,\n  })\n\n  const inverted = token1 ? base?.equals(token1) : undefined\n  const currencyQuote = inverted ? currency0 : currency1\n  const currencyBase = inverted ? currency1 : currency0\n\n  const ratio = useMemo(() => {\n    return priceLower && pool && priceUpper\n      ? getRatio(\n          inverted ? priceUpper.invert() : priceLower,\n          pool.token0Price,\n          inverted ? priceLower.invert() : priceUpper\n        )\n      : undefined\n  }, [inverted, pool, priceLower, priceUpper])\n\n  // fees\n  const [feeValue0, feeValue1] = useV3PositionFees(pool ?? undefined, positionDetails?.tokenId, receiveWETH)\n\n  // these currencies will match the feeValue{0,1} currencies for the purposes of fee collection\n  const currency0ForFeeCollectionPurposes = pool ? (receiveWETH ? pool.token0 : unwrappedToken(pool.token0)) : undefined\n  const currency1ForFeeCollectionPurposes = pool ? (receiveWETH ? pool.token1 : unwrappedToken(pool.token1)) : undefined\n\n  const [collecting, setCollecting] = useState<boolean>(false)\n  const [collectMigrationHash, setCollectMigrationHash] = useState<string | null>(null)\n  const isCollectPending = useIsTransactionPending(collectMigrationHash ?? undefined)\n  const [showConfirm, setShowConfirm] = useState(false)\n\n  // usdc prices always in terms of tokens\n  const price0 = useStablecoinPrice(token0 ?? undefined)\n  const price1 = useStablecoinPrice(token1 ?? undefined)\n\n  const fiatValueOfFees: CurrencyAmount<Currency> | null = useMemo(() => {\n    if (!price0 || !price1 || !feeValue0 || !feeValue1) return null\n\n    // we wrap because it doesn't matter, the quote returns a USDC amount\n    const feeValue0Wrapped = feeValue0?.wrapped\n    const feeValue1Wrapped = feeValue1?.wrapped\n\n    if (!feeValue0Wrapped || !feeValue1Wrapped) return null\n\n    const amount0 = price0.quote(feeValue0Wrapped)\n    const amount1 = price1.quote(feeValue1Wrapped)\n    return amount0.add(amount1)\n  }, [price0, price1, feeValue0, feeValue1])\n\n  const fiatValueOfLiquidity: CurrencyAmount<Token> | null = useMemo(() => {\n    if (!price0 || !price1 || !position) return null\n    const amount0 = price0.quote(position.amount0)\n    const amount1 = price1.quote(position.amount1)\n    return amount0.add(amount1)\n  }, [price0, price1, position])\n\n  const addTransaction = useTransactionAdder()\n  const positionManager = useV3NFTPositionManagerContract()\n  const collect = useCallback(() => {\n    if (\n      !currency0ForFeeCollectionPurposes ||\n      !currency1ForFeeCollectionPurposes ||\n      !chainId ||\n      !positionManager ||\n      !account ||\n      !tokenId ||\n      !provider\n    )\n      return\n\n    setCollecting(true)\n\n    // we fall back to expecting 0 fees in case the fetch fails, which is safe in the\n    // vast majority of cases\n    const { calldata, value } = NonfungiblePositionManager.collectCallParameters({\n      tokenId: tokenId.toString(),\n      expectedCurrencyOwed0: feeValue0 ?? CurrencyAmount.fromRawAmount(currency0ForFeeCollectionPurposes, 0),\n      expectedCurrencyOwed1: feeValue1 ?? CurrencyAmount.fromRawAmount(currency1ForFeeCollectionPurposes, 0),\n      recipient: account,\n    })\n\n    const txn = {\n      to: positionManager.address,\n      data: calldata,\n      value,\n    }\n\n    provider\n      .getSigner()\n      .estimateGas(txn)\n      .then((estimate) => {\n        const newTxn = {\n          ...txn,\n          gasLimit: calculateGasMargin(estimate),\n        }\n\n        return provider\n          .getSigner()\n          .sendTransaction(newTxn)\n          .then((response: TransactionResponse) => {\n            setCollectMigrationHash(response.hash)\n            setCollecting(false)\n\n            sendEvent({\n              category: 'Liquidity',\n              action: 'CollectV3',\n              label: [currency0ForFeeCollectionPurposes.symbol, currency1ForFeeCollectionPurposes.symbol].join('/'),\n            })\n\n            addTransaction(response, {\n              type: TransactionType.COLLECT_FEES,\n              currencyId0: currencyId(currency0ForFeeCollectionPurposes),\n              currencyId1: currencyId(currency1ForFeeCollectionPurposes),\n              expectedCurrencyOwed0: CurrencyAmount.fromRawAmount(currency0ForFeeCollectionPurposes, 0).toExact(),\n              expectedCurrencyOwed1: CurrencyAmount.fromRawAmount(currency1ForFeeCollectionPurposes, 0).toExact(),\n            })\n          })\n      })\n      .catch((error) => {\n        setCollecting(false)\n        console.error(error)\n      })\n  }, [\n    chainId,\n    feeValue0,\n    feeValue1,\n    currency0ForFeeCollectionPurposes,\n    currency1ForFeeCollectionPurposes,\n    positionManager,\n    account,\n    tokenId,\n    addTransaction,\n    provider,\n  ])\n\n  const owner = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result?.[0]\n  const ownsNFT = owner === account || positionDetails?.operator === account\n\n  const feeValueUpper = inverted ? feeValue0 : feeValue1\n  const feeValueLower = inverted ? feeValue1 : feeValue0\n\n  // check if price is within range\n  const below = pool && typeof tickLower === 'number' ? pool.tickCurrent < tickLower : undefined\n  const above = pool && typeof tickUpper === 'number' ? pool.tickCurrent >= tickUpper : undefined\n  const inRange: boolean = typeof below === 'boolean' && typeof above === 'boolean' ? !below && !above : false\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\n        <LightCard padding=\"12px 16px\">\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueUpper?.currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueUpper ? formatCurrencyAmount(feeValueUpper, 4) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueLower?.currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueLower ? formatCurrencyAmount(feeValueLower, 4) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n          </AutoColumn>\n        </LightCard>\n        <ThemedText.DeprecatedItalic>\n          <Trans>Collecting fees will withdraw currently available fees for you.</Trans>\n        </ThemedText.DeprecatedItalic>\n        <ButtonPrimary onClick={collect}>\n          <Trans>Collect</Trans>\n        </ButtonPrimary>\n      </AutoColumn>\n    )\n  }\n\n  const showCollectAsWeth = Boolean(\n    ownsNFT &&\n      (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0)) &&\n      currency0 &&\n      currency1 &&\n      (currency0.isNative || currency1.isNative) &&\n      !collectMigrationHash\n  )\n\n  if (!positionDetails && !loading) {\n    return <PositionPageUnsupportedContent />\n  }\n\n  return loading || poolState === PoolState.LOADING || !feeAmount ? (\n    <LoadingRows>\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </LoadingRows>\n  ) : (\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\n      <>\n        <PageWrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={() => setShowConfirm(false)}\n            attemptingTxn={collecting}\n            hash={collectMigrationHash ?? ''}\n            content={() => (\n              <ConfirmationModalContent\n                title={<Trans>Claim fees</Trans>}\n                onDismiss={() => setShowConfirm(false)}\n                topContent={modalHeader}\n              />\n            )}\n            pendingText={<Trans>Collecting fees</Trans>}\n          />\n          <AutoColumn gap=\"md\">\n            <AutoColumn gap=\"sm\">\n              <Link\n                data-cy=\"visit-pool\"\n                style={{ textDecoration: 'none', width: 'fit-content', marginBottom: '0.5rem' }}\n                to=\"/pools\"\n              >\n                <HoverText>\n                  <Trans>← Back to Pools</Trans>\n                </HoverText>\n              </Link>\n              <ResponsiveRow>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currencyBase} currency1={currencyQuote} size={24} margin={true} />\n                  <ThemedText.DeprecatedLabel fontSize=\"24px\" mr=\"10px\">\n                    &nbsp;{currencyQuote?.symbol}&nbsp;/&nbsp;{currencyBase?.symbol}\n                  </ThemedText.DeprecatedLabel>\n                  <Badge style={{ marginRight: '8px' }}>\n                    <BadgeText>\n                      <Trans>{new Percent(feeAmount, 1_000_000).toSignificant()}%</Trans>\n                    </BadgeText>\n                  </Badge>\n                  <RangeBadge removed={removed} inRange={inRange} />\n                </RowFixed>\n                {ownsNFT && (\n                  <ActionButtonResponsiveRow>\n                    {currency0 && currency1 && feeAmount && tokenId ? (\n                      <ButtonGray\n                        as={Link}\n                        to={`/increase/${currencyId(currency0)}/${currencyId(currency1)}/${feeAmount}/${tokenId}`}\n                        padding=\"6px 8px\"\n                        width=\"fit-content\"\n                        $borderRadius=\"12px\"\n                        style={{ marginRight: '8px' }}\n                      >\n                        <Trans>Increase Liquidity</Trans>\n                      </ButtonGray>\n                    ) : null}\n                    {tokenId && !removed ? (\n                      <SmallButtonPrimary\n                        as={Link}\n                        to={`/remove/${tokenId}`}\n                        padding=\"6px 8px\"\n                        width=\"fit-content\"\n                        $borderRadius=\"12px\"\n                      >\n                        <Trans>Remove Liquidity</Trans>\n                      </SmallButtonPrimary>\n                    ) : null}\n                  </ActionButtonResponsiveRow>\n                )}\n              </ResponsiveRow>\n              <RowBetween></RowBetween>\n            </AutoColumn>\n            <ResponsiveRow align=\"flex-start\">\n              <HideSmall\n                style={{\n                  marginRight: '12px',\n                }}\n              >\n                {'result' in metadata ? (\n                  <DarkCard\n                    width=\"100%\"\n                    height=\"100%\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      flexDirection: 'column',\n                      justifyContent: 'space-around',\n                      minWidth: '340px',\n                    }}\n                  >\n                    <NFT image={metadata.result.image} height={400} />\n                    {typeof chainId === 'number' && owner && !ownsNFT ? (\n                      <ExternalLink href={getExplorerLink(chainId, owner, ExplorerDataType.ADDRESS)}>\n                        <Trans>Owner</Trans>\n                      </ExternalLink>\n                    ) : null}\n                  </DarkCard>\n                ) : (\n                  <DarkCard\n                    width=\"100%\"\n                    height=\"100%\"\n                    style={{\n                      minWidth: '340px',\n                    }}\n                  >\n                    <Loader />\n                  </DarkCard>\n                )}\n              </HideSmall>\n              <AutoColumn gap=\"sm\" style={{ width: '100%', height: '100%' }}>\n                <DarkCard>\n                  <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                    <AutoColumn gap=\"md\">\n                      <Label>\n                        <Trans>Liquidity</Trans>\n                      </Label>\n                      {fiatValueOfLiquidity?.greaterThan(new Fraction(1, 100)) ? (\n                        <ThemedText.DeprecatedLargeHeader fontSize=\"36px\" fontWeight={500}>\n                          <Trans>${fiatValueOfLiquidity.toFixed(2, { groupSeparator: ',' })}</Trans>\n                        </ThemedText.DeprecatedLargeHeader>\n                      ) : (\n                        <ThemedText.DeprecatedLargeHeader color={theme.textPrimary} fontSize=\"36px\" fontWeight={500}>\n                          <Trans>$-</Trans>\n                        </ThemedText.DeprecatedLargeHeader>\n                      )}\n                    </AutoColumn>\n                    <LightCard padding=\"12px 16px\">\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <LinkedCurrency chainId={chainId} currency={currencyQuote} />\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {inverted ? position?.amount0.toSignificant(4) : position?.amount1.toSignificant(4)}\n                            </ThemedText.DeprecatedMain>\n                            {typeof ratio === 'number' && !removed ? (\n                              <Badge style={{ marginLeft: '10px' }}>\n                                <ThemedText.DeprecatedMain color={theme.textSecondary} fontSize={11}>\n                                  <Trans>{inverted ? ratio : 100 - ratio}%</Trans>\n                                </ThemedText.DeprecatedMain>\n                              </Badge>\n                            ) : null}\n                          </RowFixed>\n                        </RowBetween>\n                        <RowBetween>\n                          <LinkedCurrency chainId={chainId} currency={currencyBase} />\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {inverted ? position?.amount1.toSignificant(4) : position?.amount0.toSignificant(4)}\n                            </ThemedText.DeprecatedMain>\n                            {typeof ratio === 'number' && !removed ? (\n                              <Badge style={{ marginLeft: '10px' }}>\n                                <ThemedText.DeprecatedMain color={theme.textSecondary} fontSize={11}>\n                                  <Trans>{inverted ? 100 - ratio : ratio}%</Trans>\n                                </ThemedText.DeprecatedMain>\n                              </Badge>\n                            ) : null}\n                          </RowFixed>\n                        </RowBetween>\n                      </AutoColumn>\n                    </LightCard>\n                  </AutoColumn>\n                </DarkCard>\n                <DarkCard>\n                  <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                    <AutoColumn gap=\"md\">\n                      <RowBetween style={{ alignItems: 'flex-start' }}>\n                        <AutoColumn gap=\"md\">\n                          <Label>\n                            <Trans>Unclaimed fees</Trans>\n                          </Label>\n                          {fiatValueOfFees?.greaterThan(new Fraction(1, 100)) ? (\n                            <ThemedText.DeprecatedLargeHeader\n                              color={theme.accentSuccess}\n                              fontSize=\"36px\"\n                              fontWeight={500}\n                            >\n                              <Trans>${fiatValueOfFees.toFixed(2, { groupSeparator: ',' })}</Trans>\n                            </ThemedText.DeprecatedLargeHeader>\n                          ) : (\n                            <ThemedText.DeprecatedLargeHeader\n                              color={theme.textPrimary}\n                              fontSize=\"36px\"\n                              fontWeight={500}\n                            >\n                              <Trans>$-</Trans>\n                            </ThemedText.DeprecatedLargeHeader>\n                          )}\n                        </AutoColumn>\n                        {ownsNFT &&\n                        (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0) || !!collectMigrationHash) ? (\n                          <ResponsiveButtonConfirmed\n                            disabled={collecting || !!collectMigrationHash}\n                            confirmed={!!collectMigrationHash && !isCollectPending}\n                            width=\"fit-content\"\n                            style={{ borderRadius: '12px' }}\n                            padding=\"4px 8px\"\n                            onClick={() => setShowConfirm(true)}\n                          >\n                            {!!collectMigrationHash && !isCollectPending ? (\n                              <ThemedText.DeprecatedMain color={theme.textPrimary}>\n                                <Trans> Collected</Trans>\n                              </ThemedText.DeprecatedMain>\n                            ) : isCollectPending || collecting ? (\n                              <ThemedText.DeprecatedMain color={theme.textPrimary}>\n                                {' '}\n                                <Dots>\n                                  <Trans>Collecting</Trans>\n                                </Dots>\n                              </ThemedText.DeprecatedMain>\n                            ) : (\n                              <>\n                                <ThemedText.DeprecatedMain color={theme.white}>\n                                  <Trans>Collect fees</Trans>\n                                </ThemedText.DeprecatedMain>\n                              </>\n                            )}\n                          </ResponsiveButtonConfirmed>\n                        ) : null}\n                      </RowBetween>\n                    </AutoColumn>\n                    <LightCard padding=\"12px 16px\">\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <RowFixed>\n                            <CurrencyLogo\n                              currency={feeValueUpper?.currency}\n                              size=\"20px\"\n                              style={{ marginRight: '0.5rem' }}\n                            />\n                            <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n                          </RowFixed>\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {feeValueUpper ? formatCurrencyAmount(feeValueUpper, 4) : '-'}\n                            </ThemedText.DeprecatedMain>\n                          </RowFixed>\n                        </RowBetween>\n                        <RowBetween>\n                          <RowFixed>\n                            <CurrencyLogo\n                              currency={feeValueLower?.currency}\n                              size=\"20px\"\n                              style={{ marginRight: '0.5rem' }}\n                            />\n                            <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n                          </RowFixed>\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {feeValueLower ? formatCurrencyAmount(feeValueLower, 4) : '-'}\n                            </ThemedText.DeprecatedMain>\n                          </RowFixed>\n                        </RowBetween>\n                      </AutoColumn>\n                    </LightCard>\n                    {showCollectAsWeth && (\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <ThemedText.DeprecatedMain>\n                            <Trans>Collect as {nativeWrappedSymbol}</Trans>\n                          </ThemedText.DeprecatedMain>\n                          <Toggle\n                            id=\"receive-as-weth\"\n                            isActive={receiveWETH}\n                            toggle={() => setReceiveWETH((receiveWETH) => !receiveWETH)}\n                          />\n                        </RowBetween>\n                      </AutoColumn>\n                    )}\n                  </AutoColumn>\n                </DarkCard>\n              </AutoColumn>\n            </ResponsiveRow>\n            <DarkCard>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <RowFixed>\n                    <Label display=\"flex\" style={{ marginRight: '12px' }}>\n                      <Trans>Price range</Trans>\n                    </Label>\n                    <HideExtraSmall>\n                      <>\n                        <RangeBadge removed={removed} inRange={inRange} />\n                        <span style={{ width: '8px' }} />\n                      </>\n                    </HideExtraSmall>\n                  </RowFixed>\n                  <RowFixed>\n                    {currencyBase && currencyQuote && (\n                      <RateToggle\n                        currencyA={currencyBase}\n                        currencyB={currencyQuote}\n                        handleRateToggle={() => setManuallyInverted(!manuallyInverted)}\n                      />\n                    )}\n                  </RowFixed>\n                </RowBetween>\n\n                <RowBetween>\n                  <LightCard padding=\"12px\" width=\"100%\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <ExtentsText>\n                        <Trans>Min price</Trans>\n                      </ExtentsText>\n                      <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                        {formatTickPrice({\n                          price: priceLower,\n                          atLimit: tickAtLimit,\n                          direction: Bound.LOWER,\n                          numberType: NumberType.TokenTx,\n                        })}\n                      </ThemedText.DeprecatedMediumHeader>\n                      <ExtentsText>\n                        {' '}\n                        <Trans>\n                          {currencyQuote?.symbol} per {currencyBase?.symbol}\n                        </Trans>\n                      </ExtentsText>\n\n                      {inRange && (\n                        <ThemedText.DeprecatedSmall color={theme.textTertiary}>\n                          <Trans>Your position will be 100% {currencyBase?.symbol} at this price.</Trans>\n                        </ThemedText.DeprecatedSmall>\n                      )}\n                    </AutoColumn>\n                  </LightCard>\n\n                  <DoubleArrow>⟷</DoubleArrow>\n                  <LightCard padding=\"12px\" width=\"100%\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <ExtentsText>\n                        <Trans>Max price</Trans>\n                      </ExtentsText>\n                      <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                        {formatTickPrice({\n                          price: priceUpper,\n                          atLimit: tickAtLimit,\n                          direction: Bound.UPPER,\n                          numberType: NumberType.TokenTx,\n                        })}\n                      </ThemedText.DeprecatedMediumHeader>\n                      <ExtentsText>\n                        {' '}\n                        <Trans>\n                          {currencyQuote?.symbol} per {currencyBase?.symbol}\n                        </Trans>\n                      </ExtentsText>\n\n                      {inRange && (\n                        <ThemedText.DeprecatedSmall color={theme.textTertiary}>\n                          <Trans>Your position will be 100% {currencyQuote?.symbol} at this price.</Trans>\n                        </ThemedText.DeprecatedSmall>\n                      )}\n                    </AutoColumn>\n                  </LightCard>\n                </RowBetween>\n                <CurrentPriceCard\n                  inverted={inverted}\n                  pool={pool}\n                  currencyQuote={currencyQuote}\n                  currencyBase={currencyBase}\n                />\n              </AutoColumn>\n            </DarkCard>\n          </AutoColumn>\n        </PageWrapper>\n        <SwitchLocaleLink />\n      </>\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/state/mint/v3/hooks.tsx",["3893","3894","3895","3896","3897","3898","3899","3900","3901","3902","3903","3904","3905","3906","3907","3908","3909","3910","3911","3912"],"import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Price, Rounding, Token } from '@uniswap/sdk-core'\nimport {\n  encodeSqrtRatioX96,\n  FeeAmount,\n  nearestUsableTick,\n  Pool,\n  Position,\n  priceToClosestTick,\n  TICK_SPACINGS,\n  TickMath,\n  tickToPrice,\n} from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePool } from 'hooks/usePools'\nimport JSBI from 'jsbi'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useCallback, useMemo } from 'react'\nimport { useSearchParams } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { getTickToPrice } from 'utils/getTickToPrice'\n\nimport { BIG_INT_ZERO } from '../../../constants/misc'\nimport { PoolState } from '../../../hooks/usePools'\nimport { useCurrencyBalances } from '../../connection/hooks'\nimport { AppState } from '../../types'\nimport {\n  Bound,\n  Field,\n  setFullRange,\n  typeInput,\n  typeLeftRangeInput,\n  typeRightRangeInput,\n  typeStartPriceInput,\n} from './actions'\nimport { tryParseTick } from './utils'\n\nexport function useV3MintState(): AppState['mintV3'] {\n  return useAppSelector((state) => state.mintV3)\n}\n\nexport function useV3MintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n  onLeftRangeInput: (typedValue: string) => void\n  onRightRangeInput: (typedValue: string) => void\n  onStartPriceInput: (typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  const onLeftRangeInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeLeftRangeInput({ typedValue }))\n      const paramMinPrice = searchParams.get('minPrice')\n      if (!paramMinPrice || (paramMinPrice && paramMinPrice !== typedValue)) {\n        searchParams.set('minPrice', typedValue)\n        setSearchParams(searchParams)\n      }\n    },\n    [dispatch, searchParams, setSearchParams]\n  )\n\n  const onRightRangeInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeRightRangeInput({ typedValue }))\n      const paramMaxPrice = searchParams.get('maxPrice')\n      if (!paramMaxPrice || (paramMaxPrice && paramMaxPrice !== typedValue)) {\n        searchParams.set('maxPrice', typedValue)\n        setSearchParams(searchParams)\n      }\n    },\n    [dispatch, searchParams, setSearchParams]\n  )\n\n  const onStartPriceInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeStartPriceInput({ typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n    onLeftRangeInput,\n    onRightRangeInput,\n    onStartPriceInput,\n  }\n}\n\nexport function useV3DerivedMintInfo(\n  currencyA?: Currency,\n  currencyB?: Currency,\n  feeAmount?: FeeAmount,\n  baseCurrency?: Currency,\n  // override for existing position\n  existingPosition?: Position\n): {\n  pool?: Pool | null\n  poolState: PoolState\n  ticks: { [bound in Bound]?: number | undefined }\n  price?: Price<Token, Token>\n  pricesAtTicks: {\n    [bound in Bound]?: Price<Token, Token> | undefined\n  }\n  pricesAtLimit: {\n    [bound in Bound]?: Price<Token, Token> | undefined\n  }\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  dependentField: Field\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  position: Position | undefined\n  noLiquidity?: boolean\n  errorMessage?: ReactNode\n  invalidPool: boolean\n  outOfRange: boolean\n  invalidRange: boolean\n  depositADisabled: boolean\n  depositBDisabled: boolean\n  invertPrice: boolean\n  ticksAtLimit: { [bound in Bound]?: boolean | undefined }\n} {\n  const { account } = useWeb3React()\n\n  const { independentField, typedValue, leftRangeTypedValue, rightRangeTypedValue, startPriceTypedValue } =\n    useV3MintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // currencies\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA,\n      [Field.CURRENCY_B]: currencyB,\n    }),\n    [currencyA, currencyB]\n  )\n\n  // formatted with tokens\n  const [tokenA, tokenB, baseToken] = useMemo(\n    () => [currencyA?.wrapped, currencyB?.wrapped, baseCurrency?.wrapped],\n    [currencyA, currencyB, baseCurrency]\n  )\n\n  const [token0, token1] = useMemo(\n    () =>\n      tokenA && tokenB ? (tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]) : [undefined, undefined],\n    [tokenA, tokenB]\n  )\n\n  // balances\n  const balances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]], [currencies])\n  )\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // pool\n  const [poolState, pool] = usePool(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B], feeAmount)\n  const noLiquidity = poolState === PoolState.NOT_EXISTS\n\n  // note to parse inputs in reverse\n  const invertPrice = Boolean(baseToken && token0 && !baseToken.equals(token0))\n\n  // always returns the price with 0 as base token\n  const price: Price<Token, Token> | undefined = useMemo(() => {\n    // if no liquidity use typed value\n    if (noLiquidity) {\n      const parsedQuoteAmount = tryParseCurrencyAmount(startPriceTypedValue, invertPrice ? token0 : token1)\n      if (parsedQuoteAmount && token0 && token1) {\n        const baseAmount = tryParseCurrencyAmount('1', invertPrice ? token1 : token0)\n        const price =\n          baseAmount && parsedQuoteAmount\n            ? new Price(\n                baseAmount.currency,\n                parsedQuoteAmount.currency,\n                baseAmount.quotient,\n                parsedQuoteAmount.quotient\n              )\n            : undefined\n        return (invertPrice ? price?.invert() : price) ?? undefined\n      }\n      return undefined\n    } else {\n      // get the amount of quote currency\n      return pool && token0 ? pool.priceOf(token0) : undefined\n    }\n  }, [noLiquidity, startPriceTypedValue, invertPrice, token1, token0, pool])\n\n  // check for invalid price input (converts to invalid ratio)\n  const invalidPrice = useMemo(() => {\n    const sqrtRatioX96 = price ? encodeSqrtRatioX96(price.numerator, price.denominator) : undefined\n    return (\n      price &&\n      sqrtRatioX96 &&\n      !(\n        JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO)\n      )\n    )\n  }, [price])\n\n  // used for ratio calculation when pool not initialized\n  const mockPool = useMemo(() => {\n    if (tokenA && tokenB && feeAmount && price && !invalidPrice) {\n      const currentTick = priceToClosestTick(price)\n      const currentSqrt = TickMath.getSqrtRatioAtTick(currentTick)\n      return new Pool(tokenA, tokenB, feeAmount, currentSqrt, JSBI.BigInt(0), currentTick, [])\n    } else {\n      return undefined\n    }\n  }, [feeAmount, invalidPrice, price, tokenA, tokenB])\n\n  // if pool exists use it, if not use the mock pool\n  const poolForPosition: Pool | undefined = pool ?? mockPool\n\n  // lower and upper limits in the tick space for `feeAmoun<Trans>\n  const tickSpaceLimits = useMemo(\n    () => ({\n      [Bound.LOWER]: feeAmount ? nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[feeAmount]) : undefined,\n      [Bound.UPPER]: feeAmount ? nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[feeAmount]) : undefined,\n    }),\n    [feeAmount]\n  )\n\n  // parse typed range values and determine closest ticks\n  // lower should always be a smaller tick\n  const ticks = useMemo(() => {\n    return {\n      [Bound.LOWER]:\n        typeof existingPosition?.tickLower === 'number'\n          ? existingPosition.tickLower\n          : (invertPrice && typeof rightRangeTypedValue === 'boolean') ||\n            (!invertPrice && typeof leftRangeTypedValue === 'boolean')\n          ? tickSpaceLimits[Bound.LOWER]\n          : invertPrice\n          ? tryParseTick(token1, token0, feeAmount, rightRangeTypedValue.toString())\n          : tryParseTick(token0, token1, feeAmount, leftRangeTypedValue.toString()),\n      [Bound.UPPER]:\n        typeof existingPosition?.tickUpper === 'number'\n          ? existingPosition.tickUpper\n          : (!invertPrice && typeof rightRangeTypedValue === 'boolean') ||\n            (invertPrice && typeof leftRangeTypedValue === 'boolean')\n          ? tickSpaceLimits[Bound.UPPER]\n          : invertPrice\n          ? tryParseTick(token1, token0, feeAmount, leftRangeTypedValue.toString())\n          : tryParseTick(token0, token1, feeAmount, rightRangeTypedValue.toString()),\n    }\n  }, [\n    existingPosition,\n    feeAmount,\n    invertPrice,\n    leftRangeTypedValue,\n    rightRangeTypedValue,\n    token0,\n    token1,\n    tickSpaceLimits,\n  ])\n\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks || {}\n\n  // specifies whether the lower and upper ticks is at the exteme bounds\n  const ticksAtLimit = useMemo(\n    () => ({\n      [Bound.LOWER]: feeAmount && tickLower === tickSpaceLimits.LOWER,\n      [Bound.UPPER]: feeAmount && tickUpper === tickSpaceLimits.UPPER,\n    }),\n    [tickSpaceLimits, tickLower, tickUpper, feeAmount]\n  )\n\n  // mark invalid range\n  const invalidRange = Boolean(typeof tickLower === 'number' && typeof tickUpper === 'number' && tickLower >= tickUpper)\n\n  const pricesAtLimit = useMemo(() => {\n    return {\n      [Bound.LOWER]: getTickToPrice(token0, token1, tickSpaceLimits.LOWER),\n      [Bound.UPPER]: getTickToPrice(token0, token1, tickSpaceLimits.UPPER),\n    }\n  }, [token0, token1, tickSpaceLimits.LOWER, tickSpaceLimits.UPPER])\n\n  // always returns the price with 0 as base token\n  const pricesAtTicks = useMemo(() => {\n    return {\n      [Bound.LOWER]: getTickToPrice(token0, token1, ticks[Bound.LOWER]),\n      [Bound.UPPER]: getTickToPrice(token0, token1, ticks[Bound.UPPER]),\n    }\n  }, [token0, token1, ticks])\n  const { [Bound.LOWER]: lowerPrice, [Bound.UPPER]: upperPrice } = pricesAtTicks\n\n  // liquidity range warning\n  const outOfRange = Boolean(\n    !invalidRange && price && lowerPrice && upperPrice && (price.lessThan(lowerPrice) || price.greaterThan(upperPrice))\n  )\n\n  // amounts\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseCurrencyAmount(\n    typedValue,\n    currencies[independentField]\n  )\n\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    // we wrap the currencies just to get the price in terms of the other token\n    const wrappedIndependentAmount = independentAmount?.wrapped\n    const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n    if (\n      independentAmount &&\n      wrappedIndependentAmount &&\n      typeof tickLower === 'number' &&\n      typeof tickUpper === 'number' &&\n      poolForPosition\n    ) {\n      // if price is out of range or invalid range - return 0 (single deposit will be independent)\n      if (outOfRange || invalidRange) {\n        return undefined\n      }\n\n      const position: Position | undefined = wrappedIndependentAmount.currency.equals(poolForPosition.token0)\n        ? Position.fromAmount0({\n            pool: poolForPosition,\n            tickLower,\n            tickUpper,\n            amount0: independentAmount.quotient,\n            useFullPrecision: true, // we want full precision for the theoretical position\n          })\n        : Position.fromAmount1({\n            pool: poolForPosition,\n            tickLower,\n            tickUpper,\n            amount1: independentAmount.quotient,\n          })\n\n      const dependentTokenAmount = wrappedIndependentAmount.currency.equals(poolForPosition.token0)\n        ? position.amount1\n        : position.amount0\n      return dependentCurrency && CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n    }\n\n    return undefined\n  }, [\n    independentAmount,\n    outOfRange,\n    dependentField,\n    currencyB,\n    currencyA,\n    tickLower,\n    tickUpper,\n    poolForPosition,\n    invalidRange,\n  ])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(() => {\n    return {\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }\n  }, [dependentAmount, independentAmount, independentField])\n\n  // single deposit only if price is out of range\n  const deposit0Disabled = Boolean(\n    typeof tickUpper === 'number' && poolForPosition && poolForPosition.tickCurrent >= tickUpper\n  )\n  const deposit1Disabled = Boolean(\n    typeof tickLower === 'number' && poolForPosition && poolForPosition.tickCurrent <= tickLower\n  )\n\n  // sorted for token order\n  const depositADisabled =\n    invalidRange ||\n    Boolean(\n      (deposit0Disabled && poolForPosition && tokenA && poolForPosition.token0.equals(tokenA)) ||\n        (deposit1Disabled && poolForPosition && tokenA && poolForPosition.token1.equals(tokenA))\n    )\n  const depositBDisabled =\n    invalidRange ||\n    Boolean(\n      (deposit0Disabled && poolForPosition && tokenB && poolForPosition.token0.equals(tokenB)) ||\n        (deposit1Disabled && poolForPosition && tokenB && poolForPosition.token1.equals(tokenB))\n    )\n\n  // create position entity based on users selection\n  const position: Position | undefined = useMemo(() => {\n    if (\n      !poolForPosition ||\n      !tokenA ||\n      !tokenB ||\n      typeof tickLower !== 'number' ||\n      typeof tickUpper !== 'number' ||\n      invalidRange\n    ) {\n      return undefined\n    }\n\n    // mark as 0 if disabled because out of range\n    const amount0 = !deposit0Disabled\n      ? parsedAmounts?.[tokenA.equals(poolForPosition.token0) ? Field.CURRENCY_A : Field.CURRENCY_B]?.quotient\n      : BIG_INT_ZERO\n    const amount1 = !deposit1Disabled\n      ? parsedAmounts?.[tokenA.equals(poolForPosition.token0) ? Field.CURRENCY_B : Field.CURRENCY_A]?.quotient\n      : BIG_INT_ZERO\n\n    if (amount0 !== undefined && amount1 !== undefined) {\n      return Position.fromAmounts({\n        pool: poolForPosition,\n        tickLower,\n        tickUpper,\n        amount0,\n        amount1,\n        useFullPrecision: true, // we want full precision for the theoretical position\n      })\n    } else {\n      return undefined\n    }\n  }, [\n    parsedAmounts,\n    poolForPosition,\n    tokenA,\n    tokenB,\n    deposit0Disabled,\n    deposit1Disabled,\n    invalidRange,\n    tickLower,\n    tickUpper,\n  ])\n\n  let errorMessage: ReactNode | undefined\n  if (!account) {\n    errorMessage = <Trans>Connect Wallet</Trans>\n  }\n\n  if (poolState === PoolState.INVALID) {\n    errorMessage = errorMessage ?? <Trans>Invalid pair</Trans>\n  }\n\n  if (invalidPrice) {\n    errorMessage = errorMessage ?? <Trans>Invalid price input</Trans>\n  }\n\n  if (\n    (!parsedAmounts[Field.CURRENCY_A] && !depositADisabled) ||\n    (!parsedAmounts[Field.CURRENCY_B] && !depositBDisabled)\n  ) {\n    errorMessage = errorMessage ?? <Trans>Enter an amount</Trans>\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    errorMessage = <Trans>Insufficient {currencies[Field.CURRENCY_A]?.symbol} balance</Trans>\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    errorMessage = <Trans>Insufficient {currencies[Field.CURRENCY_B]?.symbol} balance</Trans>\n  }\n\n  const invalidPool = poolState === PoolState.INVALID\n\n  return {\n    dependentField,\n    currencies,\n    pool,\n    poolState,\n    currencyBalances,\n    parsedAmounts,\n    ticks,\n    price,\n    pricesAtTicks,\n    pricesAtLimit,\n    position,\n    noLiquidity,\n    errorMessage,\n    invalidPool,\n    invalidRange,\n    outOfRange,\n    depositADisabled,\n    depositBDisabled,\n    invertPrice,\n    ticksAtLimit,\n  }\n}\n\nexport function useRangeHopCallbacks(\n  baseCurrency: Currency | undefined,\n  quoteCurrency: Currency | undefined,\n  feeAmount: FeeAmount | undefined,\n  tickLower: number | undefined,\n  tickUpper: number | undefined,\n  pool?: Pool | undefined | null\n) {\n  const dispatch = useAppDispatch()\n\n  const baseToken = useMemo(() => baseCurrency?.wrapped, [baseCurrency])\n  const quoteToken = useMemo(() => quoteCurrency?.wrapped, [quoteCurrency])\n\n  const getDecrementLower = useCallback(() => {\n    if (baseToken && quoteToken && typeof tickLower === 'number' && feeAmount) {\n      const newPrice = tickToPrice(baseToken, quoteToken, tickLower - TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    // use pool current tick as starting tick if we have pool but no tick input\n    if (!(typeof tickLower === 'number') && baseToken && quoteToken && feeAmount && pool) {\n      const newPrice = tickToPrice(baseToken, quoteToken, pool.tickCurrent - TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    return ''\n  }, [baseToken, quoteToken, tickLower, feeAmount, pool])\n\n  const getIncrementLower = useCallback(() => {\n    if (baseToken && quoteToken && typeof tickLower === 'number' && feeAmount) {\n      const newPrice = tickToPrice(baseToken, quoteToken, tickLower + TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    // use pool current tick as starting tick if we have pool but no tick input\n    if (!(typeof tickLower === 'number') && baseToken && quoteToken && feeAmount && pool) {\n      const newPrice = tickToPrice(baseToken, quoteToken, pool.tickCurrent + TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    return ''\n  }, [baseToken, quoteToken, tickLower, feeAmount, pool])\n\n  const getDecrementUpper = useCallback(() => {\n    if (baseToken && quoteToken && typeof tickUpper === 'number' && feeAmount) {\n      const newPrice = tickToPrice(baseToken, quoteToken, tickUpper - TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    // use pool current tick as starting tick if we have pool but no tick input\n    if (!(typeof tickUpper === 'number') && baseToken && quoteToken && feeAmount && pool) {\n      const newPrice = tickToPrice(baseToken, quoteToken, pool.tickCurrent - TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    return ''\n  }, [baseToken, quoteToken, tickUpper, feeAmount, pool])\n\n  const getIncrementUpper = useCallback(() => {\n    if (baseToken && quoteToken && typeof tickUpper === 'number' && feeAmount) {\n      const newPrice = tickToPrice(baseToken, quoteToken, tickUpper + TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    // use pool current tick as starting tick if we have pool but no tick input\n    if (!(typeof tickUpper === 'number') && baseToken && quoteToken && feeAmount && pool) {\n      const newPrice = tickToPrice(baseToken, quoteToken, pool.tickCurrent + TICK_SPACINGS[feeAmount])\n      return newPrice.toSignificant(5, undefined, Rounding.ROUND_UP)\n    }\n    return ''\n  }, [baseToken, quoteToken, tickUpper, feeAmount, pool])\n\n  const getSetFullRange = useCallback(() => {\n    dispatch(setFullRange())\n  }, [dispatch])\n\n  return { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper, getSetFullRange }\n}\n","/workspace/Physica-Interfae/src/components/AccountDetails/TransactionSummary.tsx",[],"/workspace/Physica-Interfae/src/components/addLiquidity/OwnershipWarning.tsx",[],"/workspace/Physica-Interfae/src/pages/CreateProposal/index.tsx",["3913","3914","3915","3916","3917","3918","3919","3920","3921","3922"],"import { defaultAbiCoder } from '@ethersproject/abi'\nimport { getAddress, isAddress } from '@ethersproject/address'\nimport { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonError } from 'components/Button'\nimport { BlueCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport JSBI from 'jsbi'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { Wrapper } from 'pages/Pool/styleds'\nimport { useCallback, useMemo, useState } from 'react'\nimport {\n  CreateProposalData,\n  ProposalState,\n  useCreateProposalCallback,\n  useLatestProposalId,\n  useProposalData,\n  useProposalThreshold,\n  useUserVotes,\n} from 'state/governance/hooks'\nimport styled from 'styled-components/macro'\nimport { ExternalLink, ThemedText } from 'theme'\n\nimport { CreateProposalTabs } from '../../components/NavigationTabs'\nimport { LATEST_GOVERNOR_INDEX } from '../../constants/governance'\nimport { UNI } from '../../constants/tokens'\nimport AppBody from '../AppBody'\nimport { ProposalActionDetail } from './ProposalActionDetail'\nimport { ProposalAction, ProposalActionSelector, ProposalActionSelectorModal } from './ProposalActionSelector'\nimport { ProposalEditor } from './ProposalEditor'\nimport { ProposalSubmissionModal } from './ProposalSubmissionModal'\n\nconst PageWrapper = styled(AutoColumn)`\n  padding: 68px 8px 0px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    padding: 48px 8px 0px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-top: 20px;\n  }\n`\n\nconst CreateProposalButton = ({\n  proposalThreshold,\n  hasActiveOrPendingProposal,\n  hasEnoughVote,\n  isFormInvalid,\n  handleCreateProposal,\n}: {\n  proposalThreshold?: CurrencyAmount<Token>\n  hasActiveOrPendingProposal: boolean\n  hasEnoughVote: boolean\n  isFormInvalid: boolean\n  handleCreateProposal: () => void\n}) => {\n  const formattedProposalThreshold = proposalThreshold\n    ? JSBI.divide(\n        proposalThreshold.quotient,\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(proposalThreshold.currency.decimals))\n      ).toLocaleString()\n    : undefined\n\n  return (\n    <ButtonError\n      style={{ marginTop: '18px' }}\n      error={hasActiveOrPendingProposal || !hasEnoughVote}\n      disabled={isFormInvalid || hasActiveOrPendingProposal || !hasEnoughVote}\n      onClick={handleCreateProposal}\n    >\n      {hasActiveOrPendingProposal ? (\n        <Trans>You already have an active or pending proposal</Trans>\n      ) : !hasEnoughVote ? (\n        <>\n          {formattedProposalThreshold ? (\n            <Trans>You must have {formattedProposalThreshold} votes to submit a proposal</Trans>\n          ) : (\n            <Trans>You don&apos;t have enough votes to submit a proposal</Trans>\n          )}\n        </>\n      ) : (\n        <Trans>Create Proposal</Trans>\n      )}\n    </ButtonError>\n  )\n}\n\nconst CreateProposalWrapper = styled(Wrapper)`\n  display: flex;\n  flex-flow: column wrap;\n`\n\nconst AutonomousProposalCTA = styled.div`\n  text-align: center;\n  margin-top: 10px;\n`\n\nexport default function CreateProposal() {\n  const { account, chainId } = useWeb3React()\n\n  const latestProposalId = useLatestProposalId(account ?? undefined) ?? '0'\n  const latestProposalData = useProposalData(LATEST_GOVERNOR_INDEX, latestProposalId)\n  const { votes: availableVotes } = useUserVotes()\n  const proposalThreshold: CurrencyAmount<Token> | undefined = useProposalThreshold()\n\n  const [modalOpen, setModalOpen] = useState(false)\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n  const [proposalAction, setProposalAction] = useState(ProposalAction.TRANSFER_TOKEN)\n  const [toAddressValue, setToAddressValue] = useState('')\n  const [currencyValue, setCurrencyValue] = useState<Currency>(UNI[chainId ?? 1])\n  const [amountValue, setAmountValue] = useState('')\n  const [titleValue, setTitleValue] = useState('')\n  const [bodyValue, setBodyValue] = useState('')\n\n  const handleActionSelectorClick = useCallback(() => {\n    setModalOpen(true)\n  }, [setModalOpen])\n\n  const handleActionChange = useCallback(\n    (proposalAction: ProposalAction) => {\n      setProposalAction(proposalAction)\n    },\n    [setProposalAction]\n  )\n\n  const handleDismissActionSelector = useCallback(() => {\n    setModalOpen(false)\n  }, [setModalOpen])\n\n  const handleDismissSubmissionModal = useCallback(() => {\n    setHash(undefined)\n    setAttempting(false)\n  }, [setHash, setAttempting])\n\n  const handleToAddressInput = useCallback(\n    (toAddress: string) => {\n      setToAddressValue(toAddress)\n    },\n    [setToAddressValue]\n  )\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      setCurrencyValue(currency)\n    },\n    [setCurrencyValue]\n  )\n\n  const handleAmountInput = useCallback(\n    (amount: string) => {\n      setAmountValue(amount)\n    },\n    [setAmountValue]\n  )\n\n  const handleTitleInput = useCallback(\n    (title: string) => {\n      setTitleValue(title)\n    },\n    [setTitleValue]\n  )\n\n  const handleBodyInput = useCallback(\n    (body: string) => {\n      setBodyValue(body)\n    },\n    [setBodyValue]\n  )\n\n  const isFormInvalid = useMemo(\n    () =>\n      Boolean(\n        !proposalAction ||\n          !isAddress(toAddressValue) ||\n          !currencyValue?.isToken ||\n          amountValue === '' ||\n          titleValue === '' ||\n          bodyValue === ''\n      ),\n    [proposalAction, toAddressValue, currencyValue, amountValue, titleValue, bodyValue]\n  )\n\n  const hasEnoughVote = Boolean(\n    availableVotes && proposalThreshold && JSBI.greaterThanOrEqual(availableVotes.quotient, proposalThreshold.quotient)\n  )\n\n  const createProposalCallback = useCreateProposalCallback()\n\n  const handleCreateProposal = async () => {\n    setAttempting(true)\n\n    const createProposalData: CreateProposalData = {} as CreateProposalData\n\n    if (!createProposalCallback || !proposalAction || !currencyValue.isToken) return\n\n    const tokenAmount = tryParseCurrencyAmount(amountValue, currencyValue)\n    if (!tokenAmount) return\n\n    createProposalData.targets = [currencyValue.address]\n    createProposalData.values = ['0']\n    createProposalData.description = `# ${titleValue}\n\n${bodyValue}\n`\n\n    let types: string[][]\n    let values: string[][]\n    switch (proposalAction) {\n      case ProposalAction.TRANSFER_TOKEN: {\n        types = [['address', 'uint256']]\n        values = [[getAddress(toAddressValue), tokenAmount.quotient.toString()]]\n        createProposalData.signatures = [`transfer(${types[0].join(',')})`]\n        break\n      }\n\n      case ProposalAction.APPROVE_TOKEN: {\n        types = [['address', 'uint256']]\n        values = [[getAddress(toAddressValue), tokenAmount.quotient.toString()]]\n        createProposalData.signatures = [`approve(${types[0].join(',')})`]\n        break\n      }\n    }\n\n    createProposalData.calldatas = []\n    for (let i = 0; i < createProposalData.signatures.length; i++) {\n      createProposalData.calldatas[i] = defaultAbiCoder.encode(types[i], values[i])\n    }\n\n    const hash = await createProposalCallback(createProposalData ?? undefined)?.catch(() => {\n      setAttempting(false)\n    })\n\n    if (hash) setHash(hash)\n  }\n\n  return (\n    <Trace page={InterfacePageName.VOTE_PAGE} shouldLogImpression>\n      <PageWrapper>\n        <AppBody $maxWidth=\"800px\">\n          <CreateProposalTabs />\n          <CreateProposalWrapper>\n            <BlueCard>\n              <AutoColumn gap=\"10px\">\n                <ThemedText.DeprecatedLink fontWeight={400} color=\"accentAction\">\n                  <Trans>\n                    <strong>Tip:</strong> Select an action and describe your proposal for the community. The proposal\n                    cannot be modified after submission, so please verify all information before submitting. The voting\n                    period will begin immediately and last for 7 days. To propose a custom action,{' '}\n                    <ExternalLink href=\"https://docs.uniswap.org/protocol/reference/Governance/governance-reference#propose\">\n                      read the docs\n                    </ExternalLink>\n                    .\n                  </Trans>\n                </ThemedText.DeprecatedLink>\n              </AutoColumn>\n            </BlueCard>\n\n            <ProposalActionSelector onClick={handleActionSelectorClick} proposalAction={proposalAction} />\n            <ProposalActionDetail\n              proposalAction={proposalAction}\n              currency={currencyValue}\n              amount={amountValue}\n              toAddress={toAddressValue}\n              onCurrencySelect={handleCurrencySelect}\n              onAmountInput={handleAmountInput}\n              onToAddressInput={handleToAddressInput}\n            />\n            <ProposalEditor\n              title={titleValue}\n              body={bodyValue}\n              onTitleInput={handleTitleInput}\n              onBodyInput={handleBodyInput}\n            />\n            <CreateProposalButton\n              proposalThreshold={proposalThreshold}\n              hasActiveOrPendingProposal={\n                latestProposalData?.status === ProposalState.ACTIVE ||\n                latestProposalData?.status === ProposalState.PENDING\n              }\n              hasEnoughVote={hasEnoughVote}\n              isFormInvalid={isFormInvalid}\n              handleCreateProposal={handleCreateProposal}\n            />\n            {!hasEnoughVote ? (\n              <AutonomousProposalCTA>\n                Don’t have 2.5M votes? Anyone can create an autonomous proposal using{' '}\n                <ExternalLink href=\"https://fish.vote\">fish.vote</ExternalLink>\n              </AutonomousProposalCTA>\n            ) : null}\n          </CreateProposalWrapper>\n          <ProposalActionSelectorModal\n            isOpen={modalOpen}\n            onDismiss={handleDismissActionSelector}\n            onProposalActionSelect={(proposalAction: ProposalAction) => handleActionChange(proposalAction)}\n          />\n          <ProposalSubmissionModal isOpen={attempting} hash={hash} onDismiss={handleDismissSubmissionModal} />\n        </AppBody>\n      </PageWrapper>\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/components/QuestionHelper/index.tsx",[],"/workspace/Physica-Interfae/src/pages/Swap/index.tsx",[],"/workspace/Physica-Interfae/src/components/Popups/ClaimPopup.tsx",[],"/workspace/Physica-Interfae/src/components/Popups/PopupItem.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/Blur.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/MenuDropdown.tsx",["3923","3924","3925","3926","3927","3928","3929","3930","3931","3932","3933"],"import { t, Trans } from '@lingui/macro'\nimport { InterfaceElementName } from '@uniswap/analytics-events'\nimport { openDownloadApp } from 'components/AccountDrawer/DownloadButton'\nimport FeatureFlagModal from 'components/FeatureFlagModal/FeatureFlagModal'\nimport { PrivacyPolicyModal } from 'components/PrivacyPolicy'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  BarChartIcon,\n  DiscordIconMenu,\n  EllipsisIcon,\n  GithubIconMenu,\n  GovernanceIcon,\n  PoolIcon,\n  TwitterIconMenu,\n} from 'nft/components/icons'\nimport { body, bodySmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { ReactNode, useReducer, useRef } from 'react'\nimport { NavLink, NavLinkProps } from 'react-router-dom'\nimport { useToggleModal } from 'state/application/hooks'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { isDevelopmentEnv, isStagingEnv } from 'utils/env'\nimport ThemeToggle from 'theme/components/ThemeToggle'\n\nimport { ReactComponent as AppleLogo } from '../../assets/svg/apple_logo.svg'\nimport { ApplicationModal } from '../../state/application/reducer'\nimport * as styles from './MenuDropdown.css'\nimport { NavDropdown } from './NavDropdown'\nimport { NavIcon } from './NavIcon'\n\nconst PrimaryMenuRow = ({\n  to,\n  href,\n  close,\n  children,\n}: {\n  to?: NavLinkProps['to']\n  href?: string\n  close?: () => void\n  children: ReactNode\n}) => {\n  return (\n    <>\n      {to ? (\n        <NavLink to={to} className={styles.MenuRow}>\n          <Row onClick={close}>{children}</Row>\n        </NavLink>\n      ) : (\n        <Row cursor=\"pointer\" as=\"a\" href={href} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.MenuRow}>\n          {children}\n        </Row>\n      )}\n    </>\n  )\n}\n\nconst StyledBox = styled(Box)`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`\nconst ThemeToggleContainer = styled.div`\n  margin: 0 0 6px;\n  padding: 0 4%;\n`\nconst PrimaryMenuRowText = ({ children }: { children: ReactNode }) => {\n  return <StyledBox className={`${styles.PrimaryText} ${body}`}>{children}</StyledBox>\n}\n\nPrimaryMenuRow.Text = PrimaryMenuRowText\n\nconst SecondaryLinkedText = ({\n  href,\n  onClick,\n  children,\n}: {\n  href?: string\n  onClick?: () => void\n  children: ReactNode\n}) => {\n  return (\n    <Box\n      as={href ? 'a' : 'div'}\n      href={href ?? undefined}\n      target={href ? '_blank' : undefined}\n      rel={href ? 'noopener noreferrer' : undefined}\n      className={`${styles.SecondaryText} ${bodySmall}`}\n      onClick={onClick}\n      cursor=\"pointer\"\n    >\n      {children}\n    </Box>\n  )\n}\n\nconst Separator = () => {\n  return <Box className={styles.Separator} />\n}\n\nconst IconRow = ({ children }: { children: ReactNode }) => {\n  return <Row className={styles.IconRow}>{children}</Row>\n}\n\nconst Icon = ({ href, children }: { href?: string; children: ReactNode }) => {\n  return (\n    <>\n      <Box\n        as={href ? 'a' : 'div'}\n        href={href ?? undefined}\n        target={href ? '_blank' : undefined}\n        rel={href ? 'noopener noreferrer' : undefined}\n        display=\"flex\"\n        flexDirection=\"column\"\n        color=\"textPrimary\"\n        background=\"none\"\n        border=\"none\"\n        justifyContent=\"center\"\n        textAlign=\"center\"\n        marginRight=\"12\"\n      >\n        {children}\n      </Box>\n    </>\n  )\n}\n\nexport const MenuDropdown = () => {\n  const theme = useTheme()\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const togglePrivacyPolicy = useToggleModal(ApplicationModal.PRIVACY_POLICY)\n  const openFeatureFlagsModal = useToggleModal(ApplicationModal.FEATURE_FLAGS)\n  const ref = useRef<HTMLDivElement>(null)\n  useOnClickOutside(ref, isOpen ? toggleOpen : undefined)\n\n  return (\n    <>\n      <Box position=\"relative\" ref={ref}>\n        <NavIcon isActive={isOpen} onClick={toggleOpen} label={isOpen ? t`Show resources` : t`Hide resources`}>\n          <EllipsisIcon viewBox=\"0 0 20 20\" width={24} height={24} />\n        </NavIcon>\n\n        {isOpen && (\n          <NavDropdown top={{ sm: 'unset', lg: '56' }} bottom={{ sm: '56', lg: 'unset' }} right=\"0\">\n            <Column gap=\"16\">\n              <Column paddingX=\"8\" gap=\"4\">\n                <Box display={{ sm: 'none', lg: 'flex', xxl: 'none' }}>\n                  <PrimaryMenuRow to=\"/pool\" close={toggleOpen}>\n                    <Icon>\n                      <PoolIcon width={24} height={24} fill={theme.textPrimary} />\n                    </Icon>\n                    <PrimaryMenuRow.Text>\n                      <Trans>Pool</Trans>\n                    </PrimaryMenuRow.Text>\n                  </PrimaryMenuRow>\n                </Box>\n                <ThemeToggleContainer>\n                  <ThemeToggle />\n                </ThemeToggleContainer>\n              </Column>\n              <Separator />\n              <Box\n                display=\"flex\"\n                flexDirection={{ sm: 'row', md: 'column' }}\n                flexWrap=\"wrap\"\n                alignItems={{ sm: 'center', md: 'flex-start' }}\n                paddingX=\"8\"\n              >\n                <SecondaryLinkedText href=\"https://help.uniswap.org/en/\">\n                  <Trans>Help center</Trans> ↗\n                </SecondaryLinkedText>\n                <SecondaryLinkedText href=\"https://docs.uniswap.org/\">\n                  <Trans>Documentation</Trans> ↗\n                </SecondaryLinkedText>\n                <SecondaryLinkedText href=\"https://uniswap.canny.io/feature-requests\">\n                  <Trans>Feedback</Trans> ↗\n                </SecondaryLinkedText>\n                <SecondaryLinkedText\n                  onClick={() => {\n                    toggleOpen()\n                    togglePrivacyPolicy()\n                  }}\n                >\n                  <Trans>Legal & Privacy</Trans> ↗\n                </SecondaryLinkedText>\n                {(isDevelopmentEnv() || isStagingEnv()) && (\n                  <SecondaryLinkedText onClick={openFeatureFlagsModal}>\n                    <Trans>Feature Flags</Trans>\n                  </SecondaryLinkedText>\n                )}\n              </Box>\n              <IconRow>\n                <Icon href=\"https://discord.com/invite/FCfyBSbCU5\">\n                  <DiscordIconMenu\n                    className={styles.hover}\n                    width={24}\n                    height={24}\n                    color={themeVars.colors.textSecondary}\n                  />\n                </Icon>\n                <Icon href=\"https://twitter.com/Uniswap\">\n                  <TwitterIconMenu\n                    className={styles.hover}\n                    width={24}\n                    height={24}\n                    color={themeVars.colors.textSecondary}\n                  />\n                </Icon>\n                <Icon href=\"https://github.com/Uniswap\">\n                  <GithubIconMenu\n                    className={styles.hover}\n                    width={24}\n                    height={24}\n                    color={themeVars.colors.textSecondary}\n                  />\n                </Icon>\n              </IconRow>\n            </Column>\n          </NavDropdown>\n        )}\n      </Box>\n      <PrivacyPolicyModal />\n      <FeatureFlagModal />\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/components/NavBar/SearchBar.tsx",["3934","3935","3936"],"// eslint-disable-next-line no-restricted-imports\nimport { t, Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, Trace, TraceEvent, useTrace } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName, InterfaceSectionName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport clsx from 'clsx'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { useCollectionSearch } from 'graphql/data/nft/CollectionSearch'\nimport { useSearchTokens } from 'graphql/data/SearchTokens'\nimport useDebounce from 'hooks/useDebounce'\nimport { useIsNftPage } from 'hooks/useIsNftPage'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { organizeSearchResults } from 'lib/utils/searchBar'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport { magicalGradientOnHover } from 'nft/css/common.css'\nimport { useIsMobile, useIsTablet } from 'nft/hooks'\nimport { useIsNavSearchInputVisible } from 'nft/hooks/useIsNavSearchInputVisible'\nimport { fetchSearchCollections } from 'nft/queries'\nimport { ChangeEvent, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { ChevronLeftIcon, MagnifyingGlassIcon, NavMagnifyingGlassIcon } from '../../nft/components/icons'\nimport { NavIcon } from './NavIcon'\nimport * as styles from './SearchBar.css'\nimport { SearchBarDropdown } from './SearchBarDropdown'\n\nconst KeyShortCut = styled.div`\n  background-color: ${({ theme }) => theme.hoverState};\n  color: ${({ theme }) => theme.textSecondary};\n  padding: 0px 8px;\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 800;\n  line-height: 16px;\n  display: flex;\n  align-items: center;\n  opacity: 0.6;\n  backdrop-filter: blur(60px);\n`\n\nexport const SearchBar = () => {\n  const [isOpen, toggleOpen] = useReducer((state: boolean) => !state, false)\n  const [searchValue, setSearchValue] = useState('')\n  const debouncedSearchValue = useDebounce(searchValue, 300)\n  const searchRef = useRef<HTMLDivElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const { pathname } = useLocation()\n  const isMobile = useIsMobile()\n  const isTablet = useIsTablet()\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const isNavSearchInputVisible = useIsNavSearchInputVisible()\n\n  useOnClickOutside(searchRef, () => {\n    isOpen && toggleOpen()\n  })\n\n  const { data: queryCollections, isLoading: queryCollectionsAreLoading } = useQuery(\n    ['searchCollections', debouncedSearchValue],\n    () => fetchSearchCollections(debouncedSearchValue),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n      enabled: !!debouncedSearchValue.length,\n    }\n  )\n\n  const { data: gqlCollections, loading: gqlCollectionsAreLoading } = useCollectionSearch(debouncedSearchValue)\n\n  const { gatedCollections, gatedCollectionsAreLoading } = useMemo(() => {\n    return isNftGraphqlEnabled\n      ? {\n          gatedCollections: gqlCollections,\n          gatedCollectionsAreLoading: gqlCollectionsAreLoading,\n        }\n      : {\n          gatedCollections: queryCollections,\n          gatedCollectionsAreLoading: queryCollectionsAreLoading,\n        }\n  }, [gqlCollections, gqlCollectionsAreLoading, isNftGraphqlEnabled, queryCollections, queryCollectionsAreLoading])\n\n  const { chainId } = useWeb3React()\n  const { data: tokens, loading: tokensAreLoading } = useSearchTokens(debouncedSearchValue, chainId ?? 1)\n\n  const isNFTPage = useIsNftPage()\n\n  const [reducedTokens, reducedCollections] = organizeSearchResults(isNFTPage, tokens ?? [], gatedCollections ?? [])\n\n  // close dropdown on escape\n  useEffect(() => {\n    const escapeKeyDownHandler = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        event.preventDefault()\n        toggleOpen()\n      }\n    }\n\n    document.addEventListener('keydown', escapeKeyDownHandler)\n\n    return () => {\n      document.removeEventListener('keydown', escapeKeyDownHandler)\n    }\n  }, [isOpen, toggleOpen, gatedCollections])\n\n  // clear searchbar when changing pages\n  useEffect(() => {\n    setSearchValue('')\n  }, [pathname])\n\n  // auto set cursor when searchbar is opened\n  useEffect(() => {\n    if (isOpen) {\n      inputRef.current?.focus()\n    }\n  }, [isOpen])\n\n  const isMobileOrTablet = isMobile || isTablet || !isNavSearchInputVisible\n\n  const trace = useTrace({ section: InterfaceSectionName.NAVBAR_SEARCH })\n\n  const navbarSearchEventProperties = {\n    navbar_search_input_text: debouncedSearchValue,\n    hasInput: debouncedSearchValue && debouncedSearchValue.length > 0,\n    ...trace,\n  }\n  const placeholderText = useMemo(() => {\n    return isMobileOrTablet ? t`Search` : t`Search tokens and NFT collections`\n  }, [isMobileOrTablet])\n\n  const handleKeyPress = useCallback(\n    (event: any) => {\n      if (event.key === '/') {\n        event.preventDefault()\n        !isOpen && toggleOpen()\n      }\n    },\n    [isOpen]\n  )\n\n  useEffect(() => {\n    const innerRef = inputRef.current\n\n    if (innerRef !== null) {\n      //only mount the listener when input available as ref\n      document.addEventListener('keydown', handleKeyPress)\n    }\n\n    return () => {\n      if (innerRef !== null) {\n        document.removeEventListener('keydown', handleKeyPress)\n      }\n    }\n  }, [handleKeyPress, inputRef])\n\n  return (\n    <Trace section={InterfaceSectionName.NAVBAR_SEARCH}>\n      <Box\n        data-cy=\"search-bar\"\n        position={{ sm: 'fixed', md: 'absolute', xl: 'relative' }}\n        width={{ sm: isOpen ? 'viewWidth' : 'auto', md: 'auto' }}\n        ref={searchRef}\n        className={styles.searchBarContainerNft}\n        display={{ sm: isOpen ? 'inline-block' : 'none', xl: 'inline-block' }}\n      >\n        <Row\n          className={clsx(\n            styles.nftSearchBar,\n            !isOpen && !isMobile && magicalGradientOnHover,\n            isMobileOrTablet && (isOpen ? styles.visible : styles.hidden)\n          )}\n          borderRadius={isOpen || isMobileOrTablet ? undefined : '12'}\n          borderTopRightRadius={isOpen && !isMobile ? '12' : undefined}\n          borderTopLeftRadius={isOpen && !isMobile ? '12' : undefined}\n          borderBottomWidth={isOpen || isMobileOrTablet ? '0px' : '1px'}\n          backgroundColor={isOpen ? 'backgroundSurface' : 'searchBackground'}\n          onClick={() => !isOpen && toggleOpen()}\n          gap=\"12\"\n        >\n          <Box className={styles.searchContentLeftAlign}>\n            <Box display={{ sm: 'none', md: 'flex' }}>\n              <MagnifyingGlassIcon />\n            </Box>\n            <Box display={{ sm: 'flex', md: 'none' }} color=\"textTertiary\" onClick={toggleOpen}>\n              <ChevronLeftIcon />\n            </Box>\n          </Box>\n          <TraceEvent\n            events={[BrowserEvent.onFocus]}\n            name={InterfaceEventName.NAVBAR_SEARCH_SELECTED}\n            element={InterfaceElementName.NAVBAR_SEARCH_INPUT}\n            properties={{ ...trace }}\n          >\n            <Trans\n              id={placeholderText}\n              render={({ translation }) => (\n                <Box\n                  as=\"input\"\n                  data-cy=\"search-bar-input\"\n                  placeholder={translation as string}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                    !isOpen && toggleOpen()\n                    setSearchValue(event.target.value)\n                  }}\n                  onBlur={() =>\n                    sendAnalyticsEvent(InterfaceEventName.NAVBAR_SEARCH_EXITED, navbarSearchEventProperties)\n                  }\n                  className={`${styles.searchBarInput} ${styles.searchContentLeftAlign}`}\n                  value={searchValue}\n                  ref={inputRef}\n                  width=\"full\"\n                />\n              )}\n            />\n          </TraceEvent>\n          {!isOpen && <KeyShortCut>/</KeyShortCut>}\n        </Row>\n        <Box className={clsx(isOpen ? styles.visible : styles.hidden)}>\n          {isOpen && (\n            <SearchBarDropdown\n              toggleOpen={toggleOpen}\n              tokens={reducedTokens}\n              collections={reducedCollections}\n              queryText={debouncedSearchValue}\n              hasInput={debouncedSearchValue.length > 0}\n              isLoading={tokensAreLoading || gatedCollectionsAreLoading}\n            />\n          )}\n        </Box>\n      </Box>\n      {isMobileOrTablet && (\n        <NavIcon onClick={toggleOpen} label={placeholderText}>\n          <NavMagnifyingGlassIcon />\n        </NavIcon>\n      )}\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/components/NavBar/Bag.tsx",["3937"],"import { NavIcon } from 'components/NavBar/NavIcon'\nimport { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagIcon, HundredsOverflowIcon, TagIcon } from 'nft/components/icons'\nimport { useBag, useSellAsset } from 'nft/hooks'\nimport { useCallback } from 'react'\nimport styled from 'styled-components/macro'\nimport { shallow } from 'zustand/shallow'\n\nconst CounterDot = styled.div`\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  font-size: 10px;\n  line-height: 12px;\n  min-height: 16px;\n  min-width: 16px;\n  padding: 2px 4px;\n  position: absolute;\n  right: 0px;\n  text-align: center;\n  top: 4px;\n`\n\nexport const Bag = () => {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const isProfilePage = useIsNftProfilePage()\n\n  const { bagExpanded, setBagExpanded } = useBag(\n    ({ bagExpanded, setBagExpanded }) => ({ bagExpanded, setBagExpanded }),\n    shallow\n  )\n\n  const handleIconClick = useCallback(() => {\n    setBagExpanded({ bagExpanded: !bagExpanded })\n  }, [bagExpanded, setBagExpanded])\n\n  const bagQuantity = isProfilePage ? sellAssets.length : itemsInBag.length\n  const bagHasItems = bagQuantity > 0\n\n  return (\n    <NavIcon isActive={bagExpanded} onClick={handleIconClick}>\n      {isProfilePage ? (\n        <TagIcon viewBox=\"0 0 24 24\" width={24} height={24} />\n      ) : (\n        <BagIcon viewBox=\"0 0 24 24\" width={24} height={24} strokeWidth=\"2px\" />\n      )}\n      {bagHasItems && <CounterDot>{bagQuantity > 99 ? <HundredsOverflowIcon /> : bagQuantity}</CounterDot>}\n    </NavIcon>\n  )\n}\n","/workspace/Physica-Interfae/src/components/NavBar/ChainSelector.tsx",["3938","3939","3940","3941"],"import { t } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { ConnectionType } from 'connection'\nimport { useGetConnection } from 'connection'\nimport { getChainInfo } from 'constants/chainInfo'\nimport { SupportedChainId } from 'constants/chains'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport useSelectChain from 'hooks/useSelectChain'\nimport useSyncChainQuery from 'hooks/useSyncChainQuery'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column, Row } from 'nft/components/Flex'\nimport { useIsMobile } from 'nft/hooks'\nimport { useCallback, useRef, useState } from 'react'\nimport { AlertTriangle, ChevronDown, ChevronUp } from 'react-feather'\nimport { useTheme } from 'styled-components/macro'\nimport { Trans } from '@lingui/macro'\n\nimport * as styles from './ChainSelector.css'\nimport ChainSelectorRow from './ChainSelectorRow'\nimport { NavDropdown } from './NavDropdown'\n\nconst NETWORK_SELECTOR_CHAINS = [\n  SupportedChainId.PLANQ,\n]\n\ninterface ChainSelectorProps {\n  leftAlign?: boolean\n}\n\nexport const ChainSelector = ({ leftAlign }: ChainSelectorProps) => {\n  const { chainId, connector } = useWeb3React()\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n  const isMobile = useIsMobile()\n\n  const theme = useTheme()\n\n  const ref = useRef<HTMLDivElement>(null)\n  const modalRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(ref, () => setIsOpen(false), [modalRef])\n\n  const info = chainId ? getChainInfo(chainId) : undefined\n\n  const selectChain = useSelectChain()\n  useSyncChainQuery()\n\n  const [pendingChainId, setPendingChainId] = useState<SupportedChainId | undefined>(undefined)\n\n  const onSelectChain = useCallback(\n    async (targetChainId: SupportedChainId) => {\n      setPendingChainId(targetChainId)\n      await selectChain(targetChainId)\n      setPendingChainId(undefined)\n      setIsOpen(false)\n    },\n    [selectChain, setIsOpen]\n  )\n\n  const getConnection = useGetConnection()\n  const connectionType = getConnection(connector).type\n  const isUniWallet = connectionType === ConnectionType.UNIWALLET\n\n  if (!chainId) {\n    return null\n  }\n\n  const isSupported = !!info\n\n  const dropdown = (\n    <NavDropdown top=\"56\" left={leftAlign ? '0' : 'auto'} right={leftAlign ? 'auto' : '0'} ref={modalRef}>\n      <Column paddingX=\"8\">\n        {NETWORK_SELECTOR_CHAINS.map((chainId: SupportedChainId) => (\n          <ChainSelectorRow\n            disabled={isUniWallet && chainId === SupportedChainId.PLANQ}\n            onSelectChain={onSelectChain}\n            targetChain={chainId}\n            key={chainId}\n            isPending={chainId === pendingChainId}\n          />\n        ))}\n      </Column>\n    </NavDropdown>\n  )\n\n  const chevronProps = {\n    height: 20,\n    width: 20,\n    color: theme.textSecondary,\n  }\n\n  return (\n    <Box position=\"relative\" ref={ref}>\n      <MouseoverTooltip text={t`Your wallet's current network is unsupported.`} disableHover={isSupported}>\n        <Row\n          as=\"button\"\n          gap=\"8\"\n          className={styles.ChainSelector}\n          background={isOpen ? 'accentActiveSoft' : 'none'}\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          {!isSupported ? (\n            <AlertTriangle size={20} color={theme.textSecondary} />\n          ) : (\n            <><img src={info.logoUrl} alt={info.label} className={styles.Image} data-testid=\"chain-selector-logo\" /><Trans>{info.label}</Trans></>\n          )}\n          {isOpen ? <ChevronUp {...chevronProps} /> : <ChevronDown {...chevronProps} />}\n        </Row>\n      </MouseoverTooltip>\n      {isOpen && (isMobile ? <Portal>{dropdown}</Portal> : <>{dropdown}</>)}\n    </Box>\n  )\n}\n","/workspace/Physica-Interfae/src/state/logs/hooks.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/TraitsContainer.tsx",["3942"],"import { OpacityHoverState } from 'components/Common'\nimport { GenieAsset, Trait } from 'nft/types'\nimport qs from 'query-string'\nimport { useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 16px;\n  max-width: 780px;\n\n  @media (max-width: 1080px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media (max-width: 420px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst GridItemContainer = styled(Link)`\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 12px;\n  cursor: pointer;\n  padding: 12px;\n  text-decoration: none;\n\n  ${OpacityHoverState}\n  min-width: 0;\n`\n\nconst TraitType = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n  white-space: nowrap;\n  width: 100%;\n`\n\nconst TraitValue = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 16px;\n  line-height: 24px;\n  margin-top: 4px;\n  display: inline-block;\n\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 100%;\n`\n\nconst GridItem = ({ trait, collectionAddress }: { trait: Trait; collectionAddress: string }) => {\n  const { trait_type, trait_value } = trait\n  const params = qs.stringify(\n    { traits: [`(\"${trait_type}\",\"${trait_value}\")`] },\n    {\n      arrayFormat: 'comma',\n    }\n  )\n\n  return (\n    <GridItemContainer to={`/nfts/collection/${collectionAddress}?${params}`}>\n      <TraitType>{trait_type}</TraitType>\n      <TraitValue>{trait_value}</TraitValue>\n    </GridItemContainer>\n  )\n}\n\nconst TraitsContainer = ({ asset }: { asset: GenieAsset }) => {\n  const traits = useMemo(() => asset.traits?.sort((a, b) => a.trait_type.localeCompare(b.trait_type)), [asset])\n\n  return (\n    <Grid>\n      {traits?.map((trait) => {\n        return <GridItem key={trait.trait_type} trait={trait} collectionAddress={asset.address} />\n      })}\n    </Grid>\n  )\n}\n\nexport default TraitsContainer\n","/workspace/Physica-Interfae/src/nft/components/details/AssetActivity.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/DetailsContainer.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/InfoContainer.tsx",[],"/workspace/Physica-Interfae/src/components/vote/ProposalEmptyState.tsx",[],"/workspace/Physica-Interfae/src/components/vote/QueueModal.tsx",[],"/workspace/Physica-Interfae/src/components/vote/ExecuteModal.tsx",[],"/workspace/Physica-Interfae/src/components/About/Icons.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/InvalidTokenDetails.tsx",[],"/workspace/Physica-Interfae/src/components/Settings/index.tsx",[],"/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/hooks.ts",[],"/workspace/Physica-Interfae/src/state/mint/v3/utils.ts",["3943","3944"],"import { Price, Token } from '@uniswap/sdk-core'\nimport {\n  encodeSqrtRatioX96,\n  FeeAmount,\n  nearestUsableTick,\n  priceToClosestTick,\n  TICK_SPACINGS,\n  TickMath,\n} from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nexport function tryParsePrice(baseToken?: Token, quoteToken?: Token, value?: string) {\n  if (!baseToken || !quoteToken || !value) {\n    return undefined\n  }\n\n  if (!value.match(/^\\d*\\.?\\d+$/)) {\n    return undefined\n  }\n\n  const [whole, fraction] = value.split('.')\n\n  const decimals = fraction?.length ?? 0\n  const withoutDecimals = JSBI.BigInt((whole ?? '') + (fraction ?? ''))\n\n  return new Price(\n    baseToken,\n    quoteToken,\n    JSBI.multiply(JSBI.BigInt(10 ** decimals), JSBI.BigInt(10 ** baseToken.decimals)),\n    JSBI.multiply(withoutDecimals, JSBI.BigInt(10 ** quoteToken.decimals))\n  )\n}\n\nexport function tryParseTick(\n  baseToken?: Token,\n  quoteToken?: Token,\n  feeAmount?: FeeAmount,\n  value?: string\n): number | undefined {\n  if (!baseToken || !quoteToken || !feeAmount || !value) {\n    return undefined\n  }\n\n  const price = tryParsePrice(baseToken, quoteToken, value)\n\n  if (!price) {\n    return undefined\n  }\n\n  let tick: number\n\n  // check price is within min/max bounds, if outside return min/max\n  const sqrtRatioX96 = encodeSqrtRatioX96(price.numerator, price.denominator)\n\n  if (JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MAX_SQRT_RATIO)) {\n    tick = TickMath.MAX_TICK\n  } else if (JSBI.lessThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO)) {\n    tick = TickMath.MIN_TICK\n  } else {\n    // this function is agnostic to the base, will always return the correct tick\n    tick = priceToClosestTick(price)\n  }\n\n  return nearestUsableTick(tick, TICK_SPACINGS[feeAmount])\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/TokenRow.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/Resource.tsx",[],"/workspace/Physica-Interfae/src/components/FeeSelector/shared.tsx",[],"/workspace/Physica-Interfae/src/components/FeeSelector/FeeTierPercentageBadge.tsx",[],"/workspace/Physica-Interfae/src/components/FeeSelector/FeeOption.tsx",[],"/workspace/Physica-Interfae/src/components/PositionCard/V2.tsx",[],"/workspace/Physica-Interfae/src/components/PositionCard/Sushi.tsx",[],"/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalSubmissionModal.tsx",[],"/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalEditor.tsx",[],"/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalActionSelector.tsx",["3945"],"import { Trans } from '@lingui/macro'\nimport { ButtonDropdown } from 'components/Button'\nimport Column from 'components/Column'\nimport Modal from 'components/Modal'\nimport { RowBetween } from 'components/Row'\nimport { MenuItem, PaddedColumn, Separator } from 'components/SearchModal/styleds'\nimport React, { useCallback } from 'react'\nimport { Text } from 'rebass'\nimport styled from 'styled-components/macro'\nimport { CloseIcon } from 'theme'\n\nexport enum ProposalAction {\n  TRANSFER_TOKEN = 'Transfer Token',\n  APPROVE_TOKEN = 'Approve Token',\n}\n\ninterface ProposalActionSelectorModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  onProposalActionSelect: (proposalAction: ProposalAction) => void\n}\n\nconst ContentWrapper = styled(Column)`\n  width: 100%;\n  flex: 1 1;\n  position: relative;\n`\nconst ActionSelectorHeader = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst ActionDropdown = styled(ButtonDropdown)`\n  padding: 0px;\n  background-color: transparent;\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 1.25rem;\n\n  :hover,\n  :active,\n  :focus {\n    outline: 0px;\n    box-shadow: none;\n    background-color: transparent;\n  }\n`\n\nconst ProposalActionSelectorFlex = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-flow: column nowrap;\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundInteractive};\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n`\n\nconst ProposalActionSelectorContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: 10px;\n`\n\nexport const ProposalActionSelector = ({\n  className,\n  onClick,\n  proposalAction,\n}: {\n  className?: string\n  onClick: () => void\n  proposalAction: ProposalAction\n}) => {\n  return (\n    <ProposalActionSelectorFlex>\n      <ProposalActionSelectorContainer className={className}>\n        <ActionSelectorHeader>\n          <Trans>Proposed Action</Trans>\n        </ActionSelectorHeader>\n        <ActionDropdown onClick={onClick}>{proposalAction}</ActionDropdown>\n      </ProposalActionSelectorContainer>\n    </ProposalActionSelectorFlex>\n  )\n}\n\nexport function ProposalActionSelectorModal({\n  isOpen,\n  onDismiss,\n  onProposalActionSelect,\n}: ProposalActionSelectorModalProps) {\n  const handleProposalActionSelect = useCallback(\n    (proposalAction: ProposalAction) => {\n      onProposalActionSelect(proposalAction)\n      onDismiss()\n    },\n    [onDismiss, onProposalActionSelect]\n  )\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={onDismiss}>\n      <ContentWrapper>\n        <PaddedColumn gap=\"16px\">\n          <RowBetween>\n            <Text fontWeight={500} fontSize={16}>\n              <Trans>Select an action</Trans>\n            </Text>\n            <CloseIcon onClick={onDismiss} />\n          </RowBetween>\n        </PaddedColumn>\n        <Separator />\n        <MenuItem onClick={() => handleProposalActionSelect(ProposalAction.TRANSFER_TOKEN)}>\n          <Column>\n            <Text fontWeight={500}>\n              <Trans>Transfer Token</Trans>\n            </Text>\n          </Column>\n        </MenuItem>\n        <MenuItem onClick={() => handleProposalActionSelect(ProposalAction.APPROVE_TOKEN)}>\n          <Column>\n            <Text fontWeight={500}>\n              <Trans>Approve Token</Trans>\n            </Text>\n          </Column>\n        </MenuItem>\n      </ContentWrapper>\n    </Modal>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/CreateProposal/ProposalActionDetail.tsx",["3946"],"import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport AddressInputPanel from 'components/AddressInputPanel'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ProposalAction } from './ProposalActionSelector'\n\nenum ProposalActionDetailField {\n  ADDRESS,\n  CURRENCY,\n}\n\nconst ProposalActionDetailContainer = styled.div`\n  margin-top: 10px;\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 10px;\n`\n\nexport const ProposalActionDetail = ({\n  className,\n  proposalAction,\n  currency,\n  amount,\n  toAddress,\n  onCurrencySelect,\n  onAmountInput,\n  onToAddressInput,\n}: {\n  className?: string\n  proposalAction: ProposalAction\n  currency: Currency | undefined\n  amount: string\n  toAddress: string\n  onCurrencySelect: (currency: Currency) => void\n  onAmountInput: (amount: string) => void\n  onToAddressInput: (address: string) => void\n}) => {\n  const proposalActionsData = {\n    [ProposalAction.TRANSFER_TOKEN]: [\n      {\n        type: ProposalActionDetailField.ADDRESS,\n        label: <Trans>To</Trans>,\n      },\n      {\n        type: ProposalActionDetailField.CURRENCY,\n      },\n    ],\n    [ProposalAction.APPROVE_TOKEN]: [\n      {\n        type: ProposalActionDetailField.ADDRESS,\n        label: <Trans>To</Trans>,\n      },\n      {\n        type: ProposalActionDetailField.CURRENCY,\n      },\n    ],\n  }\n\n  return (\n    <ProposalActionDetailContainer className={className}>\n      {proposalActionsData[proposalAction].map((field, i) =>\n        field.type === ProposalActionDetailField.ADDRESS ? (\n          <AddressInputPanel key={i} label={field.label} value={toAddress} onChange={onToAddressInput} />\n        ) : field.type === ProposalActionDetailField.CURRENCY ? (\n          <CurrencyInputPanel\n            key={i}\n            value={amount}\n            currency={currency}\n            onUserInput={(amount: string) => onAmountInput(amount)}\n            onCurrencySelect={(currency: Currency) => onCurrencySelect(currency)}\n            showMaxButton={false}\n            showCommonBases={false}\n            showCurrencyAmount={false}\n            disableNonToken={true}\n            hideBalance={true}\n            id=\"currency-input\"\n          />\n        ) : null\n      )}\n    </ProposalActionDetailContainer>\n  )\n}\n","/workspace/Physica-Interfae/src/constants/proposals/index.ts",[],"/workspace/Physica-Interfae/src/state/swap/reducer.ts",["3947","3948"],"import { createReducer } from '@reduxjs/toolkit'\nimport { parsedQueryString } from 'hooks/useParsedQueryString'\n\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { queryParametersToSwapState } from './hooks'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nexport const initialState: SwapState = queryParametersToSwapState(parsedQueryString())\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId ?? null,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId ?? null,\n          },\n          independentField: field,\n          typedValue,\n          recipient,\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        }\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId },\n        }\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n","/workspace/Physica-Interfae/src/state/swap/actions.ts",[],"/workspace/Physica-Interfae/src/components/FormattedCurrencyAmount/index.tsx",[],"/workspace/Physica-Interfae/src/utils/computeFiatValuePriceImpact.tsx",["3949"],"import { Percent } from '@uniswap/sdk-core'\n\nconst PRECISION = 10000\nexport function computeFiatValuePriceImpact(\n  fiatValueInput: number | undefined | null,\n  fiatValueOutput: number | undefined | null\n): Percent | undefined {\n  if (!fiatValueOutput || !fiatValueInput) return undefined\n  if (fiatValueInput === 0) return undefined\n\n  const ratio = 1 - fiatValueOutput / fiatValueInput\n  const numerator = Math.floor(ratio * PRECISION)\n  return new Percent(numerator, PRECISION)\n}\n","/workspace/Physica-Interfae/src/components/Popups/TransactionPopup.tsx",[],"/workspace/Physica-Interfae/src/components/Popups/FailedNetworkSwitchPopup.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/NavDropdown.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/ChainSelectorRow.tsx",[],"/workspace/Physica-Interfae/src/state/swap/hooks.tsx",["3950","3951","3952","3953","3954","3955","3956","3957","3958","3959","3960"],"import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ParsedQs } from 'qs'\nimport { ReactNode, useCallback, useEffect, useMemo } from 'react'\nimport { AnyAction } from 'redux'\nimport { useAppDispatch } from 'state/hooks'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport { useUserSlippageToleranceWithDefault } from 'state/user/hooks'\n\nimport { TOKEN_SHORTHANDS } from '../../constants/tokens'\nimport { useCurrency } from '../../hooks/Tokens'\nimport useENS from '../../hooks/useENS'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { useCurrencyBalances } from '../connection/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\n\nexport function useSwapActionHandlers(dispatch: React.Dispatch<AnyAction>): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency.isToken ? currency.address : currency.isNative ? 'ETH' : '',\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f': true, // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a': true, // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D': true, // v2 router 02\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(state: SwapState): {\n  currencies: { [field in Field]?: Currency | null }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  inputError?: ReactNode\n  trade: {\n    trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n    state: TradeState\n  }\n  allowedSlippage: Percent\n} {\n  const { account } = useWeb3React()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = state\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency])\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseCurrencyAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, typedValue]\n  )\n\n  const trade = useBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined\n  )\n\n  const currencyBalances = useMemo(\n    () => ({\n      [Field.INPUT]: relevantTokenBalances[0],\n      [Field.OUTPUT]: relevantTokenBalances[1],\n    }),\n    [relevantTokenBalances]\n  )\n\n  const currencies: { [field in Field]?: Currency | null } = useMemo(\n    () => ({\n      [Field.INPUT]: inputCurrency,\n      [Field.OUTPUT]: outputCurrency,\n    }),\n    [inputCurrency, outputCurrency]\n  )\n\n  // allowed slippage is either auto slippage, or custom user defined slippage if auto slippage disabled\n  const autoSlippageTolerance = useAutoSlippageTolerance(trade.trade)\n  const allowedSlippage = useUserSlippageToleranceWithDefault(autoSlippageTolerance)\n\n  const inputError = useMemo(() => {\n    let inputError: ReactNode | undefined\n\n    if (!account) {\n      inputError = <Trans>Connect Wallet</Trans>\n    }\n\n    if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n      inputError = inputError ?? <Trans>Select a token</Trans>\n    }\n\n    if (!parsedAmount) {\n      inputError = inputError ?? <Trans>Enter an amount</Trans>\n    }\n\n    const formattedTo = isAddress(to)\n    if (!to || !formattedTo) {\n      inputError = inputError ?? <Trans>Enter a recipient</Trans>\n    } else {\n      if (BAD_RECIPIENT_ADDRESSES[formattedTo]) {\n        inputError = inputError ?? <Trans>Invalid recipient</Trans>\n      }\n    }\n\n    // compare input balance to max input based on version\n    const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], trade.trade?.maximumAmountIn(allowedSlippage)]\n\n    if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n      inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n    }\n\n    return inputError\n  }, [account, allowedSlippage, currencies, currencyBalances, parsedAmount, to, trade.trade])\n\n  return useMemo(\n    () => ({\n      currencies,\n      currencyBalances,\n      parsedAmount,\n      inputError,\n      trade,\n      allowedSlippage,\n    }),\n    [allowedSlippage, currencies, currencyBalances, inputError, parsedAmount, trade]\n  )\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: ParsedQs[string]): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    const upper = urlParam.toUpperCase()\n    if (upper === 'ETH') return 'ETH'\n    if (upper in TOKEN_SHORTHANDS) return upper\n  }\n  return ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  const typedValue = parseTokenAmountURLParameter(parsedQs.exactAmount)\n  const independentField = parseIndependentFieldURLParameter(parsedQs.exactField)\n\n  if (inputCurrency === '' && outputCurrency === '' && typedValue === '' && independentField === Field.INPUT) {\n    // Defaults to having the native currency selected\n    inputCurrency = 'ETH'\n  } else if (inputCurrency === outputCurrency) {\n    // clear output if identical\n    outputCurrency = ''\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency === '' ? null : inputCurrency ?? null,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency === '' ? null : outputCurrency ?? null,\n    },\n    typedValue,\n    independentField,\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch(): SwapState {\n  const { chainId } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const parsedQs = useParsedQueryString()\n\n  const parsedSwapState = useMemo(() => {\n    return queryParametersToSwapState(parsedQs)\n  }, [parsedQs])\n\n  useEffect(() => {\n    if (!chainId) return\n    const inputCurrencyId = parsedSwapState[Field.INPUT].currencyId ?? undefined\n    const outputCurrencyId = parsedSwapState[Field.OUTPUT].currencyId ?? undefined\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsedSwapState.typedValue,\n        field: parsedSwapState.independentField,\n        inputCurrencyId,\n        outputCurrencyId,\n        recipient: parsedSwapState.recipient,\n      })\n    )\n  }, [dispatch, chainId, parsedSwapState])\n\n  return parsedSwapState\n}\n","/workspace/Physica-Interfae/src/nft/components/common/Loading/LoadingSparkle.tsx",[],"/workspace/Physica-Interfae/src/constants/proposals/uniswap_grants_proposal_description.ts",[],"/workspace/Physica-Interfae/src/constants/proposals/polygon_proposal_title.ts",[],"/workspace/Physica-Interfae/src/hooks/useGlobalChainSwitch.ts",[],"/workspace/Physica-Interfae/src/components/NavBar/NavIcon.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/SearchBarDropdown.tsx",["3961","3962","3963"],"import { Trans } from '@lingui/macro'\nimport { useTrace } from '@uniswap/analytics'\nimport { InterfaceSectionName, NavBarSearchTypes } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport Badge from 'components/Badge'\nimport { SupportedChainId } from 'constants/chains'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport { HistoryDuration, SafetyLevel } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport { SearchToken } from 'graphql/data/SearchTokens'\nimport useTrendingTokens from 'graphql/data/TrendingTokens'\nimport { useIsNftPage } from 'hooks/useIsNftPage'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { subheadSmall } from 'nft/css/common.css'\nimport { fetchTrendingCollections } from 'nft/queries'\nimport { GenieCollection, TimePeriod, TrendingCollection } from 'nft/types'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { ReactNode, useEffect, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport BnbLogoURI from '../../assets/svg/bnb-logo.svg'\nimport { ClockIcon, TrendingArrow } from '../../nft/components/icons'\nimport { useRecentlySearchedAssets } from './RecentlySearchedAssets'\nimport * as styles from './SearchBar.css'\nimport { CollectionRow, SkeletonRow, TokenRow } from './SuggestionRow'\n\nfunction isCollection(suggestion: GenieCollection | SearchToken | TrendingCollection) {\n  return (suggestion as SearchToken).decimals === undefined\n}\n\ninterface SearchBarDropdownSectionProps {\n  toggleOpen: () => void\n  suggestions: (GenieCollection | SearchToken)[]\n  header: JSX.Element\n  headerIcon?: JSX.Element\n  hoveredIndex: number | undefined\n  startingIndex: number\n  setHoveredIndex: (index: number | undefined) => void\n  isLoading?: boolean\n  eventProperties: Record<string, unknown>\n}\n\nconst SearchBarDropdownSection = ({\n  toggleOpen,\n  suggestions,\n  header,\n  headerIcon = undefined,\n  hoveredIndex,\n  startingIndex,\n  setHoveredIndex,\n  isLoading,\n  eventProperties,\n}: SearchBarDropdownSectionProps) => {\n  return (\n    <Column gap=\"12\" data-cy=\"searchbar-dropdown\">\n      <Row paddingX=\"16\" paddingY=\"4\" gap=\"8\" color=\"gray300\" className={subheadSmall} style={{ lineHeight: '20px' }}>\n        {headerIcon ? headerIcon : null}\n        <Box>{header}</Box>\n      </Row>\n      <Column gap=\"12\">\n        {suggestions.map((suggestion, index) =>\n          isLoading || !suggestion ? (\n            <SkeletonRow key={index} />\n          ) : isCollection(suggestion) ? (\n            <CollectionRow\n              key={suggestion.address}\n              collection={suggestion as GenieCollection}\n              isHovered={hoveredIndex === index + startingIndex}\n              setHoveredIndex={setHoveredIndex}\n              toggleOpen={toggleOpen}\n              index={index + startingIndex}\n              eventProperties={{\n                position: index + startingIndex,\n                selected_search_result_name: suggestion.name,\n                selected_search_result_address: suggestion.address,\n                ...eventProperties,\n              }}\n            />\n          ) : (\n            <TokenRow\n              key={suggestion.address}\n              token={suggestion as SearchToken}\n              isHovered={hoveredIndex === index + startingIndex}\n              setHoveredIndex={setHoveredIndex}\n              toggleOpen={toggleOpen}\n              index={index + startingIndex}\n              eventProperties={{\n                position: index + startingIndex,\n                selected_search_result_name: suggestion.name,\n                selected_search_result_address: suggestion.address,\n                ...eventProperties,\n              }}\n            />\n          )\n        )}\n      </Column>\n    </Column>\n  )\n}\n\nfunction isKnownToken(token: SearchToken) {\n  return token.project?.safetyLevel == SafetyLevel.Verified || token.project?.safetyLevel == SafetyLevel.MediumWarning\n}\n\nconst BNBLogo = styled.img`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n`\nconst BNBComingSoonBadge = styled(Badge)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.backgroundModule};\n  color: ${({ theme }) => theme.textSecondary};\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  opacity: 1;\n  padding: 8px;\n  margin: 16px 16px 4px;\n  width: calc(100% - 32px);\n`\n\ninterface SearchBarDropdownProps {\n  toggleOpen: () => void\n  tokens: SearchToken[]\n  collections: GenieCollection[]\n  queryText: string\n  hasInput: boolean\n  isLoading: boolean\n}\n\nexport const SearchBarDropdown = ({\n  toggleOpen,\n  tokens,\n  collections,\n  queryText,\n  hasInput,\n  isLoading,\n}: SearchBarDropdownProps) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | undefined>(0)\n\n  const { data: searchHistory } = useRecentlySearchedAssets()\n  const shortenedHistory = useMemo(() => searchHistory?.slice(0, 2) ?? [...Array<SearchToken>(2)], [searchHistory])\n\n  const { pathname } = useLocation()\n  const { chainId } = useWeb3React()\n  const isNFTPage = useIsNftPage()\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const isTokenPage = pathname.includes('/tokens')\n  const [resultsState, setResultsState] = useState<ReactNode>()\n\n  const { data: trendingCollectionResults, isLoading: trendingCollectionsAreLoading } = useQuery(\n    ['trendingCollections', 'eth', 'twenty_four_hours'],\n    () => fetchTrendingCollections({ volumeType: 'eth', timePeriod: 'ONE_DAY' as TimePeriod, size: 3 })\n  )\n\n  const { data: gqlData, loading } = useTrendingCollections(3, HistoryDuration.Day)\n\n  const trendingCollections = useMemo(() => {\n    const gatedTrendingCollections = isNftGraphqlEnabled ? gqlData : trendingCollectionResults\n    return gatedTrendingCollections && (!isNftGraphqlEnabled || !loading)\n      ? gatedTrendingCollections\n          .map((collection) => ({\n            ...collection,\n            collectionAddress: collection.address,\n            floorPrice: isNftGraphqlEnabled ? collection.floor : formatEthPrice(collection.floor?.toString()),\n            stats: {\n              total_supply: collection.totalSupply,\n              one_day_change: collection.floorChange,\n              floor_price: isNftGraphqlEnabled ? collection.floor : formatEthPrice(collection.floor?.toString()),\n            },\n          }))\n          .slice(0, isNFTPage ? 3 : 2)\n      : [...Array<GenieCollection>(isNFTPage ? 3 : 2)]\n  }, [gqlData, isNFTPage, isNftGraphqlEnabled, loading, trendingCollectionResults])\n\n  const { data: trendingTokenData } = useTrendingTokens(useWeb3React().chainId)\n\n  const trendingTokensLength = isTokenPage ? 3 : 2\n  const trendingTokens = useMemo(\n    () => trendingTokenData?.slice(0, trendingTokensLength) ?? [...Array<SearchToken>(trendingTokensLength)],\n    [trendingTokenData, trendingTokensLength]\n  )\n\n  const totalSuggestions = hasInput\n    ? tokens.length + collections.length\n    : Math.min(shortenedHistory.length, 2) +\n      (isNFTPage || !isTokenPage ? trendingCollections?.length ?? 0 : 0) +\n      (isTokenPage || !isNFTPage ? trendingTokens?.length ?? 0 : 0)\n\n  // Navigate search results via arrow keys\n  useEffect(() => {\n    const keyDownHandler = (event: KeyboardEvent) => {\n      if (event.key === 'ArrowUp') {\n        event.preventDefault()\n        if (!hoveredIndex) {\n          setHoveredIndex(totalSuggestions - 1)\n        } else {\n          setHoveredIndex(hoveredIndex - 1)\n        }\n      } else if (event.key === 'ArrowDown') {\n        event.preventDefault()\n        if (hoveredIndex && hoveredIndex === totalSuggestions - 1) {\n          setHoveredIndex(0)\n        } else {\n          setHoveredIndex((hoveredIndex ?? -1) + 1)\n        }\n      }\n    }\n\n    document.addEventListener('keydown', keyDownHandler)\n\n    return () => {\n      document.removeEventListener('keydown', keyDownHandler)\n    }\n  }, [toggleOpen, hoveredIndex, totalSuggestions])\n\n  const hasVerifiedCollection = collections.some((collection) => collection.isVerified)\n  const hasKnownToken = tokens.some(isKnownToken)\n  const showCollectionsFirst =\n    (isNFTPage && (hasVerifiedCollection || !hasKnownToken)) || (!isNFTPage && !hasKnownToken && hasVerifiedCollection)\n\n  const trace = JSON.stringify(useTrace({ section: InterfaceSectionName.NAVBAR_SEARCH }))\n\n  useEffect(() => {\n    const eventProperties = { total_suggestions: totalSuggestions, query_text: queryText, ...JSON.parse(trace) }\n    if (!isLoading) {\n      const tokenSearchResults =\n        tokens.length > 0 ? (\n          <SearchBarDropdownSection\n            hoveredIndex={hoveredIndex}\n            startingIndex={showCollectionsFirst ? collections.length : 0}\n            setHoveredIndex={setHoveredIndex}\n            toggleOpen={toggleOpen}\n            suggestions={tokens}\n            eventProperties={{\n              suggestion_type: NavBarSearchTypes.TOKEN_SUGGESTION,\n              ...eventProperties,\n            }}\n            header={<Trans>Tokens</Trans>}\n          />\n        ) : (\n          <Box className={styles.notFoundContainer}>\n            <Trans>No tokens found.</Trans>\n          </Box>\n        )\n\n      const collectionSearchResults =\n        collections.length > 0 ? (\n          <SearchBarDropdownSection\n            hoveredIndex={hoveredIndex}\n            startingIndex={showCollectionsFirst ? 0 : tokens.length}\n            setHoveredIndex={setHoveredIndex}\n            toggleOpen={toggleOpen}\n            suggestions={collections}\n            eventProperties={{\n              suggestion_type: NavBarSearchTypes.COLLECTION_SUGGESTION,\n              ...eventProperties,\n            }}\n            header={<Trans>NFT Collections</Trans>}\n          />\n        ) : (\n          <Box className={styles.notFoundContainer}>No NFT collections found.</Box>\n        )\n\n      const currentState = () =>\n        hasInput ? (\n          // Empty or Up to 8 combined tokens and nfts\n          <Column gap=\"20\">\n            {showCollectionsFirst ? (\n              <>\n                {collectionSearchResults}\n                {tokenSearchResults}\n              </>\n            ) : (\n              <>\n                {tokenSearchResults}\n                {collectionSearchResults}\n              </>\n            )}\n          </Column>\n        ) : (\n          // Recent Searches, Trending Tokens, Trending Collections\n          <Column gap=\"20\">\n            {shortenedHistory.length > 0 && (\n              <SearchBarDropdownSection\n                hoveredIndex={hoveredIndex}\n                startingIndex={0}\n                setHoveredIndex={setHoveredIndex}\n                toggleOpen={toggleOpen}\n                suggestions={shortenedHistory}\n                eventProperties={{\n                  suggestion_type: NavBarSearchTypes.RECENT_SEARCH,\n                  ...eventProperties,\n                }}\n                header={<Trans>Recent searches</Trans>}\n                headerIcon={<ClockIcon />}\n                isLoading={!searchHistory}\n              />\n            )}\n            {!isNFTPage && (\n              <SearchBarDropdownSection\n                hoveredIndex={hoveredIndex}\n                startingIndex={shortenedHistory.length}\n                setHoveredIndex={setHoveredIndex}\n                toggleOpen={toggleOpen}\n                suggestions={trendingTokens}\n                eventProperties={{\n                  suggestion_type: NavBarSearchTypes.TOKEN_TRENDING,\n                  ...eventProperties,\n                }}\n                header={<Trans>Popular tokens</Trans>}\n                headerIcon={<TrendingArrow />}\n                isLoading={!trendingTokenData}\n              />\n            )}\n            {!isTokenPage && (\n              <SearchBarDropdownSection\n                hoveredIndex={hoveredIndex}\n                startingIndex={shortenedHistory.length + (isNFTPage ? 0 : trendingTokens?.length ?? 0)}\n                setHoveredIndex={setHoveredIndex}\n                toggleOpen={toggleOpen}\n                suggestions={trendingCollections as unknown as GenieCollection[]}\n                eventProperties={{\n                  suggestion_type: NavBarSearchTypes.COLLECTION_TRENDING,\n                  ...eventProperties,\n                }}\n                header={<Trans>Popular NFT collections</Trans>}\n                headerIcon={<TrendingArrow />}\n                isLoading={trendingCollectionsAreLoading}\n              />\n            )}\n          </Column>\n        )\n\n      setResultsState(currentState)\n    }\n  }, [\n    isLoading,\n    tokens,\n    collections,\n    trendingCollections,\n    trendingCollectionsAreLoading,\n    trendingTokens,\n    trendingTokenData,\n    hoveredIndex,\n    toggleOpen,\n    shortenedHistory,\n    hasInput,\n    isNFTPage,\n    isTokenPage,\n    showCollectionsFirst,\n    queryText,\n    totalSuggestions,\n    trace,\n    searchHistory,\n  ])\n\n  const showBNBComingSoonBadge = chainId === SupportedChainId.BNB && !isLoading\n\n  return (\n    <Box className={styles.searchBarDropdownNft}>\n      <Box opacity={isLoading ? '0.3' : '1'} transition=\"125\">\n        {resultsState}\n        {showBNBComingSoonBadge && (\n          <BNBComingSoonBadge>\n            <BNBLogo src={BnbLogoURI} />\n            <ThemedText.BodySmall color=\"textSecondary\" fontSize=\"14px\" fontWeight=\"400\" lineHeight=\"20px\">\n              <Trans>Coming soon: search and explore tokens on BNB Chain</Trans>\n            </ThemedText.BodySmall>\n          </BNBComingSoonBadge>\n        )}\n      </Box>\n    </Box>\n  )\n}\n","/workspace/Physica-Interfae/src/graphql/data/Token.ts",[],"/workspace/Physica-Interfae/src/components/ModalViews/index.tsx",[],"/workspace/Physica-Interfae/src/components/Widget/index.tsx",["3964","3965","3966","3967","3968"],"/workspace/Physica-Interfae/src/utils/formatTickPrice.ts",[],"/workspace/Physica-Interfae/src/hooks/useFeeTierDistribution.ts",["3969","3970","3971","3972","3973","3974"],"import { Currency, Token } from '@uniswap/sdk-core'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport ms from 'ms.macro'\nimport { useMemo } from 'react'\n\nimport useFeeTierDistributionQuery from '../graphql/thegraph/FeeTierDistributionQuery'\nimport { PoolState, usePool } from './usePools'\n\n// maximum number of blocks past which we consider the data stale\nconst MAX_DATA_BLOCK_AGE = 20\n\ninterface FeeTierDistribution {\n  isLoading: boolean\n  isError: boolean\n  largestUsageFeeTier?: FeeAmount | undefined\n\n  // distributions as percentages of overall liquidity\n  distributions?: Record<FeeAmount, number | undefined>\n}\n\nexport function useFeeTierDistribution(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): FeeTierDistribution {\n  const { isLoading, error, distributions } = usePoolTVL(currencyA?.wrapped, currencyB?.wrapped)\n\n  // fetch all pool states to determine pool state\n  const [poolStateVeryLow] = usePool(currencyA, currencyB, FeeAmount.LOWEST)\n  const [poolStateLow] = usePool(currencyA, currencyB, FeeAmount.LOW)\n  const [poolStateMedium] = usePool(currencyA, currencyB, FeeAmount.MEDIUM)\n  const [poolStateHigh] = usePool(currencyA, currencyB, FeeAmount.HIGH)\n\n  return useMemo(() => {\n    if (isLoading || error || !distributions) {\n      return {\n        isLoading,\n        isError: !!error,\n        distributions,\n      }\n    }\n\n    const largestUsageFeeTier = Object.keys(distributions)\n      .map((d) => Number(d))\n      .filter((d: FeeAmount) => distributions[d] !== 0 && distributions[d] !== undefined)\n      .reduce((a: FeeAmount, b: FeeAmount) => ((distributions[a] ?? 0) > (distributions[b] ?? 0) ? a : b), -1)\n\n    const percentages =\n      !isLoading &&\n      !error &&\n      distributions &&\n      poolStateVeryLow !== PoolState.LOADING &&\n      poolStateLow !== PoolState.LOADING &&\n      poolStateMedium !== PoolState.LOADING &&\n      poolStateHigh !== PoolState.LOADING\n        ? {\n            [FeeAmount.LOWEST]:\n              poolStateVeryLow === PoolState.EXISTS ? (distributions[FeeAmount.LOWEST] ?? 0) * 100 : undefined,\n            [FeeAmount.LOW]: poolStateLow === PoolState.EXISTS ? (distributions[FeeAmount.LOW] ?? 0) * 100 : undefined,\n            [FeeAmount.MEDIUM]:\n              poolStateMedium === PoolState.EXISTS ? (distributions[FeeAmount.MEDIUM] ?? 0) * 100 : undefined,\n            [FeeAmount.HIGH]:\n              poolStateHigh === PoolState.EXISTS ? (distributions[FeeAmount.HIGH] ?? 0) * 100 : undefined,\n          }\n        : undefined\n\n    return {\n      isLoading,\n      isError: !!error,\n      distributions: percentages,\n      largestUsageFeeTier: largestUsageFeeTier === -1 ? undefined : largestUsageFeeTier,\n    }\n  }, [isLoading, error, distributions, poolStateVeryLow, poolStateLow, poolStateMedium, poolStateHigh])\n}\n\nfunction usePoolTVL(token0: Token | undefined, token1: Token | undefined) {\n  const latestBlock = useBlockNumber()\n  const { isLoading, error, data } = useFeeTierDistributionQuery(token0?.address, token1?.address, ms`30s`)\n\n  const { asToken0, asToken1, _meta } = data ?? {}\n\n  return useMemo(() => {\n    if (!latestBlock || !_meta || !asToken0 || !asToken1) {\n      return {\n        isLoading,\n        error,\n      }\n    }\n\n    if (latestBlock - (_meta?.block?.number ?? 0) > MAX_DATA_BLOCK_AGE) {\n      console.log(`Graph stale (latest block: ${latestBlock})`)\n      return {\n        isLoading,\n        error,\n      }\n    }\n\n    const all = asToken0.concat(asToken1)\n\n    // sum tvl for token0 and token1 by fee tier\n    const tvlByFeeTier = all.reduce<{ [feeAmount: number]: [number | undefined, number | undefined] }>(\n      (acc, value) => {\n        acc[value.feeTier][0] = (acc[value.feeTier][0] ?? 0) + Number(value.totalValueLockedToken0)\n        acc[value.feeTier][1] = (acc[value.feeTier][1] ?? 0) + Number(value.totalValueLockedToken1)\n        return acc\n      },\n      {\n        [FeeAmount.LOWEST]: [undefined, undefined],\n        [FeeAmount.LOW]: [undefined, undefined],\n        [FeeAmount.MEDIUM]: [undefined, undefined],\n        [FeeAmount.HIGH]: [undefined, undefined],\n      } as Record<FeeAmount, [number | undefined, number | undefined]>\n    )\n\n    // sum total tvl for token0 and token1\n    const [sumToken0Tvl, sumToken1Tvl] = Object.values(tvlByFeeTier).reduce(\n      (acc: [number, number], value) => {\n        acc[0] += value[0] ?? 0\n        acc[1] += value[1] ?? 0\n        return acc\n      },\n      [0, 0]\n    )\n\n    // returns undefined if both tvl0 and tvl1 are undefined (pool not created)\n    const mean = (tvl0: number | undefined, sumTvl0: number, tvl1: number | undefined, sumTvl1: number) =>\n      tvl0 === undefined && tvl1 === undefined ? undefined : ((tvl0 ?? 0) + (tvl1 ?? 0)) / (sumTvl0 + sumTvl1) || 0\n\n    const distributions: Record<FeeAmount, number | undefined> = {\n      [FeeAmount.LOWEST]: mean(\n        tvlByFeeTier[FeeAmount.LOWEST][0],\n        sumToken0Tvl,\n        tvlByFeeTier[FeeAmount.LOWEST][1],\n        sumToken1Tvl\n      ),\n      [FeeAmount.LOW]: mean(tvlByFeeTier[FeeAmount.LOW][0], sumToken0Tvl, tvlByFeeTier[FeeAmount.LOW][1], sumToken1Tvl),\n      [FeeAmount.MEDIUM]: mean(\n        tvlByFeeTier[FeeAmount.MEDIUM][0],\n        sumToken0Tvl,\n        tvlByFeeTier[FeeAmount.MEDIUM][1],\n        sumToken1Tvl\n      ),\n      [FeeAmount.HIGH]: mean(\n        tvlByFeeTier[FeeAmount.HIGH][0],\n        sumToken0Tvl,\n        tvlByFeeTier[FeeAmount.HIGH][1],\n        sumToken1Tvl\n      ),\n    }\n\n    return {\n      isLoading,\n      error,\n      distributions,\n    }\n  }, [_meta, asToken0, asToken1, isLoading, error, latestBlock])\n}\n","/workspace/Physica-Interfae/src/components/Toggle/MultiToggle.tsx",[],"/workspace/Physica-Interfae/src/components/InputStepCounter/InputStepCounter.tsx",[],"/workspace/Physica-Interfae/src/utils/getTickToPrice.ts",[],"/workspace/Physica-Interfae/src/components/Tokens/state.ts",[],"/workspace/Physica-Interfae/src/hooks/useSelectChain.ts",["3975"],"import { useWeb3React } from '@web3-react/core'\nimport { useGetConnection } from 'connection'\nimport { SupportedChainId } from 'constants/chains'\nimport { useCallback } from 'react'\nimport { addPopup } from 'state/application/reducer'\nimport { updateConnectionError } from 'state/connection/reducer'\nimport { useAppDispatch } from 'state/hooks'\nimport { switchChain } from 'utils/switchChain'\n\nexport default function useSelectChain() {\n  const dispatch = useAppDispatch()\n  const { connector } = useWeb3React()\n  const getConnection = useGetConnection()\n\n  return useCallback(\n    async (targetChain: SupportedChainId) => {\n      if (!connector) return\n\n      const connectionType = getConnection(connector).type\n\n      try {\n        dispatch(updateConnectionError({ connectionType, error: undefined }))\n        await switchChain(connector, targetChain)\n      } catch (error) {\n        console.error('Failed to switch networks', error)\n\n        dispatch(updateConnectionError({ connectionType, error: error.message }))\n        dispatch(addPopup({ content: { failedSwitchNetwork: targetChain }, key: 'failed-network-switch' }))\n      }\n    },\n    [connector, dispatch, getConnection]\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useSyncChainQuery.ts",[],"/workspace/Physica-Interfae/src/nft/components/common/Loading/LoadingSparkle.css.ts",[],"/workspace/Physica-Interfae/src/components/NavBar/RecentlySearchedAssets.ts",["3976","3977","3978"],"import { SupportedChainId } from 'constants/chains'\nimport { NATIVE_CHAIN_ID, nativeOnChain } from 'constants/tokens'\nimport { Chain, NftCollection, useRecentlySearchedAssetsQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { SearchToken } from 'graphql/data/SearchTokens'\nimport { CHAIN_NAME_TO_CHAIN_ID } from 'graphql/data/util'\nimport { useAtom } from 'jotai'\nimport { atomWithStorage, useAtomValue } from 'jotai/utils'\nimport { GenieCollection } from 'nft/types'\nimport { useCallback, useMemo } from 'react'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\ntype RecentlySearchedAsset = {\n  isNft?: boolean\n  address: string\n  chain: Chain\n}\n\n// Temporary measure used until backend supports addressing by \"NATIVE\"\nconst NATIVE_QUERY_ADDRESS_INPUT = null as unknown as string\nfunction getQueryAddress(chain: Chain) {\n  return getNativeTokenDBAddress(chain) ?? NATIVE_QUERY_ADDRESS_INPUT\n}\n\nconst recentlySearchedAssetsAtom = atomWithStorage<RecentlySearchedAsset[]>('recentlySearchedAssets', [])\n\nexport function useAddRecentlySearchedAsset() {\n  const [searchHistory, updateSearchHistory] = useAtom(recentlySearchedAssetsAtom)\n\n  return useCallback(\n    (asset: RecentlySearchedAsset) => {\n      // Removes the new asset if it was already in the array\n      const newHistory = searchHistory.filter(\n        (oldAsset) => !(oldAsset.address === asset.address && oldAsset.chain === asset.chain)\n      )\n      newHistory.unshift(asset)\n      updateSearchHistory(newHistory)\n    },\n    [searchHistory, updateSearchHistory]\n  )\n}\n\nexport function useRecentlySearchedAssets() {\n  const history = useAtomValue(recentlySearchedAssetsAtom)\n  const shortenedHistory = useMemo(() => history.slice(0, 4), [history])\n\n  const { data: queryData, loading } = useRecentlySearchedAssetsQuery({\n    variables: {\n      collectionAddresses: shortenedHistory.filter((asset) => asset.isNft).map((asset) => asset.address),\n      contracts: shortenedHistory\n        .filter((asset) => !asset.isNft)\n        .map((token) => ({\n          address: token.address === NATIVE_CHAIN_ID ? getQueryAddress(token.chain) : token.address,\n          chain: token.chain,\n        })),\n    },\n  })\n\n  const data = useMemo(() => {\n    if (shortenedHistory.length === 0) return []\n    else if (!queryData) return undefined\n    // Collects both tokens and collections in a map, so they can later be returned in original order\n    const resultsMap: { [key: string]: GenieCollection | SearchToken } = {}\n\n    const queryCollections = queryData?.nftCollections?.edges.map((edge) => edge.node as NonNullable<NftCollection>)\n    const collections = queryCollections?.map(\n      (queryCollection): GenieCollection => {\n        return {\n          address: queryCollection.nftContracts?.[0]?.address ?? '',\n          isVerified: queryCollection?.isVerified,\n          name: queryCollection?.name,\n          stats: {\n            floor_price: queryCollection?.markets?.[0]?.floorPrice?.value,\n            total_supply: queryCollection?.numAssets,\n          },\n          imageUrl: queryCollection?.image?.url ?? '',\n        }\n      },\n      [queryCollections]\n    )\n    collections?.forEach((collection) => (resultsMap[collection.address] = collection))\n    queryData.tokens?.filter(Boolean).forEach((token) => {\n      resultsMap[token.address ?? `NATIVE-${token.chain}`] = token\n    })\n\n    const data: (SearchToken | GenieCollection)[] = []\n    shortenedHistory.forEach((asset) => {\n      if (asset.address === 'NATIVE') {\n        // Handles special case where wMATIC data needs to be used for MATIC\n        const native = nativeOnChain(CHAIN_NAME_TO_CHAIN_ID[asset.chain] ?? SupportedChainId.MAINNET)\n        const queryAddress = getQueryAddress(asset.chain)?.toLowerCase() ?? `NATIVE-${asset.chain}`\n        const result = resultsMap[queryAddress]\n        if (result) data.push({ ...result, address: 'NATIVE', ...native })\n      } else {\n        const result = resultsMap[asset.address]\n        if (result) data.push(result)\n      }\n    })\n    return data\n  }, [queryData, shortenedHistory])\n\n  return { data, loading }\n}\n","/workspace/Physica-Interfae/src/components/NavBar/SuggestionRow.tsx",[],"/workspace/Physica-Interfae/src/components/Widget/transactions.ts",["3979","3980"],"import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfaceEventName, InterfaceSectionName, SwapEventName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent } from '@uniswap/sdk-core'\nimport {\n  OnTxSuccess,\n  TradeType,\n  Transaction,\n  TransactionEventHandlers,\n  TransactionInfo,\n  TransactionType,\n  TransactionType as WidgetTransactionType,\n} from '@uniswap/widgets'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  formatPercentInBasisPointsNumber,\n  formatSwapSignedAnalyticsEventProperties,\n  formatToDecimal,\n  getTokenAddress,\n} from 'lib/utils/analytics'\nimport { useCallback, useMemo } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport {\n  ExactInputSwapTransactionInfo,\n  ExactOutputSwapTransactionInfo,\n  TransactionType as AppTransactionType,\n  WrapTransactionInfo,\n} from 'state/transactions/types'\nimport { currencyId } from 'utils/currencyId'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\ninterface AnalyticsEventProps {\n  trade: Trade<Currency, Currency, TradeType>\n  gasUsed: string | undefined\n  blockNumber: number | undefined\n  hash: string | undefined\n  allowedSlippage: Percent\n  succeeded: boolean\n}\n\nconst formatAnalyticsEventProperties = ({\n  trade,\n  hash,\n  allowedSlippage,\n  succeeded,\n  gasUsed,\n  blockNumber,\n}: AnalyticsEventProps) => ({\n  estimated_network_fee_usd: gasUsed,\n  transaction_hash: hash,\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n  swap_quote_block_number: blockNumber,\n  succeeded,\n})\n\n/** Integrates the Widget's transactions, showing the widget's transactions in the app. */\nexport function useSyncWidgetTransactions() {\n  const trace = useTrace({ section: InterfaceSectionName.WIDGET })\n\n  const { chainId } = useWeb3React()\n  const addTransaction = useTransactionAdder()\n\n  const onTxSubmit = useCallback(\n    (_hash: string, transaction: Transaction<TransactionInfo>) => {\n      const { type, response } = transaction.info\n\n      if (!type || !response) {\n        return\n      } else if (type === WidgetTransactionType.WRAP || type === WidgetTransactionType.UNWRAP) {\n        const { type, amount: transactionAmount } = transaction.info\n\n        const eventProperties = {\n          // get this info from widget handlers\n          token_in_address: getTokenAddress(transactionAmount.currency),\n          token_out_address: getTokenAddress(transactionAmount.currency.wrapped),\n          token_in_symbol: transactionAmount.currency.symbol,\n          token_out_symbol: transactionAmount.currency.wrapped.symbol,\n          chain_id: transactionAmount.currency.chainId,\n          amount: transactionAmount\n            ? formatToDecimal(transactionAmount, transactionAmount?.currency.decimals)\n            : undefined,\n          type: type === WidgetTransactionType.WRAP ? TransactionType.WRAP : TransactionType.UNWRAP,\n          ...trace,\n        }\n        sendAnalyticsEvent(InterfaceEventName.WRAP_TOKEN_TXN_SUBMITTED, eventProperties)\n        const { amount } = transaction.info\n        addTransaction(response, {\n          type: AppTransactionType.WRAP,\n          unwrapped: type === WidgetTransactionType.UNWRAP,\n          currencyAmountRaw: amount.quotient.toString(),\n          chainId,\n        } as WrapTransactionInfo)\n      } else if (type === WidgetTransactionType.SWAP) {\n        const { slippageTolerance, trade, tradeType } = transaction.info\n\n        const eventProperties = {\n          ...formatSwapSignedAnalyticsEventProperties({\n            trade,\n            // TODO: add once Widgets adds fiat values to callback\n            fiatValues: { amountIn: undefined, amountOut: undefined },\n            txHash: transaction.receipt?.transactionHash ?? '',\n          }),\n          ...trace,\n        }\n        sendAnalyticsEvent(SwapEventName.SWAP_SIGNED, eventProperties)\n        const baseTxInfo = {\n          type: AppTransactionType.SWAP,\n          tradeType,\n          inputCurrencyId: currencyId(trade.inputAmount.currency),\n          outputCurrencyId: currencyId(trade.outputAmount.currency),\n        }\n        if (tradeType === TradeType.EXACT_OUTPUT) {\n          addTransaction(response, {\n            ...baseTxInfo,\n            maximumInputCurrencyAmountRaw: trade.maximumAmountIn(slippageTolerance).quotient.toString(),\n            outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n            expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n          } as ExactOutputSwapTransactionInfo)\n        } else {\n          addTransaction(response, {\n            ...baseTxInfo,\n            inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n            expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n            minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(slippageTolerance).quotient.toString(),\n          } as ExactInputSwapTransactionInfo)\n        }\n      }\n    },\n    [addTransaction, chainId, trace]\n  )\n\n  const onTxSuccess: OnTxSuccess = useCallback((hash: string, tx) => {\n    if (tx.info.type === TransactionType.SWAP) {\n      const { trade, slippageTolerance } = tx.info\n      sendAnalyticsEvent(\n        SwapEventName.SWAP_TRANSACTION_COMPLETED,\n        formatAnalyticsEventProperties({\n          trade,\n          hash,\n          gasUsed: tx.receipt?.gasUsed?.toString(),\n          blockNumber: tx.receipt?.blockNumber,\n          allowedSlippage: slippageTolerance,\n          succeeded: tx.receipt?.status === 1,\n        })\n      )\n    }\n  }, [])\n\n  const txHandlers: TransactionEventHandlers = useMemo(() => ({ onTxSubmit, onTxSuccess }), [onTxSubmit, onTxSuccess])\n\n  return { transactions: { ...txHandlers } }\n}\n","/workspace/Physica-Interfae/src/components/Widget/theme.ts",[],"/workspace/Physica-Interfae/src/components/Widget/settings.ts",["3981","3982","3983","3984"],"import { Percent } from '@uniswap/sdk-core'\nimport { RouterPreference, Slippage, SwapController, SwapEventHandlers } from '@uniswap/widgets'\nimport { DEFAULT_DEADLINE_FROM_NOW } from 'constants/misc'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useUserSlippageTolerance, useUserTransactionTTL } from 'state/user/hooks'\n\n/**\n * Integrates the Widget's settings, keeping the widget and app settings in sync.\n * NB: This acts as an integration layer, so certain values are duplicated in order to translate\n * between app and widget representations.\n */\nexport function useSyncWidgetSettings() {\n  const [appTtl, setAppTtl] = useUserTransactionTTL()\n  const [widgetTtl, setWidgetTtl] = useState<number | undefined>(appTtl / 60)\n  const onTransactionDeadlineChange = useCallback(\n    (widgetTtl: number | undefined) => {\n      setWidgetTtl(widgetTtl)\n      const appTtl = widgetTtl === undefined ? widgetTtl : widgetTtl * 60\n      setAppTtl(appTtl ?? DEFAULT_DEADLINE_FROM_NOW)\n    },\n    [setAppTtl]\n  )\n\n  const [appSlippage, setAppSlippage] = useUserSlippageTolerance()\n  const [widgetSlippage, setWidgetSlippage] = useState<string | undefined>(\n    appSlippage === 'auto' ? undefined : appSlippage.toFixed(2)\n  )\n  const onSlippageChange = useCallback(\n    (widgetSlippage: Slippage) => {\n      setWidgetSlippage(widgetSlippage.max)\n      if (widgetSlippage.auto || !widgetSlippage.max) {\n        setAppSlippage('auto')\n      } else {\n        setAppSlippage(new Percent(Math.floor(Number(widgetSlippage.max) * 100), 10_000))\n      }\n    },\n    [setAppSlippage]\n  )\n\n  const [routerPreference, onRouterPreferenceChange] = useState(RouterPreference.API)\n\n  const onSettingsReset = useCallback(() => {\n    setWidgetTtl(undefined)\n    setAppTtl(DEFAULT_DEADLINE_FROM_NOW)\n    setWidgetSlippage(undefined)\n    setAppSlippage('auto')\n  }, [setAppSlippage, setAppTtl])\n\n  const settings: SwapController['settings'] = useMemo(() => {\n    const auto = appSlippage === 'auto'\n    return {\n      slippage: { auto, max: widgetSlippage },\n      transactionTtl: widgetTtl,\n      routerPreference,\n    }\n  }, [appSlippage, widgetSlippage, widgetTtl, routerPreference])\n  const settingsHandlers: SwapEventHandlers = useMemo(\n    () => ({ onSettingsReset, onSlippageChange, onTransactionDeadlineChange, onRouterPreferenceChange }),\n    [onSettingsReset, onSlippageChange, onTransactionDeadlineChange, onRouterPreferenceChange]\n  )\n\n  return { settings: { settings, ...settingsHandlers } }\n}\n","/workspace/Physica-Interfae/src/components/swap/confirmPriceImpactWithoutFee.ts",["3985","3986","3987","3988"],"import { Percent } from '@uniswap/sdk-core'\n\nimport { ALLOWED_PRICE_IMPACT_HIGH, PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN } from '../../constants/misc'\n\n/**\n * Given the price impact, get user confirmation.\n *\n * @param priceImpactWithoutFee price impact of the trade without the fee.\n */\nexport default function confirmPriceImpactWithoutFee(priceImpactWithoutFee: Percent): boolean {\n  if (!priceImpactWithoutFee.lessThan(PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN)) {\n    return (\n      window.prompt(\n        `This swap has a price impact of at least ${PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(\n          0\n        )}%. Please type the word \"confirm\" to continue with this swap.`\n      ) === 'confirm'\n    )\n  } else if (!priceImpactWithoutFee.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) {\n    return window.confirm(\n      `This swap has a price impact of at least ${ALLOWED_PRICE_IMPACT_HIGH.toFixed(\n        0\n      )}%. Please confirm that you would like to continue with this swap.`\n    )\n  }\n  return true\n}\n","/workspace/Physica-Interfae/src/hooks/usePoolTickData.ts",["3989","3990","3991","3992","3993","3994","3995","3996","3997","3998","3999","4000","4001"],"import { Currency } from '@uniswap/sdk-core'\nimport { FeeAmount, nearestUsableTick, Pool, TICK_SPACINGS, tickToPrice } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport { ZERO_ADDRESS } from 'constants/misc'\nimport { useAllV3TicksQuery } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { TickData, Ticks } from 'graphql/thegraph/AllV3TicksQuery'\nimport { apolloClient } from 'graphql/thegraph/apollo'\nimport JSBI from 'jsbi'\nimport { useSingleContractMultipleData } from 'lib/hooks/multicall'\nimport ms from 'ms.macro'\nimport { useEffect, useMemo, useState } from 'react'\nimport computeSurroundingTicks from 'utils/computeSurroundingTicks'\n\nimport { V3_CORE_FACTORY_ADDRESSES } from '../constants/addresses'\nimport { useTickLens } from './useContract'\nimport { PoolState, usePool } from './usePools'\n\nconst PRICE_FIXED_DIGITS = 8\nconst CHAIN_IDS_MISSING_SUBGRAPH_DATA = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.ARBITRUM_GOERLI]\n\n// Tick with fields parsed to JSBIs, and active liquidity computed.\nexport interface TickProcessed {\n  tick: number\n  liquidityActive: JSBI\n  liquidityNet: JSBI\n  price0: string\n}\n\nconst REFRESH_FREQUENCY = { blocksPerFetch: 2 }\n\nconst getActiveTick = (tickCurrent: number | undefined, feeAmount: FeeAmount | undefined) =>\n  tickCurrent && feeAmount ? Math.floor(tickCurrent / TICK_SPACINGS[feeAmount]) * TICK_SPACINGS[feeAmount] : undefined\n\nconst bitmapIndex = (tick: number, tickSpacing: number) => {\n  return Math.floor(tick / tickSpacing / 256)\n}\n\nfunction useTicksFromTickLens(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined,\n  numSurroundingTicks: number | undefined = 125\n) {\n  const [tickDataLatestSynced, setTickDataLatestSynced] = useState<TickData[]>([])\n\n  const [poolState, pool] = usePool(currencyA, currencyB, feeAmount)\n\n  const tickSpacing = feeAmount && TICK_SPACINGS[feeAmount]\n\n  // Find nearest valid tick for pool in case tick is not initialized.\n  const activeTick = pool?.tickCurrent && tickSpacing ? nearestUsableTick(pool?.tickCurrent, tickSpacing) : undefined\n\n  const { chainId } = useWeb3React()\n\n  const poolAddress =\n    currencyA && currencyB && feeAmount && poolState === PoolState.EXISTS\n      ? Pool.getAddress(\n          currencyA?.wrapped,\n          currencyB?.wrapped,\n          feeAmount,\n          undefined,\n          chainId ? V3_CORE_FACTORY_ADDRESSES[chainId] : undefined\n        )\n      : undefined\n\n  // it is also possible to grab all tick data but it is extremely slow\n  // bitmapIndex(nearestUsableTick(TickMath.MIN_TICK, tickSpacing), tickSpacing)\n  const minIndex = useMemo(\n    () =>\n      tickSpacing && activeTick ? bitmapIndex(activeTick - numSurroundingTicks * tickSpacing, tickSpacing) : undefined,\n    [tickSpacing, activeTick, numSurroundingTicks]\n  )\n\n  const maxIndex = useMemo(\n    () =>\n      tickSpacing && activeTick ? bitmapIndex(activeTick + numSurroundingTicks * tickSpacing, tickSpacing) : undefined,\n    [tickSpacing, activeTick, numSurroundingTicks]\n  )\n\n  const tickLensArgs: [string, number][] = useMemo(\n    () =>\n      maxIndex && minIndex && poolAddress && poolAddress !== ZERO_ADDRESS\n        ? new Array(maxIndex - minIndex + 1)\n            .fill(0)\n            .map((_, i) => i + minIndex)\n            .map((wordIndex) => [poolAddress, wordIndex])\n        : [],\n    [minIndex, maxIndex, poolAddress]\n  )\n\n  const tickLens = useTickLens()\n  const callStates = useSingleContractMultipleData(\n    tickLensArgs.length > 0 ? tickLens : undefined,\n    'getPopulatedTicksInWord',\n    tickLensArgs,\n    REFRESH_FREQUENCY\n  )\n\n  const isError = useMemo(() => callStates.some(({ error }) => error), [callStates])\n  const isLoading = useMemo(() => callStates.some(({ loading }) => loading), [callStates])\n  const IsSyncing = useMemo(() => callStates.some(({ syncing }) => syncing), [callStates])\n  const isValid = useMemo(() => callStates.some(({ valid }) => valid), [callStates])\n\n  const tickData: TickData[] = useMemo(\n    () =>\n      callStates\n        .map(({ result }) => result?.populatedTicks)\n        .reduce(\n          (accumulator, current) => [\n            ...accumulator,\n            ...(current?.map((tickData: TickData) => {\n              return {\n                tick: tickData.tick,\n                liquidityNet: JSBI.BigInt(tickData.liquidityNet),\n              }\n            }) ?? []),\n          ],\n          []\n        ),\n    [callStates]\n  )\n\n  // reset on input change\n  useEffect(() => {\n    setTickDataLatestSynced([])\n  }, [currencyA, currencyB, feeAmount])\n\n  // return the latest synced tickData even if we are still loading the newest data\n  useEffect(() => {\n    if (!IsSyncing && !isLoading && !isError && isValid) {\n      setTickDataLatestSynced(tickData.sort((a, b) => a.tick - b.tick))\n    }\n  }, [isError, isLoading, IsSyncing, tickData, isValid])\n\n  return useMemo(\n    () => ({ isLoading, IsSyncing, isError, isValid, tickData: tickDataLatestSynced }),\n    [isLoading, IsSyncing, isError, isValid, tickDataLatestSynced]\n  )\n}\n\nfunction useTicksFromSubgraph(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined,\n  skip = 0\n) {\n  const { chainId } = useWeb3React()\n  const poolAddress =\n    currencyA && currencyB && feeAmount\n      ? Pool.getAddress(\n          currencyA?.wrapped,\n          currencyB?.wrapped,\n          feeAmount,\n          undefined,\n          chainId ? V3_CORE_FACTORY_ADDRESSES[chainId] : undefined\n        )\n      : undefined\n\n  return useAllV3TicksQuery({\n    variables: { poolAddress: poolAddress?.toLowerCase(), skip },\n    skip: !poolAddress,\n    pollInterval: ms`30s`,\n    client: apolloClient,\n  })\n}\n\nconst MAX_THE_GRAPH_TICK_FETCH_VALUE = 1000\n// Fetches all ticks for a given pool\nfunction useAllV3Ticks(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined\n): {\n  isLoading: boolean\n  error: unknown\n  ticks: TickData[] | undefined\n} {\n  const useSubgraph = currencyA ? !CHAIN_IDS_MISSING_SUBGRAPH_DATA.includes(currencyA.chainId) : true\n\n  const tickLensTickData = useTicksFromTickLens(!useSubgraph ? currencyA : undefined, currencyB, feeAmount)\n\n  const [skipNumber, setSkipNumber] = useState(0)\n  const [subgraphTickData, setSubgraphTickData] = useState<Ticks>([])\n  const {\n    data,\n    error,\n    loading: isLoading,\n  } = useTicksFromSubgraph(useSubgraph ? currencyA : undefined, currencyB, feeAmount, skipNumber)\n\n  useEffect(() => {\n    if (data?.ticks.length) {\n      setSubgraphTickData((tickData) => [...tickData, ...data.ticks])\n      if (data.ticks.length === MAX_THE_GRAPH_TICK_FETCH_VALUE) {\n        setSkipNumber((skipNumber) => skipNumber + MAX_THE_GRAPH_TICK_FETCH_VALUE)\n      }\n    }\n  }, [data?.ticks])\n\n  return {\n    isLoading: useSubgraph\n      ? isLoading || data?.ticks.length === MAX_THE_GRAPH_TICK_FETCH_VALUE\n      : tickLensTickData.isLoading,\n    error: useSubgraph ? error : tickLensTickData.isError,\n    ticks: useSubgraph ? subgraphTickData : tickLensTickData.tickData,\n  }\n}\n\nexport function usePoolActiveLiquidity(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined\n): {\n  isLoading: boolean\n  error: any\n  activeTick: number | undefined\n  data: TickProcessed[] | undefined\n} {\n  const pool = usePool(currencyA, currencyB, feeAmount)\n\n  // Find nearest valid tick for pool in case tick is not initialized.\n  const activeTick = useMemo(() => getActiveTick(pool[1]?.tickCurrent, feeAmount), [pool, feeAmount])\n\n  const { isLoading, error, ticks } = useAllV3Ticks(currencyA, currencyB, feeAmount)\n\n  return useMemo(() => {\n    if (\n      !currencyA ||\n      !currencyB ||\n      activeTick === undefined ||\n      pool[0] !== PoolState.EXISTS ||\n      !ticks ||\n      ticks.length === 0 ||\n      isLoading\n    ) {\n      return {\n        isLoading: isLoading || pool[0] === PoolState.LOADING,\n        error,\n        activeTick,\n        data: undefined,\n      }\n    }\n\n    const token0 = currencyA?.wrapped\n    const token1 = currencyB?.wrapped\n\n    // find where the active tick would be to partition the array\n    // if the active tick is initialized, the pivot will be an element\n    // if not, take the previous tick as pivot\n    const pivot = ticks.findIndex(({ tick }) => tick > activeTick) - 1\n\n    if (pivot < 0) {\n      // consider setting a local error\n      console.error('TickData pivot not found')\n      return {\n        isLoading,\n        error,\n        activeTick,\n        data: undefined,\n      }\n    }\n\n    const activeTickProcessed: TickProcessed = {\n      liquidityActive: JSBI.BigInt(pool[1]?.liquidity ?? 0),\n      tick: activeTick,\n      liquidityNet: Number(ticks[pivot].tick) === activeTick ? JSBI.BigInt(ticks[pivot].liquidityNet) : JSBI.BigInt(0),\n      price0: tickToPrice(token0, token1, activeTick).toFixed(PRICE_FIXED_DIGITS),\n    }\n\n    const subsequentTicks = computeSurroundingTicks(token0, token1, activeTickProcessed, ticks, pivot, true)\n\n    const previousTicks = computeSurroundingTicks(token0, token1, activeTickProcessed, ticks, pivot, false)\n\n    const ticksProcessed = previousTicks.concat(activeTickProcessed).concat(subsequentTicks)\n\n    return {\n      isLoading,\n      error,\n      activeTick,\n      data: ticksProcessed,\n    }\n  }, [currencyA, currencyB, activeTick, pool, ticks, isLoading, error])\n}\n","/workspace/Physica-Interfae/src/graphql/thegraph/FeeTierDistributionQuery.ts",["4002","4003"],"import { ApolloError, useQuery } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { useMemo } from 'react'\n\nimport { FeeTierDistributionQuery } from './__generated__/types-and-hooks'\nimport { apolloClient } from './apollo'\n\nconst query = gql`\n  query FeeTierDistribution($token0: String!, $token1: String!) {\n    _meta {\n      block {\n        number\n      }\n    }\n    asToken0: pools(\n      orderBy: totalValueLockedToken0\n      orderDirection: desc\n      where: { token0: $token0, token1: $token1 }\n    ) {\n      feeTier\n      totalValueLockedToken0\n      totalValueLockedToken1\n    }\n    asToken1: pools(\n      orderBy: totalValueLockedToken0\n      orderDirection: desc\n      where: { token0: $token1, token1: $token0 }\n    ) {\n      feeTier\n      totalValueLockedToken0\n      totalValueLockedToken1\n    }\n  }\n`\n\nexport default function useFeeTierDistributionQuery(\n  token0: string | undefined,\n  token1: string | undefined,\n  interval: number\n): { error: ApolloError | undefined; isLoading: boolean; data: FeeTierDistributionQuery } {\n  const {\n    data,\n    loading: isLoading,\n    error,\n  } = useQuery(query, {\n    variables: {\n      token0: token0?.toLowerCase(),\n      token1: token1?.toLowerCase(),\n    },\n    pollInterval: interval,\n    client: apolloClient,\n  })\n\n  return useMemo(\n    () => ({\n      error,\n      isLoading,\n      data,\n    }),\n    [data, error, isLoading]\n  )\n}\n","/workspace/Physica-Interfae/src/components/TransactionSettings/index.tsx",[],"/workspace/Physica-Interfae/src/components/Widget/inputs.tsx",["4004","4005","4006","4007"],"import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfaceSectionName, SwapEventName } from '@uniswap/analytics-events'\nimport { Currency, Field, SwapController, SwapEventHandlers, TradeType } from '@uniswap/widgets'\nimport { useWeb3React } from '@web3-react/core'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { isSupportedChain } from 'constants/chains'\nimport usePrevious from 'hooks/usePrevious'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nconst EMPTY_AMOUNT = ''\n\ntype SwapValue = Required<SwapController>['value']\nexport type SwapTokens = Pick<SwapValue, Field.INPUT | Field.OUTPUT> & { default?: Currency }\nexport type DefaultTokens = Partial<SwapTokens>\n\nfunction missingDefaultToken(tokens: SwapTokens) {\n  if (!tokens.default) return false\n  return !tokens[Field.INPUT]?.equals(tokens.default) && !tokens[Field.OUTPUT]?.equals(tokens.default)\n}\n\nfunction currenciesEqual(a: Currency | undefined, b: Currency | undefined) {\n  if (a && b) {\n    return a.equals(b)\n  } else {\n    return !a && !b\n  }\n}\n\nfunction tokensEqual(a: SwapTokens | undefined, b: SwapTokens | undefined) {\n  if (!a || !b) {\n    return !a && !b\n  }\n  return (\n    currenciesEqual(a[Field.INPUT], b[Field.INPUT]) &&\n    currenciesEqual(a[Field.OUTPUT], b[Field.OUTPUT]) &&\n    currenciesEqual(a.default, b.default)\n  )\n}\n\n/**\n * Integrates the Widget's inputs.\n * Treats the Widget as a controlled component, using the app's own token selector for selection.\n * Enforces that token is a part of the returned value.\n */\nexport function useSyncWidgetInputs({\n  defaultTokens,\n  onDefaultTokenChange,\n}: {\n  defaultTokens: DefaultTokens\n  onDefaultTokenChange?: (tokens: SwapTokens) => void\n}) {\n  const trace = useTrace({ section: InterfaceSectionName.WIDGET })\n\n  const { chainId } = useWeb3React()\n  const previousChainId = usePrevious(chainId)\n\n  const [type, setType] = useState<SwapValue['type']>(TradeType.EXACT_INPUT)\n  const [amount, setAmount] = useState<SwapValue['amount']>(EMPTY_AMOUNT)\n  const [tokens, setTokens] = useState<SwapTokens>({\n    ...defaultTokens,\n    [Field.OUTPUT]: defaultTokens[Field.OUTPUT] ?? defaultTokens.default,\n  })\n\n  // The most recent set of defaults, which can be used to check when the defaults are actually changing.\n  const baseTokens = usePrevious(defaultTokens)\n  useEffect(() => {\n    if (!tokensEqual(baseTokens, defaultTokens)) {\n      const input = defaultTokens[Field.INPUT]\n      const output = defaultTokens[Field.OUTPUT] ?? defaultTokens.default\n      setTokens({\n        ...defaultTokens,\n        [Field.OUTPUT]: currenciesEqual(output, input) ? undefined : output,\n      })\n    }\n  }, [baseTokens, defaultTokens])\n\n  /**\n   * Clear the tokens if the chain changes.\n   */\n  useEffect(() => {\n    if (chainId !== previousChainId && !!previousChainId && isSupportedChain(chainId)) {\n      setTokens({\n        ...defaultTokens,\n        [Field.OUTPUT]: defaultTokens[Field.OUTPUT] ?? defaultTokens.default,\n      })\n      setAmount(EMPTY_AMOUNT)\n    }\n  }, [chainId, defaultTokens, previousChainId, tokens])\n\n  const onAmountChange = useCallback(\n    (field: Field, amount: string, origin?: 'max') => {\n      if (origin === 'max') {\n        sendAnalyticsEvent(SwapEventName.SWAP_MAX_TOKEN_AMOUNT_SELECTED, { ...trace })\n      }\n      setType(field === Field.INPUT ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT)\n      setAmount(amount)\n    },\n    [trace]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    sendAnalyticsEvent(SwapEventName.SWAP_TOKENS_REVERSED, { ...trace })\n    setType((type) => invertTradeType(type))\n    setTokens((tokens) => ({\n      [Field.INPUT]: tokens[Field.OUTPUT],\n      [Field.OUTPUT]: tokens[Field.INPUT],\n      default: tokens.default,\n    }))\n  }, [trace])\n\n  const [selectingField, setSelectingField] = useState<Field>()\n  const onTokenSelectorClick = useCallback((field: Field) => {\n    setSelectingField(field)\n    return false\n  }, [])\n\n  const onTokenSelect = useCallback(\n    (selectingToken: Currency) => {\n      if (selectingField === undefined) return\n\n      const otherField = invertField(selectingField)\n      const isFlip = tokens[otherField]?.equals(selectingToken)\n      const update: SwapTokens = {\n        [selectingField]: selectingToken,\n        [otherField]: isFlip ? tokens[selectingField] : tokens[otherField],\n        default: tokens.default,\n      }\n\n      setType((type) => {\n        // If flipping the tokens, also flip the type/amount.\n        if (isFlip) {\n          return invertTradeType(type)\n        }\n\n        // Setting a new token should clear its amount, if it is set.\n        const activeField = type === TradeType.EXACT_INPUT ? Field.INPUT : Field.OUTPUT\n        if (selectingField === activeField) {\n          setAmount(() => EMPTY_AMOUNT)\n        }\n\n        return type\n      })\n\n      if (missingDefaultToken(update)) {\n        onDefaultTokenChange?.({\n          ...update,\n          default: update[Field.OUTPUT] ?? selectingToken,\n        })\n        return\n      }\n      setTokens(update)\n    },\n    [onDefaultTokenChange, selectingField, tokens]\n  )\n\n  const tokenSelector = (\n    <CurrencySearchModal\n      isOpen={selectingField !== undefined}\n      onDismiss={() => setSelectingField(undefined)}\n      selectedCurrency={selectingField && tokens[selectingField]}\n      otherSelectedCurrency={selectingField && tokens[invertField(selectingField)]}\n      onCurrencySelect={onTokenSelect}\n      showCommonBases\n    />\n  )\n\n  const value: SwapValue = useMemo(\n    () => ({\n      type,\n      amount,\n      // If the initial state has not yet been set, preemptively disable the widget by passing no tokens. Effectively,\n      // this resets the widget - avoiding rendering stale state - because with no tokens the skeleton will be rendered.\n      ...(tokens[Field.INPUT] || tokens[Field.OUTPUT] ? tokens : undefined),\n    }),\n    [amount, tokens, type]\n  )\n  const valueHandlers: SwapEventHandlers = useMemo(\n    () => ({ onAmountChange, onSwitchTokens, onTokenSelectorClick }),\n    [onAmountChange, onSwitchTokens, onTokenSelectorClick]\n  )\n  return { inputs: { value, ...valueHandlers }, tokenSelector }\n}\n\n// TODO(zzmp): Move to @uniswap/widgets.\nfunction invertField(field: Field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT\n    case Field.OUTPUT:\n      return Field.INPUT\n  }\n}\n\n// TODO(zzmp): Include in @uniswap/sdk-core (on TradeType, if possible).\nfunction invertTradeType(tradeType: TradeType) {\n  switch (tradeType) {\n    case TradeType.EXACT_INPUT:\n      return TradeType.EXACT_OUTPUT\n    case TradeType.EXACT_OUTPUT:\n      return TradeType.EXACT_INPUT\n  }\n}\n","/workspace/Physica-Interfae/src/hooks/usePositionTokenURI.ts",["4008"],"import { BigNumber } from '@ethersproject/bignumber'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\ntype TokenId = number | JSBI | BigNumber\n\nconst STARTS_WITH = 'data:application/json;base64,'\n\ntype UsePositionTokenURIResult =\n  | {\n      valid: true\n      loading: false\n      result: {\n        name: string\n        description: string\n        image: string\n      }\n    }\n  | {\n      valid: false\n      loading: false\n    }\n  | {\n      valid: true\n      loading: true\n    }\n\nexport function usePositionTokenURI(tokenId: TokenId | undefined): UsePositionTokenURIResult {\n  const contract = useV3NFTPositionManagerContract()\n  const inputs = useMemo(\n    () => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId?.toString(16)],\n    [tokenId]\n  )\n  const { result, error, loading, valid } = useSingleCallResult(contract, 'tokenURI', inputs, {\n    ...NEVER_RELOAD,\n    gasRequired: 3_000_000,\n  })\n\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    if (loading) {\n      return {\n        valid: true,\n        loading: true,\n      }\n    }\n    if (!result) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    const [tokenURI] = result as [string]\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH))\n      return {\n        valid: false,\n        loading: false,\n      }\n\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)))\n\n      return {\n        valid: true,\n        loading: false,\n        result: json,\n      }\n    } catch (error) {\n      return { valid: false, loading: false }\n    }\n  }, [error, loading, result, tokenId, valid])\n}\n","/workspace/Physica-Interfae/src/components/swap/ConfirmSwapModal.tsx",["4009","4010"],"import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfaceModalName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { ReactNode, useCallback, useMemo, useState } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { tradeMeaningfullyDiffers } from 'utils/tradeMeaningFullyDiffer'\n\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n  swapQuoteReceivedDate,\n  fiatValueInput,\n  fiatValueOutput,\n}: {\n  isOpen: boolean\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  originalTrade: Trade<Currency, Currency, TradeType> | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: Percent\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: ReactNode | undefined\n  onDismiss: () => void\n  swapQuoteReceivedDate: Date | undefined\n  fiatValueInput: { data?: number; isLoading: boolean }\n  fiatValueOutput: { data?: number; isLoading: boolean }\n}) {\n  // shouldLogModalCloseEvent lets the child SwapModalHeader component know when modal has been closed\n  // and an event triggered by modal closing should be logged.\n  const [shouldLogModalCloseEvent, setShouldLogModalCloseEvent] = useState(false)\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n\n  const onModalDismiss = useCallback(() => {\n    if (isOpen) setShouldLogModalCloseEvent(true)\n    onDismiss()\n  }, [isOpen, onDismiss])\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        shouldLogModalCloseEvent={shouldLogModalCloseEvent}\n        setShouldLogModalCloseEvent={setShouldLogModalCloseEvent}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade, shouldLogModalCloseEvent])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        hash={txHash}\n        allowedSlippage={allowedSlippage}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n        swapQuoteReceivedDate={swapQuoteReceivedDate}\n        fiatValueInput={fiatValueInput}\n        fiatValueOutput={fiatValueOutput}\n      />\n    ) : null\n  }, [\n    onConfirm,\n    showAcceptChanges,\n    swapErrorMessage,\n    trade,\n    allowedSlippage,\n    txHash,\n    swapQuoteReceivedDate,\n    fiatValueInput,\n    fiatValueOutput,\n  ])\n\n  // text to show while loading\n  const pendingText = (\n    <Trans>\n      Swapping {trade?.inputAmount?.toSignificant(6)} {trade?.inputAmount?.currency?.symbol} for{' '}\n      {trade?.outputAmount?.toSignificant(6)} {trade?.outputAmount?.currency?.symbol}\n    </Trans>\n  )\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onModalDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title={<Trans>Confirm Swap</Trans>}\n          onDismiss={onModalDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onModalDismiss, modalBottom, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <Trace modal={InterfaceModalName.CONFIRM_SWAP}>\n      <TransactionConfirmationModal\n        isOpen={isOpen}\n        onDismiss={onModalDismiss}\n        attemptingTxn={attemptingTxn}\n        hash={txHash}\n        content={confirmationContent}\n        pendingText={pendingText}\n        currencyToAdd={trade?.outputAmount.currency}\n      />\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useWrapCallback.tsx",["4011","4012"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { formatToDecimal, getTokenAddress } from 'lib/utils/analytics'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useMemo, useState } from 'react'\n\nimport { WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\nimport { useCurrencyBalance } from '../state/connection/hooks'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { TransactionType } from '../state/transactions/types'\nimport { useWETHContract } from './useContract'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nenum WrapInputError {\n  NO_ERROR, // must be equal to 0 so all other errors are truthy\n  ENTER_NATIVE_AMOUNT,\n  ENTER_WRAPPED_AMOUNT,\n  INSUFFICIENT_NATIVE_BALANCE,\n  INSUFFICIENT_WRAPPED_BALANCE,\n}\n\nexport function WrapErrorText({ wrapInputError }: { wrapInputError: WrapInputError }) {\n  const native = useNativeCurrency()\n  const wrapped = native?.wrapped\n\n  switch (wrapInputError) {\n    case WrapInputError.NO_ERROR:\n      return null\n    case WrapInputError.ENTER_NATIVE_AMOUNT:\n      return <Trans>Enter {native?.symbol} amount</Trans>\n    case WrapInputError.ENTER_WRAPPED_AMOUNT:\n      return <Trans>Enter {wrapped?.symbol} amount</Trans>\n\n    case WrapInputError.INSUFFICIENT_NATIVE_BALANCE:\n      return <Trans>Insufficient {native?.symbol} balance</Trans>\n    case WrapInputError.INSUFFICIENT_WRAPPED_BALANCE:\n      return <Trans>Insufficient {wrapped?.symbol} balance</Trans>\n  }\n}\n\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined | null,\n  outputCurrency: Currency | undefined | null,\n  typedValue: string | undefined\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: WrapInputError } {\n  const { chainId, account } = useWeb3React()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency ?? undefined)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(\n    () => tryParseCurrencyAmount(typedValue, inputCurrency ?? undefined),\n    [inputCurrency, typedValue]\n  )\n  const addTransaction = useTransactionAdder()\n\n  // This allows an async error to propagate within the React lifecycle.\n  // Without rethrowing it here, it would not show up in the UI - only the dev console.\n  const [error, setError] = useState<Error>()\n  if (error) throw error\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId]\n    if (!weth) return NOT_APPLICABLE\n\n    const hasInputAmount = Boolean(inputAmount?.greaterThan('0'))\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    const eventProperties = {\n      token_in_address: getTokenAddress(inputCurrency),\n      token_out_address: getTokenAddress(outputCurrency),\n      token_in_symbol: inputCurrency.symbol,\n      token_out_symbol: outputCurrency.symbol,\n      chain_id: inputCurrency.chainId,\n      amount: inputAmount ? formatToDecimal(inputAmount, inputAmount?.currency.decimals) : undefined,\n    }\n\n    if (inputCurrency.isNative && weth.equals(outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const network = await wethContract.provider.getNetwork()\n                  if (\n                    network.chainId !== chainId ||\n                    wethContract.address !== WRAPPED_NATIVE_CURRENCY[network.chainId]?.address\n                  ) {\n                    sendAnalyticsEvent(InterfaceEventName.WRAP_TOKEN_TXN_INVALIDATED, {\n                      ...eventProperties,\n                      contract_address: wethContract.address,\n                      contract_chain_id: network.chainId,\n                      type: WrapType.WRAP,\n                    })\n                    const error = new Error(`Invalid WETH contract\nPlease file a bug detailing how this happened - https://github.com/Uniswap/interface/issues/new?labels=bug&template=bug-report.md&title=Invalid%20WETH%20contract`)\n                    setError(error)\n                    throw error\n                  }\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.quotient.toString(16)}` })\n                  addTransaction(txReceipt, {\n                    type: TransactionType.WRAP,\n                    unwrapped: false,\n                    currencyAmountRaw: inputAmount?.quotient.toString(),\n                    chainId,\n                  })\n                  sendAnalyticsEvent(InterfaceEventName.WRAP_TOKEN_TXN_SUBMITTED, {\n                    ...eventProperties,\n                    type: WrapType.WRAP,\n                  })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : hasInputAmount\n          ? WrapInputError.INSUFFICIENT_NATIVE_BALANCE\n          : WrapInputError.ENTER_NATIVE_AMOUNT,\n      }\n    } else if (weth.equals(inputCurrency) && outputCurrency.isNative) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.quotient.toString(16)}`)\n                  addTransaction(txReceipt, {\n                    type: TransactionType.WRAP,\n                    unwrapped: true,\n                    currencyAmountRaw: inputAmount?.quotient.toString(),\n                    chainId,\n                  })\n                  sendAnalyticsEvent(InterfaceEventName.WRAP_TOKEN_TXN_SUBMITTED, {\n                    ...eventProperties,\n                    type: WrapType.UNWRAP,\n                  })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : hasInputAmount\n          ? WrapInputError.INSUFFICIENT_WRAPPED_BALANCE\n          : WrapInputError.ENTER_WRAPPED_AMOUNT,\n      }\n    } else {\n      return NOT_APPLICABLE\n    }\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\n}\n","/workspace/Physica-Interfae/src/components/swap/SwapHeader.tsx",["4013","4014","4015"],"import { Trans } from '@lingui/macro'\nimport { Percent } from '@uniswap/sdk-core'\nimport { useFiatOnRampButtonEnabled } from 'featureFlags/flags/fiatOnRampButton'\nimport { subhead } from 'nft/css/common.css'\nimport styled from 'styled-components/macro'\n\nimport { RowBetween, RowFixed } from '../Row'\nimport SettingsTab from '../Settings'\nimport SwapBuyFiatButton from './SwapBuyFiatButton'\n\nconst StyledSwapHeader = styled.div`\n  padding: 8px 12px;\n  margin-bottom: 8px;\n  width: 100%;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst TextHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  margin-right: 8px;\n  display: flex;\n  line-height: 20px;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`\n\nexport default function SwapHeader({ allowedSlippage }: { allowedSlippage: Percent }) {\n  const fiatOnRampButtonEnabled = useFiatOnRampButtonEnabled()\n\n  return (\n    <StyledSwapHeader>\n      <RowBetween>\n        <RowFixed style={{ gap: '8px' }}>\n          <TextHeader className={subhead}>\n            <Trans>Swap</Trans>\n          </TextHeader>\n          {/* {fiatOnRampButtonEnabled && <SwapBuyFiatButton />} */}\n        </RowFixed>\n        <RowFixed>\n          <SettingsTab placeholderSlippage={allowedSlippage} />\n        </RowFixed>\n      </RowBetween>\n    </StyledSwapHeader>\n  )\n}\n","/workspace/Physica-Interfae/src/components/CurrencyInputPanel/SwapCurrencyInputPanel.tsx",[],"/workspace/Physica-Interfae/src/components/Badge/RangeBadge.tsx",[],"/workspace/Physica-Interfae/src/nft/hooks/useIsNavSearchInputVisible.ts",[],"/workspace/Physica-Interfae/src/components/Logo/QueryTokenLogo.tsx",["4016"],"import { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { TokenStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { SearchToken } from 'graphql/data/SearchTokens'\nimport { TokenQueryData } from 'graphql/data/Token'\nimport { TopToken } from 'graphql/data/TopTokens'\nimport { CHAIN_NAME_TO_CHAIN_ID } from 'graphql/data/util'\n\nimport AssetLogo, { AssetLogoBaseProps } from './AssetLogo'\n\nexport default function QueryTokenLogo(\n  props: AssetLogoBaseProps & {\n    token?: TopToken | TokenQueryData | SearchToken\n  }\n) {\n  const chainId = props.token?.chain ? CHAIN_NAME_TO_CHAIN_ID[props.token?.chain] : undefined\n\n  return (\n    <AssetLogo\n      isNative={\n        // TODO(cartcrom): simplify this check after backend fixes token standard on assetActivities tokens\n        !props.token?.address ||\n        props.token?.standard === TokenStandard.Native ||\n        props.token?.address === NATIVE_CHAIN_ID\n      }\n      chainId={chainId}\n      address={props.token?.address}\n      symbol={props.token?.symbol}\n      backupImg={props.token?.project?.logoUrl}\n      {...props}\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/lib/utils/searchBar.ts",["4017"],"import { SearchToken } from 'graphql/data/SearchTokens'\nimport { GenieCollection } from 'nft/types'\n\n/**\n * Organizes the number of Token and NFT results to be shown to a user depending on if they're in the NFT or Token experience\n * If not an nft page show up to 5 tokens, else up to 3. Max total suggestions of 8\n * @param isNFTPage boolean if user is currently on an nft page\n * @param tokenResults array of FungibleToken results\n * @param collectionResults array of NFT Collection results\n * @returns an array of Fungible Tokens and an array of NFT Collections with correct number of results to be shown\n */\nexport function organizeSearchResults(\n  isNFTPage: boolean,\n  tokenResults: SearchToken[],\n  collectionResults: GenieCollection[]\n): [SearchToken[], GenieCollection[]] {\n  const reducedTokens =\n    tokenResults?.slice(0, isNFTPage ? 3 : collectionResults.length < 3 ? 8 - collectionResults.length : 5) ?? []\n  const reducedCollections = collectionResults.slice(0, 8 - reducedTokens.length)\n  return [reducedTokens, reducedCollections]\n}\n","/workspace/Physica-Interfae/src/graphql/data/SearchTokens.ts",["4018","4019"],"import { WRAPPED_NATIVE_CURRENCY } from 'constants/tokens'\nimport gql from 'graphql-tag'\nimport { useMemo } from 'react'\n\nimport { Chain, SearchTokensQuery, useSearchTokensQuery } from './__generated__/types-and-hooks'\nimport { chainIdToBackendName } from './util'\n\ngql`\n  query SearchTokens($searchQuery: String!) {\n    searchTokens(searchQuery: $searchQuery) {\n      id\n      decimals\n      name\n      chain\n      standard\n      address\n      symbol\n      market(currency: USD) {\n        id\n        price {\n          id\n          value\n          currency\n        }\n        pricePercentChange(duration: DAY) {\n          id\n          value\n        }\n        volume24H: volume(duration: DAY) {\n          id\n          value\n          currency\n        }\n      }\n      project {\n        id\n        logoUrl\n        safetyLevel\n      }\n    }\n  }\n`\n\nexport type SearchToken = NonNullable<NonNullable<SearchTokensQuery['searchTokens']>[number]>\n\nfunction isMoreRevelantToken(current: SearchToken, existing: SearchToken | undefined, searchChain: Chain) {\n  if (!existing) return true\n\n  // Always priotize natives, and if both tokens are native, prefer native on current chain (i.e. Matic on Polygon over Matic on Mainnet )\n  if (current.standard === 'NATIVE' && (existing.standard !== 'NATIVE' || current.chain === searchChain)) return true\n\n  // Prefer tokens on the searched chain, otherwise prefer mainnet tokens\n  return current.chain === searchChain || (existing.chain !== searchChain && current.chain === Chain.Ethereum)\n}\n\n// Places natives first, wrapped native on current chain next, then sorts by volume\nfunction searchTokenSortFunction(\n  searchChain: Chain,\n  wrappedNativeAddress: string | undefined,\n  a: SearchToken,\n  b: SearchToken\n) {\n  if (a.standard === 'NATIVE') {\n    if (b.standard === 'NATIVE') {\n      if (a.chain === searchChain) return -1\n      else if (b.chain === searchChain) return 1\n      else return 0\n    } else return -1\n  } else if (b.standard === 'NATIVE') return 1\n  else if (wrappedNativeAddress && a.address === wrappedNativeAddress) return -1\n  else if (wrappedNativeAddress && b.address === wrappedNativeAddress) return 1\n  else return (b.market?.volume24H?.value ?? 0) - (a.market?.volume24H?.value ?? 0)\n}\n\nexport function useSearchTokens(searchQuery: string, chainId: number) {\n  const { data, loading, error } = useSearchTokensQuery({\n    variables: {\n      searchQuery,\n    },\n    skip: !searchQuery,\n  })\n\n  const sortedTokens = useMemo(() => {\n    const searchChain = chainIdToBackendName(chainId)\n    // Stores results, allowing overwriting cross-chain tokens w/ more 'relevant token'\n    const selectionMap: { [projectId: string]: SearchToken } = {}\n    data?.searchTokens?.forEach((token) => {\n      if (token.project?.id) {\n        const existing = selectionMap[token.project.id]\n        if (isMoreRevelantToken(token, existing, searchChain)) selectionMap[token.project.id] = token\n      }\n    })\n    return Object.values(selectionMap).sort(\n      searchTokenSortFunction.bind(null, searchChain, WRAPPED_NATIVE_CURRENCY[chainId]?.address)\n    )\n  }, [data, chainId])\n\n  return {\n    data: sortedTokens,\n    loading,\n    error,\n  }\n}\n","/workspace/Physica-Interfae/src/graphql/data/nft/CollectionSearch.ts",["4020"],"import { isAddress } from '@ethersproject/address'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport gql from 'graphql-tag'\nimport { GenieCollection } from 'nft/types'\nimport { blocklistedCollections } from 'nft/utils'\nimport { useMemo } from 'react'\n\nimport { NftCollection, useCollectionSearchQuery } from '../__generated__/types-and-hooks'\nimport { formatCollectionQueryData, useCollection } from './Collection'\n\nconst MAX_SEARCH_RESULTS = 6\n\ngql`\n  query CollectionSearch($query: String!) {\n    nftCollections(filter: { nameQuery: $query }) {\n      edges {\n        cursor\n        node {\n          image {\n            url\n          }\n          isVerified\n          name\n          numAssets\n          nftContracts {\n            address\n            chain\n            name\n            symbol\n            totalSupply\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\ninterface useCollectionSearchReturnProps {\n  data: GenieCollection[]\n  loading: boolean\n}\n\nfunction useCollectionQuerySearch(query: string, skip?: boolean): useCollectionSearchReturnProps {\n  const { data: queryData, loading } = useCollectionSearchQuery({\n    variables: {\n      query,\n    },\n    skip: skip || !query,\n  })\n\n  return useMemo(() => {\n    return {\n      data:\n        queryData?.nftCollections?.edges\n          ?.filter(\n            (collectionEdge) =>\n              collectionEdge.node.nftContracts?.[0]?.address &&\n              !blocklistedCollections.includes(collectionEdge.node.nftContracts?.[0]?.address)\n          )\n          .slice(0, MAX_SEARCH_RESULTS)\n          .map((collectionEdge) => {\n            const queryCollection = collectionEdge.node as NonNullable<NftCollection>\n            return formatCollectionQueryData(queryCollection)\n          }) ?? [],\n      loading,\n    }\n  }, [loading, queryData])\n}\n\nexport function useCollectionSearch(queryOrAddress: string): useCollectionSearchReturnProps {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const isName = !isAddress(queryOrAddress.toLowerCase())\n  const queryResult = useCollectionQuerySearch(queryOrAddress, isNftGraphqlEnabled ? !isName : true)\n  const addressResult = useCollection(queryOrAddress, isNftGraphqlEnabled ? isName : true)\n  return isName ? queryResult : { data: [addressResult.data], loading: addressResult.loading }\n}\n","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Chart.tsx",["4021","4022"],"import { max, scaleLinear, ZoomTransform } from 'd3'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { Bound } from 'state/mint/v3/actions'\n\nimport { Area } from './Area'\nimport { AxisBottom } from './AxisBottom'\nimport { Brush } from './Brush'\nimport { Line } from './Line'\nimport { ChartEntry, LiquidityChartRangeInputProps } from './types'\nimport Zoom, { ZoomOverlay } from './Zoom'\n\nconst xAccessor = (d: ChartEntry) => d.price0\nconst yAccessor = (d: ChartEntry) => d.activeLiquidity\n\nexport function Chart({\n  id = 'liquidityChartRangeInput',\n  data: { series, current },\n  ticksAtLimit,\n  styles,\n  dimensions: { width, height },\n  margins,\n  interactive = true,\n  brushDomain,\n  brushLabels,\n  onBrushDomainChange,\n  zoomLevels,\n}: LiquidityChartRangeInputProps) {\n  const zoomRef = useRef<SVGRectElement | null>(null)\n\n  const [zoom, setZoom] = useState<ZoomTransform | null>(null)\n\n  const [innerHeight, innerWidth] = useMemo(\n    () => [height - margins.top - margins.bottom, width - margins.left - margins.right],\n    [width, height, margins]\n  )\n\n  const { xScale, yScale } = useMemo(() => {\n    const scales = {\n      xScale: scaleLinear()\n        .domain([current * zoomLevels.initialMin, current * zoomLevels.initialMax] as number[])\n        .range([0, innerWidth]),\n      yScale: scaleLinear()\n        .domain([0, max(series, yAccessor)] as number[])\n        .range([innerHeight, 0]),\n    }\n\n    if (zoom) {\n      const newXscale = zoom.rescaleX(scales.xScale)\n      scales.xScale.domain(newXscale.domain())\n    }\n\n    return scales\n  }, [current, zoomLevels.initialMin, zoomLevels.initialMax, innerWidth, series, innerHeight, zoom])\n\n  useEffect(() => {\n    // reset zoom as necessary\n    setZoom(null)\n  }, [zoomLevels])\n\n  useEffect(() => {\n    if (!brushDomain) {\n      onBrushDomainChange(xScale.domain() as [number, number], undefined)\n    }\n  }, [brushDomain, onBrushDomainChange, xScale])\n\n  return (\n    <>\n      <Zoom\n        svg={zoomRef.current}\n        xScale={xScale}\n        setZoom={setZoom}\n        width={innerWidth}\n        height={\n          // allow zooming inside the x-axis\n          height\n        }\n        resetBrush={() => {\n          onBrushDomainChange(\n            [current * zoomLevels.initialMin, current * zoomLevels.initialMax] as [number, number],\n            'reset'\n          )\n        }}\n        showResetButton={Boolean(ticksAtLimit[Bound.LOWER] || ticksAtLimit[Bound.UPPER])}\n        zoomLevels={zoomLevels}\n      />\n      <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${width} ${height}`} style={{ overflow: 'visible' }}>\n        <defs>\n          <clipPath id={`${id}-chart-clip`}>\n            <rect x=\"0\" y=\"0\" width={innerWidth} height={height} />\n          </clipPath>\n\n          {brushDomain && (\n            // mask to highlight selected area\n            <mask id={`${id}-chart-area-mask`}>\n              <rect\n                fill=\"white\"\n                x={xScale(brushDomain[0])}\n                y=\"0\"\n                width={xScale(brushDomain[1]) - xScale(brushDomain[0])}\n                height={innerHeight}\n              />\n            </mask>\n          )}\n        </defs>\n\n        <g transform={`translate(${margins.left},${margins.top})`}>\n          <g clipPath={`url(#${id}-chart-clip)`}>\n            <Area series={series} xScale={xScale} yScale={yScale} xValue={xAccessor} yValue={yAccessor} />\n\n            {brushDomain && (\n              // duplicate area chart with mask for selected area\n              <g mask={`url(#${id}-chart-area-mask)`}>\n                <Area\n                  series={series}\n                  xScale={xScale}\n                  yScale={yScale}\n                  xValue={xAccessor}\n                  yValue={yAccessor}\n                  fill={styles.area.selection}\n                />\n              </g>\n            )}\n\n            <Line value={current} xScale={xScale} innerHeight={innerHeight} />\n\n            <AxisBottom xScale={xScale} innerHeight={innerHeight} />\n          </g>\n\n          <ZoomOverlay width={innerWidth} height={height} ref={zoomRef} />\n\n          <Brush\n            id={id}\n            xScale={xScale}\n            interactive={interactive}\n            brushLabelValue={brushLabels}\n            brushExtent={brushDomain ?? (xScale.domain() as [number, number])}\n            innerWidth={innerWidth}\n            innerHeight={innerHeight}\n            setBrushExtent={onBrushDomainChange}\n            westHandleColor={styles.brush.handle.west}\n            eastHandleColor={styles.brush.handle.east}\n          />\n        </g>\n      </svg>\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Charts/SparklineChart.tsx",["4023","4024"],"import { SparkLineLoadingBubble } from 'components/Tokens/TokenTable/TokenRow'\nimport { curveCardinal, scaleLinear } from 'd3'\nimport { SparklineMap, TopToken } from 'graphql/data/TopTokens'\nimport { PricePoint } from 'graphql/data/util'\nimport { memo } from 'react'\nimport styled, { useTheme } from 'styled-components/macro'\n\nimport { getPriceBounds } from '../Tokens/TokenDetails/PriceChart'\nimport LineChart from './LineChart'\n\nconst LoadingContainer = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\ninterface SparklineChartProps {\n  width: number\n  height: number\n  tokenData: TopToken\n  pricePercentChange: number | undefined | null\n  sparklineMap: SparklineMap\n}\n\nfunction _SparklineChart({ width, height, tokenData, pricePercentChange, sparklineMap }: SparklineChartProps) {\n  const theme = useTheme()\n  // for sparkline\n  const pricePoints = tokenData?.address ? sparklineMap[tokenData.address] : null\n\n  // Don't display if there's one or less pricepoints\n  if (!pricePoints || pricePoints.length <= 1) {\n    return (\n      <LoadingContainer>\n        <SparkLineLoadingBubble />\n      </LoadingContainer>\n    )\n  }\n\n  const startingPrice = pricePoints[0]\n  const endingPrice = pricePoints[pricePoints.length - 1]\n  const widthScale = scaleLinear()\n    .domain(\n      // the range of possible input values\n      [startingPrice.timestamp, endingPrice.timestamp]\n    )\n    .range(\n      // the range of possible output values that the inputs should be transformed to (see https://www.d3indepth.com/scales/ for details)\n      [0, 110]\n    )\n  const rdScale = scaleLinear().domain(getPriceBounds(pricePoints)).range([30, 0])\n  const curveTension = 0.9\n\n  return (\n    <LineChart\n      data={pricePoints}\n      getX={(p: PricePoint) => widthScale(p.timestamp)}\n      getY={(p: PricePoint) => rdScale(p.value)}\n      curve={curveCardinal.tension(curveTension)}\n      marginTop={5}\n      color={pricePercentChange && pricePercentChange < 0 ? theme.accentFailure : theme.accentSuccess}\n      strokeWidth={1.5}\n      width={width}\n      height={height}\n    />\n  )\n}\n\nexport default memo(_SparklineChart)\n","/workspace/Physica-Interfae/src/graphql/data/TrendingTokens.ts",["4025"],"import gql from 'graphql-tag'\nimport { useMemo } from 'react'\n\nimport { useTrendingTokensQuery } from './__generated__/types-and-hooks'\nimport { chainIdToBackendName, unwrapToken } from './util'\n\ngql`\n  query TrendingTokens($chain: Chain!) {\n    topTokens(pageSize: 4, page: 1, chain: $chain, orderBy: VOLUME) {\n      id\n      decimals\n      name\n      chain\n      standard\n      address\n      symbol\n      market(currency: USD) {\n        id\n        price {\n          id\n          value\n          currency\n        }\n        pricePercentChange(duration: DAY) {\n          id\n          value\n        }\n        volume24H: volume(duration: DAY) {\n          id\n          value\n          currency\n        }\n      }\n      project {\n        id\n        logoUrl\n        safetyLevel\n      }\n    }\n  }\n`\n\nexport default function useTrendingTokens(chainId?: number) {\n  const chain = chainIdToBackendName(chainId)\n  const { data, loading } = useTrendingTokensQuery({ variables: { chain } })\n\n  return useMemo(\n    () => ({ data: data?.topTokens?.map((token) => unwrapToken(chainId ?? 1, token)), loading }),\n    [chainId, data?.topTokens, loading]\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPage.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/SetDurationModal.tsx",["4026"],"import { Plural } from '@lingui/macro'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport ms from 'ms.macro'\nimport { Column, Row } from 'nft/components/Flex'\nimport { NumericInput } from 'nft/components/layout/Input'\nimport { body, caption } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { DropDownOption } from 'nft/types'\nimport { useEffect, useMemo, useReducer, useRef, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { Dropdown } from './Dropdown'\n\nconst ModalWrapper = styled(Column)`\n  gap: 4px;\n  position: relative;\n`\n\nconst InputWrapper = styled(Row)<{ isInvalid: boolean }>`\n  padding: 6px 6px 6px 12px;\n  border: 1px solid;\n  position: relative;\n  height: 44px;\n  border-radius: 8px;\n  border-color: ${({ isInvalid, theme }) => (isInvalid ? theme.accentCritical : theme.backgroundOutline)};\n  width: 160px;\n  justify-content: space-between;\n`\n\nconst DropdownPrompt = styled(Row)`\n  gap: 4px;\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n  border-radius: 8px;\n  padding: 6px 4px 6px 8px;\n  white-space: nowrap;\n  color: ${({ theme }) => theme.textPrimary};\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\n  height: 20px;\n  width: 20px;\n  color: ${({ theme }) => theme.textSecondary};\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `transform ${duration.fast} ${timing.ease}`};\n`\n\nconst DropdownContainer = styled.div`\n  position: absolute;\n  top: 48px;\n  right: 0px;\n  z-index: ${Z_INDEX.dropdown};\n`\n\nconst ErrorMessage = styled(Row)`\n  color: ${({ theme }) => theme.accentCritical};\n  gap: 4px;\n  position: absolute;\n  top: 44px;\n  white-space: nowrap;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 16px;\n  color: ${({ theme }) => theme.accentCritical};\n`\n\nenum Duration {\n  hour = 'hour',\n  day = 'day',\n  week = 'week',\n  month = 'month',\n}\n\nenum ErrorState {\n  valid,\n  empty,\n  overMax,\n}\n\nexport const SetDurationModal = () => {\n  const [duration, setDuration] = useState(Duration.day)\n  const [amount, setAmount] = useState('7')\n  const [errorState, setErrorState] = useState(ErrorState.valid)\n  const setGlobalExpiration = useSellAsset((state) => state.setGlobalExpiration)\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\n  const durationDropdownRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(durationDropdownRef, showDropdown ? toggleShowDropdown : undefined)\n\n  const setCustomExpiration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(event.target.value.length ? event.target.value : '')\n  }\n\n  const durationOptions: DropDownOption[] = useMemo(\n    () => [\n      {\n        displayText: 'hours',\n        isSelected: duration === Duration.hour,\n        onClick: () => {\n          setDuration(Duration.hour)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'days',\n        isSelected: duration === Duration.day,\n        onClick: () => {\n          setDuration(Duration.day)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'weeks',\n        isSelected: duration === Duration.week,\n        onClick: () => {\n          setDuration(Duration.week)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'months',\n        isSelected: duration === Duration.month,\n        onClick: () => {\n          setDuration(Duration.month)\n          toggleShowDropdown()\n        },\n      },\n    ],\n    [duration]\n  )\n\n  let prompt\n  switch (duration) {\n    case Duration.hour:\n      prompt = <Plural value={amount} _1=\"hour\" other=\"hours\" />\n      break\n    case Duration.day:\n      prompt = <Plural value={amount} _1=\"day\" other=\"days\" />\n      break\n    case Duration.week:\n      prompt = <Plural value={amount} _1=\"week\" other=\"weeks\" />\n      break\n    case Duration.month:\n      prompt = <Plural value={amount} _1=\"month\" other=\"months\" />\n      break\n    default:\n      break\n  }\n\n  useEffect(() => {\n    const expiration = convertDurationToExpiration(parseFloat(amount), duration)\n\n    if (expiration * 1000 - Date.now() < ms`60 seconds` || isNaN(expiration)) setErrorState(ErrorState.empty)\n    else if (expiration * 1000 - Date.now() > ms`180 days`) setErrorState(ErrorState.overMax)\n    else setErrorState(ErrorState.valid)\n    setGlobalExpiration(expiration)\n  }, [amount, duration, setGlobalExpiration])\n\n  return (\n    <ModalWrapper ref={durationDropdownRef}>\n      <InputWrapper isInvalid={errorState !== ErrorState.valid}>\n        <NumericInput\n          as=\"input\"\n          type=\"number\"\n          pattern=\"[0-9]\"\n          borderStyle=\"none\"\n          className={body}\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n          value={amount}\n          width=\"40\"\n          marginRight=\"4\"\n          backgroundColor=\"none\"\n          onChange={setCustomExpiration}\n          flexShrink=\"0\"\n        />\n        <DropdownPrompt onClick={toggleShowDropdown}>\n          {prompt} <DropdownChevron isOpen={showDropdown} />\n        </DropdownPrompt>\n        {showDropdown && (\n          <DropdownContainer>\n            <Dropdown dropDownOptions={durationOptions} width={125} />\n          </DropdownContainer>\n        )}\n      </InputWrapper>\n      {errorState !== ErrorState.valid && (\n        <ErrorMessage className={caption}>\n          {' '}\n          <WarningIcon /> {errorState === ErrorState.overMax ? 'Maximum 6 months' : 'Set duration'}\n        </ErrorMessage>\n      )}\n    </ModalWrapper>\n  )\n}\n\nconst convertDurationToExpiration = (amount: number, duration: Duration) => {\n  const durationFactor = () => {\n    switch (duration) {\n      case Duration.hour:\n        return 1\n      case Duration.day:\n        return 24\n      case Duration.week:\n        return 24 * 7\n      default: // month\n        return 24 * 30\n    }\n  }\n  return Math.round((Date.now() + ms`1 hour` * durationFactor() * amount) / 1000)\n}\n","/workspace/Physica-Interfae/src/components/FeatureFlagModal/FeatureFlagModal.tsx",["4027","4028"],"import { BaseVariant, FeatureFlag, featureFlagSettings, useUpdateFlag } from 'featureFlags'\nimport { DetailsV2Variant, useDetailsV2Flag } from 'featureFlags/flags/nftDetails'\nimport { NftGraphqlVariant, useNftGraphqlFlag } from 'featureFlags/flags/nftlGraphql'\nimport { PayWithAnyTokenVariant, usePayWithAnyTokenFlag } from 'featureFlags/flags/payWithAnyToken'\nimport { SwapWidgetVariant, useSwapWidgetFlag } from 'featureFlags/flags/swapWidget'\nimport { TraceJsonRpcVariant, useTraceJsonRpcFlag } from 'featureFlags/flags/traceJsonRpc'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { Children, PropsWithChildren, ReactElement, ReactNode, useCallback, useState } from 'react'\nimport { X } from 'react-feather'\nimport { useModalIsOpen, useToggleFeatureFlags } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport styled from 'styled-components/macro'\n\nconst StyledModal = styled.div`\n  position: fixed;\n  display: flex;\n  left: 50%;\n  top: 50vh;\n  transform: translate(-50%, -50%);\n  width: 400px;\n  height: fit-content;\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 18px;\n  padding: 20px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 12px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  z-index: 100;\n  flex-direction: column;\n  gap: 8px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n`\n\nfunction Modal({ open, children }: { open: boolean; children: ReactNode }) {\n  return open ? <StyledModal>{children}</StyledModal> : null\n}\n\nconst Row = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0px;\n`\n\nconst CloseButton = styled.button`\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nconst ToggleButton = styled.button`\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nconst Header = styled(Row)`\n  font-weight: 600;\n  font-size: 16px;\n  border-bottom: 1px solid ${({ theme }) => theme.backgroundOutline};\n  margin-bottom: 8px;\n`\nconst FlagName = styled.span`\n  font-size: 16px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.textPrimary};\n`\nconst FlagGroupName = styled.span`\n  font-size: 20px;\n  line-height: 24px;\n  color: ${({ theme }) => theme.textPrimary};\n  font-weight: 600;\n`\nconst FlagDescription = styled.span`\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n  display: flex;\n  align-items: center;\n`\nconst FlagVariantSelection = styled.select`\n  border-radius: 12px;\n  padding: 8px;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  font-weight: 600;\n  font-size: 16px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n\n  :hover {\n    background: ${({ theme }) => theme.backgroundOutline};\n  }\n`\n\nconst FlagInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 8px;\n`\n\nconst SaveButton = styled.button`\n  border-radius: 12px;\n  padding: 8px;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  font-weight: 600;\n  font-size: 16px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n\n  :hover {\n    background: ${({ theme }) => theme.backgroundOutline};\n  }\n`\n\nfunction Variant({ option }: { option: string }) {\n  return <option value={option}>{option}</option>\n}\n\ninterface FeatureFlagProps {\n  variant: Record<string, string>\n  featureFlag: FeatureFlag\n  value: string\n  label: string\n}\n\nfunction FeatureFlagGroup({ name, children }: PropsWithChildren<{ name: string }>) {\n  // type FeatureFlagOption = { props: FeatureFlagProps }\n  const togglableOptions = Children.toArray(children)\n    .filter<ReactElement<FeatureFlagProps>>(\n      (child): child is ReactElement<FeatureFlagProps> =>\n        child instanceof Object && 'type' in child && child.type === FeatureFlagOption\n    )\n    .map(({ props }) => props)\n    .filter(({ variant }) => {\n      const values = Object.values(variant)\n      return values.includes(BaseVariant.Control) && values.includes(BaseVariant.Enabled)\n    })\n\n  const setFeatureFlags = useUpdateAtom(featureFlagSettings)\n  const allEnabled = togglableOptions.every(({ value }) => value === BaseVariant.Enabled)\n  const onToggle = useCallback(() => {\n    setFeatureFlags((flags) => ({\n      ...flags,\n      ...togglableOptions.reduce(\n        (flags, { featureFlag }) => ({\n          ...flags,\n          [featureFlag]: allEnabled ? BaseVariant.Control : BaseVariant.Enabled,\n        }),\n        {}\n      ),\n    }))\n  }, [allEnabled, setFeatureFlags, togglableOptions])\n\n  return (\n    <>\n      <Row key={name}>\n        <FlagGroupName>{name}</FlagGroupName>\n        <ToggleButton onClick={onToggle}>{allEnabled ? 'Disable' : 'Enable'} group</ToggleButton>\n      </Row>\n      {children}\n    </>\n  )\n}\n\nfunction FeatureFlagOption({ value, variant, featureFlag, label }: FeatureFlagProps) {\n  const updateFlag = useUpdateFlag()\n  const [count, setCount] = useState(0)\n\n  return (\n    <Row key={featureFlag}>\n      <FlagInfo>\n        <FlagName>{featureFlag}</FlagName>\n        <FlagDescription>{label}</FlagDescription>\n      </FlagInfo>\n      <FlagVariantSelection\n        id={featureFlag}\n        onChange={(e) => {\n          updateFlag(featureFlag, e.target.value)\n          setCount(count + 1)\n        }}\n        value={value}\n      >\n        {Object.values(variant).map((variant) => (\n          <Variant key={variant} option={variant} />\n        ))}\n      </FlagVariantSelection>\n    </Row>\n  )\n}\n\nexport default function FeatureFlagModal() {\n  const open = useModalIsOpen(ApplicationModal.FEATURE_FLAGS)\n  const toggle = useToggleFeatureFlags()\n\n  return (\n    <Modal open={open}>\n      <Header>\n        Feature Flag Settings\n        <CloseButton onClick={toggle}>\n          <X size={24} />\n        </CloseButton>\n      </Header>\n      <FeatureFlagOption\n        variant={PayWithAnyTokenVariant}\n        value={usePayWithAnyTokenFlag()}\n        featureFlag={FeatureFlag.payWithAnyToken}\n        label=\"Pay With Any Token\"\n      />\n      <FeatureFlagOption\n        variant={SwapWidgetVariant}\n        value={useSwapWidgetFlag()}\n        featureFlag={FeatureFlag.swapWidget}\n        label=\"Swap Widget\"\n      />\n      <FeatureFlagOption\n        variant={NftGraphqlVariant}\n        value={useNftGraphqlFlag()}\n        featureFlag={FeatureFlag.nftGraphql}\n        label=\"Migrate NFT read endpoints to GQL\"\n      />\n      <FeatureFlagOption\n        variant={DetailsV2Variant}\n        value={useDetailsV2Flag()}\n        featureFlag={FeatureFlag.detailsV2}\n        label=\"Use the new details page for nfts\"\n      />\n      <FeatureFlagGroup name=\"Debug\">\n        <FeatureFlagOption\n          variant={TraceJsonRpcVariant}\n          value={useTraceJsonRpcFlag()}\n          featureFlag={FeatureFlag.traceJsonRpc}\n          label=\"Enables JSON-RPC tracing\"\n        />\n      </FeatureFlagGroup>\n      <SaveButton onClick={() => window.location.reload()}>Reload</SaveButton>\n    </Modal>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/list/NFTListingsGrid.tsx",["4029"],"import { Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { useSellAsset } from 'nft/hooks'\nimport { DropDownOption, ListingMarket } from 'nft/types'\nimport { useMemo, useReducer, useRef, useState } from 'react'\nimport { ChevronDown } from 'react-feather'\nimport styled, { css } from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\n\nimport { Dropdown } from './Dropdown'\nimport { NFTListRow } from './NFTListRow'\nimport { SetPriceMethod } from './shared'\n\nconst TableHeader = styled.div`\n  display: flex;\n  position: sticky;\n  align-items: center;\n  top: 72px;\n  padding-top: 24px;\n  padding-bottom: 24px;\n  z-index: 3;\n  background-color: ${({ theme }) => theme.backgroundBackdrop};\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    padding-left: 48px;\n  }\n`\n\nconst NFTHeader = styled.div`\n  flex: 2;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 1.5;\n  }\n`\n\nconst PriceHeaders = styled(Row)`\n  flex: 1.5;\n  margin-right: 12px;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 3;\n  }\n`\n\nconst LastPriceHeader = styled.div`\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    display: flex;\n  }\n`\n\nconst FloorPriceHeader = styled.div`\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst DropdownAndHeaderWrapper = styled(Row)`\n  flex: 2;\n  gap: 4px;\n`\n\nconst DropdownPromptContainer = styled(Column)`\n  position: relative;\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n`\n\nconst DropdownPrompt = styled(Row)`\n  gap: 4px;\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 16px;\n  border-radius: 4px;\n  padding: 2px 6px;\n  width: min-content;\n  white-space: nowrap;\n  color: ${({ theme }) => theme.textPrimary};\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\n  height: 16px;\n  width: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `transform ${duration.fast} ${timing.ease}`};\n`\n\nconst DropdownContainer = styled.div`\n  position: absolute;\n  top: 36px;\n  right: 0px;\n`\n\nconst FeeUserReceivesSharedStyles = css`\n  display: none;\n  justify-content: flex-end;\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst FeeHeader = styled.div`\n  flex: 1;\n  ${FeeUserReceivesSharedStyles}\n`\n\nconst UserReceivesHeader = styled.div`\n  flex: 1.5;\n  ${FeeUserReceivesSharedStyles}\n`\n\nconst RowDivider = styled.hr`\n  height: 0px;\n  width: 100%;\n  border-radius: 20px;\n  border-width: 0.5px;\n  border-style: solid;\n  margin: 0;\n  border-color: ${({ theme }) => theme.backgroundInteractive};\n`\n\nexport const NFTListingsGrid = ({ selectedMarkets }: { selectedMarkets: ListingMarket[] }) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const [globalPriceMethod, setGlobalPriceMethod] = useState(SetPriceMethod.CUSTOM)\n  const [globalPrice, setGlobalPrice] = useState<number>()\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(dropdownRef, showDropdown ? toggleShowDropdown : undefined)\n\n  const priceDropdownOptions: DropDownOption[] = useMemo(\n    () => [\n      {\n        displayText: 'Custom',\n        isSelected: globalPriceMethod === SetPriceMethod.CUSTOM,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.CUSTOM)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'Floor price',\n        isSelected: globalPriceMethod === SetPriceMethod.FLOOR_PRICE,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.FLOOR_PRICE)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'Last price',\n        isSelected: globalPriceMethod === SetPriceMethod.LAST_PRICE,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.LAST_PRICE)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'Same price',\n        isSelected: globalPriceMethod === SetPriceMethod.SAME_PRICE,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.SAME_PRICE)\n          toggleShowDropdown()\n        },\n      },\n    ],\n    [globalPriceMethod]\n  )\n\n  let prompt\n  switch (globalPriceMethod) {\n    case SetPriceMethod.CUSTOM:\n      prompt = <Trans>Custom</Trans>\n      break\n    case SetPriceMethod.FLOOR_PRICE:\n      prompt = <Trans>Floor price</Trans>\n      break\n    case SetPriceMethod.LAST_PRICE:\n      prompt = <Trans>Last Price</Trans>\n      break\n    case SetPriceMethod.SAME_PRICE:\n      prompt = <Trans>Same Price</Trans>\n      break\n    default:\n      break\n  }\n\n  return (\n    <Column>\n      <TableHeader>\n        <NFTHeader>\n          <Trans>NFT</Trans>\n        </NFTHeader>\n        <PriceHeaders>\n          <FloorPriceHeader>\n            <Trans>Floor</Trans>\n          </FloorPriceHeader>\n          <LastPriceHeader>\n            <Trans>Last</Trans>\n          </LastPriceHeader>\n\n          <DropdownAndHeaderWrapper ref={dropdownRef}>\n            <Trans>Price</Trans>\n            <DropdownPromptContainer>\n              <DropdownPrompt onClick={toggleShowDropdown}>\n                {prompt} <DropdownChevron isOpen={showDropdown} />\n              </DropdownPrompt>\n              {showDropdown && (\n                <DropdownContainer>\n                  <Dropdown dropDownOptions={priceDropdownOptions} width={200} />\n                </DropdownContainer>\n              )}\n            </DropdownPromptContainer>\n          </DropdownAndHeaderWrapper>\n\n          <FeeHeader>\n            <Trans>Fees</Trans>\n          </FeeHeader>\n          <UserReceivesHeader>\n            <Trans>You receive</Trans>\n          </UserReceivesHeader>\n        </PriceHeaders>\n      </TableHeader>\n      {sellAssets.map((asset) => {\n        return (\n          <>\n            <NFTListRow\n              asset={asset}\n              globalPriceMethod={globalPriceMethod}\n              globalPrice={globalPrice}\n              setGlobalPrice={setGlobalPrice}\n              selectedMarkets={selectedMarkets}\n            />\n            {sellAssets.indexOf(asset) < sellAssets.length - 1 && <RowDivider />}\n          </>\n        )\n      })}\n    </Column>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/list/SelectMarketplacesDropdown.tsx",["4030"],"import { SMALL_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronUpIcon } from 'nft/components/icons'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { buttonTextMedium, caption } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { ListingMarket } from 'nft/types'\nimport { ListingMarkets } from 'nft/utils/listNfts'\nimport { Dispatch, FormEvent, useMemo, useReducer, useRef } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst MarketplaceRowWrapper = styled(Row)`\n  gap: 6px;\n  height: 44px;\n  width: 100%;\n  cursor: pointer;\n  justify-content: space-between;\n  padding: 0px 16px;\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n  }\n  border-radius: 12px;\n`\n\nconst MarketplaceDropdownIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  border-radius: 4px;\n  object-fit: cover;\n`\n\nconst FeeText = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n`\n\ninterface MarketplaceRowProps {\n  market: ListingMarket\n  setSelectedMarkets: Dispatch<ListingMarket[]>\n  selectedMarkets: ListingMarket[]\n}\n\nconst MarketplaceRow = ({ market, setSelectedMarkets, selectedMarkets }: MarketplaceRowProps) => {\n  const isSelected = selectedMarkets.includes(market)\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n\n  const toggleSelected = () => {\n    if (selectedMarkets.length === 1 && isSelected) return\n    isSelected\n      ? setSelectedMarkets(selectedMarkets.filter((selected: ListingMarket) => selected !== market))\n      : setSelectedMarkets([...selectedMarkets, market])\n  }\n\n  const handleCheckbox = (e: FormEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n  return (\n    <MarketplaceRowWrapper onMouseEnter={toggleHovered} onMouseLeave={toggleHovered} onClick={toggleSelected}>\n      <Row gap=\"12\" onClick={toggleSelected}>\n        <MarketplaceDropdownIcon alt={market.name} src={market.icon} />\n        <Column>\n          <ThemedText.BodyPrimary>{market.name}</ThemedText.BodyPrimary>\n          <FeeText className={caption}>{market.fee}% fee</FeeText>\n        </Column>\n      </Row>\n\n      <Checkbox hovered={hovered} checked={isSelected} onClick={handleCheckbox}>\n        <span />\n      </Checkbox>\n    </MarketplaceRowWrapper>\n  )\n}\n\nconst HeaderButtonWrap = styled(Row)`\n  padding: 12px;\n  border-radius: 12px;\n  width: 180px;\n  justify-content: space-between;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  cursor: pointer;\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    width: 220px;\n  }\n`\n\nconst HeaderButtonContentWrapper = styled.div`\n  display: flex;\n`\n\nconst MarketIcon = styled.img<{ index: number; totalSelected: number }>`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n  border: 1px solid;\n  border-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 4px;\n  z-index: ${({ index, totalSelected }) => totalSelected - index};\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -18}px`};\n`\n\nconst Chevron = styled(ChevronUpIcon)<{ isOpen: boolean }>`\n  height: 20px;\n  width: 20px;\n  fill: ${({ theme }) => theme.textPrimary};\n  transition: ${({\n    theme: {\n      transition: { duration },\n    },\n  }) => `${duration.fast} transform`};\n  transform: ${({ isOpen }) => `rotate(${isOpen ? 0 : 180}deg)`};\n`\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`\n\nconst DropdownWrapper = styled(Column)<{ isOpen: boolean }>`\n  padding: 16px 0px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\n  position: absolute;\n  top: 52px;\n  width: 100%;\n  border-radius: 12px;\n  gap: 12px;\n  z-index: ${Z_INDEX.modalBackdrop};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  border: 0.5px solid ${({ theme }) => theme.backgroundOutline};\n`\n\nexport const SelectMarketplacesDropdown = ({\n  setSelectedMarkets,\n  selectedMarkets,\n}: {\n  setSelectedMarkets: Dispatch<ListingMarket[]>\n  selectedMarkets: ListingMarket[]\n}) => {\n  const [isOpen, toggleIsOpen] = useReducer((s) => !s, false)\n  const dropdownDisplayText = useMemo(\n    () => (selectedMarkets.length === 1 ? selectedMarkets[0].name : 'Multiple'),\n    [selectedMarkets]\n  )\n  const ref = useRef<HTMLDivElement>(null)\n  useOnClickOutside(ref, () => isOpen && toggleIsOpen())\n  return (\n    <ModalWrapper ref={ref}>\n      <HeaderButtonWrap className={buttonTextMedium} onClick={toggleIsOpen}>\n        <HeaderButtonContentWrapper>\n          {selectedMarkets.map((market, index) => {\n            return (\n              <MarketIcon\n                key={index}\n                alt={market.name}\n                src={market.icon}\n                totalSelected={selectedMarkets.length}\n                index={index}\n              />\n            )\n          })}\n          {dropdownDisplayText}\n        </HeaderButtonContentWrapper>\n\n        <Chevron isOpen={isOpen} secondaryColor={themeVars.colors.textPrimary} />\n      </HeaderButtonWrap>\n      <DropdownWrapper isOpen={isOpen}>\n        {ListingMarkets.map((market) => {\n          return MarketplaceRow({ market, setSelectedMarkets, selectedMarkets })\n        })}\n      </DropdownWrapper>\n    </ModalWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/ListModal.tsx",["4031","4032","4033","4034"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\nimport { useWeb3React } from '@web3-react/core'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { getTotalEthValue, signListingRow } from 'nft/components/profile/list/utils'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport { ListingStatus } from 'nft/types'\nimport { useCallback, useEffect, useMemo, useReducer } from 'react'\nimport { X } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport { TitleRow } from '../shared'\nimport { ListModalSection, Section } from './ListModalSection'\nimport { SuccessScreen } from './SuccessScreen'\n\nconst ListModalWrapper = styled.div`\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 420px;\n  z-index: ${Z_INDEX.modal};\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  padding: 20px 24px 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: 100%;\n    height: 100%;\n  }\n`\n\nexport const ListModal = ({ overlayClick }: { overlayClick: () => void }) => {\n  const { provider } = useWeb3React()\n  const signer = provider?.getSigner()\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const { setListingStatusAndCallback, setLooksRareNonce, getLooksRareNonce, collectionsRequiringApproval, listings } =\n    useNFTList(\n      ({\n        setListingStatusAndCallback,\n        setLooksRareNonce,\n        getLooksRareNonce,\n        collectionsRequiringApproval,\n        listings,\n      }) => ({\n        setListingStatusAndCallback,\n        setLooksRareNonce,\n        getLooksRareNonce,\n        collectionsRequiringApproval,\n        listings,\n      }),\n      shallow\n    )\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n  const [openSection, toggleOpenSection] = useReducer(\n    (s) => (s === Section.APPROVE ? Section.SIGN : Section.APPROVE),\n    Section.APPROVE\n  )\n  const nativeCurrency = useNativeCurrency()\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\n  const usdcValue = useStablecoinValue(parsedAmount)\n  const usdcAmount = formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)\n\n  const allCollectionsApproved = useMemo(\n    () => collectionsRequiringApproval.every((collection) => collection.status === ListingStatus.APPROVED),\n    [collectionsRequiringApproval]\n  )\n\n  const allListingsApproved = useMemo(\n    () => listings.every((listing) => listing.status === ListingStatus.APPROVED),\n    [listings]\n  )\n\n  const signListings = async () => {\n    if (!signer || !provider) return\n    // sign listings\n    for (const listing of listings) {\n      await signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\n    }\n\n    sendAnalyticsEvent(NFTEventName.NFT_LISTING_COMPLETED, {\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\n      list_quantity: listings.length,\n      usd_value: usdcAmount,\n      ...trace,\n    })\n  }\n\n  // Once all collections have been approved, go to next section and start signing listings\n  useEffect(() => {\n    if (allCollectionsApproved) {\n      signListings()\n      openSection === Section.APPROVE && toggleOpenSection()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allCollectionsApproved])\n\n  const closeModalOnClick = useCallback(() => {\n    allListingsApproved ? window.location.reload() : overlayClick()\n  }, [allListingsApproved, overlayClick])\n\n  // In the case that a user removes all listings via retry logic, close modal\n  useEffect(() => {\n    !listings.length && closeModalOnClick()\n  }, [listings, closeModalOnClick])\n\n  return (\n    <Portal>\n      <Trace modal={InterfaceModalName.NFT_LISTING}>\n        <ListModalWrapper>\n          {allListingsApproved ? (\n            <SuccessScreen overlayClick={closeModalOnClick} />\n          ) : (\n            <>\n              <TitleRow>\n                <ThemedText.HeadlineSmall lineHeight=\"28px\">\n                  <Trans>List NFTs</Trans>\n                </ThemedText.HeadlineSmall>\n                <X size={24} cursor=\"pointer\" onClick={closeModalOnClick} />\n              </TitleRow>\n              <ListModalSection\n                sectionType={Section.APPROVE}\n                active={openSection === Section.APPROVE}\n                content={collectionsRequiringApproval}\n                toggleSection={toggleOpenSection}\n              />\n              <ListModalSection\n                sectionType={Section.SIGN}\n                active={openSection === Section.SIGN}\n                content={listings}\n                toggleSection={toggleOpenSection}\n              />\n            </>\n          )}\n        </ListModalWrapper>\n      </Trace>\n      <Overlay onClick={closeModalOnClick} />\n    </Portal>\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useUSDPrice.ts",["4035"],"import { NetworkStatus } from '@apollo/client'\nimport { Currency, CurrencyAmount, Price, SupportedChainId, TradeType } from '@uniswap/sdk-core'\nimport { nativeOnChain } from 'constants/tokens'\nimport { Chain, useTokenSpotPriceQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { chainIdToBackendName, isGqlSupportedChain, PollingInterval } from 'graphql/data/util'\nimport { RouterPreference } from 'state/routing/slice'\nimport { TradeState } from 'state/routing/types'\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nimport useStablecoinPrice from './useStablecoinPrice'\n\n// ETH amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nconst ETH_AMOUNT_OUT: { [chainId: number]: CurrencyAmount<Currency> } = {\n  [SupportedChainId.MAINNET]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.MAINNET), 100e18),\n  [SupportedChainId.ARBITRUM_ONE]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.ARBITRUM_ONE), 10e18),\n  [SupportedChainId.OPTIMISM]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.OPTIMISM), 10e18),\n  [SupportedChainId.POLYGON]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.POLYGON), 10_000e18),\n  [SupportedChainId.CELO]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.CELO), 10e18),\n}\n\nfunction useETHValue(currencyAmount?: CurrencyAmount<Currency>): {\n  data: CurrencyAmount<Currency> | undefined\n  isLoading: boolean\n} {\n  const chainId = currencyAmount?.currency?.chainId\n  const amountOut = isGqlSupportedChain(chainId) ? ETH_AMOUNT_OUT[chainId] : undefined\n  const { trade, state } = useRoutingAPITrade(\n    TradeType.EXACT_OUTPUT,\n    amountOut,\n    currencyAmount?.currency,\n    RouterPreference.PRICE\n  )\n\n  // Get ETH value of ETH or WETH\n  if (chainId && currencyAmount && currencyAmount.currency.wrapped.equals(nativeOnChain(chainId).wrapped)) {\n    return {\n      data: new Price(currencyAmount.currency, currencyAmount.currency, '1', '1').quote(currencyAmount),\n      isLoading: false,\n    }\n  }\n\n  if (!trade || !currencyAmount?.currency || !isGqlSupportedChain(chainId)) {\n    return { data: undefined, isLoading: state === TradeState.LOADING || state === TradeState.SYNCING }\n  }\n\n  const { numerator, denominator } = trade.routes[0].midPrice\n  const price = new Price(currencyAmount?.currency, nativeOnChain(chainId), denominator, numerator)\n  return { data: price.quote(currencyAmount), isLoading: false }\n}\n\nexport function useUSDPrice(currencyAmount?: CurrencyAmount<Currency>): {\n  data: number | undefined\n  isLoading: boolean\n} {\n  const chain = currencyAmount?.currency.chainId ? chainIdToBackendName(currencyAmount?.currency.chainId) : undefined\n  const currency = currencyAmount?.currency\n  const { data: ethValue, isLoading: isEthValueLoading } = useETHValue(currencyAmount)\n\n  const { data, networkStatus } = useTokenSpotPriceQuery({\n    variables: { chain: chain ?? Chain.Ethereum, address: getNativeTokenDBAddress(chain ?? Chain.Ethereum) },\n    skip: !chain || !isGqlSupportedChain(currency?.chainId),\n    pollInterval: PollingInterval.Normal,\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-first',\n  })\n\n  // Use USDC price for chains not supported by backend yet\n  const stablecoinPrice = useStablecoinPrice(!isGqlSupportedChain(currency?.chainId) ? currency : undefined)\n  if (!isGqlSupportedChain(currency?.chainId) && currencyAmount && stablecoinPrice) {\n    return { data: parseFloat(stablecoinPrice.quote(currencyAmount).toSignificant()), isLoading: false }\n  }\n\n  const isFirstLoad = networkStatus === NetworkStatus.loading\n\n  // Otherwise, get the price of the token in ETH, and then multiple by the price of ETH\n  const ethUSDPrice = data?.token?.project?.markets?.[0]?.price?.value\n  if (!ethUSDPrice || !ethValue) return { data: undefined, isLoading: isEthValueLoading || isFirstLoad }\n\n  return { data: parseFloat(ethValue.toExact()) * ethUSDPrice, isLoading: false }\n}\n","/workspace/Physica-Interfae/src/graphql/thegraph/apollo.ts",[],"/workspace/Physica-Interfae/src/nft/components/profile/view/ViewMyNftsAsset.tsx",["4036","4037"],"import { Trans } from '@lingui/macro'\nimport { useTrace } from '@uniswap/analytics'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { NftCard, NftCardDisplayProps } from 'nft/components/card'\nimport { detailsHref } from 'nft/components/card/utils'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useBag, useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useMemo } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\ninterface ViewMyNftsAssetProps {\n  asset: WalletAsset\n  mediaShouldBePlaying: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n  hideDetails: boolean\n}\n\nexport const ViewMyNftsAsset = ({\n  asset,\n  mediaShouldBePlaying,\n  setCurrentTokenPlayingMedia,\n  hideDetails,\n}: ViewMyNftsAssetProps) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const selectSellAsset = useSellAsset((state) => state.selectSellAsset)\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\n  const cartExpanded = useBag((state) => state.bagExpanded)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const isMobile = useIsMobile()\n  const navigate = useNavigate()\n\n  const isSelected = useMemo(() => {\n    return sellAssets.some(\n      (item) => item.tokenId === asset.tokenId && item.asset_contract.address === asset.asset_contract.address\n    )\n  }, [asset, sellAssets])\n\n  const trace = useTrace()\n  const toggleSelect = () => handleSelect(isSelected)\n\n  const handleSelect = (removeAsset: boolean) => {\n    if (removeAsset) {\n      removeSellAsset(asset)\n    } else {\n      selectSellAsset(asset)\n      sendAnalyticsEvent(NFTEventName.NFT_SELL_ITEM_ADDED, {\n        collection_address: asset.asset_contract.address,\n        token_id: asset.tokenId,\n        ...trace,\n      })\n    }\n    if (\n      !cartExpanded &&\n      !sellAssets.find(\n        (x) => x.tokenId === asset.tokenId && x.asset_contract.address === asset.asset_contract.address\n      ) &&\n      !isMobile\n    )\n      toggleCart()\n  }\n\n  const isDisabled = asset.susFlag\n\n  const display: NftCardDisplayProps = useMemo(() => {\n    return {\n      primaryInfo: !!asset.asset_contract.name && asset.asset_contract.name,\n      primaryInfoIcon: asset.collectionIsVerified && <VerifiedIcon height=\"16px\" width=\"16px\" />,\n      secondaryInfo: asset.name || asset.tokenId ? asset.name ?? `#${asset.tokenId}` : null,\n      selectedInfo: <Trans>Remove from bag</Trans>,\n      notSelectedInfo: <Trans>List for sale</Trans>,\n      disabledInfo: <Trans>Unavailable for listing</Trans>,\n    }\n  }, [asset.asset_contract.name, asset.collectionIsVerified, asset.name, asset.tokenId])\n\n  return (\n    <NftCard\n      asset={asset}\n      display={display}\n      isSelected={isSelected}\n      isDisabled={Boolean(isDisabled)}\n      selectAsset={() => handleSelect(false)}\n      unselectAsset={() => handleSelect(true)}\n      onButtonClick={toggleSelect}\n      onCardClick={() => {\n        if (!hideDetails) navigate(detailsHref(asset))\n      }}\n      mediaShouldBePlaying={mediaShouldBePlaying}\n      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n      testId=\"nft-profile-asset\"\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useSwapCallback.tsx",["4038","4039"],"import { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { PermitSignature } from 'hooks/usePermitAllowance'\nimport { useMemo } from 'react'\n\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { TransactionType } from '../state/transactions/types'\nimport { currencyId } from '../utils/currencyId'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport { useUniversalRouterSwapCallback } from './useUniversalRouter'\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  fiatValues: { amountIn: number | undefined; amountOut: number | undefined }, // usd values for amount in and out, logged for analytics\n  allowedSlippage: Percent, // in bips\n  permitSignature: PermitSignature | undefined\n): { callback: null | (() => Promise<string>) } {\n  const deadline = useTransactionDeadline()\n\n  const addTransaction = useTransactionAdder()\n\n  const universalRouterSwapCallback = useUniversalRouterSwapCallback(trade, fiatValues, {\n    slippageTolerance: allowedSlippage,\n    deadline,\n    permit: permitSignature,\n  })\n  const swapCallback = universalRouterSwapCallback\n\n  const callback = useMemo(() => {\n    if (!trade || !swapCallback) return null\n    return () =>\n      swapCallback().then((response) => {\n        addTransaction(\n          response,\n          trade.tradeType === TradeType.EXACT_INPUT\n            ? {\n                type: TransactionType.SWAP,\n                tradeType: TradeType.EXACT_INPUT,\n                inputCurrencyId: currencyId(trade.inputAmount.currency),\n                inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n                expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n                outputCurrencyId: currencyId(trade.outputAmount.currency),\n                minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(allowedSlippage).quotient.toString(),\n              }\n            : {\n                type: TransactionType.SWAP,\n                tradeType: TradeType.EXACT_OUTPUT,\n                inputCurrencyId: currencyId(trade.inputAmount.currency),\n                maximumInputCurrencyAmountRaw: trade.maximumAmountIn(allowedSlippage).quotient.toString(),\n                outputCurrencyId: currencyId(trade.outputAmount.currency),\n                outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n                expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n              }\n        )\n        return response.hash\n      })\n  }, [addTransaction, allowedSlippage, swapCallback, trade])\n\n  return {\n    callback,\n  }\n}\n","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyModal.tsx",[],"/workspace/Physica-Interfae/src/components/swap/SwapDetailsDropdown.tsx",[],"/workspace/Physica-Interfae/src/hooks/useV3PositionFees.ts",["4040","4041"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport { useEffect, useState } from 'react'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(\n  pool?: Pool,\n  tokenId?: BigNumber,\n  asWETH = false\n): [CurrencyAmount<Currency>, CurrencyAmount<Currency>] | [undefined, undefined] {\n  const positionManager = useV3NFTPositionManagerContract(false)\n  const owner: string | undefined = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId])\n    .result?.[0]\n\n  const tokenIdHexString = tokenId?.toHexString()\n  const latestBlockNumber = useBlockNumber()\n\n  // we can't use multicall for this because we need to simulate the call from a specific address\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState<[BigNumber, BigNumber] | undefined>()\n  useEffect(() => {\n    if (positionManager && tokenIdHexString && owner) {\n      positionManager.callStatic\n        .collect(\n          {\n            tokenId: tokenIdHexString,\n            recipient: owner, // some tokens might fail if transferred to address(0)\n            amount0Max: MAX_UINT128,\n            amount1Max: MAX_UINT128,\n          },\n          { from: owner } // need to simulate the call as the owner\n        )\n        .then((results) => {\n          setAmounts([results.amount0, results.amount1])\n        })\n    }\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber])\n\n  if (pool && amounts) {\n    return [\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token0 : unwrappedToken(pool.token0), amounts[0].toString()),\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token1 : unwrappedToken(pool.token1), amounts[1].toString()),\n    ]\n  } else {\n    return [undefined, undefined]\n  }\n}\n","/workspace/Physica-Interfae/src/components/swap/PriceImpactWarning.tsx",[],"/workspace/Physica-Interfae/src/components/PositionListItem/index.tsx",[],"/workspace/Physica-Interfae/src/hooks/useIsTickAtLimit.ts",["4042","4043"],"import { FeeAmount, nearestUsableTick, TICK_SPACINGS, TickMath } from '@uniswap/v3-sdk'\nimport { useMemo } from 'react'\nimport { Bound } from 'state/mint/v3/actions'\n\nexport default function useIsTickAtLimit(\n  feeAmount: FeeAmount | undefined,\n  tickLower: number | undefined,\n  tickUpper: number | undefined\n) {\n  return useMemo(\n    () => ({\n      [Bound.LOWER]:\n        feeAmount && tickLower\n          ? tickLower === nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[feeAmount as FeeAmount])\n          : undefined,\n      [Bound.UPPER]:\n        feeAmount && tickUpper\n          ? tickUpper === nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[feeAmount as FeeAmount])\n          : undefined,\n    }),\n    [feeAmount, tickLower, tickUpper]\n  )\n}\n","/workspace/Physica-Interfae/src/components/swap/SwapModalHeader.tsx",["4044","4045"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { SwapEventName, SwapPriceUpdateUserResponse } from '@uniswap/analytics-events'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useUSDPrice } from 'hooks/useUSDPrice'\nimport { getPriceUpdateBasisPoints } from 'lib/utils/analytics'\nimport { useEffect, useState } from 'react'\nimport { AlertTriangle, ArrowDown } from 'react-feather'\nimport { Text } from 'rebass'\nimport { InterfaceTrade } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\n\nimport { ThemedText } from '../../theme'\nimport { isAddress, shortenAddress } from '../../utils'\nimport { computeFiatValuePriceImpact } from '../../utils/computeFiatValuePriceImpact'\nimport { ButtonPrimary } from '../Button'\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Column'\nimport { FiatValue } from '../CurrencyInputPanel/FiatValue'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { RowBetween, RowFixed } from '../Row'\nimport TradePrice from '../swap/TradePrice'\nimport { AdvancedSwapDetails } from './AdvancedSwapDetails'\nimport { SwapShowAcceptChanges, TruncatedText } from './styleds'\n\nconst ArrowWrapper = styled.div`\n  padding: 4px;\n  border-radius: 12px;\n  height: 40px;\n  width: 40px;\n  position: relative;\n  margin-top: -18px;\n  margin-bottom: -18px;\n  left: calc(50% - 16px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 4px solid;\n  border-color: ${({ theme }) => theme.backgroundModule};\n  z-index: 2;\n`\n\nconst formatAnalyticsEventProperties = (\n  trade: InterfaceTrade<Currency, Currency, TradeType>,\n  priceUpdate: number | undefined,\n  response: SwapPriceUpdateUserResponse\n) => ({\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n  response,\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  price_update_basis_points: priceUpdate,\n})\n\nexport default function SwapModalHeader({\n  trade,\n  shouldLogModalCloseEvent,\n  setShouldLogModalCloseEvent,\n  allowedSlippage,\n  recipient,\n  showAcceptChanges,\n  onAcceptChanges,\n}: {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  shouldLogModalCloseEvent: boolean\n  setShouldLogModalCloseEvent: (shouldLog: boolean) => void\n  allowedSlippage: Percent\n  recipient: string | null\n  showAcceptChanges: boolean\n  onAcceptChanges: () => void\n}) {\n  const theme = useTheme()\n\n  const [lastExecutionPrice, setLastExecutionPrice] = useState(trade.executionPrice)\n  const [priceUpdate, setPriceUpdate] = useState<number | undefined>()\n\n  const fiatValueInput = useUSDPrice(trade.inputAmount)\n  const fiatValueOutput = useUSDPrice(trade.outputAmount)\n\n  useEffect(() => {\n    if (!trade.executionPrice.equalTo(lastExecutionPrice)) {\n      setPriceUpdate(getPriceUpdateBasisPoints(lastExecutionPrice, trade.executionPrice))\n      setLastExecutionPrice(trade.executionPrice)\n    }\n  }, [lastExecutionPrice, setLastExecutionPrice, trade.executionPrice])\n\n  useEffect(() => {\n    if (shouldLogModalCloseEvent && showAcceptChanges) {\n      sendAnalyticsEvent(\n        SwapEventName.SWAP_PRICE_UPDATE_ACKNOWLEDGED,\n        formatAnalyticsEventProperties(trade, priceUpdate, SwapPriceUpdateUserResponse.REJECTED)\n      )\n    }\n    setShouldLogModalCloseEvent(false)\n  }, [shouldLogModalCloseEvent, showAcceptChanges, setShouldLogModalCloseEvent, trade, priceUpdate])\n\n  return (\n    <AutoColumn gap=\"4px\" style={{ marginTop: '1rem' }}>\n      <LightCard padding=\"0.75rem 1rem\">\n        <AutoColumn gap=\"sm\">\n          <RowBetween align=\"center\">\n            <RowFixed gap=\"0px\">\n              <TruncatedText\n                fontSize={24}\n                fontWeight={500}\n                color={showAcceptChanges && trade.tradeType === TradeType.EXACT_OUTPUT ? theme.accentAction : ''}\n                data-testid=\"input-amount\"\n              >\n                {trade.inputAmount.toSignificant(6)}\n              </TruncatedText>\n            </RowFixed>\n            <RowFixed gap=\"0px\">\n              <CurrencyLogo currency={trade.inputAmount.currency} size=\"20px\" style={{ marginRight: '12px' }} />\n              <Text fontSize={20} fontWeight={500} data-testid=\"input-symbol\">\n                {trade.inputAmount.currency.symbol}\n              </Text>\n            </RowFixed>\n          </RowBetween>\n          <RowBetween>\n            <FiatValue fiatValue={fiatValueInput} />\n          </RowBetween>\n        </AutoColumn>\n      </LightCard>\n      <ArrowWrapper>\n        <ArrowDown size=\"16\" color={theme.textPrimary} />\n      </ArrowWrapper>\n      <LightCard padding=\"0.75rem 1rem\" style={{ marginBottom: '0.25rem' }}>\n        <AutoColumn gap=\"sm\">\n          <RowBetween align=\"flex-end\">\n            <RowFixed gap=\"0px\">\n              <TruncatedText fontSize={24} fontWeight={500} data-testid=\"output-amount\">\n                {trade.outputAmount.toSignificant(6)}\n              </TruncatedText>\n            </RowFixed>\n            <RowFixed gap=\"0px\">\n              <CurrencyLogo currency={trade.outputAmount.currency} size=\"20px\" style={{ marginRight: '12px' }} />\n              <Text fontSize={20} fontWeight={500} data-testid=\"output-symbol\">\n                {trade.outputAmount.currency.symbol}\n              </Text>\n            </RowFixed>\n          </RowBetween>\n          <RowBetween>\n            <ThemedText.DeprecatedBody fontSize={14} color={theme.textTertiary}>\n              <FiatValue\n                fiatValue={fiatValueOutput}\n                priceImpact={computeFiatValuePriceImpact(fiatValueInput.data, fiatValueOutput.data)}\n              />\n            </ThemedText.DeprecatedBody>\n          </RowBetween>\n        </AutoColumn>\n      </LightCard>\n      <RowBetween style={{ marginTop: '0.25rem', padding: '0 1rem' }}>\n        <TradePrice price={trade.executionPrice} />\n      </RowBetween>\n      <LightCard style={{ padding: '.75rem', marginTop: '0.5rem' }}>\n        <AdvancedSwapDetails trade={trade} allowedSlippage={allowedSlippage} />\n      </LightCard>\n      {showAcceptChanges ? (\n        <SwapShowAcceptChanges justify=\"flex-start\" gap=\"0px\" data-testid=\"show-accept-changes\">\n          <RowBetween>\n            <RowFixed>\n              <AlertTriangle size={20} style={{ marginRight: '8px', minWidth: 24 }} />\n              <ThemedText.DeprecatedMain color={theme.accentAction}>\n                <Trans>Price Updated</Trans>\n              </ThemedText.DeprecatedMain>\n            </RowFixed>\n            <ButtonPrimary\n              style={{ padding: '.5rem', width: 'fit-content', fontSize: '0.825rem', borderRadius: '12px' }}\n              onClick={onAcceptChanges}\n            >\n              <Trans>Accept</Trans>\n            </ButtonPrimary>\n          </RowBetween>\n        </SwapShowAcceptChanges>\n      ) : null}\n\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '.75rem 1rem' }}>\n        {trade.tradeType === TradeType.EXACT_INPUT ? (\n          <ThemedText.DeprecatedItalic fontWeight={400} textAlign=\"left\" style={{ width: '100%' }}>\n            <Trans>\n              Output is estimated. You will receive at least{' '}\n              <b>\n                {trade.minimumAmountOut(allowedSlippage).toSignificant(6)} {trade.outputAmount.currency.symbol}\n              </b>{' '}\n              or the transaction will revert.\n            </Trans>\n          </ThemedText.DeprecatedItalic>\n        ) : (\n          <ThemedText.DeprecatedItalic fontWeight={400} textAlign=\"left\" style={{ width: '100%' }}>\n            <Trans>\n              Input is estimated. You will sell at most{' '}\n              <b>\n                {trade.maximumAmountIn(allowedSlippage).toSignificant(6)} {trade.inputAmount.currency.symbol}\n              </b>{' '}\n              or the transaction will revert.\n            </Trans>\n          </ThemedText.DeprecatedItalic>\n        )}\n      </AutoColumn>\n      {recipient !== null ? (\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }} data-testid=\"recipient-info\">\n          <ThemedText.DeprecatedMain>\n            <Trans>\n              Output will be sent to{' '}\n              <b title={recipient}>{isAddress(recipient) ? shortenAddress(recipient) : recipient}</b>\n            </Trans>\n          </ThemedText.DeprecatedMain>\n        </AutoColumn>\n      ) : null}\n    </AutoColumn>\n  )\n}\n","/workspace/Physica-Interfae/src/components/swap/SwapModalFooter.tsx",["4046","4047","4048","4049"],"import { Trans } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, SwapEventName } from '@uniswap/analytics-events'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport {\n  formatPercentInBasisPointsNumber,\n  formatPercentNumber,\n  formatToDecimal,\n  getDurationFromDateMilliseconds,\n  getDurationUntilTimestampSeconds,\n  getTokenAddress,\n} from 'lib/utils/analytics'\nimport { ReactNode } from 'react'\nimport { Text } from 'rebass'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { useClientSideRouter, useUserSlippageTolerance } from 'state/user/hooks'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\nimport { ButtonError } from '../Button'\nimport { AutoRow } from '../Row'\nimport { SwapCallbackError } from './styleds'\nimport { getTokenPath, RoutingDiagramEntry } from './SwapRoute'\n\ninterface AnalyticsEventProps {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  hash: string | undefined\n  allowedSlippage: Percent\n  transactionDeadlineSecondsSinceEpoch: number | undefined\n  isAutoSlippage: boolean\n  isAutoRouterApi: boolean\n  swapQuoteReceivedDate: Date | undefined\n  routes: RoutingDiagramEntry[]\n  fiatValueInput?: number\n  fiatValueOutput?: number\n}\n\nconst formatRoutesEventProperties = (routes: RoutingDiagramEntry[]) => {\n  const routesEventProperties: Record<string, any[]> = {\n    routes_percentages: [],\n    routes_protocols: [],\n  }\n\n  routes.forEach((route, index) => {\n    routesEventProperties['routes_percentages'].push(formatPercentNumber(route.percent))\n    routesEventProperties['routes_protocols'].push(route.protocol)\n    routesEventProperties[`route_${index}_input_currency_symbols`] = route.path.map(\n      (pathStep) => pathStep[0].symbol ?? ''\n    )\n    routesEventProperties[`route_${index}_output_currency_symbols`] = route.path.map(\n      (pathStep) => pathStep[1].symbol ?? ''\n    )\n    routesEventProperties[`route_${index}_input_currency_addresses`] = route.path.map((pathStep) =>\n      getTokenAddress(pathStep[0])\n    )\n    routesEventProperties[`route_${index}_output_currency_addresses`] = route.path.map((pathStep) =>\n      getTokenAddress(pathStep[1])\n    )\n    routesEventProperties[`route_${index}_fee_amounts_hundredths_of_bps`] = route.path.map((pathStep) => pathStep[2])\n  })\n\n  return routesEventProperties\n}\n\nconst formatAnalyticsEventProperties = ({\n  trade,\n  hash,\n  allowedSlippage,\n  transactionDeadlineSecondsSinceEpoch,\n  isAutoSlippage,\n  isAutoRouterApi,\n  swapQuoteReceivedDate,\n  routes,\n  fiatValueInput,\n  fiatValueOutput,\n}: AnalyticsEventProps) => ({\n  estimated_network_fee_usd: trade.gasUseEstimateUSD ? formatToDecimal(trade.gasUseEstimateUSD, 2) : undefined,\n  transaction_hash: hash,\n  transaction_deadline_seconds: getDurationUntilTimestampSeconds(transactionDeadlineSecondsSinceEpoch),\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  token_in_amount_usd: fiatValueInput,\n  token_out_amount_usd: fiatValueOutput,\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n  is_auto_router_api: isAutoRouterApi,\n  is_auto_slippage: isAutoSlippage,\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n  duration_from_first_quote_to_swap_submission_milliseconds: swapQuoteReceivedDate\n    ? getDurationFromDateMilliseconds(swapQuoteReceivedDate)\n    : undefined,\n  swap_quote_block_number: trade.blockNumber,\n  ...formatRoutesEventProperties(routes),\n})\n\nexport default function SwapModalFooter({\n  trade,\n  allowedSlippage,\n  hash,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n  swapQuoteReceivedDate,\n  fiatValueInput,\n  fiatValueOutput,\n}: {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  hash: string | undefined\n  allowedSlippage: Percent\n  onConfirm: () => void\n  swapErrorMessage: ReactNode | undefined\n  disabledConfirm: boolean\n  swapQuoteReceivedDate: Date | undefined\n  fiatValueInput: { data?: number; isLoading: boolean }\n  fiatValueOutput: { data?: number; isLoading: boolean }\n}) {\n  const transactionDeadlineSecondsSinceEpoch = useTransactionDeadline()?.toNumber() // in seconds since epoch\n  const isAutoSlippage = useUserSlippageTolerance()[0] === 'auto'\n  const [clientSideRouter] = useClientSideRouter()\n  const routes = getTokenPath(trade)\n\n  return (\n    <>\n      <AutoRow>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          element={InterfaceElementName.CONFIRM_SWAP_BUTTON}\n          name={SwapEventName.SWAP_SUBMITTED_BUTTON_CLICKED}\n          properties={formatAnalyticsEventProperties({\n            trade,\n            hash,\n            allowedSlippage,\n            transactionDeadlineSecondsSinceEpoch,\n            isAutoSlippage,\n            isAutoRouterApi: !clientSideRouter,\n            swapQuoteReceivedDate,\n            routes,\n            fiatValueInput: fiatValueInput.data,\n            fiatValueOutput: fiatValueOutput.data,\n          })}\n        >\n          <ButtonError\n            onClick={onConfirm}\n            disabled={disabledConfirm}\n            style={{ margin: '10px 0 0 0' }}\n            id={InterfaceElementName.CONFIRM_SWAP_BUTTON}\n          >\n            <Text fontSize={20} fontWeight={500}>\n              <Trans>Confirm Swap</Trans>\n            </Text>\n          </ButtonError>\n        </TraceEvent>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/components/NetworkAlert/NetworkAlert.tsx",[],"/workspace/Physica-Interfae/src/state/connection/reducer.ts",["4050"],"import { createSlice } from '@reduxjs/toolkit'\nimport { ConnectionType } from 'connection'\n\ninterface ConnectionState {\n  errorByConnectionType: Record<ConnectionType, string | undefined>\n}\n\nconst initialState: ConnectionState = {\n  errorByConnectionType: {\n    [ConnectionType.UNIWALLET]: undefined,\n    [ConnectionType.INJECTED]: undefined,\n    [ConnectionType.WALLET_CONNECT]: undefined,\n    [ConnectionType.COINBASE_WALLET]: undefined,\n    [ConnectionType.NETWORK]: undefined,\n    [ConnectionType.GNOSIS_SAFE]: undefined,\n  },\n}\n\nconst connectionSlice = createSlice({\n  name: 'connection',\n  initialState,\n  reducers: {\n    updateConnectionError(\n      state,\n      { payload: { connectionType, error } }: { payload: { connectionType: ConnectionType; error: string | undefined } }\n    ) {\n      state.errorByConnectionType[connectionType] = error\n    },\n  },\n})\n\nexport const { updateConnectionError } = connectionSlice.actions\nexport default connectionSlice.reducer\n","/workspace/Physica-Interfae/src/components/TextInput/index.tsx",["4051","4052","4053"],"import React, { ChangeEvent, memo, useCallback, useRef } from 'react'\nimport styled from 'styled-components/macro'\n\nconst Input = styled.input<{ error?: boolean; fontSize?: string }>`\n  font-size: ${({ fontSize }) => fontSize || '1.25rem'};\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  color: ${({ error, theme }) => (error ? theme.accentFailure : theme.textPrimary)};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.deprecated_text4};\n  }\n`\n\nconst TextAreaInput = styled.textarea<{ error?: boolean; fontSize?: string }>`\n  font-size: ${({ fontSize }) => fontSize || '1.25rem'};\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  resize: none;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  color: ${({ error, theme }) => (error ? theme.accentFailure : theme.textPrimary)};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  line-height: 1.2;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.deprecated_text4};\n  }\n`\n\nexport const TextInput = ({\n  className,\n  value,\n  onUserInput,\n  placeholder,\n  fontSize,\n}: {\n  className?: string\n  value: string\n  onUserInput: (value: string) => void\n  placeholder: string\n  fontSize: string\n}) => {\n  const handleInput = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      onUserInput(event.target.value)\n    },\n    [onUserInput]\n  )\n\n  return (\n    <div className={className}>\n      <Input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoCapitalize=\"off\"\n        spellCheck=\"false\"\n        placeholder={placeholder || ''}\n        onChange={handleInput}\n        value={value}\n        fontSize={fontSize}\n      />\n    </div>\n  )\n}\n\nexport const ResizingTextArea = memo(\n  ({\n    className,\n    value,\n    onUserInput,\n    placeholder,\n    fontSize,\n  }: {\n    className?: string\n    value: string\n    onUserInput: (value: string) => void\n    placeholder: string\n    fontSize: string\n  }) => {\n    const inputRef = useRef<HTMLTextAreaElement>(document.createElement('textarea'))\n\n    const handleInput = useCallback(\n      (event: ChangeEvent<HTMLTextAreaElement>) => {\n        inputRef.current.style.height = 'auto'\n        inputRef.current.style.height = inputRef.current.scrollHeight + 'px'\n        onUserInput(event.target.value)\n      },\n      [onUserInput]\n    )\n\n    return (\n      <TextAreaInput\n        style={{ height: 'auto', minHeight: '500px' }}\n        className={className}\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoCapitalize=\"off\"\n        spellCheck=\"false\"\n        placeholder={placeholder || ''}\n        onChange={handleInput}\n        value={value}\n        fontSize={fontSize}\n        ref={inputRef}\n      />\n    )\n  }\n)\n\nResizingTextArea.displayName = 'ResizingTextArea'\n","/workspace/Physica-Interfae/src/components/TokenSafety/TokenSafetyMessage.tsx",[],"/workspace/Physica-Interfae/src/components/Polling/ChainConnectivityWarning.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/ShareButton.tsx",["4054","4055"],"import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { useRef } from 'react'\nimport { Link, Twitter } from 'react-feather'\nimport { useModalIsOpen, useToggleModal } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ClickableStyle, CopyHelperRefType } from 'theme'\nimport { colors } from 'theme/colors'\nimport { opacify } from 'theme/utils'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { ReactComponent as ShareIcon } from '../../../assets/svg/share.svg'\nimport { CopyHelper } from '../../../theme'\n\nconst TWITTER_WIDTH = 560\nconst TWITTER_HEIGHT = 480\n\nconst ShareButtonDisplay = styled.div`\n  display: flex;\n  position: relative;\n`\n\nconst Share = styled(ShareIcon)<{ open: boolean }>`\n  stroke: ${({ theme }) => theme.textSecondary};\n  height: 24px;\n  width: 24px;\n  ${ClickableStyle}\n  ${({ open, theme }) => open && `opacity: ${theme.opacity.click} !important`};\n`\n\nconst ShareActions = styled.div`\n  position: absolute;\n  z-index: ${Z_INDEX.dropdown};\n  width: 240px;\n  top: 36px;\n  right: 0px;\n  justify-content: center;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  padding: 8px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 0.5px solid ${({ theme }) => theme.backgroundOutline};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  border-radius: 12px;\n`\nconst ShareAction = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 8px;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 400;\n  gap: 12px;\n  height: 40px;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  :hover {\n    background-color: ${({ theme }) => opacify(10, theme.darkMode ? colors.gray200 : colors.gray300)};\n  }\n`\n\nexport default function ShareButton({ currency }: { currency: Currency }) {\n  const theme = useTheme()\n  const node = useRef<HTMLDivElement | null>(null)\n  const open = useModalIsOpen(ApplicationModal.SHARE)\n  const toggleShare = useToggleModal(ApplicationModal.SHARE)\n  useOnClickOutside(node, open ? toggleShare : undefined)\n  const positionX = (window.screen.width - TWITTER_WIDTH) / 2\n  const positionY = (window.screen.height - TWITTER_HEIGHT) / 2\n  const address = currency.isNative ? NATIVE_CHAIN_ID : currency.wrapped.address\n\n  const shareTweet = () => {\n    toggleShare()\n    window.open(\n      `https://twitter.com/intent/tweet?text=Check%20out%20${currency.name}%20(${\n        currency.symbol\n      })%20https://app.uniswap.org/%23/tokens/${chainIdToBackendName(\n        currency.chainId\n      ).toLowerCase()}/${address}%20via%20@uniswap`,\n      'newwindow',\n      `left=${positionX}, top=${positionY}, width=${TWITTER_WIDTH}, height=${TWITTER_HEIGHT}`\n    )\n  }\n\n  const copyHelperRef = useRef<CopyHelperRefType>(null)\n\n  return (\n    <ShareButtonDisplay ref={node}>\n      <Share onClick={toggleShare} aria-label=\"ShareOptions\" open={open} />\n      {open && (\n        <ShareActions>\n          <ShareAction onClick={() => copyHelperRef.current?.forceCopy()}>\n            <CopyHelper\n              InitialIcon={Link}\n              color={theme.textPrimary}\n              iconPosition=\"left\"\n              gap={12}\n              toCopy={window.location.href}\n              ref={copyHelperRef}\n            >\n              <Trans>Copy Link</Trans>\n            </CopyHelper>\n          </ShareAction>\n\n          <ShareAction onClick={shareTweet}>\n            <Twitter color={theme.textPrimary} size={20} strokeWidth={1.5} />\n            <Trans>Share to Twitter</Trans>\n          </ShareAction>\n        </ShareActions>\n      )}\n    </ShareButtonDisplay>\n  )\n}\n","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Zoom.tsx",["4056"],"import { ButtonGray } from 'components/Button'\nimport { ScaleLinear, select, zoom, ZoomBehavior, zoomIdentity, ZoomTransform } from 'd3'\nimport React, { useEffect, useMemo, useRef } from 'react'\nimport { RefreshCcw, ZoomIn, ZoomOut } from 'react-feather'\nimport styled from 'styled-components/macro'\n\nimport { ZoomLevels } from './types'\n\nconst Wrapper = styled.div<{ count: number }>`\n  display: grid;\n  grid-template-columns: repeat(${({ count }) => count.toString()}, 1fr);\n  grid-gap: 6px;\n\n  position: absolute;\n  top: -75px;\n  right: 0;\n`\n\nconst Button = styled(ButtonGray)`\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n    color: ${({ theme }) => theme.textPrimary};\n  }\n\n  width: 32px;\n  height: 32px;\n  padding: 4px;\n`\n\nexport const ZoomOverlay = styled.rect`\n  fill: transparent;\n  cursor: grab;\n\n  &:active {\n    cursor: grabbing;\n  }\n`\n\nexport default function Zoom({\n  svg,\n  xScale,\n  setZoom,\n  width,\n  height,\n  resetBrush,\n  showResetButton,\n  zoomLevels,\n}: {\n  svg: SVGElement | null\n  xScale: ScaleLinear<number, number>\n  setZoom: (transform: ZoomTransform) => void\n  width: number\n  height: number\n  resetBrush: () => void\n  showResetButton: boolean\n  zoomLevels: ZoomLevels\n}) {\n  const zoomBehavior = useRef<ZoomBehavior<Element, unknown>>()\n\n  const [zoomIn, zoomOut, zoomInitial, zoomReset] = useMemo(\n    () => [\n      () =>\n        svg &&\n        zoomBehavior.current &&\n        select(svg as Element)\n          .transition()\n          .call(zoomBehavior.current.scaleBy, 2),\n      () =>\n        svg &&\n        zoomBehavior.current &&\n        select(svg as Element)\n          .transition()\n          .call(zoomBehavior.current.scaleBy, 0.5),\n      () =>\n        svg &&\n        zoomBehavior.current &&\n        select(svg as Element)\n          .transition()\n          .call(zoomBehavior.current.scaleTo, 0.5),\n      () =>\n        svg &&\n        zoomBehavior.current &&\n        select(svg as Element)\n          .call(zoomBehavior.current.transform, zoomIdentity.translate(0, 0).scale(1))\n          .transition()\n          .call(zoomBehavior.current.scaleTo, 0.5),\n    ],\n    [svg]\n  )\n\n  useEffect(() => {\n    if (!svg) return\n\n    zoomBehavior.current = zoom()\n      .scaleExtent([zoomLevels.min, zoomLevels.max])\n      .extent([\n        [0, 0],\n        [width, height],\n      ])\n      .on('zoom', ({ transform }: { transform: ZoomTransform }) => setZoom(transform))\n\n    select(svg as Element).call(zoomBehavior.current)\n  }, [height, width, setZoom, svg, xScale, zoomBehavior, zoomLevels, zoomLevels.max, zoomLevels.min])\n\n  useEffect(() => {\n    // reset zoom to initial on zoomLevel change\n    zoomInitial()\n  }, [zoomInitial, zoomLevels])\n\n  return (\n    <Wrapper count={showResetButton ? 3 : 2}>\n      {showResetButton && (\n        <Button\n          onClick={() => {\n            resetBrush()\n            zoomReset()\n          }}\n          disabled={false}\n        >\n          <RefreshCcw size={16} />\n        </Button>\n      )}\n      <Button onClick={zoomIn} disabled={false}>\n        <ZoomIn size={16} />\n      </Button>\n      <Button onClick={zoomOut} disabled={false}>\n        <ZoomOut size={16} />\n      </Button>\n    </Wrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/MobileBalanceSummaryFooter.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/ChartSection.tsx",[],"/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Line.tsx",["4057"],"import { ScaleLinear } from 'd3'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components/macro'\n\nconst StyledLine = styled.line`\n  opacity: 0.5;\n  stroke-width: 2;\n  stroke: ${({ theme }) => theme.textPrimary};\n  fill: none;\n`\n\nexport const Line = ({\n  value,\n  xScale,\n  innerHeight,\n}: {\n  value: number\n  xScale: ScaleLinear<number, number>\n  innerHeight: number\n}) =>\n  useMemo(\n    () => <StyledLine x1={xScale(value)} y1=\"0\" x2={xScale(value)} y2={innerHeight} />,\n    [value, xScale, innerHeight]\n  )\n","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Brush.tsx",["4058","4059"],"import { brushHandleAccentPath, brushHandlePath, OffScreenHandle } from 'components/LiquidityChartRangeInput/svg'\nimport { BrushBehavior, brushX, D3BrushEvent, ScaleLinear, select } from 'd3'\nimport usePrevious from 'hooks/usePrevious'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport styled from 'styled-components/macro'\n\nconst Handle = styled.path<{ color: string }>`\n  cursor: ew-resize;\n  pointer-events: none;\n\n  stroke-width: 3;\n  stroke: ${({ color }) => color};\n  fill: ${({ color }) => color};\n`\n\nconst HandleAccent = styled.path`\n  cursor: ew-resize;\n  pointer-events: none;\n\n  stroke-width: 1.5;\n  stroke: ${({ theme }) => theme.white};\n  opacity: ${({ theme }) => theme.opacity.hover};\n`\n\nconst LabelGroup = styled.g<{ visible: boolean }>`\n  opacity: ${({ visible }) => (visible ? '1' : '0')};\n  transition: opacity 300ms;\n`\n\nconst TooltipBackground = styled.rect`\n  fill: ${({ theme }) => theme.backgroundInteractive};\n`\n\nconst Tooltip = styled.text`\n  text-anchor: middle;\n  font-size: 13px;\n  fill: ${({ theme }) => theme.textPrimary};\n`\n\n// flips the handles draggers when close to the container edges\nconst FLIP_HANDLE_THRESHOLD_PX = 20\n\n// margin to prevent tick snapping from putting the brush off screen\nconst BRUSH_EXTENT_MARGIN_PX = 2\n\n/**\n * Returns true if every element in `a` maps to the\n * same pixel coordinate as elements in `b`\n */\nconst compare = (a: [number, number], b: [number, number], xScale: ScaleLinear<number, number>): boolean => {\n  // normalize pixels to 1 decimals\n  const aNorm = a.map((x) => xScale(x).toFixed(1))\n  const bNorm = b.map((x) => xScale(x).toFixed(1))\n  return aNorm.every((v, i) => v === bNorm[i])\n}\n\nexport const Brush = ({\n  id,\n  xScale,\n  interactive,\n  brushLabelValue,\n  brushExtent,\n  setBrushExtent,\n  innerWidth,\n  innerHeight,\n  westHandleColor,\n  eastHandleColor,\n}: {\n  id: string\n  xScale: ScaleLinear<number, number>\n  interactive: boolean\n  brushLabelValue: (d: 'w' | 'e', x: number) => string\n  brushExtent: [number, number]\n  setBrushExtent: (extent: [number, number], mode: string | undefined) => void\n  innerWidth: number\n  innerHeight: number\n  westHandleColor: string\n  eastHandleColor: string\n}) => {\n  const brushRef = useRef<SVGGElement | null>(null)\n  const brushBehavior = useRef<BrushBehavior<SVGGElement> | null>(null)\n\n  // only used to drag the handles on brush for performance\n  const [localBrushExtent, setLocalBrushExtent] = useState<[number, number] | null>(brushExtent)\n  const [showLabels, setShowLabels] = useState(false)\n  const [hovering, setHovering] = useState(false)\n\n  const previousBrushExtent = usePrevious(brushExtent)\n\n  const brushed = useCallback(\n    (event: D3BrushEvent<unknown>) => {\n      const { type, selection, mode } = event\n\n      if (!selection) {\n        setLocalBrushExtent(null)\n        return\n      }\n\n      const scaled = (selection as [number, number]).map(xScale.invert) as [number, number]\n\n      // avoid infinite render loop by checking for change\n      if (type === 'end' && !compare(brushExtent, scaled, xScale)) {\n        setBrushExtent(scaled, mode)\n      }\n\n      setLocalBrushExtent(scaled)\n    },\n    [xScale, brushExtent, setBrushExtent]\n  )\n\n  // keep local and external brush extent in sync\n  // i.e. snap to ticks on bruhs end\n  useEffect(() => {\n    setLocalBrushExtent(brushExtent)\n  }, [brushExtent])\n\n  // initialize the brush\n  useEffect(() => {\n    if (!brushRef.current) return\n\n    brushBehavior.current = brushX<SVGGElement>()\n      .extent([\n        [Math.max(0 + BRUSH_EXTENT_MARGIN_PX, xScale(0)), 0],\n        [innerWidth - BRUSH_EXTENT_MARGIN_PX, innerHeight],\n      ])\n      .handleSize(30)\n      .filter(() => interactive)\n      .on('brush end', brushed)\n\n    brushBehavior.current(select(brushRef.current))\n\n    if (previousBrushExtent && compare(brushExtent, previousBrushExtent, xScale)) {\n      select(brushRef.current)\n        .transition()\n        .call(brushBehavior.current.move as any, brushExtent.map(xScale))\n    }\n\n    // brush linear gradient\n    select(brushRef.current)\n      .selectAll('.selection')\n      .attr('stroke', 'none')\n      .attr('fill-opacity', '0.1')\n      .attr('fill', `url(#${id}-gradient-selection)`)\n  }, [brushExtent, brushed, id, innerHeight, innerWidth, interactive, previousBrushExtent, xScale])\n\n  // respond to xScale changes only\n  useEffect(() => {\n    if (!brushRef.current || !brushBehavior.current) return\n\n    brushBehavior.current.move(select(brushRef.current) as any, brushExtent.map(xScale) as any)\n  }, [brushExtent, xScale])\n\n  // show labels when local brush changes\n  useEffect(() => {\n    setShowLabels(true)\n    const timeout = setTimeout(() => setShowLabels(false), 1500)\n    return () => clearTimeout(timeout)\n  }, [localBrushExtent])\n\n  // variables to help render the SVGs\n  const flipWestHandle = localBrushExtent && xScale(localBrushExtent[0]) > FLIP_HANDLE_THRESHOLD_PX\n  const flipEastHandle = localBrushExtent && xScale(localBrushExtent[1]) > innerWidth - FLIP_HANDLE_THRESHOLD_PX\n\n  const showWestArrow = localBrushExtent && (xScale(localBrushExtent[0]) < 0 || xScale(localBrushExtent[1]) < 0)\n  const showEastArrow =\n    localBrushExtent && (xScale(localBrushExtent[0]) > innerWidth || xScale(localBrushExtent[1]) > innerWidth)\n\n  const westHandleInView =\n    localBrushExtent && xScale(localBrushExtent[0]) >= 0 && xScale(localBrushExtent[0]) <= innerWidth\n  const eastHandleInView =\n    localBrushExtent && xScale(localBrushExtent[1]) >= 0 && xScale(localBrushExtent[1]) <= innerWidth\n\n  return useMemo(\n    () => (\n      <>\n        <defs>\n          <linearGradient id={`${id}-gradient-selection`} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"100%\">\n            <stop stopColor={westHandleColor} />\n            <stop stopColor={eastHandleColor} offset=\"1\" />\n          </linearGradient>\n\n          {/* clips at exactly the svg area */}\n          <clipPath id={`${id}-brush-clip`}>\n            <rect x=\"0\" y=\"0\" width={innerWidth} height={innerHeight} />\n          </clipPath>\n        </defs>\n\n        {/* will host the d3 brush */}\n        <g\n          ref={brushRef}\n          clipPath={`url(#${id}-brush-clip)`}\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n        />\n\n        {/* custom brush handles */}\n        {localBrushExtent && (\n          <>\n            {/* west handle */}\n            {westHandleInView ? (\n              <g\n                transform={`translate(${Math.max(0, xScale(localBrushExtent[0]))}, 0), scale(${\n                  flipWestHandle ? '-1' : '1'\n                }, 1)`}\n              >\n                <g>\n                  <Handle color={westHandleColor} d={brushHandlePath(innerHeight)} />\n                  <HandleAccent d={brushHandleAccentPath()} />\n                </g>\n\n                <LabelGroup\n                  transform={`translate(50,0), scale(${flipWestHandle ? '1' : '-1'}, 1)`}\n                  visible={showLabels || hovering}\n                >\n                  <TooltipBackground y=\"0\" x=\"-30\" height=\"30\" width=\"60\" rx=\"8\" />\n                  <Tooltip transform=\"scale(-1, 1)\" y=\"15\" dominantBaseline=\"middle\">\n                    {brushLabelValue('w', localBrushExtent[0])}\n                  </Tooltip>\n                </LabelGroup>\n              </g>\n            ) : null}\n\n            {/* east handle */}\n            {eastHandleInView ? (\n              <g transform={`translate(${xScale(localBrushExtent[1])}, 0), scale(${flipEastHandle ? '-1' : '1'}, 1)`}>\n                <g>\n                  <Handle color={eastHandleColor} d={brushHandlePath(innerHeight)} />\n                  <HandleAccent d={brushHandleAccentPath()} />\n                </g>\n\n                <LabelGroup\n                  transform={`translate(50,0), scale(${flipEastHandle ? '-1' : '1'}, 1)`}\n                  visible={showLabels || hovering}\n                >\n                  <TooltipBackground y=\"0\" x=\"-30\" height=\"30\" width=\"60\" rx=\"8\" />\n                  <Tooltip y=\"15\" dominantBaseline=\"middle\">\n                    {brushLabelValue('e', localBrushExtent[1])}\n                  </Tooltip>\n                </LabelGroup>\n              </g>\n            ) : null}\n\n            {showWestArrow && <OffScreenHandle color={westHandleColor} />}\n\n            {showEastArrow && (\n              <g transform={`translate(${innerWidth}, 0) scale(-1, 1)`}>\n                <OffScreenHandle color={eastHandleColor} />\n              </g>\n            )}\n          </>\n        )}\n      </>\n    ),\n    [\n      brushLabelValue,\n      eastHandleColor,\n      eastHandleInView,\n      flipEastHandle,\n      flipWestHandle,\n      hovering,\n      id,\n      innerHeight,\n      innerWidth,\n      localBrushExtent,\n      showEastArrow,\n      showLabels,\n      showWestArrow,\n      westHandleColor,\n      westHandleInView,\n      xScale,\n    ]\n  )\n}\n","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/AxisBottom.tsx",["4060"],"import { Axis as d3Axis, axisBottom, NumberValue, ScaleLinear, select } from 'd3'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components/macro'\n\nconst StyledGroup = styled.g`\n  line {\n    display: none;\n  }\n\n  text {\n    color: ${({ theme }) => theme.textSecondary};\n    transform: translateY(5px);\n  }\n`\n\nconst Axis = ({ axisGenerator }: { axisGenerator: d3Axis<NumberValue> }) => {\n  const axisRef = (axis: SVGGElement) => {\n    axis &&\n      select(axis)\n        .call(axisGenerator)\n        .call((g) => g.select('.domain').remove())\n  }\n\n  return <g ref={axisRef} />\n}\n\nexport const AxisBottom = ({\n  xScale,\n  innerHeight,\n  offset = 0,\n}: {\n  xScale: ScaleLinear<number, number>\n  innerHeight: number\n  offset?: number\n}) =>\n  useMemo(\n    () => (\n      <StyledGroup transform={`translate(0, ${innerHeight + offset})`}>\n        <Axis axisGenerator={axisBottom(xScale).ticks(6)} />\n      </StyledGroup>\n    ),\n    [innerHeight, offset, xScale]\n  )\n","/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/Area.tsx",["4061","4062"],"import { area, curveStepAfter, ScaleLinear } from 'd3'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ChartEntry } from './types'\n\nconst Path = styled.path<{ fill: string | undefined }>`\n  opacity: 0.5;\n  stroke: ${({ fill, theme }) => fill ?? theme.accentAction};\n  fill: ${({ fill, theme }) => fill ?? theme.accentAction};\n`\n\nexport const Area = ({\n  series,\n  xScale,\n  yScale,\n  xValue,\n  yValue,\n  fill,\n}: {\n  series: ChartEntry[]\n  xScale: ScaleLinear<number, number>\n  yScale: ScaleLinear<number, number>\n  xValue: (d: ChartEntry) => number\n  yValue: (d: ChartEntry) => number\n  fill?: string | undefined\n}) =>\n  useMemo(\n    () => (\n      <Path\n        fill={fill}\n        d={\n          area()\n            .curve(curveStepAfter)\n            .x((d: unknown) => xScale(xValue(d as ChartEntry)))\n            .y1((d: unknown) => yScale(yValue(d as ChartEntry)))\n            .y0(yScale(0))(\n            series.filter((d) => {\n              const value = xScale(xValue(d))\n              return value > 0 && value <= window.innerWidth\n            }) as Iterable<[number, number]>\n          ) ?? undefined\n        }\n      />\n    ),\n    [fill, series, xScale, xValue, yScale, yValue]\n  )\n","/workspace/Physica-Interfae/src/state/mint/reducer.ts",["4063"],"import { createReducer } from '@reduxjs/toolkit'\n\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string\n  readonly rightRangeTypedValue: string\n}\n\nexport const initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        }\n      }\n    })\n)\n","/workspace/Physica-Interfae/src/state/lists/reducer.ts",["4064","4065"],"import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, TokenList, VersionUpgrade } from '@uniswap/token-lists'\n\nimport { DEFAULT_LIST_OF_LISTS } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { acceptListUpdate, addList, fetchTokenList, removeList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n}\n\ntype ListState = ListsState['byUrl'][string]\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null,\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {}),\n  },\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      const current = state.byUrl[url]?.current ?? null\n      const pendingUpdate = state.byUrl[url]?.pendingUpdate ?? null\n\n      state.byUrl[url] = {\n        current,\n        pendingUpdate,\n        loadingRequestId: requestId,\n        error: null,\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n\n      // no-op if update does nothing\n      if (current) {\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\n\n        if (upgradeType === VersionUpgrade.NONE) return\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            current,\n            pendingUpdate: tokenList,\n            loadingRequestId: null,\n            error: null,\n          }\n        }\n      } else {\n        state.byUrl[url] = {\n          current: tokenList,\n          pendingUpdate: null,\n          loadingRequestId: null,\n          error: null,\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        current: state.byUrl[url].current ? state.byUrl[url].current : null,\n        pendingUpdate: null,\n        loadingRequestId: null,\n        error: errorMessage,\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        current: state.byUrl[url].pendingUpdate,\n        pendingUpdate: null,\n      }\n    })\n    .addCase(updateVersion, (state) => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n    })\n)\n","/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/BalanceSummary.tsx",[],"/workspace/Physica-Interfae/src/components/Charts/LineChart.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/AddressSection.tsx",[],"/workspace/Physica-Interfae/src/state/burn/reducer.ts",["4066"],"import { createReducer } from '@reduxjs/toolkit'\n\nimport { Field, typeInput } from './actions'\n\ninterface BurnState {\n  readonly independentField: Field\n  readonly typedValue: string\n}\n\nconst initialState: BurnState = {\n  independentField: Field.LIQUIDITY_PERCENT,\n  typedValue: '0',\n}\n\nexport default createReducer<BurnState>(initialState, (builder) =>\n  builder.addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n    return {\n      ...state,\n      independentField: field,\n      typedValue,\n    }\n  })\n)\n","/workspace/Physica-Interfae/src/state/burn/v3/reducer.ts",["4067"],"import { createReducer } from '@reduxjs/toolkit'\n\nimport { selectPercent } from './actions'\n\ninterface BurnV3State {\n  readonly percent: number\n}\n\nconst initialState: BurnV3State = {\n  percent: 0,\n}\n\nexport default createReducer<BurnV3State>(initialState, (builder) =>\n  builder.addCase(selectPercent, (state, { payload: { percent } }) => {\n    return {\n      ...state,\n      percent,\n    }\n  })\n)\n","/workspace/Physica-Interfae/src/nft/components/profile/list/utils.ts",["4068","4069","4070","4071","4072","4073","4074","4075","4076","4077"],"import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport ms from 'ms.macro'\nimport { SetPriceMethod, WarningType } from 'nft/components/profile/list/shared'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport {\n  LOOKSRARE_MARKETPLACE_CONTRACT_721,\n  LOOKSRARE_MARKETPLACE_CONTRACT_1155,\n  X2Y2_TRANSFER_CONTRACT_721,\n  X2Y2_TRANSFER_CONTRACT_1155,\n} from 'nft/queries'\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea'\nimport { CollectionRow, Listing, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\nimport { approveCollection, LOOKS_RARE_CREATOR_BASIS_POINTS, signListing } from 'nft/utils/listNfts'\nimport { Dispatch, useEffect } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nexport async function approveCollectionRow(\n  collectionRow: CollectionRow,\n  signer: JsonRpcSigner,\n  setCollectionStatusAndCallback: (\n    collection: CollectionRow,\n    status: ListingStatus,\n    callback?: () => Promise<void>\n  ) => void\n) {\n  const callback = () => approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\n  setCollectionStatusAndCallback(collectionRow, ListingStatus.SIGNING, callback)\n  const { marketplace, collectionAddress, nftStandard } = collectionRow\n  const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n  const spender =\n    marketplace.name === 'OpenSea'\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\n      : marketplace.name === 'LooksRare'\n      ? collectionRow.nftStandard === NftStandard.Erc721\n        ? LOOKSRARE_MARKETPLACE_CONTRACT_721\n        : LOOKSRARE_MARKETPLACE_CONTRACT_1155\n      : marketplace.name === 'X2Y2'\n      ? collectionRow.nftStandard === NftStandard.Erc721\n        ? X2Y2_TRANSFER_CONTRACT_721\n        : X2Y2_TRANSFER_CONTRACT_1155\n      : addresses.TRANSFER_MANAGER_ERC721\n  !!collectionAddress &&\n    (await approveCollection(\n      spender,\n      collectionAddress,\n      signer,\n      (newStatus: ListingStatus) => setCollectionStatusAndCallback(collectionRow, newStatus, callback),\n      nftStandard\n    ))\n}\n\nexport async function signListingRow(\n  listing: ListingRow,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  getLooksRareNonce: () => number,\n  setLooksRareNonce: (nonce: number) => void,\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void\n) {\n  const looksRareNonce = getLooksRareNonce()\n  const callback = () => {\n    return signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\n  }\n  setListingStatusAndCallback(listing, ListingStatus.SIGNING, callback)\n  const { asset, marketplace } = listing\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\n    setListingStatusAndCallback(listing, newStatus, callback)\n  )\n  res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\n}\n\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\n    if (asset.newListings?.length) {\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\n      const maxFee =\n        maxListing.marketplace.fee +\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset?.basisPoints ?? 0) / 100\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\n    }\n    return total\n  }, 0)\n  return total ? Math.round(total * 10000 + Number.EPSILON) / 10000 : 0\n}\n\nconst getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\n  const newCollectionsToApprove: CollectionRow[] = []\n\n  const newListings: ListingRow[] = []\n  sellAssets.forEach((asset) => {\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\n      const newListing = {\n        images: [asset.smallImageUrl, marketplace.icon],\n        name: asset.name || `#${asset.tokenId}`,\n        status: ListingStatus.DEFINED,\n        asset,\n        marketplace,\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\n      }\n      newListings.push(newListing)\n      if (\n        !newCollectionsToApprove.some(\n          (collectionRow: CollectionRow) =>\n            collectionRow.collectionAddress === asset.asset_contract.address &&\n            collectionRow.marketplace.name === marketplace.name\n        )\n      ) {\n        const newCollectionRow = {\n          images: [asset.asset_contract.image_url, marketplace.icon],\n          name: asset.asset_contract.name,\n          status: ListingStatus.DEFINED,\n          collectionAddress: asset.asset_contract.address,\n          isVerified: asset.collectionIsVerified,\n          marketplace,\n          nftStandard: asset.asset_contract.tokenType,\n        }\n        newCollectionsToApprove.push(newCollectionRow)\n      }\n    })\n  })\n  return [newCollectionsToApprove, newListings]\n}\n\nexport const verifyStatus = (status: ListingStatus) => {\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\n}\n\nexport function useSubscribeListingState() {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const { setListings, setCollectionsRequiringApproval } = useNFTList(\n    ({ setListings, setCollectionsRequiringApproval }) => ({\n      setListings,\n      setCollectionsRequiringApproval,\n    }),\n    shallow\n  )\n  useEffect(() => {\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\n    setListings(newListings)\n    setCollectionsRequiringApproval(newCollectionsToApprove)\n  }, [sellAssets, setCollectionsRequiringApproval, setListings])\n}\n\nexport function useHandleGlobalPriceToggle(\n  globalOverride: boolean,\n  setListPrice: Dispatch<number | undefined>,\n  setPrice: (price?: number) => void,\n  listPrice?: number,\n  globalPrice?: number\n) {\n  useEffect(() => {\n    let price: number | undefined\n    if (globalOverride) {\n      if (!listPrice) setListPrice(globalPrice)\n      price = globalPrice\n    } else {\n      price = listPrice\n    }\n    setPrice(price)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalOverride])\n}\n\nexport function useSyncPriceWithGlobalMethod(\n  asset: WalletAsset,\n  setListPrice: Dispatch<number | undefined>,\n  setGlobalPrice: Dispatch<number | undefined>,\n  setGlobalOverride: Dispatch<boolean>,\n  listPrice?: number,\n  globalPrice?: number,\n  globalPriceMethod?: SetPriceMethod\n) {\n  useEffect(() => {\n    if (globalPriceMethod === SetPriceMethod.FLOOR_PRICE) {\n      setListPrice(asset?.floorPrice)\n      setGlobalPrice(asset.floorPrice)\n    } else if (globalPriceMethod === SetPriceMethod.LAST_PRICE) {\n      setListPrice(asset.lastPrice)\n      setGlobalPrice(asset.lastPrice)\n    } else if (globalPriceMethod === SetPriceMethod.SAME_PRICE)\n      listPrice && !globalPrice ? setGlobalPrice(listPrice) : setListPrice(globalPrice)\n\n    setGlobalOverride(false)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalPriceMethod])\n}\n\nexport function useUpdateInputAndWarnings(\n  setWarningType: Dispatch<WarningType>,\n  inputRef: React.MutableRefObject<HTMLInputElement>,\n  asset: WalletAsset,\n  listPrice?: number\n) {\n  useEffect(() => {\n    setWarningType(WarningType.NONE)\n    const price = listPrice ?? 0\n    inputRef.current.value = `${price}`\n    if (price < (asset?.floorPrice ?? 0) && price > 0) setWarningType(WarningType.BELOW_FLOOR)\n    else if (\n      asset.floor_sell_order_price &&\n      price >= asset.floor_sell_order_price &&\n      asset.asset_contract.tokenType !== NftStandard.Erc1155\n    )\n      setWarningType(WarningType.ALREADY_LISTED)\n  }, [\n    asset.asset_contract.tokenType,\n    asset?.floorPrice,\n    asset.floor_sell_order_price,\n    inputRef,\n    listPrice,\n    setWarningType,\n  ])\n}\n\nexport const getRoyalty = (listingMarket: ListingMarket, asset: WalletAsset) => {\n  // LooksRare is a unique case where royalties for creators are a flat 0.5% or 50 basis points if royalty is set\n  const baseFee =\n    listingMarket.name === 'LooksRare'\n      ? asset.basisPoints\n        ? LOOKS_RARE_CREATOR_BASIS_POINTS\n        : 0\n      : asset.basisPoints ?? 0\n\n  return baseFee * 0.01\n}\n\n// OpenSea has a 0.5% fee for all assets that do not have a royalty set\nexport const getMarketplaceFee = (listingMarket: ListingMarket, asset: WalletAsset) => {\n  return listingMarket.name === 'OpenSea' && !asset.basisPoints ? 0.5 : listingMarket.fee\n}\n\nconst BELOW_FLOOR_PRICE_THRESHOLD = 0.8\n\nexport const findListingIssues = (sellAssets: WalletAsset[]) => {\n  const missingExpiration = sellAssets.some((asset) => {\n    return (\n      asset.expirationTime != null &&\n      (isNaN(asset.expirationTime) || asset.expirationTime * 1000 - Date.now() < ms`60 seconds`)\n    )\n  })\n  const overMaxExpiration = sellAssets.some((asset) => {\n    return asset.expirationTime != null && asset.expirationTime * 1000 - Date.now() > ms`180 days`\n  })\n\n  const listingsMissingPrice: [WalletAsset, Listing][] = []\n  const listingsBelowFloor: [WalletAsset, Listing][] = []\n  const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\n  for (const asset of sellAssets) {\n    if (asset.newListings) {\n      for (const listing of asset.newListings) {\n        if (!listing.price) listingsMissingPrice.push([asset, listing])\n        else if (listing.price < (asset?.floorPrice ?? 0) * BELOW_FLOOR_PRICE_THRESHOLD && !listing.overrideFloorPrice)\n          listingsBelowFloor.push([asset, listing])\n        else if (\n          asset.floor_sell_order_price &&\n          listing.price >= asset.floor_sell_order_price &&\n          asset.asset_contract.tokenType !== NftStandard.Erc1155\n        )\n          listingsAboveSellOrderFloor.push([asset, listing])\n      }\n    }\n  }\n  return {\n    missingExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n  }\n}\n","/workspace/Physica-Interfae/src/components/PrivacyPolicy/index.tsx",[],"/workspace/Physica-Interfae/src/utils/computeSurroundingTicks.ts",["4078","4079","4080"],"import { Token } from '@uniswap/sdk-core'\nimport { tickToPrice } from '@uniswap/v3-sdk'\nimport { TickProcessed } from 'hooks/usePoolTickData'\nimport JSBI from 'jsbi'\n\nimport { Ticks } from '../graphql/thegraph/AllV3TicksQuery'\n\nconst PRICE_FIXED_DIGITS = 8\n\n// Computes the numSurroundingTicks above or below the active tick.\nexport default function computeSurroundingTicks(\n  token0: Token,\n  token1: Token,\n  activeTickProcessed: TickProcessed,\n  sortedTickData: Ticks,\n  pivot: number,\n  ascending: boolean\n): TickProcessed[] {\n  let previousTickProcessed: TickProcessed = {\n    ...activeTickProcessed,\n  }\n  // Iterate outwards (either up or down depending on direction) from the active tick,\n  // building active liquidity for every tick.\n  let processedTicks: TickProcessed[] = []\n  for (let i = pivot + (ascending ? 1 : -1); ascending ? i < sortedTickData.length : i >= 0; ascending ? i++ : i--) {\n    const tick = Number(sortedTickData[i].tick)\n    const currentTickProcessed: TickProcessed = {\n      liquidityActive: previousTickProcessed.liquidityActive,\n      tick,\n      liquidityNet: JSBI.BigInt(sortedTickData[i].liquidityNet),\n      price0: tickToPrice(token0, token1, tick).toFixed(PRICE_FIXED_DIGITS),\n    }\n\n    // Update the active liquidity.\n    // If we are iterating ascending and we found an initialized tick we immediately apply\n    // it to the current processed tick we are building.\n    // If we are iterating descending, we don't want to apply the net liquidity until the following tick.\n    if (ascending) {\n      currentTickProcessed.liquidityActive = JSBI.add(\n        previousTickProcessed.liquidityActive,\n        JSBI.BigInt(sortedTickData[i].liquidityNet)\n      )\n    } else if (!ascending && JSBI.notEqual(previousTickProcessed.liquidityNet, JSBI.BigInt(0))) {\n      // We are iterating descending, so look at the previous tick and apply any net liquidity.\n      currentTickProcessed.liquidityActive = JSBI.subtract(\n        previousTickProcessed.liquidityActive,\n        previousTickProcessed.liquidityNet\n      )\n    }\n\n    processedTicks.push(currentTickProcessed)\n    previousTickProcessed = currentTickProcessed\n  }\n\n  if (!ascending) {\n    processedTicks = processedTicks.reverse()\n  }\n\n  return processedTicks\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/list/ListingButton.tsx",["4081"],"import { Plural, t, Trans } from '@lingui/macro'\nimport { BaseButton } from 'components/Button'\nimport { BelowFloorWarningModal } from 'nft/components/profile/list/Modal/BelowFloorWarningModal'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\nimport { shallow } from 'zustand/shallow'\n\nimport { findListingIssues } from './utils'\n\nconst StyledListingButton = styled(BaseButton)<{ showResolveIssues: boolean; missingPrices: boolean }>`\n  background: ${({ showResolveIssues, theme }) => (showResolveIssues ? theme.accentFailure : theme.accentAction)};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  padding: 16px;\n  border-radius: 12px;\n  width: min-content;\n  border: none;\n  cursor: ${({ missingPrices }) => (missingPrices ? 'auto' : 'pointer')};\n  opacity: ${({ showResolveIssues, missingPrices }) => !showResolveIssues && missingPrices && '0.3'};\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    font-size: 16px;\n    line-height: 20px;\n    padding: 10px 12px;\n  }\n`\n\nexport const ListingButton = ({ onClick }: { onClick: () => void }) => {\n  const { sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues } = useSellAsset(\n    ({ sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues }) => ({\n      sellAssets,\n      showResolveIssues,\n      toggleShowResolveIssues,\n      issues,\n      setIssues,\n    }),\n    shallow\n  )\n  const [showWarning, setShowWarning] = useState(false)\n  const isMobile = useIsMobile()\n\n  // Find issues with item listing data\n  const [listingsMissingPrice, listingsBelowFloor] = useMemo(() => {\n    const {\n      missingExpiration,\n      overMaxExpiration,\n      listingsMissingPrice,\n      listingsBelowFloor,\n      listingsAboveSellOrderFloor,\n    } = findListingIssues(sellAssets)\n\n    // set number of issues\n    const foundIssues =\n      Number(missingExpiration) +\n      Number(overMaxExpiration) +\n      listingsMissingPrice.length +\n      listingsAboveSellOrderFloor.length\n    setIssues(foundIssues)\n    !foundIssues && showResolveIssues && toggleShowResolveIssues()\n    // Only show Resolve Issue text if there was a user submitted error (ie not when page loads with no prices set)\n    if ((missingExpiration || overMaxExpiration || listingsAboveSellOrderFloor.length) && !showResolveIssues)\n      toggleShowResolveIssues()\n\n    return [listingsMissingPrice, listingsBelowFloor]\n  }, [sellAssets, setIssues, showResolveIssues, toggleShowResolveIssues])\n\n  const warningWrappedClick = () => {\n    if (issues) !showResolveIssues && toggleShowResolveIssues()\n    else if (listingsBelowFloor.length) setShowWarning(true)\n    else onClick()\n  }\n\n  return (\n    <>\n      <StyledListingButton\n        onClick={warningWrappedClick}\n        missingPrices={!!listingsMissingPrice.length}\n        showResolveIssues={showResolveIssues}\n      >\n        {showResolveIssues ? (\n          <Plural value={issues !== 1 ? 2 : 1} _1=\"Resolve issue\" other={t`Resolve ${issues} issues`} />\n        ) : listingsMissingPrice.length && !isMobile ? (\n          <Trans>Set prices to continue</Trans>\n        ) : (\n          <Trans>Start listing</Trans>\n        )}\n      </StyledListingButton>\n\n      {showWarning && (\n        <BelowFloorWarningModal\n          listingsBelowFloor={listingsBelowFloor}\n          closeModal={() => setShowWarning(false)}\n          startListing={onClick}\n        />\n      )}\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageTraits.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/Dropdown.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/shared.tsx",[],"/workspace/Physica-Interfae/src/featureFlags/flags/fiatOnRampButton.ts",[],"/workspace/Physica-Interfae/src/utils/tradeMeaningFullyDiffer.ts",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/SuccessScreen.tsx",[],"/workspace/Physica-Interfae/src/hooks/useUniversalRouter.ts",["4082","4083","4084","4085"],"import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { t } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { SwapEventName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { SwapRouter, UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { FeeOptions, toHex } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { formatSwapSignedAnalyticsEventProperties } from 'lib/utils/analytics'\nimport { useCallback } from 'react'\nimport { trace } from 'tracing'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\nimport isZero from 'utils/isZero'\nimport { didUserReject, swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage'\n\nimport { PermitSignature } from './usePermitAllowance'\n\n/** Thrown when gas estimation fails. This class of error usually requires an emulator to determine the root cause. */\nclass GasEstimationError extends Error {\n  constructor() {\n    super(t`Your swap is expected to fail.`)\n  }\n}\n\n/**\n * Thrown when the user modifies the transaction in-wallet before submitting it.\n * In-wallet calldata modification nullifies any safeguards (eg slippage) from the interface, so we recommend reverting them immediately.\n */\nclass ModifiedSwapError extends Error {\n  constructor() {\n    super(\n      t`Your swap was modified through your wallet. If this was a mistake, please cancel immediately or risk losing your funds.`\n    )\n  }\n}\n\ninterface SwapOptions {\n  slippageTolerance: Percent\n  deadline?: BigNumber\n  permit?: PermitSignature\n  feeOptions?: FeeOptions\n}\n\nexport function useUniversalRouterSwapCallback(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  fiatValues: { amountIn: number | undefined; amountOut: number | undefined },\n  options: SwapOptions\n) {\n  const { account, chainId, provider } = useWeb3React()\n\n  return useCallback(async (): Promise<TransactionResponse> => {\n    return trace(\n      'swap.send',\n      async ({ setTraceData, setTraceStatus, setTraceError }) => {\n        try {\n          if (!account) throw new Error('missing account')\n          if (!chainId) throw new Error('missing chainId')\n          if (!provider) throw new Error('missing provider')\n          if (!trade) throw new Error('missing trade')\n\n          setTraceData('slippageTolerance', options.slippageTolerance.toFixed(2))\n          const { calldata: data, value } = SwapRouter.swapERC20CallParameters(trade, {\n            slippageTolerance: options.slippageTolerance,\n            deadlineOrPreviousBlockhash: options.deadline?.toString(),\n            inputTokenPermit: options.permit,\n            fee: options.feeOptions,\n          })\n          const tx = {\n            from: account,\n            to: UNIVERSAL_ROUTER_ADDRESS(chainId),\n            data,\n            // TODO(https://github.com/Uniswap/universal-router-sdk/issues/113): universal-router-sdk returns a non-hexlified value.\n            ...(value && !isZero(value) ? { value: toHex(value) } : {}),\n          }\n\n          let gasEstimate: BigNumber\n          try {\n            gasEstimate = await provider.estimateGas(tx)\n          } catch (gasError) {\n            setTraceStatus('failed_precondition')\n            setTraceError(gasError)\n            console.warn(gasError)\n            throw new GasEstimationError()\n          }\n          const gasLimit = calculateGasMargin(gasEstimate)\n          setTraceData('gasLimit', gasLimit.toNumber())\n          const response = await provider\n            .getSigner()\n            .sendTransaction({ ...tx, gasLimit })\n            .then((response) => {\n              sendAnalyticsEvent(\n                SwapEventName.SWAP_SIGNED,\n                formatSwapSignedAnalyticsEventProperties({ trade, fiatValues, txHash: response.hash })\n              )\n              if (tx.data !== response.data) {\n                sendAnalyticsEvent(SwapEventName.SWAP_MODIFIED_IN_WALLET, { txHash: response.hash })\n                throw new ModifiedSwapError()\n              }\n              return response\n            })\n          return response\n        } catch (swapError: unknown) {\n          if (swapError instanceof ModifiedSwapError) throw swapError\n\n          // Cancellations are not failures, and must be accounted for as 'cancelled'.\n          if (didUserReject(swapError)) setTraceStatus('cancelled')\n\n          // GasEstimationErrors are already traced when they are thrown.\n          if (!(swapError instanceof GasEstimationError)) setTraceError(swapError)\n\n          throw new Error(swapErrorToUserReadableMessage(swapError))\n        }\n      },\n      { tags: { is_widget: false } }\n    )\n  }, [\n    account,\n    chainId,\n    fiatValues,\n    options.deadline,\n    options.feeOptions,\n    options.permit,\n    options.slippageTolerance,\n    provider,\n    trade,\n  ])\n}\n","/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/ListModalSection.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/ChainSelector.css.ts",[],"/workspace/Physica-Interfae/src/components/NavBar/style.css.ts",[],"/workspace/Physica-Interfae/src/components/NavBar/NavDropdown.css.ts",[],"/workspace/Physica-Interfae/src/components/NavBar/MenuDropdown.css.ts",[],"/workspace/Physica-Interfae/src/components/NavBar/NavIcon.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/NFTListRow.tsx",[],"/workspace/Physica-Interfae/src/components/swap/TradePrice.tsx",[],"/workspace/Physica-Interfae/src/components/swap/SwapRoute.tsx",[],"/workspace/Physica-Interfae/src/components/swap/FormattedPriceImpact.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/view/ProfilePage.css.ts",[],"/workspace/Physica-Interfae/src/hooks/useIsPoolsPage.ts",[],"/workspace/Physica-Interfae/src/components/swap/AdvancedSwapDetails.tsx",[],"/workspace/Physica-Interfae/src/components/swap/GasEstimateBadge.tsx",[],"/workspace/Physica-Interfae/src/components/NavBar/SearchBar.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/AssetDetails.css.ts",[],"/workspace/Physica-Interfae/src/nft/components/profile/view/FilterSidebar.tsx",["4086","4087","4088","4089","4090"],"import { ScrollBarStyles } from 'components/Common'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { AnimatedBox, Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { XMarkIcon } from 'nft/components/icons'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { checkbox } from 'nft/components/layout/Checkbox.css'\nimport { Input } from 'nft/components/layout/Input'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useFiltersExpanded, useIsMobile, useWalletCollections } from 'nft/hooks'\nimport { WalletCollection } from 'nft/types'\nimport {\n  CSSProperties,\n  Dispatch,\n  FormEvent,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react'\nimport { easings, useSpring } from 'react-spring'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { FixedSizeList, ListOnItemsRenderedProps } from 'react-window'\nimport InfiniteLoader from 'react-window-infinite-loader'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { TRANSITION_DURATIONS } from 'theme/styles'\nimport noop from 'utils/noop'\n\nimport { WALLET_COLLECTIONS_PAGINATION_LIMIT } from './ProfilePage'\nimport * as styles from './ProfilePage.css'\n\nconst COLLECTION_ROW_HEIGHT = 44\n\nconst ItemsContainer = styled(Column)`\n  ${ScrollBarStyles}\n  height: 100vh;\n`\n\nconst LongLoadingBubble = styled(LoadingBubble)`\n  min-height: 15px;\n  width: 75%;\n`\n\nconst SmallLoadingBubble = styled(LoadingBubble)`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n`\n\nconst MobileMenuHeader = styled(Row)`\n  justify-content: space-between;\n  padding-bottom: 8px;\n`\n\nconst LoadingCollectionItem = ({ style }: { style?: CSSProperties }) => {\n  return (\n    <Row display=\"flex\" justifyContent=\"space-between\" style={style} paddingLeft=\"12\" paddingRight=\"16\">\n      <Row display=\"flex\" flex=\"1\">\n        <SmallLoadingBubble />\n        <LongLoadingBubble />\n      </Row>\n      <Box as=\"span\" borderColor=\"backgroundOutline\" className={checkbox} aria-hidden=\"true\" />\n    </Row>\n  )\n}\n\ninterface CollectionFilterRowProps {\n  index: number\n  style: CSSProperties\n}\n\ninterface FilterSidebarProps {\n  fetchNextPage: () => void\n  hasNextPage?: boolean\n  isFetchingNextPage: boolean\n  walletCollections: WalletCollection[]\n}\n\nexport const FilterSidebar = ({\n  fetchNextPage,\n  hasNextPage,\n  isFetchingNextPage,\n  walletCollections,\n}: FilterSidebarProps) => {\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\n\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\n  const isMobile = useIsMobile()\n\n  const { sidebarX } = useSpring({\n    sidebarX: isFiltersExpanded ? 0 : -360,\n    config: {\n      duration: TRANSITION_DURATIONS.medium,\n      easing: easings.easeOutSine,\n    },\n  })\n\n  const hideSearch = useMemo(\n    () => (walletCollections && walletCollections?.length >= WALLET_COLLECTIONS_PAGINATION_LIMIT) || isFetchingNextPage,\n    [walletCollections, isFetchingNextPage]\n  )\n\n  return (\n    // @ts-ignore\n    <AnimatedBox\n      position={{ sm: 'fixed', md: 'sticky' }}\n      top={{ sm: '0', md: '72' }}\n      left={{ sm: '0', md: 'unset' }}\n      width={{ sm: 'full', md: '332', lg: '332' }}\n      height={{ sm: 'full', md: 'auto' }}\n      zIndex={{ sm: 'modal', md: 'auto' }}\n      display={isFiltersExpanded ? 'flex' : 'none'}\n      style={{ transform: isMobile ? undefined : sidebarX.to((x) => `translateX(${x}px)`) }}\n      background=\"backgroundBackdrop\"\n    >\n      <Box\n        paddingTop={{ sm: '24', md: '0' }}\n        paddingLeft={{ sm: '16', md: '0' }}\n        paddingRight=\"16\"\n        width={{ sm: 'full', md: '332', lg: '332' }}\n      >\n        {isMobile && (\n          <MobileMenuHeader>\n            <ThemedText.HeadlineSmall>Filter</ThemedText.HeadlineSmall>\n            <XMarkIcon\n              height={28}\n              width={28}\n              fill={themeVars.colors.textPrimary}\n              onClick={() => setFiltersExpanded(false)}\n            />\n          </MobileMenuHeader>\n        )}\n        <CollectionSelect\n          collections={walletCollections}\n          collectionFilters={collectionFilters}\n          setCollectionFilters={setCollectionFilters}\n          fetchNextPage={fetchNextPage}\n          hasNextPage={hasNextPage}\n          isFetchingNextPage={isFetchingNextPage}\n          hideSearch={hideSearch}\n        />\n      </Box>\n    </AnimatedBox>\n  )\n}\n\nconst CollectionSelect = ({\n  collections,\n  collectionFilters,\n  setCollectionFilters,\n  fetchNextPage,\n  hasNextPage,\n  isFetchingNextPage,\n  hideSearch,\n}: {\n  collections: WalletCollection[]\n  collectionFilters: Array<string>\n  setCollectionFilters: (address: string) => void\n  fetchNextPage: () => void\n  hasNextPage?: boolean\n  isFetchingNextPage: boolean\n  hideSearch: boolean\n}) => {\n  const [collectionSearchText, setCollectionSearchText] = useState('')\n  const [displayCollections, setDisplayCollections] = useState(collections)\n\n  useEffect(() => {\n    if (collectionSearchText) {\n      const filtered = collections.filter((collection) =>\n        collection.name?.toLowerCase().includes(collectionSearchText.toLowerCase())\n      )\n      setDisplayCollections(filtered)\n    } else {\n      setDisplayCollections(collections)\n    }\n  }, [collectionSearchText, collections])\n\n  const itemKey = useCallback((index: number, data: WalletCollection[]) => {\n    if (!data) return index\n    const collection = data[index]\n    return `${collection.address}_${index}`\n  }, [])\n\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? displayCollections.length + 1 : displayCollections.length\n\n  // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n  const loadMoreItems = isFetchingNextPage ? noop : fetchNextPage\n\n  // Every row is loaded except for our loading indicator row.\n  const isItemLoaded = useCallback(\n    (index: number) => !hasNextPage || index < displayCollections.length,\n    [displayCollections.length, hasNextPage]\n  )\n\n  const CollectionFilterRow = useCallback(\n    ({ index, style }: CollectionFilterRowProps) => {\n      const collection = !!displayCollections && displayCollections[index]\n      if (!collection || isFetchingNextPage) {\n        return <LoadingCollectionItem style={style} key={index} />\n      }\n      return (\n        <CollectionItem\n          style={style}\n          key={itemKey(index, displayCollections)}\n          collection={displayCollections[index]}\n          collectionFilters={collectionFilters}\n          setCollectionFilters={setCollectionFilters}\n        />\n      )\n    },\n    [displayCollections, isFetchingNextPage, itemKey, collectionFilters, setCollectionFilters]\n  )\n\n  return (\n    <>\n      <Box className={subhead} marginTop=\"12\" marginBottom=\"16\" width=\"276\">\n        Collections\n      </Box>\n      <Box paddingBottom=\"12\" borderRadius=\"8\">\n        <Column as=\"ul\" paddingLeft=\"0\" gap=\"10\" style={{ maxHeight: '80vh' }}>\n          {!hideSearch && (\n            <CollectionFilterSearch\n              collectionSearchText={collectionSearchText}\n              setCollectionSearchText={setCollectionSearchText}\n            />\n          )}\n          <ItemsContainer>\n            <AutoSizer disableWidth>\n              {({ height }) => (\n                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\n                  {({\n                    onItemsRendered,\n                    ref,\n                  }: {\n                    onItemsRendered: (props: ListOnItemsRenderedProps) => any\n                    ref: any\n                  }) => (\n                    <FixedSizeList\n                      height={height}\n                      width=\"100%\"\n                      itemCount={itemCount}\n                      itemSize={COLLECTION_ROW_HEIGHT}\n                      onItemsRendered={onItemsRendered}\n                      itemKey={itemKey}\n                      ref={ref}\n                    >\n                      {CollectionFilterRow}\n                    </FixedSizeList>\n                  )}\n                </InfiniteLoader>\n              )}\n            </AutoSizer>\n          </ItemsContainer>\n        </Column>\n      </Box>\n    </>\n  )\n}\n\nconst CollectionFilterSearch = ({\n  collectionSearchText,\n  setCollectionSearchText,\n}: {\n  collectionSearchText: string\n  setCollectionSearchText: Dispatch<SetStateAction<string>>\n}) => {\n  return (\n    <Input\n      placeholder=\"Search\"\n      marginTop=\"8\"\n      marginBottom=\"8\"\n      autoComplete=\"off\"\n      position=\"static\"\n      width=\"full\"\n      value={collectionSearchText}\n      onChange={(e: FormEvent<HTMLInputElement>) => setCollectionSearchText(e.currentTarget.value)}\n    />\n  )\n}\n\nconst CollectionItem = ({\n  collection,\n  collectionFilters,\n  setCollectionFilters,\n  style,\n}: {\n  collection: WalletCollection\n  collectionFilters: Array<string>\n  setCollectionFilters: (address: string) => void\n  style?: CSSProperties\n}) => {\n  const [isCheckboxSelected, setCheckboxSelected] = useState(false)\n  const [hovered, toggleHovered] = useReducer((state) => {\n    return !state\n  }, false)\n  const isChecked = useCallback(\n    (address: string) => {\n      return collectionFilters.some((collection) => collection === address)\n    },\n    [collectionFilters]\n  )\n  const handleCheckbox = () => {\n    setCheckboxSelected(!isCheckboxSelected)\n    setCollectionFilters(collection.address)\n  }\n  return (\n    <Row\n      maxWidth=\"full\"\n      overflowX=\"hidden\"\n      overflowY=\"hidden\"\n      fontWeight=\"normal\"\n      className={styles.subRowHover}\n      justifyContent=\"space-between\"\n      cursor=\"pointer\"\n      paddingLeft=\"12\"\n      paddingRight=\"16\"\n      borderRadius=\"12\"\n      style={{\n        paddingBottom: '22px',\n        paddingTop: '22px',\n        ...style,\n      }}\n      maxHeight={`${COLLECTION_ROW_HEIGHT}`}\n      as=\"li\"\n      onMouseEnter={toggleHovered}\n      onMouseLeave={toggleHovered}\n      onClick={handleCheckbox}\n    >\n      <Row>\n        <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\n        <Box\n          as=\"span\"\n          whiteSpace=\"nowrap\"\n          textOverflow=\"ellipsis\"\n          overflow=\"hidden\"\n          paddingLeft=\"12\"\n          paddingRight=\"14\"\n          style={{ minHeight: 15, maxWidth: '180px' }}\n        >\n          {collection.name}{' '}\n        </Box>\n      </Row>\n\n      <Checkbox checked={isChecked(collection.address)} hovered={hovered} onChange={handleCheckbox}>\n        <Box as=\"span\" color=\"textTertiary\" marginRight=\"12\" marginLeft=\"auto\">\n          {collection.count}\n        </Box>\n      </Checkbox>\n    </Row>\n  )\n}\n","/workspace/Physica-Interfae/src/hooks/useMachineTime.ts",["4091"],"import useInterval from 'lib/hooks/useInterval'\nimport { useCallback, useState } from 'react'\n\nconst useMachineTimeMs = (updateInterval: number): number => {\n  const [now, setNow] = useState(Date.now())\n\n  useInterval(\n    useCallback(() => {\n      setNow(Date.now())\n    }, []),\n    updateInterval\n  )\n  return now\n}\n\nexport default useMachineTimeMs\n","/workspace/Physica-Interfae/src/hooks/useIsLandingPage.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageHeader.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageTable.tsx",[],"/workspace/Physica-Interfae/src/lib/hooks/useTokenList/utils.ts",[],"/workspace/Physica-Interfae/src/state/burn/v3/actions.ts",[],"/workspace/Physica-Interfae/src/state/burn/actions.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/DataPageDescription.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenDetails/TimeSelector.tsx",[],"/workspace/Physica-Interfae/src/tracing/errors.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/TabbedComponent.tsx",[],"/workspace/Physica-Interfae/src/featureFlags/flags/traceJsonRpc.ts",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/ContentRow.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/MarketplaceRow.tsx",["4092","4093","4094","4095"],"// eslint-disable-next-line no-restricted-imports\nimport { t } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { RowsCollpsedIcon, RowsExpandedIcon } from 'nft/components/icons'\nimport {\n  getMarketplaceFee,\n  getRoyalty,\n  useHandleGlobalPriceToggle,\n  useSyncPriceWithGlobalMethod,\n} from 'nft/components/profile/list/utils'\nimport { useSellAsset } from 'nft/hooks'\nimport { ListingMarket, WalletAsset } from 'nft/types'\nimport { formatEth, formatUsdPrice } from 'nft/utils/currency'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { Dispatch, DispatchWithoutAction, useCallback, useEffect, useMemo, useReducer, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\n\nimport { PriceTextInput } from './PriceTextInput'\nimport { RoyaltyTooltip } from './RoyaltyTooltip'\nimport { RemoveIconWrap, SetPriceMethod } from './shared'\n\nconst LastPriceInfo = styled(Column)`\n  text-align: left;\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    display: flex;\n  }\n`\n\nconst FloorPriceInfo = styled(Column)`\n  text-align: left;\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst RemoveMarketplaceWrap = styled(RemoveIconWrap)`\n  top: 8px;\n  left: 16px;\n  z-index: 3;\n`\n\nconst MarketIconsWrapper = styled(Row)`\n  position: relative;\n  margin-right: 12px;\n  width: 44px;\n  justify-content: flex-end;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n`\n\nconst MarketIconWrapper = styled(Column)`\n  position: relative;\n  cursor: pointer;\n`\n\nconst MarketIcon = styled.img<{ index: number }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  object-fit: cover;\n  z-index: ${({ index }) => 2 - index};\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -8}px`};\n  outline: 1px solid ${({ theme }) => theme.backgroundInteractive};\n`\n\nconst ExpandMarketIconWrapper = styled.div`\n  cursor: pointer;\n  margin-left: 4px;\n  height: 28px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n`\n\nconst FeeColumnWrapper = styled(Column)`\n  flex: 1;\n  align-items: flex-end;\n  display: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst FeeWrapper = styled.div`\n  width: min-content;\n  white-space: nowrap;\n`\n\nconst ReturnColumn = styled(Column)`\n  flex: 1.5;\n  display: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\ninterface MarketplaceRowProps {\n  globalPriceMethod?: SetPriceMethod\n  globalPrice?: number\n  setGlobalPrice: Dispatch<number | undefined>\n  selectedMarkets: ListingMarket[]\n  removeMarket?: () => void\n  asset: WalletAsset\n  expandMarketplaceRows?: boolean\n  rowHovered?: boolean\n  toggleExpandMarketplaceRows: DispatchWithoutAction\n}\n\nexport const MarketplaceRow = ({\n  globalPriceMethod,\n  globalPrice,\n  setGlobalPrice,\n  selectedMarkets,\n  removeMarket = undefined,\n  asset,\n  expandMarketplaceRows,\n  toggleExpandMarketplaceRows,\n  rowHovered,\n}: MarketplaceRowProps) => {\n  const setAssetListPrice = useSellAsset((state) => state.setAssetListPrice)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n  const [marketIconHovered, toggleMarketIconHovered] = useReducer((s) => !s, false)\n  const [marketRowHovered, toggleMarketRowHovered] = useReducer((s) => !s, false)\n  const [listPrice, setListPrice] = useState<number | undefined>(\n    () =>\n      asset.newListings?.find((listing) =>\n        expandMarketplaceRows ? listing.marketplace.name === selectedMarkets?.[0].name : !!listing.price\n      )?.price\n  )\n  const [globalOverride, setGlobalOverride] = useState(false)\n\n  const showGlobalPrice = globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride\n  const price = showGlobalPrice ? globalPrice : listPrice\n  const setPrice = useCallback(\n    (price?: number) => {\n      showGlobalPrice ? setGlobalPrice(price) : setListPrice(price)\n      for (const marketplace of selectedMarkets) setAssetListPrice(asset, price, marketplace)\n    },\n    [asset, selectedMarkets, setAssetListPrice, setGlobalPrice, showGlobalPrice]\n  )\n\n  const fees = useMemo(() => {\n    if (selectedMarkets.length === 1) {\n      return getRoyalty(selectedMarkets[0], asset) + getMarketplaceFee(selectedMarkets[0], asset)\n    } else {\n      let max = 0\n      for (const selectedMarket of selectedMarkets) {\n        const fee = getRoyalty(selectedMarket, asset) + getMarketplaceFee(selectedMarket, asset)\n        max = Math.max(fee, max)\n      }\n\n      return max\n    }\n  }, [asset, selectedMarkets])\n\n  const feeInEth = price && (price * fees) / 100\n  const userReceives = price && feeInEth && price - feeInEth\n\n  useHandleGlobalPriceToggle(globalOverride, setListPrice, setPrice, listPrice, globalPrice)\n  useSyncPriceWithGlobalMethod(\n    asset,\n    setListPrice,\n    setGlobalPrice,\n    setGlobalOverride,\n    listPrice,\n    globalPrice,\n    globalPriceMethod\n  )\n\n  // When in Same Price Mode and not overriding, update local price when global price changes\n  useEffect(() => {\n    if (showGlobalPrice) {\n      setPrice(globalPrice)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalPrice])\n\n  return (\n    <Row onMouseEnter={toggleMarketRowHovered} onMouseLeave={toggleMarketRowHovered}>\n      <FloorPriceInfo>\n        <ThemedText.BodyPrimary color=\"textSecondary\" lineHeight=\"24px\">\n          {asset.floorPrice ? `${asset.floorPrice.toFixed(3)} ETH` : '-'}\n        </ThemedText.BodyPrimary>\n      </FloorPriceInfo>\n      <LastPriceInfo>\n        <ThemedText.BodyPrimary color=\"textSecondary\" lineHeight=\"24px\">\n          {asset.lastPrice ? `${asset.lastPrice.toFixed(3)} ETH` : '-'}\n        </ThemedText.BodyPrimary>\n      </LastPriceInfo>\n\n      <Row flex=\"2\">\n        {(expandMarketplaceRows || selectedMarkets.length > 1) && (\n          <MarketIconsWrapper onMouseEnter={toggleMarketIconHovered} onMouseLeave={toggleMarketIconHovered}>\n            {selectedMarkets.map((market, index) => (\n              <MarketIconWrapper\n                key={market.name + asset.collection?.address + asset.tokenId}\n                onClick={(e) => {\n                  e.stopPropagation()\n                  removeAssetMarketplace(asset, market)\n                  removeMarket && removeMarket()\n                }}\n              >\n                <MarketIcon alt={market.name} src={market.icon} index={index} />\n                <RemoveMarketplaceWrap hovered={marketIconHovered && (expandMarketplaceRows ?? false)}>\n                  <img width=\"20px\" src=\"/nft/svgs/minusCircle.svg\" alt=\"Remove item\" />\n                </RemoveMarketplaceWrap>\n              </MarketIconWrapper>\n            ))}\n          </MarketIconsWrapper>\n        )}\n        <PriceTextInput\n          listPrice={price}\n          setListPrice={setPrice}\n          isGlobalPrice={showGlobalPrice}\n          setGlobalOverride={setGlobalOverride}\n          globalOverride={globalOverride}\n          asset={asset}\n        />\n        {rowHovered && ((expandMarketplaceRows && marketRowHovered) || selectedMarkets.length > 1) && (\n          <ExpandMarketIconWrapper onClick={toggleExpandMarketplaceRows}>\n            {expandMarketplaceRows ? <RowsExpandedIcon /> : <RowsCollpsedIcon />}\n          </ExpandMarketIconWrapper>\n        )}\n      </Row>\n\n      <FeeColumnWrapper>\n        <MouseoverTooltip\n          text={<RoyaltyTooltip selectedMarkets={selectedMarkets} asset={asset} fees={feeInEth} />}\n          placement=\"left\"\n        >\n          <FeeWrapper>\n            <ThemedText.BodyPrimary color=\"textSecondary\">\n              {fees > 0 ? `${fees.toFixed(2)}${selectedMarkets.length > 1 ? t`% max` : '%'}` : '--%'}\n            </ThemedText.BodyPrimary>\n          </FeeWrapper>\n        </MouseoverTooltip>\n      </FeeColumnWrapper>\n\n      <ReturnColumn>\n        <EthPriceDisplay ethPrice={userReceives} />\n      </ReturnColumn>\n    </Row>\n  )\n}\n\nconst EthPriceDisplay = ({ ethPrice = 0 }: { ethPrice?: number }) => {\n  const [ethConversion, setEthConversion] = useState(3000)\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthConversion(price ?? 0)\n    })\n  }, [])\n\n  return (\n    <Row width=\"100%\" justify=\"flex-end\">\n      <ThemedText.BodyPrimary lineHeight=\"24px\" color={ethPrice ? 'textPrimary' : 'textSecondary'} textAlign=\"right\">\n        {ethPrice !== 0 ? (\n          <Column>\n            <span>{formatEth(ethPrice)} ETH</span>\n            <ThemedText.BodyPrimary color=\"textSecondary\">\n              {formatUsdPrice(ethPrice * ethConversion)}\n            </ThemedText.BodyPrimary>\n          </Column>\n        ) : (\n          '- ETH'\n        )}\n      </ThemedText.BodyPrimary>\n    </Row>\n  )\n}\n","/workspace/Physica-Interfae/src/components/swap/RouterLabel.tsx",[],"/workspace/Physica-Interfae/src/theme/deprecatedColors.ts",[],"/workspace/Physica-Interfae/src/components/Web3Status/index.tsx",["4096","4097","4098"],"import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport PortfolioDrawer, { useAccountDrawer } from 'components/AccountDrawer'\nimport PrefetchBalancesWrapper from 'components/AccountDrawer/PrefetchBalancesWrapper'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport { IconWrapper } from 'components/Identicon/StatusIcon'\nimport { useGetConnection } from 'connection'\nimport { Portal } from 'nft/components/common/Portal'\nimport { useIsNftClaimAvailable } from 'nft/hooks/useIsNftClaimAvailable'\nimport { darken } from 'polished'\nimport { useCallback, useMemo } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport { useAppSelector } from 'state/hooks'\nimport styled from 'styled-components/macro'\nimport { colors } from 'theme/colors'\nimport { flexRowNoWrap } from 'theme/styles'\n\nimport { isTransactionRecent, useAllTransactions } from '../../state/transactions/hooks'\nimport { TransactionDetails } from '../../state/transactions/types'\nimport { shortenAddress } from '../../utils'\nimport { ButtonSecondary } from '../Button'\nimport StatusIcon from '../Identicon/StatusIcon'\nimport { RowBetween } from '../Row'\n\n// https://stackoverflow.com/a/31617326\nconst FULL_BORDER_RADIUS = 9999\n\nconst Web3StatusGeneric = styled(ButtonSecondary)`\n  ${flexRowNoWrap};\n  width: 100%;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: ${FULL_BORDER_RADIUS}px;\n  cursor: pointer;\n  user-select: none;\n  height: 36px;\n  margin-right: 2px;\n  margin-left: 2px;\n  :focus {\n    outline: none;\n  }\n`\nconst Web3StatusError = styled(Web3StatusGeneric)`\n  background-color: ${({ theme }) => theme.accentFailure};\n  border: 1px solid ${({ theme }) => theme.accentFailure};\n  color: ${({ theme }) => theme.white};\n  font-weight: 500;\n  :hover,\n  :focus {\n    background-color: ${({ theme }) => darken(0.1, theme.accentFailure)};\n  }\n`\n\nconst Web3StatusConnectWrapper = styled.div<{ faded?: boolean }>`\n  ${flexRowNoWrap};\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentActionSoft};\n  border-radius: ${FULL_BORDER_RADIUS}px;\n  border: none;\n  padding: 0;\n  height: 40px;\n\n  color: ${({ theme }) => theme.accentAction};\n  :hover {\n    color: ${({ theme }) => theme.accentActionSoft};\n    stroke: ${({ theme }) => theme.accentActionSoft};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `${duration.fast} color ${timing.in}`};\n`\n\nconst Web3StatusConnected = styled(Web3StatusGeneric)<{\n  pending?: boolean\n  isClaimAvailable?: boolean\n}>`\n  background-color: ${({ pending, theme }) => (pending ? theme.accentAction : theme.deprecated_bg1)};\n  border: 1px solid ${({ pending, theme }) => (pending ? theme.accentAction : theme.deprecated_bg1)};\n  color: ${({ pending, theme }) => (pending ? theme.white : theme.textPrimary)};\n  font-weight: 500;\n  border: ${({ isClaimAvailable }) => isClaimAvailable && `1px solid ${colors.purple300}`};\n  :hover,\n  :focus {\n    border: 1px solid ${({ theme }) => darken(0.05, theme.deprecated_bg3)};\n\n    :focus {\n      border: 1px solid\n        ${({ pending, theme }) =>\n          pending ? darken(0.1, theme.accentAction) : darken(0.1, theme.backgroundInteractive)};\n    }\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    width: ${({ pending }) => !pending && '36px'};\n\n    ${IconWrapper} {\n      margin-right: 0;\n    }\n  }\n`\n\nconst AddressAndChevronContainer = styled.div`\n  display: flex;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.navSearchInputVisible}px`}) {\n    display: none;\n  }\n`\n\nconst Text = styled.p`\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0 0.5rem 0 0.25rem;\n  font-size: 1rem;\n  width: fit-content;\n  font-weight: 500;\n`\n\nconst NetworkIcon = styled(AlertTriangle)`\n  margin-left: 0.25rem;\n  margin-right: 0.5rem;\n  width: 16px;\n  height: 16px;\n`\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nconst StyledConnectButton = styled.button`\n  background: var(--color-accent, #3671E9);\n  box-shadow: 0px 4px 4px 0px rgba(54, 113, 233, 0.60);\n  border: none;\n  // border-top-left-radius: ${FULL_BORDER_RADIUS}px;\n  // border-bottom-left-radius: ${FULL_BORDER_RADIUS}px;\n  border-radius: ${FULL_BORDER_RADIUS}px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 16px;\n  padding: 10px 12px;\n  color: #FFF;\n`\n\nfunction Web3StatusInner() {\n  const { account, connector, chainId, ENSName } = useWeb3React()\n  const getConnection = useGetConnection()\n  const connection = getConnection(connector)\n  const [, toggleAccountDrawer] = useAccountDrawer()\n  const handleWalletDropdownClick = useCallback(() => {\n    sendAnalyticsEvent(InterfaceEventName.ACCOUNT_DROPDOWN_BUTTON_CLICKED)\n    toggleAccountDrawer()\n  }, [toggleAccountDrawer])\n  const isClaimAvailable = useIsNftClaimAvailable((state) => state.isClaimAvailable)\n\n  const error = useAppSelector((state) => state.connection.errorByConnectionType[getConnection(connector).type])\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt).map((tx) => tx.hash)\n\n  const hasPendingTransactions = !!pending.length\n\n  if (!chainId) {\n    return null\n  } else if (error) {\n    return (\n      <Web3StatusError onClick={handleWalletDropdownClick}>\n        <NetworkIcon />\n        <Text>\n          <Trans>Error</Trans>\n        </Text>\n      </Web3StatusError>\n    )\n  } else if (account) {\n    return (\n      <TraceEvent\n        events={[BrowserEvent.onClick]}\n        name={InterfaceEventName.MINI_PORTFOLIO_TOGGLED}\n        properties={{ type: 'open' }}\n      >\n        <Web3StatusConnected\n          data-testid=\"web3-status-connected\"\n          onClick={handleWalletDropdownClick}\n          pending={hasPendingTransactions}\n          isClaimAvailable={isClaimAvailable}\n        >\n          {!hasPendingTransactions && <StatusIcon size={24} connection={connection} showMiniIcons={false} />}\n          {hasPendingTransactions ? (\n            <RowBetween>\n              <Text>\n                <Trans>{pending?.length} Pending</Trans>\n              </Text>{' '}\n              <Loader stroke=\"white\" />\n            </RowBetween>\n          ) : (\n            <AddressAndChevronContainer>\n              <Text>{ENSName || shortenAddress(account)}</Text>\n            </AddressAndChevronContainer>\n          )}\n        </Web3StatusConnected>\n      </TraceEvent>\n    )\n  } else {\n    return (\n      <TraceEvent\n        events={[BrowserEvent.onClick]}\n        name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\n        element={InterfaceElementName.CONNECT_WALLET_BUTTON}\n      >\n        <Web3StatusConnectWrapper\n          tabIndex={0}\n          faded={!account}\n          onKeyPress={(e) => e.key === 'Enter' && handleWalletDropdownClick()}\n          onClick={handleWalletDropdownClick}\n        >\n          <StyledConnectButton tabIndex={-1} data-testid=\"navbar-connect-wallet\">\n            <Trans>Connect Wallet</Trans>\n          </StyledConnectButton>\n        </Web3StatusConnectWrapper>\n      </TraceEvent>\n    )\n  }\n}\n\nexport default function Web3Status() {\n  return (\n    <PrefetchBalancesWrapper>\n      <Web3StatusInner />\n      <Portal>\n        <PortfolioDrawer />\n      </Portal>\n    </PrefetchBalancesWrapper>\n  )\n}\n","/workspace/Physica-Interfae/src/state/logging.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/shared.ts",[],"/workspace/Physica-Interfae/src/featureFlags/flags/dummyFeatureGate.ts",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/OffersTableContent.tsx",[],"/workspace/Physica-Interfae/src/components/LiquidityChartRangeInput/svg.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/ListingsTableContent.tsx",[],"/workspace/Physica-Interfae/src/nft/components/details/detailsV2/ActivityTableContent.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenTable/TimeSelector.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/Modal/BelowFloorWarningModal.tsx",[],"/workspace/Physica-Interfae/src/utils/swapErrorToUserReadableMessage.tsx",[],"/workspace/Physica-Interfae/src/hooks/useV2LiquidityTokenPermit.ts",["4099"],"import { CurrencyAmount, Token } from '@uniswap/sdk-core'\n\nimport { PermitInfo, PermitType, useERC20Permit } from './useERC20Permit'\nimport useTransactionDeadline from './useTransactionDeadline'\n\nconst REMOVE_V2_LIQUIDITY_PERMIT_INFO: PermitInfo = {\n  version: '1',\n  name: 'Uniswap V2',\n  type: PermitType.AMOUNT,\n}\n\nexport function useV2LiquidityTokenPermit(\n  liquidityAmount: CurrencyAmount<Token> | null | undefined,\n  spender: string | null | undefined\n) {\n  const transactionDeadline = useTransactionDeadline()\n  return useERC20Permit(liquidityAmount, spender, transactionDeadline, REMOVE_V2_LIQUIDITY_PERMIT_INFO)\n}\n","/workspace/Physica-Interfae/src/components/AnimatedDropdown/index.tsx",[],"/workspace/Physica-Interfae/src/nft/css/cssStringFromTheme.ts",[],"/workspace/Physica-Interfae/src/components/RoutingDiagram/RoutingDiagram.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/RoyaltyTooltip.tsx",[],"/workspace/Physica-Interfae/src/components/swap/AutoRouterIcon.tsx",[],"/workspace/Physica-Interfae/src/nft/components/profile/list/PriceTextInput.tsx",[],"/workspace/Physica-Interfae/src/pages/Swap/redirects.tsx",[],"/workspace/Physica-Interfae/src/pages/RemoveLiquidity/V3.tsx",["4100"],"import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendEvent } from 'components/analytics'\nimport RangeBadge from 'components/Badge/RangeBadge'\nimport { ButtonConfirmed, ButtonPrimary } from 'components/Button'\nimport { LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport { Break } from 'components/earn/styled'\nimport FormattedCurrencyAmount from 'components/FormattedCurrencyAmount'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { AddRemoveTabs } from 'components/NavigationTabs'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Row'\nimport Slider from 'components/Slider'\nimport Toggle from 'components/Toggle'\nimport { isSupportedChain } from 'constants/chains'\nimport { useV3NFTPositionManagerContract } from 'hooks/useContract'\nimport useDebouncedChangeHandler from 'hooks/useDebouncedChangeHandler'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport { useV3PositionFromTokenId } from 'hooks/useV3Positions'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { PositionPageUnsupportedContent } from 'pages/Pool/PositionPage'\nimport { useCallback, useMemo, useState } from 'react'\nimport { Navigate, useLocation, useParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { useBurnV3ActionHandlers, useBurnV3State, useDerivedV3BurnInfo } from 'state/burn/v3/hooks'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { useUserSlippageToleranceWithDefault } from 'state/user/hooks'\nimport { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { TransactionType } from '../../state/transactions/types'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { currencyId } from '../../utils/currencyId'\nimport AppBody from '../AppBody'\nimport { ResponsiveHeaderText, SmallMaxButton, Wrapper } from './styled'\n\nconst DEFAULT_REMOVE_V3_LIQUIDITY_SLIPPAGE_TOLERANCE = new Percent(5, 100)\n\n// redirect invalid tokenIds\nexport default function RemoveLiquidityV3() {\n  const { chainId } = useWeb3React()\n  const { tokenId } = useParams<{ tokenId: string }>()\n  const location = useLocation()\n  const parsedTokenId = useMemo(() => {\n    try {\n      return BigNumber.from(tokenId)\n    } catch {\n      return null\n    }\n  }, [tokenId])\n\n  if (parsedTokenId === null || parsedTokenId.eq(0)) {\n    return <Navigate to={{ ...location, pathname: '/pools' }} replace />\n  }\n\n  if (isSupportedChain(chainId)) {\n    return <Remove tokenId={parsedTokenId} />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\nfunction Remove({ tokenId }: { tokenId: BigNumber }) {\n  const { position } = useV3PositionFromTokenId(tokenId)\n  const theme = useTheme()\n  const { account, chainId, provider } = useWeb3React()\n\n  // flag for receiving WETH\n  const [receiveWETH, setReceiveWETH] = useState(false)\n  const nativeCurrency = useNativeCurrency()\n  const nativeWrappedSymbol = nativeCurrency.wrapped.symbol\n\n  // burn state\n  const { percent } = useBurnV3State()\n  const {\n    position: positionSDK,\n    liquidityPercentage,\n    liquidityValue0,\n    liquidityValue1,\n    feeValue0,\n    feeValue1,\n    outOfRange,\n    error,\n  } = useDerivedV3BurnInfo(position, receiveWETH)\n  const { onPercentSelect } = useBurnV3ActionHandlers()\n\n  const removed = position?.liquidity?.eq(0)\n\n  // boilerplate for the slider\n  const [percentForSlider, onPercentSelectForSlider] = useDebouncedChangeHandler(percent, onPercentSelect)\n\n  const deadline = useTransactionDeadline() // custom from users settings\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_REMOVE_V3_LIQUIDITY_SLIPPAGE_TOLERANCE) // custom from users\n\n  const [showConfirm, setShowConfirm] = useState(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false)\n  const [txnHash, setTxnHash] = useState<string | undefined>()\n  const addTransaction = useTransactionAdder()\n  const positionManager = useV3NFTPositionManagerContract()\n  const burn = useCallback(async () => {\n    setAttemptingTxn(true)\n    if (\n      !positionManager ||\n      !liquidityValue0 ||\n      !liquidityValue1 ||\n      !deadline ||\n      !account ||\n      !chainId ||\n      !positionSDK ||\n      !liquidityPercentage ||\n      !provider\n    ) {\n      return\n    }\n\n    // we fall back to expecting 0 fees in case the fetch fails, which is safe in the\n    // vast majority of cases\n    const { calldata, value } = NonfungiblePositionManager.removeCallParameters(positionSDK, {\n      tokenId: tokenId.toString(),\n      liquidityPercentage,\n      slippageTolerance: allowedSlippage,\n      deadline: deadline.toString(),\n      collectOptions: {\n        expectedCurrencyOwed0: feeValue0 ?? CurrencyAmount.fromRawAmount(liquidityValue0.currency, 0),\n        expectedCurrencyOwed1: feeValue1 ?? CurrencyAmount.fromRawAmount(liquidityValue1.currency, 0),\n        recipient: account,\n      },\n    })\n\n    const txn = {\n      to: positionManager.address,\n      data: calldata,\n      value,\n    }\n\n    provider\n      .getSigner()\n      .estimateGas(txn)\n      .then((estimate) => {\n        const newTxn = {\n          ...txn,\n          gasLimit: calculateGasMargin(estimate),\n        }\n\n        return provider\n          .getSigner()\n          .sendTransaction(newTxn)\n          .then((response: TransactionResponse) => {\n            sendEvent({\n              category: 'Liquidity',\n              action: 'RemoveV3',\n              label: [liquidityValue0.currency.symbol, liquidityValue1.currency.symbol].join('/'),\n            })\n            setTxnHash(response.hash)\n            setAttemptingTxn(false)\n            addTransaction(response, {\n              type: TransactionType.REMOVE_LIQUIDITY_V3,\n              baseCurrencyId: currencyId(liquidityValue0.currency),\n              quoteCurrencyId: currencyId(liquidityValue1.currency),\n              expectedAmountBaseRaw: liquidityValue0.quotient.toString(),\n              expectedAmountQuoteRaw: liquidityValue1.quotient.toString(),\n            })\n          })\n      })\n      .catch((error) => {\n        setAttemptingTxn(false)\n        console.error(error)\n      })\n  }, [\n    positionManager,\n    liquidityValue0,\n    liquidityValue1,\n    deadline,\n    account,\n    chainId,\n    feeValue0,\n    feeValue1,\n    positionSDK,\n    liquidityPercentage,\n    provider,\n    tokenId,\n    allowedSlippage,\n    addTransaction,\n  ])\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txnHash) {\n      onPercentSelectForSlider(0)\n    }\n    setAttemptingTxn(false)\n    setTxnHash('')\n  }, [onPercentSelectForSlider, txnHash])\n\n  const pendingText = (\n    <Trans>\n      Removing {liquidityValue0?.toSignificant(6)} {liquidityValue0?.currency?.symbol} and{' '}\n      {liquidityValue1?.toSignificant(6)} {liquidityValue1?.currency?.symbol}\n    </Trans>\n  )\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"sm\" style={{ padding: '16px' }}>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize={16} fontWeight={500}>\n            <Trans>Pooled {liquidityValue0?.currency?.symbol}:</Trans>\n          </Text>\n          <RowFixed>\n            <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n              {liquidityValue0 && <FormattedCurrencyAmount currencyAmount={liquidityValue0} />}\n            </Text>\n            <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={liquidityValue0?.currency} />\n          </RowFixed>\n        </RowBetween>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize={16} fontWeight={500}>\n            <Trans>Pooled {liquidityValue1?.currency?.symbol}:</Trans>\n          </Text>\n          <RowFixed>\n            <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n              {liquidityValue1 && <FormattedCurrencyAmount currencyAmount={liquidityValue1} />}\n            </Text>\n            <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={liquidityValue1?.currency} />\n          </RowFixed>\n        </RowBetween>\n        {feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0) ? (\n          <>\n            <ThemedText.DeprecatedItalic fontSize={12} color={theme.textSecondary} textAlign=\"left\" padding=\"8px 0 0 0\">\n              <Trans>You will also collect fees earned from this position.</Trans>\n            </ThemedText.DeprecatedItalic>\n            <RowBetween>\n              <Text fontSize={16} fontWeight={500}>\n                <Trans>{feeValue0?.currency?.symbol} Fees Earned:</Trans>\n              </Text>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n                  {feeValue0 && <FormattedCurrencyAmount currencyAmount={feeValue0} />}\n                </Text>\n                <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={feeValue0?.currency} />\n              </RowFixed>\n            </RowBetween>\n            <RowBetween>\n              <Text fontSize={16} fontWeight={500}>\n                <Trans>{feeValue1?.currency?.symbol} Fees Earned:</Trans>\n              </Text>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n                  {feeValue1 && <FormattedCurrencyAmount currencyAmount={feeValue1} />}\n                </Text>\n                <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={feeValue1?.currency} />\n              </RowFixed>\n            </RowBetween>\n          </>\n        ) : null}\n        <ButtonPrimary mt=\"16px\" onClick={burn}>\n          <Trans>Remove</Trans>\n        </ButtonPrimary>\n      </AutoColumn>\n    )\n  }\n\n  const showCollectAsWeth = Boolean(\n    liquidityValue0?.currency &&\n      liquidityValue1?.currency &&\n      (liquidityValue0.currency.isNative ||\n        liquidityValue1.currency.isNative ||\n        WRAPPED_NATIVE_CURRENCY[liquidityValue0.currency.chainId]?.equals(liquidityValue0.currency.wrapped) ||\n        WRAPPED_NATIVE_CURRENCY[liquidityValue1.currency.chainId]?.equals(liquidityValue1.currency.wrapped))\n  )\n  return (\n    <AutoColumn>\n      <TransactionConfirmationModal\n        isOpen={showConfirm}\n        onDismiss={handleDismissConfirmation}\n        attemptingTxn={attemptingTxn}\n        hash={txnHash ?? ''}\n        content={() => (\n          <ConfirmationModalContent\n            title={<Trans>Remove Liquidity</Trans>}\n            onDismiss={handleDismissConfirmation}\n            topContent={modalHeader}\n          />\n        )}\n        pendingText={pendingText}\n      />\n      <AppBody $maxWidth=\"unset\">\n        <AddRemoveTabs\n          creating={false}\n          adding={false}\n          positionID={tokenId.toString()}\n          defaultSlippage={DEFAULT_REMOVE_V3_LIQUIDITY_SLIPPAGE_TOLERANCE}\n        />\n        <Wrapper>\n          {position ? (\n            <AutoColumn gap=\"lg\">\n              <RowBetween>\n                <RowFixed>\n                  <DoubleCurrencyLogo\n                    currency0={feeValue0?.currency}\n                    currency1={feeValue1?.currency}\n                    size={20}\n                    margin={true}\n                  />\n                  <ThemedText.DeprecatedLabel\n                    ml=\"10px\"\n                    fontSize=\"20px\"\n                  >{`${feeValue0?.currency?.symbol}/${feeValue1?.currency?.symbol}`}</ThemedText.DeprecatedLabel>\n                </RowFixed>\n                <RangeBadge removed={removed} inRange={!outOfRange} />\n              </RowBetween>\n              <LightCard>\n                <AutoColumn gap=\"md\">\n                  <ThemedText.DeprecatedMain fontWeight={400}>\n                    <Trans>Amount</Trans>\n                  </ThemedText.DeprecatedMain>\n                  <RowBetween>\n                    <ResponsiveHeaderText>\n                      <Trans>{percentForSlider}%</Trans>\n                    </ResponsiveHeaderText>\n                    <AutoRow gap=\"4px\" justify=\"flex-end\">\n                      <SmallMaxButton onClick={() => onPercentSelect(25)} width=\"20%\">\n                        <Trans>25%</Trans>\n                      </SmallMaxButton>\n                      <SmallMaxButton onClick={() => onPercentSelect(50)} width=\"20%\">\n                        <Trans>50%</Trans>\n                      </SmallMaxButton>\n                      <SmallMaxButton onClick={() => onPercentSelect(75)} width=\"20%\">\n                        <Trans>75%</Trans>\n                      </SmallMaxButton>\n                      <SmallMaxButton onClick={() => onPercentSelect(100)} width=\"20%\">\n                        <Trans>Max</Trans>\n                      </SmallMaxButton>\n                    </AutoRow>\n                  </RowBetween>\n                  <Slider value={percentForSlider} onChange={onPercentSelectForSlider} />\n                </AutoColumn>\n              </LightCard>\n              <LightCard>\n                <AutoColumn gap=\"md\">\n                  <RowBetween>\n                    <Text fontSize={16} fontWeight={500}>\n                      <Trans>Pooled {liquidityValue0?.currency?.symbol}:</Trans>\n                    </Text>\n                    <RowFixed>\n                      <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n                        {liquidityValue0 && <FormattedCurrencyAmount currencyAmount={liquidityValue0} />}\n                      </Text>\n                      <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={liquidityValue0?.currency} />\n                    </RowFixed>\n                  </RowBetween>\n                  <RowBetween>\n                    <Text fontSize={16} fontWeight={500}>\n                      <Trans>Pooled {liquidityValue1?.currency?.symbol}:</Trans>\n                    </Text>\n                    <RowFixed>\n                      <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n                        {liquidityValue1 && <FormattedCurrencyAmount currencyAmount={liquidityValue1} />}\n                      </Text>\n                      <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={liquidityValue1?.currency} />\n                    </RowFixed>\n                  </RowBetween>\n                  {feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0) ? (\n                    <>\n                      <Break />\n                      <RowBetween>\n                        <Text fontSize={16} fontWeight={500}>\n                          <Trans>{feeValue0?.currency?.symbol} Fees Earned:</Trans>\n                        </Text>\n                        <RowFixed>\n                          <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n                            {feeValue0 && <FormattedCurrencyAmount currencyAmount={feeValue0} />}\n                          </Text>\n                          <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={feeValue0?.currency} />\n                        </RowFixed>\n                      </RowBetween>\n                      <RowBetween>\n                        <Text fontSize={16} fontWeight={500}>\n                          <Trans>{feeValue1?.currency?.symbol} Fees Earned:</Trans>\n                        </Text>\n                        <RowFixed>\n                          <Text fontSize={16} fontWeight={500} marginLeft=\"6px\">\n                            {feeValue1 && <FormattedCurrencyAmount currencyAmount={feeValue1} />}\n                          </Text>\n                          <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={feeValue1?.currency} />\n                        </RowFixed>\n                      </RowBetween>\n                    </>\n                  ) : null}\n                </AutoColumn>\n              </LightCard>\n\n              {showCollectAsWeth && (\n                <RowBetween>\n                  <ThemedText.DeprecatedMain>\n                    <Trans>Collect as {nativeWrappedSymbol}</Trans>\n                  </ThemedText.DeprecatedMain>\n                  <Toggle\n                    id=\"receive-as-weth\"\n                    isActive={receiveWETH}\n                    toggle={() => setReceiveWETH((receiveWETH) => !receiveWETH)}\n                  />\n                </RowBetween>\n              )}\n\n              <div style={{ display: 'flex' }}>\n                <AutoColumn gap=\"md\" style={{ flex: '1' }}>\n                  <ButtonConfirmed\n                    confirmed={false}\n                    disabled={removed || percent === 0 || !liquidityValue0}\n                    onClick={() => setShowConfirm(true)}\n                  >\n                    {removed ? <Trans>Closed</Trans> : error ?? <Trans>Remove</Trans>}\n                  </ButtonConfirmed>\n                </AutoColumn>\n              </div>\n            </AutoColumn>\n          ) : (\n            <Loader />\n          )}\n        </Wrapper>\n      </AppBody>\n    </AutoColumn>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/Pool/v2.tsx",["4101","4102","4103","4104","4105","4106","4107"],"import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { UNSUPPORTED_V2POOL_CHAIN_IDS } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\nimport { ChevronsRight } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled, { useTheme } from 'styled-components/macro'\n\nimport { ButtonOutlined, ButtonPrimary, ButtonSecondary } from '../../components/Button'\nimport Card from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport { CardBGImage, CardNoise, CardSection, DataCard } from '../../components/earn/styled'\nimport FullPositionCard from '../../components/PositionCard'\nimport { RowBetween, RowFixed } from '../../components/Row'\nimport { Dots } from '../../components/swap/styleds'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { BIG_INT_ZERO } from '../../constants/misc'\nimport { useV2Pairs } from '../../hooks/useV2Pairs'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\nimport { useStakingInfo } from '../../state/stake/hooks'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport { ExternalLink, HideSmall, ThemedText } from '../../theme'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    padding: 0px 8px;\n  `};\n`\n\nconst VoteCard = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n  overflow: hidden;\n`\n\nconst TitleRow = styled(RowBetween)`\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    flex-wrap: wrap;\n    gap: 12px;\n    width: 100%;\n    flex-direction: column-reverse;\n  `};\n`\n\nconst ButtonRow = styled(RowFixed)`\n  gap: 8px;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 100%;\n    flex-direction: row-reverse;\n    justify-content: space-between;\n  `};\n`\n\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\n  height: 40px;\n  width: fit-content;\n  border-radius: 12px;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 48%;\n  `};\n`\n\nconst ResponsiveButtonSecondary = styled(ButtonSecondary)`\n  height: 40px;\n  width: fit-content;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 48%;\n  `};\n`\n\nconst EmptyProposals = styled.div`\n  border: 1px solid ${({ theme }) => theme.deprecated_text4};\n  padding: 16px 12px;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Layer2Prompt = styled(EmptyProposals)`\n  margin-top: 16px;\n`\n\nexport default function Pool() {\n  const theme = useTheme()\n  const { account, chainId } = useWeb3React()\n  const unsupportedV2Network = chainId && UNSUPPORTED_V2POOL_CHAIN_IDS.includes(chainId)\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  let trackedTokenPairs = useTrackedTokenPairs()\n  if (unsupportedV2Network) trackedTokenPairs = []\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs]\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens]\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\n  )\n\n  const v2Pairs = useV2Pairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  // show liquidity even if its deposited in rewards contract\n  const stakingInfo = useStakingInfo()\n  const stakingInfosWithBalance = stakingInfo?.filter((pool) =>\n    JSBI.greaterThan(pool.stakedAmount.quotient, BIG_INT_ZERO)\n  )\n  const stakingPairs = useV2Pairs(stakingInfosWithBalance?.map((stakingInfo) => stakingInfo.tokens))\n\n  // remove any pairs that also are included in pairs with stake in mining pool\n  const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter((v2Pair) => {\n    return (\n      stakingPairs\n        ?.map((stakingPair) => stakingPair[1])\n        .filter((stakingPair) => stakingPair?.liquidityToken.address === v2Pair.liquidityToken.address).length === 0\n    )\n  })\n\n  return (\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\n      <>\n        <PageWrapper>\n          <VoteCard>\n            <CardBGImage />\n            <CardNoise />\n            <CardSection>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <ThemedText.DeprecatedWhite fontWeight={600}>\n                    <Trans>Liquidity provider rewards</Trans>\n                  </ThemedText.DeprecatedWhite>\n                </RowBetween>\n                <RowBetween>\n                  <ThemedText.DeprecatedWhite fontSize={14}>\n                    <Trans>\n                      Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees\n                      are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\n                    </Trans>\n                  </ThemedText.DeprecatedWhite>\n                </RowBetween>\n                <ExternalLink\n                  style={{ color: theme.white, textDecoration: 'underline' }}\n                  target=\"_blank\"\n                  href=\"https://docs.uniswap.org/protocol/V2/concepts/core-concepts/pools\"\n                >\n                  <ThemedText.DeprecatedWhite fontSize={14}>\n                    <Trans>Read more about providing liquidity</Trans>\n                  </ThemedText.DeprecatedWhite>\n                </ExternalLink>\n              </AutoColumn>\n            </CardSection>\n            <CardBGImage />\n            <CardNoise />\n          </VoteCard>\n\n          {unsupportedV2Network ? (\n            <AutoColumn gap=\"lg\" justify=\"center\">\n              <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                <Layer2Prompt>\n                  <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                    <Trans>Uniswap V2 is not available on this network.</Trans>\n                  </ThemedText.DeprecatedBody>\n                </Layer2Prompt>\n              </AutoColumn>\n            </AutoColumn>\n          ) : (\n            <AutoColumn gap=\"lg\" justify=\"center\">\n              <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                <TitleRow style={{ marginTop: '1rem' }} padding=\"0\">\n                  <HideSmall>\n                    <ThemedText.DeprecatedMediumHeader style={{ marginTop: '0.5rem', justifySelf: 'flex-start' }}>\n                      <Trans>Your V2 liquidity</Trans>\n                    </ThemedText.DeprecatedMediumHeader>\n                  </HideSmall>\n                  <ButtonRow>\n                    <ResponsiveButtonSecondary as={Link} padding=\"6px 8px\" to=\"/add/v2/ETH\">\n                      <Trans>Create a pair</Trans>\n                    </ResponsiveButtonSecondary>\n                    <ResponsiveButtonPrimary id=\"find-pool-button\" as={Link} to=\"/pools/v2/find\" padding=\"6px 8px\">\n                      <Text fontWeight={500} fontSize={16}>\n                        <Trans>Import Pool</Trans>\n                      </Text>\n                    </ResponsiveButtonPrimary>\n                    <ResponsiveButtonPrimary id=\"join-pool-button\" as={Link} to=\"/add/v2/ETH\" padding=\"6px 8px\">\n                      <Text fontWeight={500} fontSize={16}>\n                        <Trans>Add V2 Liquidity</Trans>\n                      </Text>\n                    </ResponsiveButtonPrimary>\n                  </ButtonRow>\n                </TitleRow>\n\n                {!account ? (\n                  <Card padding=\"40px\">\n                    <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                      <Trans>Connect to a wallet to view your liquidity.</Trans>\n                    </ThemedText.DeprecatedBody>\n                  </Card>\n                ) : v2IsLoading ? (\n                  <EmptyProposals>\n                    <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                      <Dots>\n                        <Trans>Loading</Trans>\n                      </Dots>\n                    </ThemedText.DeprecatedBody>\n                  </EmptyProposals>\n                ) : allV2PairsWithLiquidity?.length > 0 || stakingPairs?.length > 0 ? (\n                  <>\n                    <ButtonSecondary>\n                      <RowBetween>\n                        <Trans>\n                          <ExternalLink href={'https://v2.info.uniswap.org/account/' + account}>\n                            Account analytics and accrued fees\n                          </ExternalLink>\n                          <span> ↗ </span>\n                        </Trans>\n                      </RowBetween>\n                    </ButtonSecondary>\n                    {v2PairsWithoutStakedAmount.map((v2Pair) => (\n                      <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\n                    ))}\n                    {stakingPairs.map(\n                      (stakingPair, i) =>\n                        stakingPair[1] && ( // skip pairs that arent loaded\n                          <FullPositionCard\n                            key={stakingInfosWithBalance[i].stakingRewardAddress}\n                            pair={stakingPair[1]}\n                            stakedBalance={stakingInfosWithBalance[i].stakedAmount}\n                          />\n                        )\n                    )}\n                    <RowFixed justify=\"center\" style={{ width: '100%' }}>\n                      <ButtonOutlined\n                        as={Link}\n                        to=\"/migrate/v2\"\n                        id=\"import-pool-link\"\n                        style={{\n                          padding: '8px 16px',\n                          margin: '0 4px',\n                          borderRadius: '12px',\n                          width: 'fit-content',\n                          fontSize: '14px',\n                        }}\n                      >\n                        <ChevronsRight size={16} style={{ marginRight: '8px' }} />\n                        <Trans>Migrate Liquidity to V3</Trans>\n                      </ButtonOutlined>\n                    </RowFixed>\n                  </>\n                ) : (\n                  <EmptyProposals>\n                    <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                      <Trans>No liquidity found.</Trans>\n                    </ThemedText.DeprecatedBody>\n                  </EmptyProposals>\n                )}\n              </AutoColumn>\n            </AutoColumn>\n          )}\n        </PageWrapper>\n        <SwitchLocaleLink />\n      </>\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/FilterOption.tsx",[],"/workspace/Physica-Interfae/src/hooks/useERC20Permit.ts",["4108"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo, useState } from 'react'\n\nimport { DAI, UNI, USDC_MAINNET } from '../constants/tokens'\nimport { useEIP2612Contract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\n\nexport enum PermitType {\n  AMOUNT = 1,\n  ALLOWED = 2,\n}\n\n// 20 minutes to submit after signing\nconst PERMIT_VALIDITY_BUFFER = 20 * 60\n\nexport interface PermitInfo {\n  type: PermitType\n  name: string\n  // version is optional, and if omitted, will not be included in the domain\n  version?: string\n}\n\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\nconst PERMITTABLE_TOKENS: {\n  [chainId: number]: {\n    [checksummedTokenAddress: string]: PermitInfo\n  }\n} = {\n  [SupportedChainId.MAINNET]: {\n    [USDC_MAINNET.address]: { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\n    [DAI.address]: { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\n    [UNI[SupportedChainId.MAINNET].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  [SupportedChainId.GOERLI]: {\n    [UNI[SupportedChainId.GOERLI].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n}\n\nenum UseERC20PermitState {\n  // returned for any reason, e.g. it is an argent wallet, or the currency does not support it\n  NOT_APPLICABLE,\n  LOADING,\n  NOT_SIGNED,\n  SIGNED,\n}\n\ninterface BaseSignatureData {\n  v: number\n  r: string\n  s: string\n  deadline: number\n  nonce: number\n  owner: string\n  spender: string\n  chainId: number\n  tokenAddress: string\n  permitType: PermitType\n}\n\ninterface StandardSignatureData extends BaseSignatureData {\n  amount: string\n}\n\ninterface AllowedSignatureData extends BaseSignatureData {\n  allowed: true\n}\n\ntype SignatureData = StandardSignatureData | AllowedSignatureData\n\nconst EIP712_DOMAIN_TYPE = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [\n  { name: 'name', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP2612_TYPE = [\n  { name: 'owner', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'value', type: 'uint256' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'deadline', type: 'uint256' },\n]\n\nconst PERMIT_ALLOWED_TYPE = [\n  { name: 'holder', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'expiry', type: 'uint256' },\n  { name: 'allowed', type: 'bool' },\n]\n\nexport function useERC20Permit(\n  currencyAmount: CurrencyAmount<Currency> | null | undefined,\n  spender: string | null | undefined,\n  transactionDeadline: BigNumber | undefined,\n  overridePermitInfo: PermitInfo | undefined | null\n): {\n  signatureData: SignatureData | null\n  state: UseERC20PermitState\n  gatherPermitSignature: null | (() => Promise<void>)\n} {\n  const { account, chainId, provider } = useWeb3React()\n  const tokenAddress = currencyAmount?.currency?.isToken ? currencyAmount.currency.address : undefined\n  const eip2612Contract = useEIP2612Contract(tokenAddress)\n  const isArgentWallet = useIsArgentWallet()\n  const nonceInputs = useMemo(() => [account ?? undefined], [account])\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs)\n  const permitInfo =\n    overridePermitInfo ?? (chainId && tokenAddress ? PERMITTABLE_TOKENS[chainId]?.[tokenAddress] : undefined)\n\n  const [signatureData, setSignatureData] = useState<SignatureData | null>(null)\n\n  return useMemo(() => {\n    if (\n      isArgentWallet ||\n      !currencyAmount ||\n      !eip2612Contract ||\n      !account ||\n      !chainId ||\n      !transactionDeadline ||\n      !provider ||\n      !tokenNonceState.valid ||\n      !tokenAddress ||\n      !spender ||\n      !permitInfo\n    ) {\n      return {\n        state: UseERC20PermitState.NOT_APPLICABLE,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const nonceNumber = tokenNonceState.result?.[0]?.toNumber()\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\n      return {\n        state: UseERC20PermitState.LOADING,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const isSignatureDataValid =\n      signatureData &&\n      signatureData.owner === account &&\n      signatureData.deadline >= transactionDeadline.toNumber() &&\n      signatureData.tokenAddress === tokenAddress &&\n      signatureData.nonce === nonceNumber &&\n      signatureData.spender === spender &&\n      ('allowed' in signatureData ||\n        JSBI.greaterThanOrEqual(JSBI.BigInt(signatureData.amount), currencyAmount.quotient))\n\n    return {\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\n      signatureData: isSignatureDataValid ? signatureData : null,\n      gatherPermitSignature: async function gatherPermitSignature() {\n        const allowed = permitInfo.type === PermitType.ALLOWED\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER\n        const value = currencyAmount.quotient.toString()\n\n        const message = allowed\n          ? {\n              holder: account,\n              spender,\n              allowed,\n              nonce: nonceNumber,\n              expiry: signatureDeadline,\n            }\n          : {\n              owner: account,\n              spender,\n              value,\n              nonce: nonceNumber,\n              deadline: signatureDeadline,\n            }\n        const domain = permitInfo.version\n          ? {\n              name: permitInfo.name,\n              version: permitInfo.version,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n          : {\n              name: permitInfo.name,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n        const data = JSON.stringify({\n          types: {\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE,\n          },\n          domain,\n          primaryType: 'Permit',\n          message,\n        })\n\n        return provider\n          .send('eth_signTypedData_v4', [account, data])\n          .then(splitSignature)\n          .then((signature) => {\n            setSignatureData({\n              v: signature.v,\n              r: signature.r,\n              s: signature.s,\n              deadline: signatureDeadline,\n              ...(allowed ? { allowed } : { amount: value }),\n              nonce: nonceNumber,\n              chainId,\n              owner: account,\n              spender,\n              tokenAddress,\n              permitType: permitInfo.type,\n            })\n          })\n      },\n    }\n  }, [\n    currencyAmount,\n    eip2612Contract,\n    account,\n    chainId,\n    isArgentWallet,\n    transactionDeadline,\n    provider,\n    tokenNonceState.loading,\n    tokenNonceState.valid,\n    tokenNonceState.result,\n    tokenAddress,\n    spender,\n    permitInfo,\n    signatureData,\n  ])\n}\n","/workspace/Physica-Interfae/src/nft/css/cssObjectFromTheme.ts",["4109","4110"],"import { assignInlineVars } from '@vanilla-extract/dynamic'\n\nimport { Theme, themeVars } from './sprinkles.css'\n\nconst resolveTheme = (theme: Theme | (() => Theme)) => (typeof theme === 'function' ? theme() : theme)\n\nexport function cssObjectFromTheme(\n  theme: Theme | (() => Theme),\n  { extends: baseTheme }: { extends?: Theme | (() => Theme) } = {}\n) {\n  const resolvedThemeVars = {\n    ...assignInlineVars(themeVars, resolveTheme(theme)),\n  }\n\n  if (!baseTheme) {\n    return resolvedThemeVars\n  }\n\n  const resolvedBaseThemeVars = assignInlineVars(themeVars, resolveTheme(baseTheme))\n\n  const filteredVars = Object.fromEntries(\n    Object.entries(resolvedThemeVars).filter(([varName, value]) => value !== resolvedBaseThemeVars[varName])\n  )\n\n  return filteredVars\n}\n","/workspace/Physica-Interfae/src/components/AccountDrawer/PrefetchBalancesWrapper.tsx",["4111"],"import { useWeb3React } from '@web3-react/core'\nimport { usePortfolioBalancesLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport usePrevious from 'hooks/usePrevious'\nimport { PropsWithChildren, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/types'\n\nimport { useAccountDrawer } from '.'\n\nconst isTxPending = (tx: TransactionDetails) => !tx.receipt\nfunction wasPending(previousTxs: { [hash: string]: TransactionDetails | undefined }, current: TransactionDetails) {\n  const previousTx = previousTxs[current.hash]\n  return previousTx && isTxPending(previousTx)\n}\n\nfunction useHasUpdatedTx() {\n  // TODO: consider monitoring tx's on chains other than the wallet's current chain\n  const currentChainTxs = useAllTransactions()\n\n  const pendingTxs = useMemo(() => {\n    return Object.entries(currentChainTxs).reduce((acc: { [hash: string]: TransactionDetails }, [hash, tx]) => {\n      if (!tx.receipt) acc[hash] = tx\n      return acc\n    }, {})\n  }, [currentChainTxs])\n\n  const previousPendingTxs = usePrevious(pendingTxs)\n\n  return useMemo(() => {\n    if (!previousPendingTxs) return false\n    return Object.values(currentChainTxs).some(\n      (tx) => !isTxPending(tx) && wasPending(previousPendingTxs, tx),\n      [currentChainTxs, previousPendingTxs]\n    )\n  }, [currentChainTxs, previousPendingTxs])\n}\n\n/* Prefetches & caches portfolio balances when the wrapped component is hovered or the user completes a transaction */\nexport default function PrefetchBalancesWrapper({ children }: PropsWithChildren) {\n  const { account } = useWeb3React()\n  const [prefetchPortfolioBalances] = usePortfolioBalancesLazyQuery()\n  const [drawerOpen] = useAccountDrawer()\n\n  const [hasUnfetchedBalances, setHasUnfetchedBalances] = useState(true)\n  const fetchBalances = useCallback(() => {\n    if (account) {\n      prefetchPortfolioBalances({ variables: { ownerAddress: account } })\n      setHasUnfetchedBalances(false)\n    }\n  }, [account, prefetchPortfolioBalances])\n\n  // TODO(cartcrom): add delay for refetching on optimism, as there is high latency in new balances being available\n  const hasUpdatedTx = useHasUpdatedTx()\n  // Listens for recently updated transactions to keep portfolio balances fresh in apollo cache\n  useEffect(() => {\n    if (!hasUpdatedTx) return\n\n    // If the drawer is open, fetch balances immediately, else set a flag to fetch on next hover\n    if (drawerOpen) fetchBalances()\n    else setHasUnfetchedBalances(true)\n  }, [drawerOpen, fetchBalances, hasUpdatedTx])\n\n  const onHover = useCallback(() => {\n    if (hasUnfetchedBalances) fetchBalances()\n  }, [fetchBalances, hasUnfetchedBalances])\n\n  return <div onMouseEnter={onHover}>{children}</div>\n}\n","/workspace/Physica-Interfae/src/pages/Pool/index.tsx",["4112","4113"],"import { Trans } from '@lingui/macro'\nimport { Trace, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName, InterfacePageName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport { ButtonGray, ButtonPrimary, ButtonText } from 'components/Button'\nimport { AutoColumn } from 'components/Column'\nimport { FlyoutAlignment, Menu } from 'components/Menu'\nimport PositionList from 'components/PositionList'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport { isSupportedChain } from 'constants/chains'\nimport { useFilterPossiblyMaliciousPositions } from 'hooks/useFilterPossiblyMaliciousPositions'\nimport { useV3Positions } from 'hooks/useV3Positions'\nimport { useMemo } from 'react'\nimport { AlertTriangle, BookOpen, ChevronDown, ChevronsRight, Inbox, Layers } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport { useUserHideClosedPositions } from 'state/user/hooks'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { HideSmall, ThemedText } from 'theme'\nimport { PositionDetails } from 'types/position'\n\nimport { V2_FACTORY_ADDRESSES } from '../../constants/addresses'\nimport CTACards from './CTACards'\nimport { LoadingRows } from './styleds'\n\nconst PageWrapper = styled(AutoColumn)`\n  padding: 68px 8px 0px;\n  max-width: 870px;\n  width: 100%;\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToMedium`\n    max-width: 800px;\n  `};\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    max-width: 500px;\n  `};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    padding-top: 48px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-top: 20px;\n  }\n`\nconst TitleRow = styled(RowBetween)`\n  color: ${({ theme }) => theme.textSecondary};\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    flex-wrap: wrap;\n    gap: 12px;\n    width: 100%;\n  `};\n`\nconst ButtonRow = styled(RowFixed)`\n  & > *:not(:last-child) {\n    margin-left: 8px;\n  }\n\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-between;\n    flex-direction: row-reverse;\n  `};\n`\nconst PoolMenu = styled(Menu)`\n  margin-left: 0;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    flex: 1 1 auto;\n    width: 49%;\n    right: 0px;\n  `};\n\n  a {\n    width: 100%;\n  }\n`\nconst PoolMenuItem = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  font-weight: 500;\n`\nconst MoreOptionsButton = styled(ButtonGray)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  padding: 6px 8px;\n  width: 100%;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  margin-right: 8px;\n`\n\nconst MoreOptionsText = styled(ThemedText.DeprecatedBody)`\n  align-items: center;\n  display: flex;\n`\n\nconst ErrorContainer = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: auto;\n  max-width: 300px;\n  min-height: 25vh;\n`\n\nconst IconStyle = css`\n  width: 48px;\n  height: 48px;\n  margin-bottom: 0.5rem;\n`\n\nconst NetworkIcon = styled(AlertTriangle)`\n  ${IconStyle}\n`\n\nconst InboxIcon = styled(Inbox)`\n  ${IconStyle}\n`\n\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\n  border-radius: 12px;\n  font-size: 16px;\n  padding: 6px 8px;\n  width: fit-content;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\n    flex: 1 1 auto;\n    width: 100%;\n  `};\n`\n\nconst MainContentWrapper = styled.main`\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  padding: 0;\n  border-radius: 16px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n`\n\nfunction PositionsLoadingPlaceholder() {\n  return (\n    <LoadingRows>\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </LoadingRows>\n  )\n}\n\nfunction WrongNetworkCard() {\n  const theme = useTheme()\n\n  return (\n    <>\n      <PageWrapper>\n        <AutoColumn gap=\"lg\" justify=\"center\">\n          <AutoColumn gap=\"lg\" style={{ width: '100%' }}>\n            <TitleRow padding=\"0\">\n              <ThemedText.LargeHeader>\n                <Trans>Pools</Trans>\n              </ThemedText.LargeHeader>\n            </TitleRow>\n\n            <MainContentWrapper>\n              <ErrorContainer>\n                <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                  <NetworkIcon strokeWidth={1.2} />\n                  <div data-testid=\"pools-unsupported-err\">\n                    <Trans>Your connected network is unsupported.</Trans>\n                  </div>\n                </ThemedText.DeprecatedBody>\n              </ErrorContainer>\n            </MainContentWrapper>\n          </AutoColumn>\n        </AutoColumn>\n      </PageWrapper>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n\nexport default function Pool() {\n  const { account, chainId } = useWeb3React()\n  const toggleWalletDrawer = useToggleAccountDrawer()\n\n  const theme = useTheme()\n  const [userHideClosedPositions, setUserHideClosedPositions] = useUserHideClosedPositions()\n\n  const { positions, loading: positionsLoading } = useV3Positions(account)\n\n  const [openPositions, closedPositions] = positions?.reduce<[PositionDetails[], PositionDetails[]]>(\n    (acc, p) => {\n      acc[p.liquidity?.isZero() ? 1 : 0].push(p)\n      return acc\n    },\n    [[], []]\n  ) ?? [[], []]\n\n  const userSelectedPositionSet = useMemo(\n    () => [...openPositions, ...(userHideClosedPositions ? [] : closedPositions)],\n    [closedPositions, openPositions, userHideClosedPositions]\n  )\n\n  const filteredPositions = useFilterPossiblyMaliciousPositions(userSelectedPositionSet)\n\n  if (!isSupportedChain(chainId)) {\n    return <WrongNetworkCard />\n  }\n\n  const showConnectAWallet = Boolean(!account)\n  const showV2Features = Boolean(V2_FACTORY_ADDRESSES[chainId])\n\n  const menuItems = [\n    {\n      content: (\n        <PoolMenuItem>\n          <Trans>Migrate</Trans>\n          <ChevronsRight size={16} />\n        </PoolMenuItem>\n      ),\n      link: '/migrate/v2',\n      external: false,\n    },\n    {\n      content: (\n        <PoolMenuItem>\n          <Trans>V2 liquidity</Trans>\n          <Layers size={16} />\n        </PoolMenuItem>\n      ),\n      link: '/pools/v2',\n      external: false,\n    },\n    {\n      content: (\n        <PoolMenuItem>\n          <Trans>Learn</Trans>\n          <BookOpen size={16} />\n        </PoolMenuItem>\n      ),\n      link: 'https://support.uniswap.org/hc/en-us/categories/8122334631437-Providing-Liquidity-',\n      external: true,\n    },\n  ]\n\n  return (\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\n      <PageWrapper>\n        <AutoColumn gap=\"lg\" justify=\"center\">\n          <AutoColumn gap=\"lg\" style={{ width: '100%' }}>\n            <TitleRow padding=\"0\">\n              <ThemedText.LargeHeader>\n                <Trans>Pools</Trans>\n              </ThemedText.LargeHeader>\n              <ButtonRow>\n                {showV2Features && (\n                  <PoolMenu\n                    menuItems={menuItems}\n                    flyoutAlignment={FlyoutAlignment.LEFT}\n                    ToggleUI={(props: any) => (\n                      <MoreOptionsButton {...props}>\n                        <MoreOptionsText>\n                          <Trans>More</Trans>\n                          <ChevronDown size={15} />\n                        </MoreOptionsText>\n                      </MoreOptionsButton>\n                    )}\n                  />\n                )}\n                <ResponsiveButtonPrimary data-cy=\"join-pool-button\" id=\"join-pool-button\" as={Link} to=\"/add/ETH\">\n                  + <Trans>New Position</Trans>\n                </ResponsiveButtonPrimary>\n              </ButtonRow>\n            </TitleRow>\n\n            <MainContentWrapper>\n              {positionsLoading ? (\n                <PositionsLoadingPlaceholder />\n              ) : filteredPositions && closedPositions && filteredPositions.length > 0 ? (\n                <PositionList\n                  positions={filteredPositions}\n                  setUserHideClosedPositions={setUserHideClosedPositions}\n                  userHideClosedPositions={userHideClosedPositions}\n                />\n              ) : (\n                <ErrorContainer>\n                  <ThemedText.DeprecatedBody color={theme.textTertiary} textAlign=\"center\">\n                    <InboxIcon strokeWidth={1} style={{ marginTop: '2em' }} />\n                    <div>\n                      <Trans>Your active V3 liquidity positions will appear here.</Trans>\n                    </div>\n                  </ThemedText.DeprecatedBody>\n                  {!showConnectAWallet && closedPositions.length > 0 && (\n                    <ButtonText\n                      style={{ marginTop: '.5rem' }}\n                      onClick={() => setUserHideClosedPositions(!userHideClosedPositions)}\n                    >\n                      <Trans>Show closed positions</Trans>\n                    </ButtonText>\n                  )}\n                  {showConnectAWallet && (\n                    <TraceEvent\n                      events={[BrowserEvent.onClick]}\n                      name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\n                      properties={{ received_swap_quote: false }}\n                      element={InterfaceElementName.CONNECT_WALLET_BUTTON}\n                    >\n                      <ButtonPrimary\n                        style={{ marginTop: '2em', marginBottom: '2em', padding: '8px 16px' }}\n                        onClick={toggleWalletDrawer}\n                      >\n                        <Trans>Connect a wallet</Trans>\n                      </ButtonPrimary>\n                    </TraceEvent>\n                  )}\n                </ErrorContainer>\n              )}\n            </MainContentWrapper>\n            <HideSmall>\n              <CTACards />\n            </HideSmall>\n          </AutoColumn>\n        </AutoColumn>\n      </PageWrapper>\n      <SwitchLocaleLink />\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/Tokens/index.tsx",[],"/workspace/Physica-Interfae/src/pages/RemoveLiquidity/index.tsx",["4114","4115","4116","4117","4118","4119","4120","4121","4122","4123","4124","4125","4126"],"import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName } from '@uniswap/analytics-events'\nimport { Currency, Percent } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport { sendEvent } from 'components/analytics'\nimport { isSupportedChain } from 'constants/chains'\nimport { useV2LiquidityTokenPermit } from 'hooks/useV2LiquidityTokenPermit'\nimport { PositionPageUnsupportedContent } from 'pages/Pool/PositionPage'\nimport { useCallback, useMemo, useState } from 'react'\nimport { ArrowDown, Plus } from 'react-feather'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { useTheme } from 'styled-components/macro'\n\nimport { ButtonConfirmed, ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport { BlueCard, LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween, RowFixed } from '../../components/Row'\nimport Slider from '../../components/Slider'\nimport { Dots } from '../../components/swap/styleds'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { usePairContract, useV2RouterContract } from '../../hooks/useContract'\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field } from '../../state/burn/actions'\nimport { useBurnActionHandlers, useBurnState, useDerivedBurnInfo } from '../../state/burn/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { TransactionType } from '../../state/transactions/types'\nimport { useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\nimport { StyledInternalLink, ThemedText } from '../../theme'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { calculateSlippageAmount } from '../../utils/calculateSlippageAmount'\nimport { currencyId } from '../../utils/currencyId'\nimport AppBody from '../AppBody'\nimport { ClickableText, MaxButton, Wrapper } from '../Pool/styleds'\n\nconst DEFAULT_REMOVE_LIQUIDITY_SLIPPAGE_TOLERANCE = new Percent(5, 100)\n\nexport default function RemoveLiquidityWrapper() {\n  const { chainId } = useWeb3React()\n  if (isSupportedChain(chainId)) {\n    return <RemoveLiquidity />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\n\nfunction RemoveLiquidity() {\n  const navigate = useNavigate()\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA: string; currencyIdB: string }>()\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\n  const { account, chainId, provider } = useWeb3React()\n  const [tokenA, tokenB] = useMemo(() => [currencyA?.wrapped, currencyB?.wrapped], [currencyA, currencyB])\n\n  const theme = useTheme()\n\n  // toggle wallet when disconnected\n  const toggleWalletDrawer = useToggleAccountDrawer()\n\n  // burn state\n  const { independentField, typedValue } = useBurnState()\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\n\n  // txn values\n  const [txHash, setTxHash] = useState<string>('')\n  const deadline = useTransactionDeadline()\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_REMOVE_LIQUIDITY_SLIPPAGE_TOLERANCE)\n\n  const formattedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\n      ? '0'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\n      ? '<1'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\n    [Field.LIQUIDITY]:\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_A]:\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_B]:\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n  }\n\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\n\n  // pair contract\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\n\n  const router = useV2RouterContract()\n\n  // allowance handling\n  const { gatherPermitSignature, signatureData } = useV2LiquidityTokenPermit(\n    parsedAmounts[Field.LIQUIDITY],\n    router?.address\n  )\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], router?.address)\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !pair || !provider || !deadline) throw new Error('missing dependencies')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    if (gatherPermitSignature) {\n      try {\n        await gatherPermitSignature()\n      } catch (error) {\n        // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\n        if (error?.code !== 4001) {\n          await approveCallback()\n        }\n      }\n    } else {\n      await approveCallback()\n    }\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      return _onUserInput(field, typedValue)\n    },\n    [_onUserInput]\n  )\n\n  const onLiquidityInput = useCallback(\n    (typedValue: string): void => onUserInput(Field.LIQUIDITY, typedValue),\n    [onUserInput]\n  )\n  const onCurrencyAInput = useCallback(\n    (typedValue: string): void => onUserInput(Field.CURRENCY_A, typedValue),\n    [onUserInput]\n  )\n  const onCurrencyBInput = useCallback(\n    (typedValue: string): void => onUserInput(Field.CURRENCY_B, typedValue),\n    [onUserInput]\n  )\n\n  // tx sending\n  const addTransaction = useTransactionAdder()\n\n  async function onRemove() {\n    if (!chainId || !provider || !account || !deadline || !router) throw new Error('missing dependencies')\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\n    if (!currencyAmountA || !currencyAmountB) {\n      throw new Error('missing currency amounts')\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\n    }\n\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    const currencyBIsETH = currencyB.isNative\n    const oneCurrencyIsETH = currencyA.isNative || currencyBIsETH\n\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\n\n    let methodNames: string[], args: Array<string | string[] | number | boolean>\n    // we have approval, use normal remove liquidity\n    if (approval === ApprovalState.APPROVED) {\n      // removeLiquidityETH\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.quotient.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n      // removeLiquidity\n      else {\n        methodNames = ['removeLiquidity']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.quotient.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n    }\n    // we have a signature, use permit versions of remove liquidity\n    else if (signatureData !== null) {\n      // removeLiquidityETHWithPermit\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.quotient.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n      // removeLiquidityETHWithPermit\n      else {\n        methodNames = ['removeLiquidityWithPermit']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.quotient.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n    } else {\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\n    }\n\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\n      methodNames.map((methodName) =>\n        router.estimateGas[methodName](...args)\n          .then((estimateGas) => calculateGasMargin(estimateGas))\n          .catch((error) => {\n            console.error(`estimateGas failed`, methodName, args, error)\n            return undefined\n          })\n      )\n    )\n\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\n      BigNumber.isBigNumber(safeGasEstimate)\n    )\n\n    // all estimations failed...\n    if (indexOfSuccessfulEstimation === -1) {\n      console.error('This transaction would fail. Please contact support.')\n    } else {\n      const methodName = methodNames[indexOfSuccessfulEstimation]\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\n\n      setAttemptingTxn(true)\n      await router[methodName](...args, {\n        gasLimit: safeGasEstimate,\n      })\n        .then((response: TransactionResponse) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            type: TransactionType.REMOVE_LIQUIDITY_V3,\n            baseCurrencyId: currencyId(currencyA),\n            quoteCurrencyId: currencyId(currencyB),\n            expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient.toString() ?? '0',\n            expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient.toString() ?? '0',\n          })\n\n          setTxHash(response.hash)\n\n          sendEvent({\n            category: 'Liquidity',\n            action: 'Remove',\n            label: [currencyA.symbol, currencyB.symbol].join('/'),\n          })\n        })\n        .catch((error: Error) => {\n          setAttemptingTxn(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          console.error(error)\n        })\n    }\n  }\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize={24} fontWeight={500}>\n            {parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}\n          </Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\n            <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\n              {currencyA?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowFixed>\n          <Plus size=\"16\" color={theme.textSecondary} />\n        </RowFixed>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize={24} fontWeight={500}>\n            {parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}\n          </Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\n            <Text fontSize={24} fontWeight={500} style={{ marginLeft: '10px' }}>\n              {currencyB?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n\n        <ThemedText.DeprecatedItalic fontSize={12} color={theme.textSecondary} textAlign=\"left\" padding=\"12px 0 0 0\">\n          <Trans>\n            Output is estimated. If the price changes by more than {allowedSlippage.toSignificant(4)}% your transaction\n            will revert.\n          </Trans>\n        </ThemedText.DeprecatedItalic>\n      </AutoColumn>\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <>\n        <RowBetween>\n          <Text color={theme.textSecondary} fontWeight={500} fontSize={16}>\n            <Trans>\n              UNI {currencyA?.symbol}/{currencyB?.symbol} Burned\n            </Trans>\n          </Text>\n          <RowFixed>\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin={true} />\n            <Text fontWeight={500} fontSize={16}>\n              {parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        {pair && (\n          <>\n            <RowBetween>\n              <Text color={theme.textSecondary} fontWeight={500} fontSize={16}>\n                <Trans>Price</Trans>\n              </Text>\n              <Text fontWeight={500} fontSize={16} color={theme.textPrimary}>\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n              </Text>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <Text fontWeight={500} fontSize={16} color={theme.textPrimary}>\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n              </Text>\n            </RowBetween>\n          </>\n        )}\n        <ButtonPrimary disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\n          <Text fontWeight={500} fontSize={20}>\n            <Trans>Confirm</Trans>\n          </Text>\n        </ButtonPrimary>\n      </>\n    )\n  }\n\n  const pendingText = (\n    <Trans>\n      Removing {parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} {currencyA?.symbol} and\n      {parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} {currencyB?.symbol}\n    </Trans>\n  )\n\n  const liquidityPercentChangeCallback = useCallback(\n    (value: number) => {\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\n    },\n    [onUserInput]\n  )\n\n  const oneCurrencyIsETH = currencyA?.isNative || currencyB?.isNative\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      WRAPPED_NATIVE_CURRENCY[chainId] &&\n      ((currencyA && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(currencyA)) ||\n        (currencyB && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(currencyB)))\n  )\n\n  const handleSelectCurrencyA = useCallback(\n    (currency: Currency) => {\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\n        navigate(`/remove/v2/${currencyId(currency)}/${currencyIdA}`)\n      } else {\n        navigate(`/remove/v2/${currencyId(currency)}/${currencyIdB}`)\n      }\n    },\n    [currencyIdA, currencyIdB, navigate]\n  )\n  const handleSelectCurrencyB = useCallback(\n    (currency: Currency) => {\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\n        navigate(`/remove/v2/${currencyIdB}/${currencyId(currency)}`)\n      } else {\n        navigate(`/remove/v2/${currencyIdA}/${currencyId(currency)}`)\n      }\n    },\n    [currencyIdA, currencyIdB, navigate]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\n    }\n    setTxHash('')\n  }, [onUserInput, txHash])\n\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\n    liquidityPercentChangeCallback\n  )\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs creating={false} adding={false} defaultSlippage={DEFAULT_REMOVE_LIQUIDITY_SLIPPAGE_TOLERANCE} />\n        <Wrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={handleDismissConfirmation}\n            attemptingTxn={attemptingTxn}\n            hash={txHash ? txHash : ''}\n            content={() => (\n              <ConfirmationModalContent\n                title={<Trans>You will receive</Trans>}\n                onDismiss={handleDismissConfirmation}\n                topContent={modalHeader}\n                bottomContent={modalBottom}\n              />\n            )}\n            pendingText={pendingText}\n          />\n          <AutoColumn gap=\"md\">\n            <BlueCard>\n              <AutoColumn gap=\"10px\">\n                <ThemedText.DeprecatedLink fontWeight={400} color=\"accentAction\">\n                  <Trans>\n                    <b>Tip:</b> Removing pool tokens converts your position back into underlying tokens at the current\n                    rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.\n                  </Trans>\n                </ThemedText.DeprecatedLink>\n              </AutoColumn>\n            </BlueCard>\n            <LightCard>\n              <AutoColumn gap=\"20px\">\n                <RowBetween>\n                  <Text fontWeight={500}>\n                    <Trans>Remove Amount</Trans>\n                  </Text>\n                  <ClickableText\n                    fontWeight={500}\n                    onClick={() => {\n                      setShowDetailed(!showDetailed)\n                    }}\n                  >\n                    {showDetailed ? <Trans>Simple</Trans> : <Trans>Detailed</Trans>}\n                  </ClickableText>\n                </RowBetween>\n                <Row style={{ alignItems: 'flex-end' }}>\n                  <Text fontSize={72} fontWeight={500}>\n                    {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\n                  </Text>\n                </Row>\n                {!showDetailed && (\n                  <>\n                    <Slider value={innerLiquidityPercentage} onChange={setInnerLiquidityPercentage} />\n                    <RowBetween>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')} width=\"20%\">\n                        25%\n                      </MaxButton>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')} width=\"20%\">\n                        50%\n                      </MaxButton>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')} width=\"20%\">\n                        75%\n                      </MaxButton>\n                      <MaxButton onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')} width=\"20%\">\n                        Max\n                      </MaxButton>\n                    </RowBetween>\n                  </>\n                )}\n              </AutoColumn>\n            </LightCard>\n            {!showDetailed && (\n              <>\n                <ColumnCenter>\n                  <ArrowDown size=\"16\" color={theme.textSecondary} />\n                </ColumnCenter>\n                <LightCard>\n                  <AutoColumn gap=\"10px\">\n                    <RowBetween>\n                      <Text fontSize={24} fontWeight={500}>\n                        {formattedAmounts[Field.CURRENCY_A] || '-'}\n                      </Text>\n                      <RowFixed>\n                        <CurrencyLogo currency={currencyA} style={{ marginRight: '12px' }} />\n                        <Text fontSize={24} fontWeight={500} id=\"remove-liquidity-tokena-symbol\">\n                          {currencyA?.symbol}\n                        </Text>\n                      </RowFixed>\n                    </RowBetween>\n                    <RowBetween>\n                      <Text fontSize={24} fontWeight={500}>\n                        {formattedAmounts[Field.CURRENCY_B] || '-'}\n                      </Text>\n                      <RowFixed>\n                        <CurrencyLogo currency={currencyB} style={{ marginRight: '12px' }} />\n                        <Text fontSize={24} fontWeight={500} id=\"remove-liquidity-tokenb-symbol\">\n                          {currencyB?.symbol}\n                        </Text>\n                      </RowFixed>\n                    </RowBetween>\n                    {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\n                      <RowBetween style={{ justifyContent: 'flex-end' }}>\n                        {oneCurrencyIsETH ? (\n                          <StyledInternalLink\n                            to={`/remove/v2/${\n                              currencyA?.isNative && chainId && WRAPPED_NATIVE_CURRENCY[chainId]\n                                ? WRAPPED_NATIVE_CURRENCY[chainId]?.address\n                                : currencyIdA\n                            }/${\n                              currencyB?.isNative && chainId && WRAPPED_NATIVE_CURRENCY[chainId]\n                                ? WRAPPED_NATIVE_CURRENCY[chainId]?.address\n                                : currencyIdB\n                            }`}\n                          >\n                            Receive WETH\n                          </StyledInternalLink>\n                        ) : oneCurrencyIsWETH ? (\n                          <StyledInternalLink\n                            to={`/remove/v2/${\n                              currencyA && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(currencyA) ? 'ETH' : currencyIdA\n                            }/${\n                              currencyB && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(currencyB) ? 'ETH' : currencyIdB\n                            }`}\n                          >\n                            Receive ETH\n                          </StyledInternalLink>\n                        ) : null}\n                      </RowBetween>\n                    ) : null}\n                  </AutoColumn>\n                </LightCard>\n              </>\n            )}\n\n            {showDetailed && (\n              <>\n                <CurrencyInputPanel\n                  value={formattedAmounts[Field.LIQUIDITY]}\n                  onUserInput={onLiquidityInput}\n                  onMax={() => {\n                    onUserInput(Field.LIQUIDITY_PERCENT, '100')\n                  }}\n                  showMaxButton={!atMaxAmount}\n                  currency={pair?.liquidityToken}\n                  pair={pair}\n                  id=\"liquidity-amount\"\n                />\n                <ColumnCenter>\n                  <ArrowDown size=\"16\" color={theme.textSecondary} />\n                </ColumnCenter>\n                <CurrencyInputPanel\n                  hideBalance={true}\n                  value={formattedAmounts[Field.CURRENCY_A]}\n                  onUserInput={onCurrencyAInput}\n                  onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                  showMaxButton={!atMaxAmount}\n                  currency={currencyA}\n                  label=\"Output\"\n                  onCurrencySelect={handleSelectCurrencyA}\n                  id=\"remove-liquidity-tokena\"\n                />\n                <ColumnCenter>\n                  <Plus size=\"16\" color={theme.textSecondary} />\n                </ColumnCenter>\n                <CurrencyInputPanel\n                  hideBalance={true}\n                  value={formattedAmounts[Field.CURRENCY_B]}\n                  onUserInput={onCurrencyBInput}\n                  onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                  showMaxButton={!atMaxAmount}\n                  currency={currencyB}\n                  label=\"Output\"\n                  onCurrencySelect={handleSelectCurrencyB}\n                  id=\"remove-liquidity-tokenb\"\n                />\n              </>\n            )}\n            {pair && (\n              <div style={{ padding: '10px 20px' }}>\n                <RowBetween>\n                  <Trans>Price:</Trans>\n                  <div>\n                    1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n                  </div>\n                </RowBetween>\n                <RowBetween>\n                  <div />\n                  <div>\n                    1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n                  </div>\n                </RowBetween>\n              </div>\n            )}\n            <div style={{ position: 'relative' }}>\n              {!account ? (\n                <TraceEvent\n                  events={[BrowserEvent.onClick]}\n                  name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\n                  properties={{ received_swap_quote: false }}\n                  element={InterfaceElementName.CONNECT_WALLET_BUTTON}\n                >\n                  <ButtonLight onClick={toggleWalletDrawer}>\n                    <Trans>Connect Wallet</Trans>\n                  </ButtonLight>\n                </TraceEvent>\n              ) : (\n                <RowBetween>\n                  <ButtonConfirmed\n                    onClick={onAttemptToApprove}\n                    confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n                    disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n                    mr=\"0.5rem\"\n                    fontWeight={500}\n                    fontSize={16}\n                  >\n                    {approval === ApprovalState.PENDING ? (\n                      <Dots>\n                        <Trans>Approving</Trans>\n                      </Dots>\n                    ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                      <Trans>Approved</Trans>\n                    ) : (\n                      <Trans>Approve</Trans>\n                    )}\n                  </ButtonConfirmed>\n                  <ButtonError\n                    onClick={() => {\n                      setShowConfirm(true)\n                    }}\n                    disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\n                    error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n                  >\n                    <Text fontSize={16} fontWeight={500}>\n                      {error || <Trans>Remove</Trans>}\n                    </Text>\n                  </ButtonError>\n                </RowBetween>\n              )}\n            </div>\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n\n      {pair ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </>\n  )\n}\n","/workspace/Physica-Interfae/src/pages/RemoveLiquidity/styled.ts",[],"/workspace/Physica-Interfae/src/pages/PoolFinder/index.tsx",["4127","4128"],"import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { useCallback, useEffect, useState } from 'react'\nimport { Plus } from 'react-feather'\nimport { useLocation } from 'react-router'\nimport { Text } from 'rebass'\n\nimport { ButtonDropdownLight } from '../../components/Button'\nimport { LightCard } from '../../components/Card'\nimport { BlueCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\nimport { FindPoolTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row from '../../components/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { nativeOnChain } from '../../constants/tokens'\nimport { PairState, useV2Pair } from '../../hooks/useV2Pairs'\nimport { useTokenBalance } from '../../state/connection/hooks'\nimport { usePairAdder } from '../../state/user/hooks'\nimport { StyledInternalLink } from '../../theme'\nimport { ThemedText } from '../../theme'\nimport { currencyId } from '../../utils/currencyId'\nimport AppBody from '../AppBody'\nimport { Dots } from '../Pool/styleds'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default function PoolFinder() {\n  const query = useQuery()\n\n  const { account, chainId } = useWeb3React()\n\n  const [showSearch, setShowSearch] = useState<boolean>(false)\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n\n  const [currency0, setCurrency0] = useState<Currency | null>(() => (chainId ? nativeOnChain(chainId) : null))\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = useV2Pair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.quotient, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.quotient, JSBI.BigInt(0))\n    )\n\n  const position: CurrencyAmount<Token> | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.quotient, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField]\n  )\n\n  const handleSearchDismiss = useCallback(() => {\n    setShowSearch(false)\n  }, [setShowSearch])\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? (\n          <Trans>Connect to a wallet to find pools</Trans>\n        ) : (\n          <Trans>Select a token to find your v2 liquidity.</Trans>\n        )}\n      </Text>\n    </LightCard>\n  )\n\n  return (\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\n      <>\n        <AppBody>\n          <FindPoolTabs origin={query.get('origin') ?? '/pools'} />\n          <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n            <BlueCard>\n              <AutoColumn gap=\"10px\">\n                <ThemedText.DeprecatedLink fontWeight={400} color=\"accentAction\">\n                  <Trans>\n                    <b>Tip:</b> Use this tool to find v2 pools that don&apos;t automatically appear in the interface.\n                  </Trans>\n                </ThemedText.DeprecatedLink>\n              </AutoColumn>\n            </BlueCard>\n            <ButtonDropdownLight\n              onClick={() => {\n                setShowSearch(true)\n                setActiveField(Fields.TOKEN0)\n              }}\n            >\n              {currency0 ? (\n                <Row>\n                  <CurrencyLogo currency={currency0} />\n                  <Text fontWeight={500} fontSize={20} marginLeft=\"12px\">\n                    {currency0.symbol}\n                  </Text>\n                </Row>\n              ) : (\n                <Text fontWeight={500} fontSize={20} marginLeft=\"12px\">\n                  <Trans>Select a token</Trans>\n                </Text>\n              )}\n            </ButtonDropdownLight>\n\n            <ColumnCenter>\n              <Plus size=\"16\" color=\"#888D9B\" />\n            </ColumnCenter>\n\n            <ButtonDropdownLight\n              onClick={() => {\n                setShowSearch(true)\n                setActiveField(Fields.TOKEN1)\n              }}\n            >\n              {currency1 ? (\n                <Row>\n                  <CurrencyLogo currency={currency1} />\n                  <Text fontWeight={500} fontSize={20} marginLeft=\"12px\">\n                    {currency1.symbol}\n                  </Text>\n                </Row>\n              ) : (\n                <Text fontWeight={500} fontSize={20} marginLeft=\"12px\">\n                  <Trans>Select a token</Trans>\n                </Text>\n              )}\n            </ButtonDropdownLight>\n\n            {hasPosition && (\n              <ColumnCenter\n                style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n              >\n                <Text textAlign=\"center\" fontWeight={500}>\n                  <Trans>Pool Found!</Trans>\n                </Text>\n                <StyledInternalLink to=\"pools/v2\">\n                  <Text textAlign=\"center\">\n                    <Trans>Manage this pool.</Trans>\n                  </Text>\n                </StyledInternalLink>\n              </ColumnCenter>\n            )}\n\n            {currency0 && currency1 ? (\n              pairState === PairState.EXISTS ? (\n                hasPosition && pair ? (\n                  <MinimalPositionCard pair={pair} border=\"1px solid #CED0D9\" />\n                ) : (\n                  <LightCard padding=\"45px 10px\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <Text textAlign=\"center\">\n                        <Trans>You don’t have liquidity in this pool yet.</Trans>\n                      </Text>\n                      <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                        <Text textAlign=\"center\">\n                          <Trans>Add liquidity.</Trans>\n                        </Text>\n                      </StyledInternalLink>\n                    </AutoColumn>\n                  </LightCard>\n                )\n              ) : validPairNoLiquidity ? (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">\n                      <Trans>No pool found.</Trans>\n                    </Text>\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Trans>Create pool.</Trans>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              ) : pairState === PairState.INVALID ? (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\" fontWeight={500}>\n                      <Trans>Invalid pair.</Trans>\n                    </Text>\n                  </AutoColumn>\n                </LightCard>\n              ) : pairState === PairState.LOADING ? (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">\n                      <Trans>Loading</Trans>\n                      <Dots />\n                    </Text>\n                  </AutoColumn>\n                </LightCard>\n              ) : null\n            ) : (\n              prerequisiteMessage\n            )}\n          </AutoColumn>\n\n          <CurrencySearchModal\n            isOpen={showSearch}\n            onCurrencySelect={handleCurrencySelect}\n            onDismiss={handleSearchDismiss}\n            showCommonBases\n            selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n          />\n        </AppBody>\n        <SwitchLocaleLink />\n      </>\n    </Trace>\n  )\n}\n","/workspace/Physica-Interfae/src/state/stake/hooks.tsx",["4129","4130","4131","4132","4133","4134","4135","4136","4137","4138"],"import { Interface } from '@ethersproject/abi'\nimport { abi as STAKING_REWARDS_ABI } from '@uniswap/liquidity-staker/build/StakingRewards.json'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { DAI, UNI, USDC_MAINNET, USDT, WBTC, WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\n\nconst STAKING_REWARDS_INTERFACE = new Interface(STAKING_REWARDS_ABI)\n\nexport const STAKING_GENESIS = 1600387200\n\nconst STAKING_REWARDS_INFO: {\n  [chainId: number]: {\n    tokens: [Token, Token]\n    stakingRewardAddress: string\n  }[]\n} = {\n  1: [\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, DAI],\n      stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, USDC_MAINNET],\n      stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, USDT],\n      stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, WBTC],\n      stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e',\n    },\n  ],\n}\n\ninterface StakingInfo {\n  // the address of the reward contract\n  stakingRewardAddress: string\n  // the tokens involved in this pair\n  tokens: [Token, Token]\n  // the amount of token currently staked, or undefined if no account\n  stakedAmount: CurrencyAmount<Token>\n  // the amount of reward token earned by the active account, or undefined if no account\n  earnedAmount: CurrencyAmount<Token>\n  // the total amount of token staked in the contract\n  totalStakedAmount: CurrencyAmount<Token>\n  // the amount of token distributed per second to all LPs, constant\n  totalRewardRate: CurrencyAmount<Token>\n  // the current amount of token distributed to the active account per second.\n  // equivalent to percent of total supply * reward rate\n  rewardRate: CurrencyAmount<Token>\n  // when the period ends\n  periodFinish: Date | undefined\n  // if pool is active\n  active: boolean\n  // calculates a hypothetical amount of token distributed to the active account per second.\n  getHypotheticalRewardRate: (\n    stakedAmount: CurrencyAmount<Token>,\n    totalStakedAmount: CurrencyAmount<Token>,\n    totalRewardRate: CurrencyAmount<Token>\n  ) => CurrencyAmount<Token>\n}\n\n// gets the staking info from the network for the active chain id\nexport function useStakingInfo(pairToFilterBy?: Pair | null): StakingInfo[] {\n  const { chainId, account } = useWeb3React()\n\n  // detect if staking is ended\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\n\n  const info = useMemo(\n    () =>\n      chainId\n        ? STAKING_REWARDS_INFO[chainId]?.filter((stakingRewardInfo) =>\n            pairToFilterBy === undefined\n              ? true\n              : pairToFilterBy === null\n              ? false\n              : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\n                pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\n          ) ?? []\n        : [],\n    [chainId, pairToFilterBy]\n  )\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const rewardsAddresses = useMemo(() => info.map(({ stakingRewardAddress }) => stakingRewardAddress), [info])\n\n  const accountArg = useMemo(() => [account ?? undefined], [account])\n\n  // get all the info from the staking rewards contracts\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg)\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg)\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply')\n\n  // tokens per second, constants\n  const rewardRates = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'rewardRate',\n    undefined,\n    NEVER_RELOAD\n  )\n  const periodFinishes = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'periodFinish',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  return useMemo(() => {\n    if (!chainId || !uni) return []\n\n    return rewardsAddresses.reduce<StakingInfo[]>((memo, rewardsAddress, index) => {\n      // these two are dependent on account\n      const balanceState = balances[index]\n      const earnedAmountState = earnedAmounts[index]\n\n      // these get fetched regardless of account\n      const totalSupplyState = totalSupplies[index]\n      const rewardRateState = rewardRates[index]\n      const periodFinishState = periodFinishes[index]\n\n      if (\n        // these may be undefined if not logged in\n        !balanceState?.loading &&\n        !earnedAmountState?.loading &&\n        // always need these\n        totalSupplyState &&\n        !totalSupplyState.loading &&\n        rewardRateState &&\n        !rewardRateState.loading &&\n        periodFinishState &&\n        !periodFinishState.loading\n      ) {\n        if (\n          balanceState?.error ||\n          earnedAmountState?.error ||\n          totalSupplyState.error ||\n          rewardRateState.error ||\n          periodFinishState.error\n        ) {\n          console.error('Failed to load staking rewards info')\n          return memo\n        }\n\n        // get the LP token\n        const tokens = info[index].tokens\n        const dummyPair = new Pair(\n          CurrencyAmount.fromRawAmount(tokens[0], '0'),\n          CurrencyAmount.fromRawAmount(tokens[1], '0')\n        )\n\n        // check for account, if no account set to 0\n\n        const stakedAmount = CurrencyAmount.fromRawAmount(\n          dummyPair.liquidityToken,\n          JSBI.BigInt(balanceState?.result?.[0] ?? 0)\n        )\n        const totalStakedAmount = CurrencyAmount.fromRawAmount(\n          dummyPair.liquidityToken,\n          JSBI.BigInt(totalSupplyState.result?.[0])\n        )\n        const totalRewardRate = CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(rewardRateState.result?.[0]))\n\n        const getHypotheticalRewardRate = (\n          stakedAmount: CurrencyAmount<Token>,\n          totalStakedAmount: CurrencyAmount<Token>,\n          totalRewardRate: CurrencyAmount<Token>\n        ): CurrencyAmount<Token> => {\n          return CurrencyAmount.fromRawAmount(\n            uni,\n            JSBI.greaterThan(totalStakedAmount.quotient, JSBI.BigInt(0))\n              ? JSBI.divide(JSBI.multiply(totalRewardRate.quotient, stakedAmount.quotient), totalStakedAmount.quotient)\n              : JSBI.BigInt(0)\n          )\n        }\n\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate)\n\n        const periodFinishSeconds = periodFinishState.result?.[0]?.toNumber()\n        const periodFinishMs = periodFinishSeconds * 1000\n\n        // compare period end timestamp vs current block timestamp (in seconds)\n        const active =\n          periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true\n\n        memo.push({\n          stakingRewardAddress: rewardsAddress,\n          tokens: info[index].tokens,\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\n          earnedAmount: CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(earnedAmountState?.result?.[0] ?? 0)),\n          rewardRate: individualRewardRate,\n          totalRewardRate,\n          stakedAmount,\n          totalStakedAmount,\n          getHypotheticalRewardRate,\n          active,\n        })\n      }\n      return memo\n    }, [])\n  }, [\n    balances,\n    chainId,\n    currentBlockTimestamp,\n    earnedAmounts,\n    info,\n    periodFinishes,\n    rewardRates,\n    rewardsAddresses,\n    totalSupplies,\n    uni,\n  ])\n}\n","/workspace/Physica-Interfae/src/nft/themes/darkTheme.ts",[],"/workspace/Physica-Interfae/src/nft/themes/lightTheme.ts",[],"/workspace/Physica-Interfae/src/pages/Pool/CTACards.tsx",[],"/workspace/Physica-Interfae/src/hooks/useDebouncedChangeHandler.tsx",["4139","4140"],"import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */\nexport default function useDebouncedChangeHandler<T>(\n  value: T,\n  onChange: (newValue: T) => void,\n  debouncedMs = 100\n): [T, (value: T) => void] {\n  const [inner, setInner] = useState<T>(() => value)\n  const timer = useRef<ReturnType<typeof setTimeout>>()\n\n  const onChangeInner = useCallback(\n    (newValue: T) => {\n      setInner(newValue)\n      if (timer.current) {\n        clearTimeout(timer.current)\n      }\n      timer.current = setTimeout(() => {\n        onChange(newValue)\n        timer.current = undefined\n      }, debouncedMs)\n    },\n    [debouncedMs, onChange]\n  )\n\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n      timer.current = undefined\n    }\n    setInner(value)\n  }, [value])\n\n  return [inner, onChangeInner]\n}\n","/workspace/Physica-Interfae/src/state/burn/hooks.tsx",["4141","4142","4143"],"import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useCallback } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { useV2Pair } from '../../hooks/useV2Pairs'\nimport { useTokenBalances } from '../connection/hooks'\nimport { AppState } from '../types'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useAppSelector((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: ReactNode\n} {\n  const { account } = useWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = useV2Pair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: CurrencyAmount<Token>; [Field.CURRENCY_B]?: CurrencyAmount<Token> } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseCurrencyAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.quotient, userLiquidity.quotient)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseCurrencyAmount(typedValue, tokens[independentField])\n      const liquidityValue = liquidityValues[independentField]\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.quotient, liquidityValue.quotient)\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? CurrencyAmount.fromRawAmount(\n            userLiquidity.currency,\n            percentToRemove.multiply(userLiquidity.quotient).quotient\n          )\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? CurrencyAmount.fromRawAmount(tokenA, percentToRemove.multiply(liquidityValueA.quotient).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? CurrencyAmount.fromRawAmount(tokenB, percentToRemove.multiply(liquidityValueB.quotient).quotient)\n        : undefined,\n  }\n\n  let error: ReactNode | undefined\n  if (!account) {\n    error = <Trans>Connect Wallet</Trans>\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? <Trans>Enter an amount</Trans>\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onUserInput,\n  }\n}\n","/workspace/Physica-Interfae/src/state/burn/v3/hooks.tsx",["4144","4145","4146"],"import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Position } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToken } from 'hooks/Tokens'\nimport { usePool } from 'hooks/usePools'\nimport { useV3PositionFees } from 'hooks/useV3PositionFees'\nimport { ReactNode, useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { PositionDetails } from 'types/position'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { AppState } from '../../types'\nimport { selectPercent } from './actions'\n\nexport function useBurnV3State(): AppState['burnV3'] {\n  return useAppSelector((state) => state.burnV3)\n}\n\nexport function useDerivedV3BurnInfo(\n  position?: PositionDetails,\n  asWETH = false\n): {\n  position?: Position\n  liquidityPercentage?: Percent\n  liquidityValue0?: CurrencyAmount<Currency>\n  liquidityValue1?: CurrencyAmount<Currency>\n  feeValue0?: CurrencyAmount<Currency>\n  feeValue1?: CurrencyAmount<Currency>\n  outOfRange: boolean\n  error?: ReactNode\n} {\n  const { account } = useWeb3React()\n  const { percent } = useBurnV3State()\n\n  const token0 = useToken(position?.token0)\n  const token1 = useToken(position?.token1)\n\n  const [, pool] = usePool(token0 ?? undefined, token1 ?? undefined, position?.fee)\n\n  const positionSDK = useMemo(\n    () =>\n      pool && position?.liquidity && typeof position?.tickLower === 'number' && typeof position?.tickUpper === 'number'\n        ? new Position({\n            pool,\n            liquidity: position.liquidity.toString(),\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n          })\n        : undefined,\n    [pool, position]\n  )\n\n  const liquidityPercentage = new Percent(percent, 100)\n\n  const discountedAmount0 = positionSDK\n    ? liquidityPercentage.multiply(positionSDK.amount0.quotient).quotient\n    : undefined\n  const discountedAmount1 = positionSDK\n    ? liquidityPercentage.multiply(positionSDK.amount1.quotient).quotient\n    : undefined\n\n  const liquidityValue0 =\n    token0 && discountedAmount0\n      ? CurrencyAmount.fromRawAmount(asWETH ? token0 : unwrappedToken(token0), discountedAmount0)\n      : undefined\n  const liquidityValue1 =\n    token1 && discountedAmount1\n      ? CurrencyAmount.fromRawAmount(asWETH ? token1 : unwrappedToken(token1), discountedAmount1)\n      : undefined\n\n  const [feeValue0, feeValue1] = useV3PositionFees(pool ?? undefined, position?.tokenId, asWETH)\n\n  const outOfRange =\n    pool && position ? pool.tickCurrent < position.tickLower || pool.tickCurrent > position.tickUpper : false\n\n  let error: ReactNode | undefined\n  if (!account) {\n    error = <Trans>Connect Wallet</Trans>\n  }\n  if (percent === 0) {\n    error = error ?? <Trans>Enter a percent</Trans>\n  }\n  return {\n    position: positionSDK,\n    liquidityPercentage,\n    liquidityValue0,\n    liquidityValue1,\n    feeValue0,\n    feeValue1,\n    outOfRange,\n    error,\n  }\n}\n\nexport function useBurnV3ActionHandlers(): {\n  onPercentSelect: (percent: number) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onPercentSelect = useCallback(\n    (percent: number) => {\n      dispatch(selectPercent({ percent }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onPercentSelect,\n  }\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/NetworkFilter.tsx",[],"/workspace/Physica-Interfae/src/components/Tokens/TokenTable/TokenTable.tsx",["4147"],"import { Trans } from '@lingui/macro'\nimport { PAGE_SIZE, useTopTokens } from 'graphql/data/TopTokens'\nimport { validateUrlChainParam } from 'graphql/data/util'\nimport { ReactNode } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { MAX_WIDTH_MEDIA_BREAKPOINT } from '../constants'\nimport { HeaderRow, LoadedRow, LoadingRow } from './TokenRow'\n\nconst GridContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: ${MAX_WIDTH_MEDIA_BREAKPOINT};\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 12px;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n`\n\nconst TokenDataContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  height: 100%;\n  width: 100%;\n`\n\nconst NoTokenDisplay = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 60px;\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 16px;\n  font-weight: 500;\n  align-items: center;\n  padding: 0px 28px;\n  gap: 8px;\n`\n\nfunction NoTokensState({ message }: { message: ReactNode }) {\n  return (\n    <GridContainer>\n      <HeaderRow />\n      <NoTokenDisplay>{message}</NoTokenDisplay>\n    </GridContainer>\n  )\n}\n\nconst LoadingRows = ({ rowCount }: { rowCount: number }) => (\n  <>\n    {Array(rowCount)\n      .fill(null)\n      .map((_, index) => {\n        return <LoadingRow key={index} first={index === 0} last={index === rowCount - 1} />\n      })}\n  </>\n)\n\nfunction LoadingTokenTable({ rowCount = PAGE_SIZE }: { rowCount?: number }) {\n  return (\n    <GridContainer>\n      <HeaderRow />\n      <TokenDataContainer>\n        <LoadingRows rowCount={rowCount} />\n      </TokenDataContainer>\n    </GridContainer>\n  )\n}\n\nexport default function TokenTable() {\n  const chainName = validateUrlChainParam(useParams<{ chainName?: string }>().chainName)\n  const { tokens, tokenSortRank, loadingTokens, sparklines } = useTopTokens(chainName)\n\n  /* loading and error state */\n  if (loadingTokens && !tokens) {\n    return <LoadingTokenTable rowCount={PAGE_SIZE} />\n  } else if (!tokens) {\n    return (\n      <NoTokensState\n        message={\n          <>\n            <AlertTriangle size={16} />\n            <Trans>An error occurred loading tokens. Please try again.</Trans>\n          </>\n        }\n      />\n    )\n  } else if (tokens?.length === 0) {\n    return <NoTokensState message={<Trans>No tokens found</Trans>} />\n  } else {\n    return (\n      <GridContainer>\n        <HeaderRow />\n        <TokenDataContainer>\n          {tokens.map(\n            (token, index) =>\n              token?.address && (\n                <LoadedRow\n                  key={token.address}\n                  tokenListIndex={index}\n                  tokenListLength={tokens.length}\n                  token={token}\n                  sparklineMap={sparklines}\n                  sortRank={tokenSortRank[token.address]}\n                />\n              )\n          )}\n        </TokenDataContainer>\n      </GridContainer>\n    )\n  }\n}\n","/workspace/Physica-Interfae/src/components/Tokens/TokenTable/SearchBar.tsx",[],"/workspace/Physica-Interfae/src/components/Slider/index.tsx",["4148"],"import { ChangeEvent, useCallback } from 'react'\nimport styled from 'styled-components/macro'\n\nconst StyledRangeInput = styled.input<{ size: number }>`\n  -webkit-appearance: none; /* Hides the slider so that custom slider can be made */\n  width: 100%; /* Specific width is required for Firefox. */\n  background: transparent; /* Otherwise white in Chrome */\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n\n  &::-moz-focus-outer {\n    border: 0;\n  }\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    height: ${({ size }) => size}px;\n    width: ${({ size }) => size}px;\n    background-color: ${({ theme }) => theme.accentAction};\n    border-radius: 100%;\n    border: none;\n    transform: translateY(-50%);\n    color: ${({ theme }) => theme.deprecated_bg1};\n\n    &:hover,\n    &:focus {\n      box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.08), 0px 16px 24px rgba(0, 0, 0, 0.06),\n        0px 24px 32px rgba(0, 0, 0, 0.04);\n    }\n  }\n\n  &::-moz-range-thumb {\n    height: ${({ size }) => size}px;\n    width: ${({ size }) => size}px;\n    background-color: #565a69;\n    border-radius: 100%;\n    border: none;\n    color: ${({ theme }) => theme.deprecated_bg1};\n\n    &:hover,\n    &:focus {\n      box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.08), 0px 16px 24px rgba(0, 0, 0, 0.06),\n        0px 24px 32px rgba(0, 0, 0, 0.04);\n    }\n  }\n\n  &::-ms-thumb {\n    height: ${({ size }) => size}px;\n    width: ${({ size }) => size}px;\n    background-color: #565a69;\n    border-radius: 100%;\n    color: ${({ theme }) => theme.deprecated_bg1};\n\n    &:hover,\n    &:focus {\n      box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.08), 0px 16px 24px rgba(0, 0, 0, 0.06),\n        0px 24px 32px rgba(0, 0, 0, 0.04);\n    }\n  }\n\n  &::-webkit-slider-runnable-track {\n    background: linear-gradient(90deg, ${({ theme }) => theme.accentAction}, ${({ theme }) => theme.accentAction});\n    height: 2px;\n  }\n\n  &::-moz-range-track {\n    background: linear-gradient(90deg, ${({ theme }) => theme.deprecated_bg5}, ${({ theme }) => theme.deprecated_bg3});\n    height: 2px;\n  }\n\n  &::-ms-track {\n    width: 100%;\n    border-color: transparent;\n    color: transparent;\n\n    background: ${({ theme }) => theme.deprecated_bg5};\n    height: 2px;\n  }\n  &::-ms-fill-lower {\n    background: ${({ theme }) => theme.deprecated_bg5};\n  }\n  &::-ms-fill-upper {\n    background: ${({ theme }) => theme.deprecated_bg3};\n  }\n`\n\ninterface InputSliderProps {\n  value: number\n  onChange: (value: number) => void\n  step?: number\n  min?: number\n  max?: number\n  size?: number\n}\n\nexport default function Slider({\n  value,\n  onChange,\n  min = 0,\n  step = 1,\n  max = 100,\n  size = 28,\n  ...rest\n}: InputSliderProps) {\n  const changeCallback = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(parseInt(e.target.value))\n    },\n    [onChange]\n  )\n\n  return (\n    <StyledRangeInput\n      size={size}\n      {...rest}\n      type=\"range\"\n      value={value}\n      style={{ padding: '15px 0' }}\n      onChange={changeCallback}\n      aria-labelledby=\"input slider\"\n      step={step}\n      min={min}\n      max={max}\n    />\n  )\n}\n","/workspace/Physica-Interfae/src/components/Menu/index.tsx",["4149"],"import { FunctionComponent, PropsWithChildren, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled, { css } from 'styled-components/macro'\n\nimport { ReactComponent as MenuIcon } from '../../assets/images/menu.svg'\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside'\nimport { useModalIsOpen, useToggleModal } from '../../state/application/hooks'\nimport { ApplicationModal } from '../../state/application/reducer'\nimport { ExternalLink } from '../../theme'\n\nexport enum FlyoutAlignment {\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nconst StyledMenuIcon = styled(MenuIcon)`\n  path {\n    stroke: ${({ theme }) => theme.textPrimary};\n  }\n`\n\nconst StyledMenu = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: none;\n  text-align: left;\n`\n\nconst MenuFlyout = styled.span<{ flyoutAlignment?: FlyoutAlignment }>`\n  min-width: 196px;\n  max-height: 350px;\n  overflow: auto;\n  background-color: ${({ theme }) => theme.deprecated_bg1};\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n  border: 1px solid ${({ theme }) => theme.backgroundSurface};\n  border-radius: 12px;\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  font-size: 16px;\n  position: absolute;\n  top: 3rem;\n  z-index: 100;\n\n  ${({ flyoutAlignment = FlyoutAlignment.RIGHT }) =>\n    flyoutAlignment === FlyoutAlignment.RIGHT\n      ? css`\n          right: 0rem;\n        `\n      : css`\n          left: 0rem;\n        `};\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToMedium`\n    bottom: unset;\n    right: 0;\n    left: unset;\n  `};\n`\n\nconst MenuItem = styled(ExternalLink)`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n  padding: 0.5rem 0.5rem;\n  justify-content: space-between;\n  color: ${({ theme }) => theme.textSecondary};\n  :hover {\n    color: ${({ theme }) => theme.textPrimary};\n    cursor: pointer;\n    text-decoration: none;\n  }\n`\n\nconst InternalMenuItem = styled(Link)`\n  flex: 1;\n  padding: 0.5rem 0.5rem;\n  color: ${({ theme }) => theme.textSecondary};\n  width: max-content;\n  text-decoration: none;\n  :hover {\n    color: ${({ theme }) => theme.textPrimary};\n    cursor: pointer;\n    text-decoration: none;\n  }\n  > svg {\n    margin-right: 8px;\n  }\n`\n\ninterface MenuProps {\n  flyoutAlignment?: FlyoutAlignment\n  ToggleUI?: FunctionComponent<PropsWithChildren<unknown>>\n  menuItems: {\n    content: any\n    link: string\n    external: boolean\n  }[]\n}\n\nconst ExternalMenuItem = styled(MenuItem)`\n  width: max-content;\n  text-decoration: none;\n`\n\nexport const Menu = ({ flyoutAlignment = FlyoutAlignment.RIGHT, ToggleUI, menuItems, ...rest }: MenuProps) => {\n  const node = useRef<HTMLDivElement>()\n  const open = useModalIsOpen(ApplicationModal.POOL_OVERVIEW_OPTIONS)\n  const toggle = useToggleModal(ApplicationModal.POOL_OVERVIEW_OPTIONS)\n  useOnClickOutside(node, open ? toggle : undefined)\n  const ToggleElement = ToggleUI || StyledMenuIcon\n  return (\n    <StyledMenu ref={node as any} {...rest}>\n      <ToggleElement onClick={toggle} />\n      {open && (\n        <MenuFlyout flyoutAlignment={flyoutAlignment}>\n          {menuItems.map(({ content, link, external }, i) =>\n            external ? (\n              <ExternalMenuItem href={link} key={i}>\n                {content}\n              </ExternalMenuItem>\n            ) : (\n              <InternalMenuItem to={link} key={i}>\n                {content}\n              </InternalMenuItem>\n            )\n          )}\n        </MenuFlyout>\n      )}\n    </StyledMenu>\n  )\n}\n","/workspace/Physica-Interfae/src/components/PositionList/index.tsx",[],"/workspace/Physica-Interfae/src/graphql/data/TopTokens.ts",["4150","4151","4152","4153","4154","4155","4156"],"import {\n  filterStringAtom,\n  filterTimeAtom,\n  sortAscendingAtom,\n  sortMethodAtom,\n  TokenSortMethod,\n} from 'components/Tokens/state'\nimport gql from 'graphql-tag'\nimport { useAtomValue } from 'jotai/utils'\nimport { useMemo } from 'react'\n\nimport {\n  Chain,\n  TopTokens100Query,\n  useTopTokens100Query,\n  useTopTokensSparklineQuery,\n} from './__generated__/types-and-hooks'\nimport {\n  CHAIN_NAME_TO_CHAIN_ID,\n  isPricePoint,\n  PollingInterval,\n  PricePoint,\n  toHistoryDuration,\n  unwrapToken,\n  usePollQueryWhileMounted,\n} from './util'\n\ngql`\n  query TopTokens100($duration: HistoryDuration!, $chain: Chain!) {\n    topTokens(pageSize: 100, page: 1, chain: $chain, orderBy: VOLUME) {\n      id\n      name\n      chain\n      address\n      symbol\n      standard\n      market(currency: USD) {\n        id\n        totalValueLocked {\n          id\n          value\n          currency\n        }\n        price {\n          id\n          value\n          currency\n        }\n        pricePercentChange(duration: $duration) {\n          id\n          currency\n          value\n        }\n        volume(duration: $duration) {\n          id\n          value\n          currency\n        }\n      }\n      project {\n        id\n        logoUrl\n      }\n    }\n  }\n`\n\n// We separately query sparkline data so that the large download time does not block Token Explore rendering\ngql`\n  query TopTokensSparkline($duration: HistoryDuration!, $chain: Chain!) {\n    topTokens(pageSize: 100, page: 1, chain: $chain, orderBy: VOLUME) {\n      id\n      address\n      chain\n      market(currency: USD) {\n        id\n        priceHistory(duration: $duration) {\n          id\n          timestamp\n          value\n        }\n      }\n    }\n  }\n`\n\nfunction useSortedTokens(tokens: TopTokens100Query['topTokens']) {\n  const sortMethod = useAtomValue(sortMethodAtom)\n  const sortAscending = useAtomValue(sortAscendingAtom)\n\n  return useMemo(() => {\n    if (!tokens) return undefined\n    let tokenArray = Array.from(tokens)\n    switch (sortMethod) {\n      case TokenSortMethod.PRICE:\n        tokenArray = tokenArray.sort((a, b) => (b?.market?.price?.value ?? 0) - (a?.market?.price?.value ?? 0))\n        break\n      case TokenSortMethod.PERCENT_CHANGE:\n        tokenArray = tokenArray.sort(\n          (a, b) => (b?.market?.pricePercentChange?.value ?? 0) - (a?.market?.pricePercentChange?.value ?? 0)\n        )\n        break\n      case TokenSortMethod.TOTAL_VALUE_LOCKED:\n        tokenArray = tokenArray.sort(\n          (a, b) => (b?.market?.totalValueLocked?.value ?? 0) - (a?.market?.totalValueLocked?.value ?? 0)\n        )\n        break\n      case TokenSortMethod.VOLUME:\n        tokenArray = tokenArray.sort((a, b) => (b?.market?.volume?.value ?? 0) - (a?.market?.volume?.value ?? 0))\n        break\n    }\n\n    return sortAscending ? tokenArray.reverse() : tokenArray\n  }, [tokens, sortMethod, sortAscending])\n}\n\nfunction useFilteredTokens(tokens: TopTokens100Query['topTokens']) {\n  const filterString = useAtomValue(filterStringAtom)\n\n  const lowercaseFilterString = useMemo(() => filterString.toLowerCase(), [filterString])\n\n  return useMemo(() => {\n    if (!tokens) return undefined\n    let returnTokens = tokens\n    if (lowercaseFilterString) {\n      returnTokens = returnTokens?.filter((token) => {\n        const addressIncludesFilterString = token?.address?.toLowerCase().includes(lowercaseFilterString)\n        const nameIncludesFilterString = token?.name?.toLowerCase().includes(lowercaseFilterString)\n        const symbolIncludesFilterString = token?.symbol?.toLowerCase().includes(lowercaseFilterString)\n        return nameIncludesFilterString || symbolIncludesFilterString || addressIncludesFilterString\n      })\n    }\n    return returnTokens\n  }, [tokens, lowercaseFilterString])\n}\n\n// Number of items to render in each fetch in infinite scroll.\nexport const PAGE_SIZE = 20\nexport type SparklineMap = { [key: string]: PricePoint[] | undefined }\nexport type TopToken = NonNullable<NonNullable<TopTokens100Query>['topTokens']>[number]\n\ninterface UseTopTokensReturnValue {\n  tokens: TopToken[] | undefined\n  tokenSortRank: Record<string, number>\n  loadingTokens: boolean\n  sparklines: SparklineMap\n}\n\nexport function useTopTokens(chain: Chain): UseTopTokensReturnValue {\n  const chainId = CHAIN_NAME_TO_CHAIN_ID[chain]\n  const duration = toHistoryDuration(useAtomValue(filterTimeAtom))\n\n  const { data: sparklineQuery } = usePollQueryWhileMounted(\n    useTopTokensSparklineQuery({\n      variables: { duration, chain },\n    }),\n    PollingInterval.Slow\n  )\n\n  const sparklines = useMemo(() => {\n    const unwrappedTokens = sparklineQuery?.topTokens?.map((topToken) => unwrapToken(chainId, topToken))\n    const map: SparklineMap = {}\n    unwrappedTokens?.forEach(\n      (current) => current?.address && (map[current.address] = current?.market?.priceHistory?.filter(isPricePoint))\n    )\n    return map\n  }, [chainId, sparklineQuery?.topTokens])\n\n  const { data, loading: loadingTokens } = usePollQueryWhileMounted(\n    useTopTokens100Query({\n      variables: { duration, chain },\n    }),\n    PollingInterval.Fast\n  )\n\n  const unwrappedTokens = useMemo(() => data?.topTokens?.map((token) => unwrapToken(chainId, token)), [chainId, data])\n  const sortedTokens = useSortedTokens(unwrappedTokens)\n  const tokenSortRank = useMemo(\n    () =>\n      sortedTokens?.reduce((acc, cur, i) => {\n        if (!cur.address) return acc\n        return {\n          ...acc,\n          [cur.address]: i + 1,\n        }\n      }, {}) ?? {},\n    [sortedTokens]\n  )\n  const filteredTokens = useFilteredTokens(sortedTokens)\n  return useMemo(\n    () => ({ tokens: filteredTokens, tokenSortRank, loadingTokens, sparklines }),\n    [filteredTokens, tokenSortRank, loadingTokens, sparklines]\n  )\n}\n",{"ruleId":"4157","severity":2,"message":"4158","line":75,"column":16,"nodeType":null,"messageId":"4159","endLine":75,"endColumn":16,"fix":"4160"},{"ruleId":"4157","severity":2,"message":"4158","line":20,"column":93,"nodeType":null,"messageId":"4159","endLine":20,"endColumn":93,"fix":"4161"},{"ruleId":"4157","severity":2,"message":"4158","line":45,"column":77,"nodeType":null,"messageId":"4159","endLine":45,"endColumn":77,"fix":"4162"},{"ruleId":"4157","severity":2,"message":"4158","line":120,"column":66,"nodeType":null,"messageId":"4159","endLine":120,"endColumn":66,"fix":"4163"},{"ruleId":"4157","severity":2,"message":"4158","line":58,"column":15,"nodeType":null,"messageId":"4159","endLine":58,"endColumn":15,"fix":"4164"},{"ruleId":"4157","severity":2,"message":"4158","line":68,"column":15,"nodeType":null,"messageId":"4159","endLine":68,"endColumn":15,"fix":"4165"},{"ruleId":"4157","severity":2,"message":"4158","line":52,"column":60,"nodeType":null,"messageId":"4159","endLine":52,"endColumn":60,"fix":"4166"},{"ruleId":"4157","severity":2,"message":"4158","line":18,"column":20,"nodeType":null,"messageId":"4159","endLine":18,"endColumn":20,"fix":"4167"},{"ruleId":"4168","severity":1,"message":"4169","line":88,"column":20,"nodeType":"4170","messageId":"4171","endLine":88,"endColumn":25},{"ruleId":"4157","severity":2,"message":"4158","line":173,"column":93,"nodeType":null,"messageId":"4159","endLine":173,"endColumn":93,"fix":"4172"},{"ruleId":"4157","severity":2,"message":"4158","line":202,"column":14,"nodeType":null,"messageId":"4159","endLine":202,"endColumn":14,"fix":"4173"},{"ruleId":"4174","severity":2,"message":"4175","line":229,"column":25,"nodeType":"4176","messageId":"4177","endLine":230,"endColumn":21},{"ruleId":"4157","severity":2,"message":"4178","line":230,"column":1,"nodeType":null,"messageId":"4159","endLine":230,"endColumn":1,"fix":"4179"},{"ruleId":"4157","severity":2,"message":"4180","line":231,"column":1,"nodeType":null,"messageId":"4181","endLine":232,"endColumn":1,"fix":"4182"},{"ruleId":"4157","severity":2,"message":"4180","line":247,"column":1,"nodeType":null,"messageId":"4181","endLine":248,"endColumn":1,"fix":"4183"},{"ruleId":"4157","severity":2,"message":"4180","line":251,"column":76,"nodeType":null,"messageId":"4181","endLine":252,"endColumn":1,"fix":"4184"},{"ruleId":"4157","severity":2,"message":"4180","line":257,"column":1,"nodeType":null,"messageId":"4181","endLine":258,"endColumn":1,"fix":"4185"},{"ruleId":"4157","severity":2,"message":"4180","line":268,"column":1,"nodeType":null,"messageId":"4181","endLine":269,"endColumn":1,"fix":"4186"},{"ruleId":"4157","severity":2,"message":"4180","line":274,"column":27,"nodeType":null,"messageId":"4181","endLine":275,"endColumn":1,"fix":"4187"},{"ruleId":"4157","severity":2,"message":"4180","line":278,"column":1,"nodeType":null,"messageId":"4181","endLine":279,"endColumn":1,"fix":"4188"},{"ruleId":"4157","severity":2,"message":"4180","line":280,"column":83,"nodeType":null,"messageId":"4181","endLine":281,"endColumn":1,"fix":"4189"},{"ruleId":"4157","severity":2,"message":"4180","line":329,"column":21,"nodeType":null,"messageId":"4181","endLine":330,"endColumn":1,"fix":"4190"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":15,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":15,"fix":"4191"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":11,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":11,"fix":"4192"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":58,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":58,"fix":"4193"},{"ruleId":"4157","severity":2,"message":"4158","line":52,"column":31,"nodeType":null,"messageId":"4159","endLine":52,"endColumn":31,"fix":"4194"},{"ruleId":"4157","severity":2,"message":"4158","line":43,"column":84,"nodeType":null,"messageId":"4159","endLine":43,"endColumn":84,"fix":"4195"},{"ruleId":"4157","severity":2,"message":"4158","line":56,"column":107,"nodeType":null,"messageId":"4159","endLine":56,"endColumn":107,"fix":"4196"},{"ruleId":"4157","severity":2,"message":"4158","line":68,"column":81,"nodeType":null,"messageId":"4159","endLine":68,"endColumn":81,"fix":"4197"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":15,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":15,"fix":"4198"},{"ruleId":"4157","severity":2,"message":"4158","line":164,"column":15,"nodeType":null,"messageId":"4159","endLine":164,"endColumn":15,"fix":"4199"},{"ruleId":"4157","severity":2,"message":"4158","line":7,"column":58,"nodeType":null,"messageId":"4159","endLine":7,"endColumn":58,"fix":"4200"},{"ruleId":"4157","severity":2,"message":"4158","line":15,"column":173,"nodeType":null,"messageId":"4159","endLine":15,"endColumn":173,"fix":"4201"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":23,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":23,"fix":"4202"},{"ruleId":"4157","severity":2,"message":"4158","line":34,"column":15,"nodeType":null,"messageId":"4159","endLine":34,"endColumn":15,"fix":"4203"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":15,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":15,"fix":"4204"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":66,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":66,"fix":"4205"},{"ruleId":"4157","severity":2,"message":"4158","line":64,"column":24,"nodeType":null,"messageId":"4159","endLine":64,"endColumn":24,"fix":"4206"},{"ruleId":"4157","severity":2,"message":"4158","line":48,"column":33,"nodeType":null,"messageId":"4159","endLine":48,"endColumn":33,"fix":"4207"},{"ruleId":"4157","severity":2,"message":"4158","line":34,"column":14,"nodeType":null,"messageId":"4159","endLine":34,"endColumn":14,"fix":"4208"},{"ruleId":"4157","severity":2,"message":"4158","line":46,"column":35,"nodeType":null,"messageId":"4159","endLine":46,"endColumn":35,"fix":"4209"},{"ruleId":"4157","severity":2,"message":"4158","line":85,"column":36,"nodeType":null,"messageId":"4159","endLine":85,"endColumn":36,"fix":"4210"},{"ruleId":"4157","severity":2,"message":"4158","line":146,"column":98,"nodeType":null,"messageId":"4159","endLine":146,"endColumn":98,"fix":"4211"},{"ruleId":"4157","severity":2,"message":"4158","line":148,"column":49,"nodeType":null,"messageId":"4159","endLine":148,"endColumn":49,"fix":"4212"},{"ruleId":"4157","severity":2,"message":"4158","line":154,"column":98,"nodeType":null,"messageId":"4159","endLine":154,"endColumn":98,"fix":"4213"},{"ruleId":"4157","severity":2,"message":"4158","line":156,"column":49,"nodeType":null,"messageId":"4159","endLine":156,"endColumn":49,"fix":"4214"},{"ruleId":"4157","severity":2,"message":"4158","line":167,"column":41,"nodeType":null,"messageId":"4159","endLine":167,"endColumn":41,"fix":"4215"},{"ruleId":"4157","severity":2,"message":"4158","line":185,"column":14,"nodeType":null,"messageId":"4159","endLine":185,"endColumn":14,"fix":"4216"},{"ruleId":"4157","severity":2,"message":"4158","line":197,"column":14,"nodeType":null,"messageId":"4159","endLine":197,"endColumn":14,"fix":"4217"},{"ruleId":"4157","severity":2,"message":"4158","line":220,"column":32,"nodeType":null,"messageId":"4159","endLine":220,"endColumn":32,"fix":"4218"},{"ruleId":"4157","severity":2,"message":"4158","line":226,"column":36,"nodeType":null,"messageId":"4159","endLine":226,"endColumn":36,"fix":"4219"},{"ruleId":"4157","severity":2,"message":"4158","line":231,"column":36,"nodeType":null,"messageId":"4159","endLine":231,"endColumn":36,"fix":"4220"},{"ruleId":"4157","severity":2,"message":"4158","line":294,"column":11,"nodeType":null,"messageId":"4159","endLine":294,"endColumn":11,"fix":"4221"},{"ruleId":"4157","severity":2,"message":"4158","line":306,"column":11,"nodeType":null,"messageId":"4159","endLine":306,"endColumn":11,"fix":"4222"},{"ruleId":"4157","severity":2,"message":"4158","line":328,"column":9,"nodeType":null,"messageId":"4159","endLine":328,"endColumn":9,"fix":"4223"},{"ruleId":"4157","severity":2,"message":"4158","line":694,"column":32,"nodeType":null,"messageId":"4159","endLine":694,"endColumn":32,"fix":"4224"},{"ruleId":"4157","severity":2,"message":"4158","line":703,"column":26,"nodeType":null,"messageId":"4159","endLine":703,"endColumn":26,"fix":"4225"},{"ruleId":"4157","severity":2,"message":"4158","line":707,"column":26,"nodeType":null,"messageId":"4159","endLine":707,"endColumn":26,"fix":"4226"},{"ruleId":"4157","severity":2,"message":"4158","line":46,"column":25,"nodeType":null,"messageId":"4159","endLine":46,"endColumn":25,"fix":"4227"},{"ruleId":"4157","severity":2,"message":"4158","line":62,"column":15,"nodeType":null,"messageId":"4159","endLine":62,"endColumn":15,"fix":"4228"},{"ruleId":"4157","severity":2,"message":"4158","line":79,"column":15,"nodeType":null,"messageId":"4159","endLine":79,"endColumn":15,"fix":"4229"},{"ruleId":"4157","severity":2,"message":"4158","line":104,"column":15,"nodeType":null,"messageId":"4159","endLine":104,"endColumn":15,"fix":"4230"},{"ruleId":"4157","severity":2,"message":"4158","line":119,"column":31,"nodeType":null,"messageId":"4159","endLine":119,"endColumn":31,"fix":"4231"},{"ruleId":"4157","severity":2,"message":"4158","line":135,"column":11,"nodeType":null,"messageId":"4159","endLine":135,"endColumn":11,"fix":"4232"},{"ruleId":"4157","severity":2,"message":"4158","line":138,"column":15,"nodeType":null,"messageId":"4159","endLine":138,"endColumn":15,"fix":"4233"},{"ruleId":"4157","severity":2,"message":"4158","line":143,"column":54,"nodeType":null,"messageId":"4159","endLine":143,"endColumn":54,"fix":"4234"},{"ruleId":"4157","severity":2,"message":"4158","line":156,"column":15,"nodeType":null,"messageId":"4159","endLine":156,"endColumn":15,"fix":"4235"},{"ruleId":"4157","severity":2,"message":"4158","line":170,"column":48,"nodeType":null,"messageId":"4159","endLine":170,"endColumn":48,"fix":"4236"},{"ruleId":"4157","severity":2,"message":"4158","line":185,"column":15,"nodeType":null,"messageId":"4159","endLine":185,"endColumn":15,"fix":"4237"},{"ruleId":"4157","severity":2,"message":"4158","line":197,"column":15,"nodeType":null,"messageId":"4159","endLine":197,"endColumn":15,"fix":"4238"},{"ruleId":"4157","severity":2,"message":"4158","line":231,"column":15,"nodeType":null,"messageId":"4159","endLine":231,"endColumn":15,"fix":"4239"},{"ruleId":"4240","severity":2,"message":"4241","line":239,"column":1,"nodeType":"4242","endLine":248,"endColumn":2},{"ruleId":"4157","severity":2,"message":"4158","line":265,"column":17,"nodeType":null,"messageId":"4159","endLine":265,"endColumn":17,"fix":"4243"},{"ruleId":"4157","severity":2,"message":"4158","line":301,"column":22,"nodeType":null,"messageId":"4159","endLine":301,"endColumn":22,"fix":"4244"},{"ruleId":"4157","severity":2,"message":"4158","line":319,"column":45,"nodeType":null,"messageId":"4159","endLine":319,"endColumn":45,"fix":"4245"},{"ruleId":"4157","severity":2,"message":"4158","line":114,"column":12,"nodeType":null,"messageId":"4159","endLine":114,"endColumn":12,"fix":"4246"},{"ruleId":"4157","severity":2,"message":"4158","line":140,"column":28,"nodeType":null,"messageId":"4159","endLine":140,"endColumn":28,"fix":"4247"},{"ruleId":"4157","severity":2,"message":"4158","line":32,"column":13,"nodeType":null,"messageId":"4159","endLine":32,"endColumn":13,"fix":"4248"},{"ruleId":"4157","severity":2,"message":"4249","line":17,"column":16,"nodeType":null,"messageId":"4250","endLine":17,"endColumn":121,"fix":"4251"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":22,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":22,"fix":"4252"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":29,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":29,"fix":"4253"},{"ruleId":"4157","severity":2,"message":"4158","line":132,"column":18,"nodeType":null,"messageId":"4159","endLine":132,"endColumn":18,"fix":"4254"},{"ruleId":"4255","severity":2,"message":"4256","line":48,"column":46,"nodeType":"4257","messageId":"4258","endLine":48,"endColumn":50},{"ruleId":"4255","severity":2,"message":"4259","line":48,"column":52,"nodeType":"4257","messageId":"4258","endLine":48,"endColumn":62},{"ruleId":"4255","severity":2,"message":"4260","line":48,"column":64,"nodeType":"4257","messageId":"4258","endLine":48,"endColumn":66},{"ruleId":"4255","severity":2,"message":"4261","line":48,"column":68,"nodeType":"4257","messageId":"4258","endLine":48,"endColumn":76},{"ruleId":"4255","severity":2,"message":"4262","line":48,"column":78,"nodeType":"4257","messageId":"4258","endLine":48,"endColumn":86},{"ruleId":"4255","severity":2,"message":"4263","line":49,"column":31,"nodeType":"4170","messageId":"4258","endLine":49,"endColumn":41},{"ruleId":"4255","severity":2,"message":"4263","line":49,"column":59,"nodeType":"4170","messageId":"4258","endLine":49,"endColumn":69},{"ruleId":"4168","severity":1,"message":"4264","line":75,"column":11,"nodeType":"4170","messageId":"4171","endLine":75,"endColumn":19},{"ruleId":"4168","severity":1,"message":"4265","line":77,"column":9,"nodeType":"4170","messageId":"4171","endLine":77,"endColumn":18},{"ruleId":"4168","severity":1,"message":"4266","line":79,"column":9,"nodeType":"4170","messageId":"4171","endLine":79,"endColumn":21},{"ruleId":"4168","severity":1,"message":"4267","line":80,"column":9,"nodeType":"4170","messageId":"4171","endLine":80,"endColumn":18},{"ruleId":"4168","severity":1,"message":"4268","line":82,"column":9,"nodeType":"4170","messageId":"4171","endLine":82,"endColumn":31},{"ruleId":"4168","severity":1,"message":"4269","line":110,"column":9,"nodeType":"4170","messageId":"4171","endLine":110,"endColumn":17},{"ruleId":"4157","severity":2,"message":"4158","line":40,"column":73,"nodeType":null,"messageId":"4159","endLine":40,"endColumn":73,"fix":"4270"},{"ruleId":"4157","severity":2,"message":"4158","line":74,"column":51,"nodeType":null,"messageId":"4159","endLine":74,"endColumn":51,"fix":"4271"},{"ruleId":"4157","severity":2,"message":"4158","line":90,"column":23,"nodeType":null,"messageId":"4159","endLine":90,"endColumn":23,"fix":"4272"},{"ruleId":"4157","severity":2,"message":"4158","line":107,"column":118,"nodeType":null,"messageId":"4159","endLine":107,"endColumn":118,"fix":"4273"},{"ruleId":"4157","severity":2,"message":"4158","line":112,"column":50,"nodeType":null,"messageId":"4159","endLine":112,"endColumn":50,"fix":"4274"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":21,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":21,"fix":"4275"},{"ruleId":"4157","severity":2,"message":"4158","line":193,"column":7,"nodeType":null,"messageId":"4159","endLine":193,"endColumn":7,"fix":"4276"},{"ruleId":"4157","severity":2,"message":"4158","line":203,"column":7,"nodeType":null,"messageId":"4159","endLine":203,"endColumn":7,"fix":"4277"},{"ruleId":"4157","severity":2,"message":"4158","line":211,"column":74,"nodeType":null,"messageId":"4159","endLine":211,"endColumn":74,"fix":"4278"},{"ruleId":"4157","severity":2,"message":"4158","line":215,"column":74,"nodeType":null,"messageId":"4159","endLine":215,"endColumn":74,"fix":"4279"},{"ruleId":"4157","severity":2,"message":"4158","line":219,"column":72,"nodeType":null,"messageId":"4159","endLine":219,"endColumn":72,"fix":"4280"},{"ruleId":"4157","severity":2,"message":"4158","line":347,"column":14,"nodeType":null,"messageId":"4159","endLine":347,"endColumn":14,"fix":"4281"},{"ruleId":"4157","severity":2,"message":"4158","line":359,"column":50,"nodeType":null,"messageId":"4159","endLine":359,"endColumn":50,"fix":"4282"},{"ruleId":"4157","severity":2,"message":"4158","line":371,"column":50,"nodeType":null,"messageId":"4159","endLine":371,"endColumn":50,"fix":"4283"},{"ruleId":"4157","severity":2,"message":"4158","line":380,"column":78,"nodeType":null,"messageId":"4159","endLine":380,"endColumn":78,"fix":"4284"},{"ruleId":"4157","severity":2,"message":"4158","line":556,"column":25,"nodeType":null,"messageId":"4159","endLine":556,"endColumn":25,"fix":"4285"},{"ruleId":"4157","severity":2,"message":"4158","line":563,"column":25,"nodeType":null,"messageId":"4159","endLine":563,"endColumn":25,"fix":"4286"},{"ruleId":"4157","severity":2,"message":"4158","line":633,"column":116,"nodeType":null,"messageId":"4159","endLine":633,"endColumn":116,"fix":"4287"},{"ruleId":"4288","severity":2,"message":"4289","line":1,"column":1,"nodeType":null,"messageId":"4290","endLine":24,"endColumn":58,"fix":"4291"},{"ruleId":"4168","severity":1,"message":"4292","line":6,"column":10,"nodeType":"4170","messageId":"4171","endLine":6,"endColumn":20},{"ruleId":"4293","severity":2,"message":"4292","line":6,"column":10,"nodeType":"4170","messageId":"4171","endLine":6,"endColumn":20,"fix":"4294"},{"ruleId":"4157","severity":2,"message":"4295","line":30,"column":13,"nodeType":null,"messageId":"4181","endLine":30,"endColumn":14,"fix":"4296"},{"ruleId":"4168","severity":1,"message":"4297","line":73,"column":7,"nodeType":"4170","messageId":"4171","endLine":73,"endColumn":20},{"ruleId":"4168","severity":1,"message":"4298","line":88,"column":7,"nodeType":"4170","messageId":"4171","endLine":88,"endColumn":11},{"ruleId":"4157","severity":2,"message":"4299","line":143,"column":36,"nodeType":null,"messageId":"4250","endLine":146,"endColumn":15,"fix":"4300"},{"ruleId":"4157","severity":2,"message":"4301","line":187,"column":20,"nodeType":null,"messageId":"4250","endLine":187,"endColumn":21,"fix":"4302"},{"ruleId":"4157","severity":2,"message":"4303","line":188,"column":53,"nodeType":null,"messageId":"4181","endLine":188,"endColumn":54,"fix":"4304"},{"ruleId":"4157","severity":2,"message":"4303","line":195,"column":56,"nodeType":null,"messageId":"4181","endLine":195,"endColumn":57,"fix":"4305"},{"ruleId":"4168","severity":1,"message":"4306","line":216,"column":7,"nodeType":"4170","messageId":"4171","endLine":216,"endColumn":25},{"ruleId":"4168","severity":1,"message":"4307","line":237,"column":7,"nodeType":"4170","messageId":"4171","endLine":237,"endColumn":21},{"ruleId":"4168","severity":1,"message":"4308","line":311,"column":7,"nodeType":"4170","messageId":"4171","endLine":311,"endColumn":18},{"ruleId":"4168","severity":1,"message":"4309","line":322,"column":7,"nodeType":"4170","messageId":"4171","endLine":322,"endColumn":24},{"ruleId":"4168","severity":1,"message":"4310","line":330,"column":9,"nodeType":"4170","messageId":"4171","endLine":330,"endColumn":17},{"ruleId":"4168","severity":1,"message":"4311","line":340,"column":9,"nodeType":"4170","messageId":"4171","endLine":340,"endColumn":26},{"ruleId":"4157","severity":2,"message":"4312","line":376,"column":11,"nodeType":null,"messageId":"4181","endLine":376,"endColumn":13,"fix":"4313"},{"ruleId":"4157","severity":2,"message":"4314","line":380,"column":13,"nodeType":null,"messageId":"4159","endLine":380,"endColumn":13,"fix":"4315"},{"ruleId":"4157","severity":2,"message":"4316","line":381,"column":1,"nodeType":null,"messageId":"4250","endLine":381,"endColumn":15,"fix":"4317"},{"ruleId":"4157","severity":2,"message":"4314","line":382,"column":17,"nodeType":null,"messageId":"4159","endLine":382,"endColumn":17,"fix":"4318"},{"ruleId":"4157","severity":2,"message":"4319","line":383,"column":1,"nodeType":null,"messageId":"4250","endLine":383,"endColumn":19,"fix":"4320"},{"ruleId":"4157","severity":2,"message":"4314","line":384,"column":1,"nodeType":null,"messageId":"4159","endLine":384,"endColumn":1,"fix":"4321"},{"ruleId":"4157","severity":2,"message":"4314","line":385,"column":19,"nodeType":null,"messageId":"4159","endLine":385,"endColumn":19,"fix":"4322"},{"ruleId":"4157","severity":2,"message":"4314","line":386,"column":1,"nodeType":null,"messageId":"4159","endLine":386,"endColumn":1,"fix":"4323"},{"ruleId":"4157","severity":2,"message":"4314","line":387,"column":21,"nodeType":null,"messageId":"4159","endLine":387,"endColumn":21,"fix":"4324"},{"ruleId":"4157","severity":2,"message":"4319","line":388,"column":1,"nodeType":null,"messageId":"4250","endLine":388,"endColumn":19,"fix":"4325"},{"ruleId":"4157","severity":2,"message":"4314","line":389,"column":1,"nodeType":null,"messageId":"4159","endLine":389,"endColumn":1,"fix":"4326"},{"ruleId":"4157","severity":2,"message":"4314","line":390,"column":15,"nodeType":null,"messageId":"4159","endLine":390,"endColumn":15,"fix":"4327"},{"ruleId":"4157","severity":2,"message":"4314","line":391,"column":1,"nodeType":null,"messageId":"4159","endLine":391,"endColumn":1,"fix":"4328"},{"ruleId":"4157","severity":2,"message":"4314","line":392,"column":19,"nodeType":null,"messageId":"4159","endLine":392,"endColumn":19,"fix":"4329"},{"ruleId":"4157","severity":2,"message":"4314","line":393,"column":1,"nodeType":null,"messageId":"4159","endLine":393,"endColumn":1,"fix":"4330"},{"ruleId":"4157","severity":2,"message":"4314","line":394,"column":19,"nodeType":null,"messageId":"4159","endLine":394,"endColumn":19,"fix":"4331"},{"ruleId":"4157","severity":2,"message":"4319","line":395,"column":1,"nodeType":null,"messageId":"4250","endLine":395,"endColumn":19,"fix":"4332"},{"ruleId":"4157","severity":2,"message":"4314","line":396,"column":1,"nodeType":null,"messageId":"4159","endLine":396,"endColumn":1,"fix":"4333"},{"ruleId":"4157","severity":2,"message":"4314","line":397,"column":19,"nodeType":null,"messageId":"4159","endLine":397,"endColumn":19,"fix":"4334"},{"ruleId":"4157","severity":2,"message":"4314","line":398,"column":1,"nodeType":null,"messageId":"4159","endLine":398,"endColumn":1,"fix":"4335"},{"ruleId":"4157","severity":2,"message":"4314","line":399,"column":15,"nodeType":null,"messageId":"4159","endLine":399,"endColumn":15,"fix":"4336"},{"ruleId":"4157","severity":2,"message":"4314","line":400,"column":1,"nodeType":null,"messageId":"4159","endLine":400,"endColumn":1,"fix":"4337"},{"ruleId":"4157","severity":2,"message":"4314","line":401,"column":13,"nodeType":null,"messageId":"4159","endLine":401,"endColumn":13,"fix":"4338"},{"ruleId":"4157","severity":2,"message":"4316","line":402,"column":1,"nodeType":null,"messageId":"4250","endLine":402,"endColumn":15,"fix":"4339"},{"ruleId":"4157","severity":2,"message":"4314","line":403,"column":1,"nodeType":null,"messageId":"4159","endLine":403,"endColumn":1,"fix":"4340"},{"ruleId":"4157","severity":2,"message":"4314","line":404,"column":1,"nodeType":null,"messageId":"4159","endLine":404,"endColumn":1,"fix":"4341"},{"ruleId":"4157","severity":2,"message":"4314","line":405,"column":1,"nodeType":null,"messageId":"4159","endLine":405,"endColumn":1,"fix":"4342"},{"ruleId":"4157","severity":2,"message":"4314","line":406,"column":19,"nodeType":null,"messageId":"4159","endLine":406,"endColumn":19,"fix":"4343"},{"ruleId":"4157","severity":2,"message":"4314","line":407,"column":17,"nodeType":null,"messageId":"4159","endLine":407,"endColumn":17,"fix":"4344"},{"ruleId":"4157","severity":2,"message":"4314","line":408,"column":1,"nodeType":null,"messageId":"4159","endLine":408,"endColumn":1,"fix":"4345"},{"ruleId":"4157","severity":2,"message":"4346","line":409,"column":1,"nodeType":null,"messageId":"4250","endLine":409,"endColumn":13,"fix":"4347"},{"ruleId":"4157","severity":2,"message":"4314","line":410,"column":1,"nodeType":null,"messageId":"4159","endLine":410,"endColumn":1,"fix":"4348"},{"ruleId":"4157","severity":2,"message":"4314","line":411,"column":15,"nodeType":null,"messageId":"4159","endLine":411,"endColumn":15,"fix":"4349"},{"ruleId":"4157","severity":2,"message":"4314","line":412,"column":1,"nodeType":null,"messageId":"4159","endLine":412,"endColumn":1,"fix":"4350"},{"ruleId":"4157","severity":2,"message":"4314","line":413,"column":17,"nodeType":null,"messageId":"4159","endLine":413,"endColumn":17,"fix":"4351"},{"ruleId":"4157","severity":2,"message":"4314","line":414,"column":1,"nodeType":null,"messageId":"4159","endLine":414,"endColumn":1,"fix":"4352"},{"ruleId":"4157","severity":2,"message":"4314","line":415,"column":15,"nodeType":null,"messageId":"4159","endLine":415,"endColumn":15,"fix":"4353"},{"ruleId":"4157","severity":2,"message":"4354","line":416,"column":1,"nodeType":null,"messageId":"4250","endLine":416,"endColumn":17,"fix":"4355"},{"ruleId":"4157","severity":2,"message":"4314","line":417,"column":19,"nodeType":null,"messageId":"4159","endLine":417,"endColumn":19,"fix":"4356"},{"ruleId":"4157","severity":2,"message":"4357","line":418,"column":1,"nodeType":null,"messageId":"4250","endLine":418,"endColumn":21,"fix":"4358"},{"ruleId":"4157","severity":2,"message":"4314","line":419,"column":1,"nodeType":null,"messageId":"4159","endLine":419,"endColumn":1,"fix":"4359"},{"ruleId":"4157","severity":2,"message":"4314","line":420,"column":17,"nodeType":null,"messageId":"4159","endLine":420,"endColumn":17,"fix":"4360"},{"ruleId":"4157","severity":2,"message":"4314","line":421,"column":1,"nodeType":null,"messageId":"4159","endLine":421,"endColumn":1,"fix":"4361"},{"ruleId":"4157","severity":2,"message":"4314","line":422,"column":1,"nodeType":null,"messageId":"4159","endLine":422,"endColumn":1,"fix":"4362"},{"ruleId":"4157","severity":2,"message":"4158","line":79,"column":94,"nodeType":null,"messageId":"4159","endLine":79,"endColumn":94,"fix":"4363"},{"ruleId":"4157","severity":2,"message":"4158","line":115,"column":97,"nodeType":null,"messageId":"4159","endLine":115,"endColumn":97,"fix":"4364"},{"ruleId":"4157","severity":2,"message":"4158","line":116,"column":16,"nodeType":null,"messageId":"4159","endLine":116,"endColumn":16,"fix":"4365"},{"ruleId":"4157","severity":2,"message":"4158","line":128,"column":104,"nodeType":null,"messageId":"4159","endLine":128,"endColumn":104,"fix":"4366"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":23,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":23,"fix":"4367"},{"ruleId":"4157","severity":2,"message":"4158","line":154,"column":4,"nodeType":null,"messageId":"4159","endLine":154,"endColumn":4,"fix":"4368"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":31,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":31,"fix":"4369"},{"ruleId":"4157","severity":2,"message":"4158","line":155,"column":35,"nodeType":null,"messageId":"4159","endLine":155,"endColumn":35,"fix":"4370"},{"ruleId":"4157","severity":2,"message":"4158","line":66,"column":21,"nodeType":null,"messageId":"4159","endLine":66,"endColumn":21,"fix":"4371"},{"ruleId":"4157","severity":2,"message":"4158","line":238,"column":28,"nodeType":null,"messageId":"4159","endLine":238,"endColumn":28,"fix":"4372"},{"ruleId":"4168","severity":1,"message":"4373","line":38,"column":7,"nodeType":"4170","messageId":"4171","endLine":38,"endColumn":34},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":47,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":47,"fix":"4374"},{"ruleId":"4157","severity":2,"message":"4158","line":66,"column":21,"nodeType":null,"messageId":"4159","endLine":66,"endColumn":21,"fix":"4375"},{"ruleId":"4157","severity":2,"message":"4158","line":69,"column":24,"nodeType":null,"messageId":"4159","endLine":69,"endColumn":24,"fix":"4376"},{"ruleId":"4157","severity":2,"message":"4377","line":67,"column":65,"nodeType":null,"messageId":"4250","endLine":67,"endColumn":121,"fix":"4378"},{"ruleId":"4157","severity":2,"message":"4158","line":117,"column":7,"nodeType":null,"messageId":"4159","endLine":117,"endColumn":7,"fix":"4379"},{"ruleId":"4157","severity":2,"message":"4158","line":127,"column":7,"nodeType":null,"messageId":"4159","endLine":127,"endColumn":7,"fix":"4380"},{"ruleId":"4157","severity":2,"message":"4158","line":208,"column":11,"nodeType":null,"messageId":"4159","endLine":208,"endColumn":11,"fix":"4381"},{"ruleId":"4157","severity":2,"message":"4158","line":291,"column":41,"nodeType":null,"messageId":"4159","endLine":291,"endColumn":41,"fix":"4382"},{"ruleId":"4157","severity":2,"message":"4158","line":306,"column":41,"nodeType":null,"messageId":"4159","endLine":306,"endColumn":41,"fix":"4383"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":48,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":48,"fix":"4384"},{"ruleId":"4157","severity":2,"message":"4158","line":84,"column":7,"nodeType":null,"messageId":"4159","endLine":84,"endColumn":7,"fix":"4385"},{"ruleId":"4157","severity":2,"message":"4158","line":325,"column":25,"nodeType":null,"messageId":"4159","endLine":325,"endColumn":25,"fix":"4386"},{"ruleId":"4157","severity":2,"message":"4158","line":393,"column":8,"nodeType":null,"messageId":"4159","endLine":393,"endColumn":8,"fix":"4387"},{"ruleId":"4157","severity":2,"message":"4158","line":437,"column":4,"nodeType":null,"messageId":"4159","endLine":437,"endColumn":4,"fix":"4388"},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":27,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":27,"fix":"4389"},{"ruleId":"4157","severity":2,"message":"4158","line":20,"column":6,"nodeType":null,"messageId":"4159","endLine":20,"endColumn":6,"fix":"4390"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":31,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":31,"fix":"4391"},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":11,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":11,"fix":"4392"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":11,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":11,"fix":"4393"},{"ruleId":"4157","severity":2,"message":"4158","line":33,"column":11,"nodeType":null,"messageId":"4159","endLine":33,"endColumn":11,"fix":"4394"},{"ruleId":"4157","severity":2,"message":"4158","line":40,"column":11,"nodeType":null,"messageId":"4159","endLine":40,"endColumn":11,"fix":"4395"},{"ruleId":"4157","severity":2,"message":"4158","line":47,"column":11,"nodeType":null,"messageId":"4159","endLine":47,"endColumn":11,"fix":"4396"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":11,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":11,"fix":"4397"},{"ruleId":"4157","severity":2,"message":"4158","line":61,"column":11,"nodeType":null,"messageId":"4159","endLine":61,"endColumn":11,"fix":"4398"},{"ruleId":"4157","severity":2,"message":"4158","line":68,"column":11,"nodeType":null,"messageId":"4159","endLine":68,"endColumn":11,"fix":"4399"},{"ruleId":"4157","severity":2,"message":"4158","line":75,"column":32,"nodeType":null,"messageId":"4159","endLine":75,"endColumn":32,"fix":"4400"},{"ruleId":"4157","severity":2,"message":"4158","line":82,"column":15,"nodeType":null,"messageId":"4159","endLine":82,"endColumn":15,"fix":"4401"},{"ruleId":"4157","severity":2,"message":"4158","line":89,"column":19,"nodeType":null,"messageId":"4159","endLine":89,"endColumn":19,"fix":"4402"},{"ruleId":"4157","severity":2,"message":"4158","line":96,"column":20,"nodeType":null,"messageId":"4159","endLine":96,"endColumn":20,"fix":"4403"},{"ruleId":"4157","severity":2,"message":"4158","line":103,"column":20,"nodeType":null,"messageId":"4159","endLine":103,"endColumn":20,"fix":"4404"},{"ruleId":"4157","severity":2,"message":"4158","line":110,"column":19,"nodeType":null,"messageId":"4159","endLine":110,"endColumn":19,"fix":"4405"},{"ruleId":"4157","severity":2,"message":"4158","line":117,"column":15,"nodeType":null,"messageId":"4159","endLine":117,"endColumn":15,"fix":"4406"},{"ruleId":"4240","severity":2,"message":"4407","line":119,"column":1,"nodeType":"4242","endLine":125,"endColumn":2},{"ruleId":"4157","severity":2,"message":"4158","line":124,"column":15,"nodeType":null,"messageId":"4159","endLine":124,"endColumn":15,"fix":"4408"},{"ruleId":"4240","severity":2,"message":"4409","line":126,"column":1,"nodeType":"4242","endLine":132,"endColumn":2},{"ruleId":"4157","severity":2,"message":"4158","line":131,"column":15,"nodeType":null,"messageId":"4159","endLine":131,"endColumn":15,"fix":"4410"},{"ruleId":"4157","severity":2,"message":"4158","line":138,"column":16,"nodeType":null,"messageId":"4159","endLine":138,"endColumn":16,"fix":"4411"},{"ruleId":"4157","severity":2,"message":"4158","line":145,"column":15,"nodeType":null,"messageId":"4159","endLine":145,"endColumn":15,"fix":"4412"},{"ruleId":"4157","severity":2,"message":"4158","line":152,"column":15,"nodeType":null,"messageId":"4159","endLine":152,"endColumn":15,"fix":"4413"},{"ruleId":"4157","severity":2,"message":"4158","line":159,"column":15,"nodeType":null,"messageId":"4159","endLine":159,"endColumn":15,"fix":"4414"},{"ruleId":"4157","severity":2,"message":"4158","line":166,"column":16,"nodeType":null,"messageId":"4159","endLine":166,"endColumn":16,"fix":"4415"},{"ruleId":"4157","severity":2,"message":"4158","line":173,"column":16,"nodeType":null,"messageId":"4159","endLine":173,"endColumn":16,"fix":"4416"},{"ruleId":"4157","severity":2,"message":"4158","line":180,"column":16,"nodeType":null,"messageId":"4159","endLine":180,"endColumn":16,"fix":"4417"},{"ruleId":"4157","severity":2,"message":"4158","line":187,"column":12,"nodeType":null,"messageId":"4159","endLine":187,"endColumn":12,"fix":"4418"},{"ruleId":"4157","severity":2,"message":"4158","line":194,"column":10,"nodeType":null,"messageId":"4159","endLine":194,"endColumn":10,"fix":"4419"},{"ruleId":"4157","severity":2,"message":"4158","line":201,"column":9,"nodeType":null,"messageId":"4159","endLine":201,"endColumn":9,"fix":"4420"},{"ruleId":"4157","severity":2,"message":"4158","line":208,"column":15,"nodeType":null,"messageId":"4159","endLine":208,"endColumn":15,"fix":"4421"},{"ruleId":"4157","severity":2,"message":"4158","line":215,"column":11,"nodeType":null,"messageId":"4159","endLine":215,"endColumn":11,"fix":"4422"},{"ruleId":"4157","severity":2,"message":"4158","line":222,"column":35,"nodeType":null,"messageId":"4159","endLine":222,"endColumn":35,"fix":"4423"},{"ruleId":"4157","severity":2,"message":"4158","line":229,"column":26,"nodeType":null,"messageId":"4159","endLine":229,"endColumn":26,"fix":"4424"},{"ruleId":"4157","severity":2,"message":"4158","line":236,"column":26,"nodeType":null,"messageId":"4159","endLine":236,"endColumn":26,"fix":"4425"},{"ruleId":"4157","severity":2,"message":"4158","line":243,"column":14,"nodeType":null,"messageId":"4159","endLine":243,"endColumn":14,"fix":"4426"},{"ruleId":"4157","severity":2,"message":"4158","line":250,"column":18,"nodeType":null,"messageId":"4159","endLine":250,"endColumn":18,"fix":"4427"},{"ruleId":"4157","severity":2,"message":"4158","line":258,"column":18,"nodeType":null,"messageId":"4159","endLine":258,"endColumn":18,"fix":"4428"},{"ruleId":"4157","severity":2,"message":"4158","line":266,"column":16,"nodeType":null,"messageId":"4159","endLine":266,"endColumn":16,"fix":"4429"},{"ruleId":"4157","severity":2,"message":"4158","line":273,"column":25,"nodeType":null,"messageId":"4159","endLine":273,"endColumn":25,"fix":"4430"},{"ruleId":"4157","severity":2,"message":"4158","line":280,"column":17,"nodeType":null,"messageId":"4159","endLine":280,"endColumn":17,"fix":"4431"},{"ruleId":"4157","severity":2,"message":"4158","line":287,"column":28,"nodeType":null,"messageId":"4159","endLine":287,"endColumn":28,"fix":"4432"},{"ruleId":"4157","severity":2,"message":"4158","line":294,"column":9,"nodeType":null,"messageId":"4159","endLine":294,"endColumn":9,"fix":"4433"},{"ruleId":"4157","severity":2,"message":"4158","line":301,"column":16,"nodeType":null,"messageId":"4159","endLine":301,"endColumn":16,"fix":"4434"},{"ruleId":"4157","severity":2,"message":"4158","line":308,"column":25,"nodeType":null,"messageId":"4159","endLine":308,"endColumn":25,"fix":"4435"},{"ruleId":"4157","severity":2,"message":"4158","line":316,"column":9,"nodeType":null,"messageId":"4159","endLine":316,"endColumn":9,"fix":"4436"},{"ruleId":"4157","severity":2,"message":"4158","line":324,"column":9,"nodeType":null,"messageId":"4159","endLine":324,"endColumn":9,"fix":"4437"},{"ruleId":"4157","severity":2,"message":"4158","line":332,"column":13,"nodeType":null,"messageId":"4159","endLine":332,"endColumn":13,"fix":"4438"},{"ruleId":"4157","severity":2,"message":"4158","line":340,"column":10,"nodeType":null,"messageId":"4159","endLine":340,"endColumn":10,"fix":"4439"},{"ruleId":"4157","severity":2,"message":"4158","line":348,"column":9,"nodeType":null,"messageId":"4159","endLine":348,"endColumn":9,"fix":"4440"},{"ruleId":"4157","severity":2,"message":"4158","line":358,"column":9,"nodeType":null,"messageId":"4159","endLine":358,"endColumn":9,"fix":"4441"},{"ruleId":"4157","severity":2,"message":"4158","line":366,"column":9,"nodeType":null,"messageId":"4159","endLine":366,"endColumn":9,"fix":"4442"},{"ruleId":"4168","severity":1,"message":"4443","line":375,"column":7,"nodeType":"4170","messageId":"4171","endLine":375,"endColumn":17},{"ruleId":"4157","severity":2,"message":"4158","line":383,"column":20,"nodeType":null,"messageId":"4159","endLine":383,"endColumn":20,"fix":"4444"},{"ruleId":"4157","severity":2,"message":"4158","line":390,"column":20,"nodeType":null,"messageId":"4159","endLine":390,"endColumn":20,"fix":"4445"},{"ruleId":"4157","severity":2,"message":"4158","line":397,"column":20,"nodeType":null,"messageId":"4159","endLine":397,"endColumn":20,"fix":"4446"},{"ruleId":"4157","severity":2,"message":"4158","line":404,"column":20,"nodeType":null,"messageId":"4159","endLine":404,"endColumn":20,"fix":"4447"},{"ruleId":"4157","severity":2,"message":"4158","line":411,"column":20,"nodeType":null,"messageId":"4159","endLine":411,"endColumn":20,"fix":"4448"},{"ruleId":"4157","severity":2,"message":"4158","line":418,"column":20,"nodeType":null,"messageId":"4159","endLine":418,"endColumn":20,"fix":"4449"},{"ruleId":"4157","severity":2,"message":"4158","line":425,"column":24,"nodeType":null,"messageId":"4159","endLine":425,"endColumn":24,"fix":"4450"},{"ruleId":"4157","severity":2,"message":"4158","line":432,"column":24,"nodeType":null,"messageId":"4159","endLine":432,"endColumn":24,"fix":"4451"},{"ruleId":"4157","severity":2,"message":"4158","line":439,"column":18,"nodeType":null,"messageId":"4159","endLine":439,"endColumn":18,"fix":"4452"},{"ruleId":"4157","severity":2,"message":"4158","line":446,"column":20,"nodeType":null,"messageId":"4159","endLine":446,"endColumn":20,"fix":"4453"},{"ruleId":"4157","severity":2,"message":"4158","line":7,"column":46,"nodeType":null,"messageId":"4159","endLine":7,"endColumn":46,"fix":"4454"},{"ruleId":"4157","severity":2,"message":"4158","line":15,"column":76,"nodeType":null,"messageId":"4159","endLine":15,"endColumn":76,"fix":"4455"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":33,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":33,"fix":"4456"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":11,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":11,"fix":"4457"},{"ruleId":"4157","severity":2,"message":"4158","line":100,"column":47,"nodeType":null,"messageId":"4159","endLine":100,"endColumn":47,"fix":"4458"},{"ruleId":"4157","severity":2,"message":"4158","line":8,"column":5,"nodeType":null,"messageId":"4159","endLine":8,"endColumn":5,"fix":"4459"},{"ruleId":"4157","severity":2,"message":"4158","line":33,"column":37,"nodeType":null,"messageId":"4159","endLine":33,"endColumn":37,"fix":"4460"},{"ruleId":"4157","severity":2,"message":"4158","line":47,"column":11,"nodeType":null,"messageId":"4159","endLine":47,"endColumn":11,"fix":"4461"},{"ruleId":"4157","severity":2,"message":"4158","line":82,"column":37,"nodeType":null,"messageId":"4159","endLine":82,"endColumn":37,"fix":"4462"},{"ruleId":"4157","severity":2,"message":"4158","line":102,"column":11,"nodeType":null,"messageId":"4159","endLine":102,"endColumn":11,"fix":"4463"},{"ruleId":"4157","severity":2,"message":"4158","line":233,"column":91,"nodeType":null,"messageId":"4159","endLine":233,"endColumn":91,"fix":"4464"},{"ruleId":"4157","severity":2,"message":"4158","line":14,"column":25,"nodeType":null,"messageId":"4159","endLine":14,"endColumn":25,"fix":"4465"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":40,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":40,"fix":"4466"},{"ruleId":"4157","severity":2,"message":"4158","line":4,"column":21,"nodeType":null,"messageId":"4159","endLine":4,"endColumn":21,"fix":"4467"},{"ruleId":"4157","severity":2,"message":"4158","line":32,"column":25,"nodeType":null,"messageId":"4159","endLine":32,"endColumn":25,"fix":"4468"},{"ruleId":"4157","severity":2,"message":"4158","line":45,"column":43,"nodeType":null,"messageId":"4159","endLine":45,"endColumn":43,"fix":"4469"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":33,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":33,"fix":"4470"},{"ruleId":"4157","severity":2,"message":"4158","line":62,"column":22,"nodeType":null,"messageId":"4159","endLine":62,"endColumn":22,"fix":"4471"},{"ruleId":"4157","severity":2,"message":"4158","line":71,"column":32,"nodeType":null,"messageId":"4159","endLine":71,"endColumn":32,"fix":"4472"},{"ruleId":"4157","severity":2,"message":"4158","line":90,"column":53,"nodeType":null,"messageId":"4159","endLine":90,"endColumn":53,"fix":"4473"},{"ruleId":"4157","severity":2,"message":"4158","line":96,"column":33,"nodeType":null,"messageId":"4159","endLine":96,"endColumn":33,"fix":"4474"},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":36,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":36,"fix":"4475"},{"ruleId":"4157","severity":2,"message":"4158","line":113,"column":40,"nodeType":null,"messageId":"4159","endLine":113,"endColumn":40,"fix":"4476"},{"ruleId":"4157","severity":2,"message":"4158","line":117,"column":17,"nodeType":null,"messageId":"4159","endLine":117,"endColumn":17,"fix":"4477"},{"ruleId":"4157","severity":2,"message":"4158","line":133,"column":62,"nodeType":null,"messageId":"4159","endLine":133,"endColumn":62,"fix":"4478"},{"ruleId":"4157","severity":2,"message":"4158","line":139,"column":22,"nodeType":null,"messageId":"4159","endLine":139,"endColumn":22,"fix":"4479"},{"ruleId":"4157","severity":2,"message":"4158","line":143,"column":42,"nodeType":null,"messageId":"4159","endLine":143,"endColumn":42,"fix":"4480"},{"ruleId":"4157","severity":2,"message":"4158","line":101,"column":59,"nodeType":null,"messageId":"4159","endLine":101,"endColumn":59,"fix":"4481"},{"ruleId":"4157","severity":2,"message":"4158","line":148,"column":83,"nodeType":null,"messageId":"4159","endLine":148,"endColumn":83,"fix":"4482"},{"ruleId":"4157","severity":2,"message":"4158","line":343,"column":120,"nodeType":null,"messageId":"4159","endLine":343,"endColumn":120,"fix":"4483"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":12,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":12,"fix":"4484"},{"ruleId":"4157","severity":2,"message":"4158","line":113,"column":12,"nodeType":null,"messageId":"4159","endLine":113,"endColumn":12,"fix":"4485"},{"ruleId":"4157","severity":2,"message":"4158","line":156,"column":120,"nodeType":null,"messageId":"4159","endLine":156,"endColumn":120,"fix":"4486"},{"ruleId":"4157","severity":2,"message":"4158","line":163,"column":17,"nodeType":null,"messageId":"4159","endLine":163,"endColumn":17,"fix":"4487"},{"ruleId":"4157","severity":2,"message":"4178","line":11,"column":113,"nodeType":null,"messageId":"4159","endLine":11,"endColumn":113,"fix":"4488"},{"ruleId":"4157","severity":2,"message":"4489","line":12,"column":1,"nodeType":null,"messageId":"4250","endLine":12,"endColumn":104,"fix":"4490"},{"ruleId":"4157","severity":2,"message":"4491","line":13,"column":1,"nodeType":null,"messageId":"4250","endLine":13,"endColumn":91,"fix":"4492"},{"ruleId":"4157","severity":2,"message":"4493","line":14,"column":1,"nodeType":null,"messageId":"4250","endLine":14,"endColumn":89,"fix":"4494"},{"ruleId":"4157","severity":2,"message":"4495","line":15,"column":1,"nodeType":null,"messageId":"4250","endLine":15,"endColumn":102,"fix":"4496"},{"ruleId":"4157","severity":2,"message":"4497","line":16,"column":1,"nodeType":null,"messageId":"4250","endLine":16,"endColumn":12285,"fix":"4498"},{"ruleId":"4157","severity":2,"message":"4158","line":286,"column":95,"nodeType":null,"messageId":"4159","endLine":286,"endColumn":95,"fix":"4499"},{"ruleId":"4157","severity":2,"message":"4158","line":304,"column":17,"nodeType":null,"messageId":"4159","endLine":304,"endColumn":17,"fix":"4500"},{"ruleId":"4157","severity":2,"message":"4158","line":311,"column":22,"nodeType":null,"messageId":"4159","endLine":311,"endColumn":22,"fix":"4501"},{"ruleId":"4157","severity":2,"message":"4158","line":325,"column":66,"nodeType":null,"messageId":"4159","endLine":325,"endColumn":66,"fix":"4502"},{"ruleId":"4157","severity":2,"message":"4158","line":372,"column":27,"nodeType":null,"messageId":"4159","endLine":372,"endColumn":27,"fix":"4503"},{"ruleId":"4157","severity":2,"message":"4158","line":135,"column":6,"nodeType":null,"messageId":"4159","endLine":135,"endColumn":6,"fix":"4504"},{"ruleId":"4157","severity":2,"message":"4158","line":139,"column":24,"nodeType":null,"messageId":"4159","endLine":139,"endColumn":24,"fix":"4505"},{"ruleId":"4157","severity":2,"message":"4158","line":155,"column":18,"nodeType":null,"messageId":"4159","endLine":155,"endColumn":18,"fix":"4506"},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":6,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":6,"fix":"4507"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":15,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":15,"fix":"4508"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":82,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":82,"fix":"4509"},{"ruleId":"4157","severity":2,"message":"4158","line":98,"column":60,"nodeType":null,"messageId":"4159","endLine":98,"endColumn":60,"fix":"4510"},{"ruleId":"4157","severity":2,"message":"4158","line":110,"column":58,"nodeType":null,"messageId":"4159","endLine":110,"endColumn":58,"fix":"4511"},{"ruleId":"4157","severity":2,"message":"4158","line":133,"column":7,"nodeType":null,"messageId":"4159","endLine":133,"endColumn":7,"fix":"4512"},{"ruleId":"4157","severity":2,"message":"4158","line":59,"column":37,"nodeType":null,"messageId":"4159","endLine":59,"endColumn":37,"fix":"4513"},{"ruleId":"4157","severity":2,"message":"4158","line":60,"column":4,"nodeType":null,"messageId":"4159","endLine":60,"endColumn":4,"fix":"4514"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":30,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":30,"fix":"4515"},{"ruleId":"4157","severity":2,"message":"4158","line":83,"column":25,"nodeType":null,"messageId":"4159","endLine":83,"endColumn":25,"fix":"4516"},{"ruleId":"4157","severity":2,"message":"4158","line":131,"column":25,"nodeType":null,"messageId":"4159","endLine":131,"endColumn":25,"fix":"4517"},{"ruleId":"4157","severity":2,"message":"4158","line":108,"column":17,"nodeType":null,"messageId":"4159","endLine":108,"endColumn":17,"fix":"4518"},{"ruleId":"4157","severity":2,"message":"4158","line":109,"column":14,"nodeType":null,"messageId":"4159","endLine":109,"endColumn":14,"fix":"4519"},{"ruleId":"4157","severity":2,"message":"4158","line":159,"column":75,"nodeType":null,"messageId":"4159","endLine":159,"endColumn":75,"fix":"4520"},{"ruleId":"4157","severity":2,"message":"4158","line":273,"column":68,"nodeType":null,"messageId":"4159","endLine":273,"endColumn":68,"fix":"4521"},{"ruleId":"4157","severity":2,"message":"4158","line":69,"column":10,"nodeType":null,"messageId":"4159","endLine":69,"endColumn":10,"fix":"4522"},{"ruleId":"4157","severity":2,"message":"4158","line":92,"column":40,"nodeType":null,"messageId":"4159","endLine":92,"endColumn":40,"fix":"4523"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":22,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":22,"fix":"4524"},{"ruleId":"4157","severity":2,"message":"4158","line":201,"column":89,"nodeType":null,"messageId":"4159","endLine":201,"endColumn":89,"fix":"4525"},{"ruleId":"4157","severity":2,"message":"4158","line":211,"column":79,"nodeType":null,"messageId":"4159","endLine":211,"endColumn":79,"fix":"4526"},{"ruleId":"4157","severity":2,"message":"4158","line":232,"column":82,"nodeType":null,"messageId":"4159","endLine":232,"endColumn":82,"fix":"4527"},{"ruleId":"4157","severity":2,"message":"4158","line":241,"column":33,"nodeType":null,"messageId":"4159","endLine":241,"endColumn":33,"fix":"4528"},{"ruleId":"4157","severity":2,"message":"4158","line":242,"column":8,"nodeType":null,"messageId":"4159","endLine":242,"endColumn":8,"fix":"4529"},{"ruleId":"4157","severity":2,"message":"4158","line":249,"column":26,"nodeType":null,"messageId":"4159","endLine":249,"endColumn":26,"fix":"4530"},{"ruleId":"4157","severity":2,"message":"4158","line":261,"column":24,"nodeType":null,"messageId":"4159","endLine":261,"endColumn":24,"fix":"4531"},{"ruleId":"4157","severity":2,"message":"4158","line":428,"column":35,"nodeType":null,"messageId":"4159","endLine":428,"endColumn":35,"fix":"4532"},{"ruleId":"4157","severity":2,"message":"4158","line":442,"column":19,"nodeType":null,"messageId":"4159","endLine":442,"endColumn":19,"fix":"4533"},{"ruleId":"4157","severity":2,"message":"4158","line":14,"column":5,"nodeType":null,"messageId":"4159","endLine":14,"endColumn":5,"fix":"4534"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":81,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":81,"fix":"4535"},{"ruleId":"4157","severity":2,"message":"4158","line":208,"column":60,"nodeType":null,"messageId":"4159","endLine":208,"endColumn":60,"fix":"4536"},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":24,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":24,"fix":"4537"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":68,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":68,"fix":"4538"},{"ruleId":"4157","severity":2,"message":"4158","line":34,"column":27,"nodeType":null,"messageId":"4159","endLine":34,"endColumn":27,"fix":"4539"},{"ruleId":"4157","severity":2,"message":"4158","line":95,"column":18,"nodeType":null,"messageId":"4159","endLine":95,"endColumn":18,"fix":"4540"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":6,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":6,"fix":"4541"},{"ruleId":"4157","severity":2,"message":"4158","line":121,"column":7,"nodeType":null,"messageId":"4159","endLine":121,"endColumn":7,"fix":"4542"},{"ruleId":"4157","severity":2,"message":"4158","line":166,"column":32,"nodeType":null,"messageId":"4159","endLine":166,"endColumn":32,"fix":"4543"},{"ruleId":"4157","severity":2,"message":"4158","line":228,"column":20,"nodeType":null,"messageId":"4159","endLine":228,"endColumn":20,"fix":"4544"},{"ruleId":"4157","severity":2,"message":"4158","line":20,"column":115,"nodeType":null,"messageId":"4159","endLine":20,"endColumn":115,"fix":"4545"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":16,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":16,"fix":"4546"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":24,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":24,"fix":"4547"},{"ruleId":"4157","severity":2,"message":"4158","line":87,"column":34,"nodeType":null,"messageId":"4159","endLine":87,"endColumn":34,"fix":"4548"},{"ruleId":"4157","severity":2,"message":"4158","line":124,"column":16,"nodeType":null,"messageId":"4159","endLine":124,"endColumn":16,"fix":"4549"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":12,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":12,"fix":"4550"},{"ruleId":"4157","severity":2,"message":"4158","line":130,"column":30,"nodeType":null,"messageId":"4159","endLine":130,"endColumn":30,"fix":"4551"},{"ruleId":"4157","severity":2,"message":"4158","line":139,"column":95,"nodeType":null,"messageId":"4159","endLine":139,"endColumn":95,"fix":"4552"},{"ruleId":"4157","severity":2,"message":"4158","line":143,"column":44,"nodeType":null,"messageId":"4159","endLine":143,"endColumn":44,"fix":"4553"},{"ruleId":"4157","severity":2,"message":"4158","line":101,"column":64,"nodeType":null,"messageId":"4159","endLine":101,"endColumn":64,"fix":"4554"},{"ruleId":"4157","severity":2,"message":"4158","line":198,"column":33,"nodeType":null,"messageId":"4159","endLine":198,"endColumn":33,"fix":"4555"},{"ruleId":"4157","severity":2,"message":"4158","line":279,"column":33,"nodeType":null,"messageId":"4159","endLine":279,"endColumn":33,"fix":"4556"},{"ruleId":"4157","severity":2,"message":"4158","line":91,"column":19,"nodeType":null,"messageId":"4159","endLine":91,"endColumn":19,"fix":"4557"},{"ruleId":"4157","severity":2,"message":"4158","line":188,"column":22,"nodeType":null,"messageId":"4159","endLine":188,"endColumn":22,"fix":"4558"},{"ruleId":"4157","severity":2,"message":"4158","line":199,"column":58,"nodeType":null,"messageId":"4159","endLine":199,"endColumn":58,"fix":"4559"},{"ruleId":"4157","severity":2,"message":"4158","line":236,"column":47,"nodeType":null,"messageId":"4159","endLine":236,"endColumn":47,"fix":"4560"},{"ruleId":"4157","severity":2,"message":"4158","line":246,"column":30,"nodeType":null,"messageId":"4159","endLine":246,"endColumn":30,"fix":"4561"},{"ruleId":"4157","severity":2,"message":"4158","line":262,"column":58,"nodeType":null,"messageId":"4159","endLine":262,"endColumn":58,"fix":"4562"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":36,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":36,"fix":"4563"},{"ruleId":"4157","severity":2,"message":"4158","line":110,"column":36,"nodeType":null,"messageId":"4159","endLine":110,"endColumn":36,"fix":"4564"},{"ruleId":"4157","severity":2,"message":"4158","line":111,"column":4,"nodeType":null,"messageId":"4159","endLine":111,"endColumn":4,"fix":"4565"},{"ruleId":"4157","severity":2,"message":"4158","line":11,"column":15,"nodeType":null,"messageId":"4159","endLine":11,"endColumn":15,"fix":"4566"},{"ruleId":"4157","severity":2,"message":"4158","line":92,"column":22,"nodeType":null,"messageId":"4159","endLine":92,"endColumn":22,"fix":"4567"},{"ruleId":"4157","severity":2,"message":"4158","line":133,"column":11,"nodeType":null,"messageId":"4159","endLine":133,"endColumn":11,"fix":"4568"},{"ruleId":"4157","severity":2,"message":"4158","line":138,"column":53,"nodeType":null,"messageId":"4159","endLine":138,"endColumn":53,"fix":"4569"},{"ruleId":"4157","severity":2,"message":"4158","line":7,"column":17,"nodeType":null,"messageId":"4159","endLine":7,"endColumn":17,"fix":"4570"},{"ruleId":"4157","severity":2,"message":"4158","line":12,"column":31,"nodeType":null,"messageId":"4159","endLine":12,"endColumn":31,"fix":"4571"},{"ruleId":"4157","severity":2,"message":"4158","line":20,"column":22,"nodeType":null,"messageId":"4159","endLine":20,"endColumn":22,"fix":"4572"},{"ruleId":"4157","severity":2,"message":"4158","line":2,"column":18,"nodeType":null,"messageId":"4159","endLine":2,"endColumn":18,"fix":"4573"},{"ruleId":"4157","severity":2,"message":"4158","line":8,"column":6,"nodeType":null,"messageId":"4159","endLine":8,"endColumn":6,"fix":"4574"},{"ruleId":"4157","severity":2,"message":"4158","line":18,"column":52,"nodeType":null,"messageId":"4159","endLine":18,"endColumn":52,"fix":"4575"},{"ruleId":"4157","severity":2,"message":"4158","line":25,"column":39,"nodeType":null,"messageId":"4159","endLine":25,"endColumn":39,"fix":"4576"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":4,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":4,"fix":"4577"},{"ruleId":"4157","severity":2,"message":"4158","line":25,"column":37,"nodeType":null,"messageId":"4159","endLine":25,"endColumn":37,"fix":"4578"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":48,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":48,"fix":"4579"},{"ruleId":"4157","severity":2,"message":"4158","line":60,"column":54,"nodeType":null,"messageId":"4159","endLine":60,"endColumn":54,"fix":"4580"},{"ruleId":"4157","severity":2,"message":"4158","line":137,"column":21,"nodeType":null,"messageId":"4159","endLine":137,"endColumn":21,"fix":"4581"},{"ruleId":"4157","severity":2,"message":"4158","line":170,"column":40,"nodeType":null,"messageId":"4159","endLine":170,"endColumn":40,"fix":"4582"},{"ruleId":"4157","severity":2,"message":"4158","line":178,"column":39,"nodeType":null,"messageId":"4159","endLine":178,"endColumn":39,"fix":"4583"},{"ruleId":"4157","severity":2,"message":"4158","line":183,"column":19,"nodeType":null,"messageId":"4159","endLine":183,"endColumn":19,"fix":"4584"},{"ruleId":"4157","severity":2,"message":"4158","line":233,"column":10,"nodeType":null,"messageId":"4159","endLine":233,"endColumn":10,"fix":"4585"},{"ruleId":"4157","severity":2,"message":"4158","line":250,"column":24,"nodeType":null,"messageId":"4159","endLine":250,"endColumn":24,"fix":"4586"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":30,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":30,"fix":"4587"},{"ruleId":"4157","severity":2,"message":"4158","line":28,"column":4,"nodeType":null,"messageId":"4159","endLine":28,"endColumn":4,"fix":"4588"},{"ruleId":"4157","severity":2,"message":"4158","line":16,"column":57,"nodeType":null,"messageId":"4159","endLine":16,"endColumn":57,"fix":"4589"},{"ruleId":"4157","severity":2,"message":"4158","line":72,"column":51,"nodeType":null,"messageId":"4159","endLine":72,"endColumn":51,"fix":"4590"},{"ruleId":"4157","severity":2,"message":"4158","line":87,"column":34,"nodeType":null,"messageId":"4159","endLine":87,"endColumn":34,"fix":"4591"},{"ruleId":"4157","severity":2,"message":"4158","line":107,"column":26,"nodeType":null,"messageId":"4159","endLine":107,"endColumn":26,"fix":"4592"},{"ruleId":"4157","severity":2,"message":"4158","line":113,"column":80,"nodeType":null,"messageId":"4159","endLine":113,"endColumn":80,"fix":"4593"},{"ruleId":"4157","severity":2,"message":"4158","line":74,"column":31,"nodeType":null,"messageId":"4159","endLine":74,"endColumn":31,"fix":"4594"},{"ruleId":"4157","severity":2,"message":"4158","line":40,"column":61,"nodeType":null,"messageId":"4159","endLine":40,"endColumn":61,"fix":"4595"},{"ruleId":"4157","severity":2,"message":"4158","line":112,"column":48,"nodeType":null,"messageId":"4159","endLine":112,"endColumn":48,"fix":"4596"},{"ruleId":"4157","severity":2,"message":"4158","line":48,"column":37,"nodeType":null,"messageId":"4159","endLine":48,"endColumn":37,"fix":"4597"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":30,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":30,"fix":"4598"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":4,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":4,"fix":"4599"},{"ruleId":"4157","severity":2,"message":"4158","line":55,"column":15,"nodeType":null,"messageId":"4159","endLine":55,"endColumn":15,"fix":"4600"},{"ruleId":"4157","severity":2,"message":"4158","line":147,"column":90,"nodeType":null,"messageId":"4159","endLine":147,"endColumn":90,"fix":"4601"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":92,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":92,"fix":"4602"},{"ruleId":"4157","severity":2,"message":"4158","line":204,"column":111,"nodeType":null,"messageId":"4159","endLine":204,"endColumn":111,"fix":"4603"},{"ruleId":"4157","severity":2,"message":"4158","line":224,"column":96,"nodeType":null,"messageId":"4159","endLine":224,"endColumn":96,"fix":"4604"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":24,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":24,"fix":"4605"},{"ruleId":"4157","severity":2,"message":"4158","line":89,"column":48,"nodeType":null,"messageId":"4159","endLine":89,"endColumn":48,"fix":"4606"},{"ruleId":"4157","severity":2,"message":"4158","line":120,"column":48,"nodeType":null,"messageId":"4159","endLine":120,"endColumn":48,"fix":"4607"},{"ruleId":"4157","severity":2,"message":"4158","line":139,"column":71,"nodeType":null,"messageId":"4159","endLine":139,"endColumn":71,"fix":"4608"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":24,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":24,"fix":"4609"},{"ruleId":"4157","severity":2,"message":"4158","line":211,"column":45,"nodeType":null,"messageId":"4159","endLine":211,"endColumn":45,"fix":"4610"},{"ruleId":"4157","severity":2,"message":"4158","line":6,"column":38,"nodeType":null,"messageId":"4159","endLine":6,"endColumn":38,"fix":"4611"},{"ruleId":"4157","severity":2,"message":"4158","line":9,"column":41,"nodeType":null,"messageId":"4159","endLine":9,"endColumn":41,"fix":"4612"},{"ruleId":"4157","severity":2,"message":"4158","line":6,"column":53,"nodeType":null,"messageId":"4159","endLine":6,"endColumn":53,"fix":"4613"},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":14,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":14,"fix":"4614"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":39,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":39,"fix":"4615"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":4,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":4,"fix":"4616"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":32,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":32,"fix":"4617"},{"ruleId":"4157","severity":2,"message":"4158","line":90,"column":40,"nodeType":null,"messageId":"4159","endLine":90,"endColumn":40,"fix":"4618"},{"ruleId":"4157","severity":2,"message":"4158","line":91,"column":4,"nodeType":null,"messageId":"4159","endLine":91,"endColumn":4,"fix":"4619"},{"ruleId":"4157","severity":2,"message":"4158","line":98,"column":25,"nodeType":null,"messageId":"4159","endLine":98,"endColumn":25,"fix":"4620"},{"ruleId":"4157","severity":2,"message":"4158","line":111,"column":79,"nodeType":null,"messageId":"4159","endLine":111,"endColumn":79,"fix":"4621"},{"ruleId":"4157","severity":2,"message":"4158","line":121,"column":79,"nodeType":null,"messageId":"4159","endLine":121,"endColumn":79,"fix":"4622"},{"ruleId":"4157","severity":2,"message":"4158","line":133,"column":79,"nodeType":null,"messageId":"4159","endLine":133,"endColumn":79,"fix":"4623"},{"ruleId":"4157","severity":2,"message":"4158","line":146,"column":73,"nodeType":null,"messageId":"4159","endLine":146,"endColumn":73,"fix":"4624"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":116,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":116,"fix":"4625"},{"ruleId":"4157","severity":2,"message":"4158","line":30,"column":12,"nodeType":null,"messageId":"4159","endLine":30,"endColumn":12,"fix":"4626"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":6,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":6,"fix":"4627"},{"ruleId":"4157","severity":2,"message":"4158","line":28,"column":14,"nodeType":null,"messageId":"4159","endLine":28,"endColumn":14,"fix":"4628"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":25,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":25,"fix":"4629"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":4,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":4,"fix":"4630"},{"ruleId":"4157","severity":2,"message":"4158","line":37,"column":110,"nodeType":null,"messageId":"4159","endLine":37,"endColumn":110,"fix":"4631"},{"ruleId":"4157","severity":2,"message":"4158","line":42,"column":110,"nodeType":null,"messageId":"4159","endLine":42,"endColumn":110,"fix":"4632"},{"ruleId":"4157","severity":2,"message":"4158","line":44,"column":14,"nodeType":null,"messageId":"4159","endLine":44,"endColumn":14,"fix":"4633"},{"ruleId":"4157","severity":2,"message":"4158","line":65,"column":73,"nodeType":null,"messageId":"4159","endLine":65,"endColumn":73,"fix":"4634"},{"ruleId":"4157","severity":2,"message":"4158","line":73,"column":108,"nodeType":null,"messageId":"4159","endLine":73,"endColumn":108,"fix":"4635"},{"ruleId":"4157","severity":2,"message":"4158","line":87,"column":75,"nodeType":null,"messageId":"4159","endLine":87,"endColumn":75,"fix":"4636"},{"ruleId":"4157","severity":2,"message":"4158","line":127,"column":31,"nodeType":null,"messageId":"4159","endLine":127,"endColumn":31,"fix":"4637"},{"ruleId":"4157","severity":2,"message":"4158","line":128,"column":4,"nodeType":null,"messageId":"4159","endLine":128,"endColumn":4,"fix":"4638"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":36,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":36,"fix":"4639"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":4,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":4,"fix":"4640"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":29,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":29,"fix":"4641"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":4,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":4,"fix":"4642"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":37,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":37,"fix":"4643"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":4,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":4,"fix":"4644"},{"ruleId":"4157","severity":2,"message":"4158","line":17,"column":35,"nodeType":null,"messageId":"4159","endLine":17,"endColumn":35,"fix":"4645"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":49,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":49,"fix":"4646"},{"ruleId":"4157","severity":2,"message":"4158","line":73,"column":77,"nodeType":null,"messageId":"4159","endLine":73,"endColumn":77,"fix":"4647"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":69,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":69,"fix":"4648"},{"ruleId":"4157","severity":2,"message":"4158","line":125,"column":117,"nodeType":null,"messageId":"4159","endLine":125,"endColumn":117,"fix":"4649"},{"ruleId":"4157","severity":2,"message":"4158","line":139,"column":6,"nodeType":null,"messageId":"4159","endLine":139,"endColumn":6,"fix":"4650"},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":37,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":37,"fix":"4651"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":35,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":35,"fix":"4652"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":4,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":4,"fix":"4653"},{"ruleId":"4157","severity":2,"message":"4158","line":114,"column":48,"nodeType":null,"messageId":"4159","endLine":114,"endColumn":48,"fix":"4654"},{"ruleId":"4157","severity":2,"message":"4158","line":17,"column":39,"nodeType":null,"messageId":"4159","endLine":17,"endColumn":39,"fix":"4655"},{"ruleId":"4157","severity":2,"message":"4158","line":18,"column":4,"nodeType":null,"messageId":"4159","endLine":18,"endColumn":4,"fix":"4656"},{"ruleId":"4157","severity":2,"message":"4158","line":44,"column":93,"nodeType":null,"messageId":"4159","endLine":44,"endColumn":93,"fix":"4657"},{"ruleId":"4157","severity":2,"message":"4158","line":301,"column":73,"nodeType":null,"messageId":"4159","endLine":301,"endColumn":73,"fix":"4658"},{"ruleId":"4157","severity":2,"message":"4158","line":315,"column":12,"nodeType":null,"messageId":"4159","endLine":315,"endColumn":12,"fix":"4659"},{"ruleId":"4157","severity":2,"message":"4158","line":338,"column":9,"nodeType":null,"messageId":"4159","endLine":338,"endColumn":9,"fix":"4660"},{"ruleId":"4157","severity":2,"message":"4158","line":32,"column":24,"nodeType":null,"messageId":"4159","endLine":32,"endColumn":24,"fix":"4661"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":26,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":26,"fix":"4662"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":41,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":41,"fix":"4663"},{"ruleId":"4157","severity":2,"message":"4158","line":67,"column":26,"nodeType":null,"messageId":"4159","endLine":67,"endColumn":26,"fix":"4664"},{"ruleId":"4157","severity":2,"message":"4158","line":79,"column":26,"nodeType":null,"messageId":"4159","endLine":79,"endColumn":26,"fix":"4665"},{"ruleId":"4157","severity":2,"message":"4158","line":97,"column":43,"nodeType":null,"messageId":"4159","endLine":97,"endColumn":43,"fix":"4666"},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":9,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":9,"fix":"4667"},{"ruleId":"4157","severity":2,"message":"4158","line":114,"column":25,"nodeType":null,"messageId":"4159","endLine":114,"endColumn":25,"fix":"4668"},{"ruleId":"4157","severity":2,"message":"4158","line":186,"column":33,"nodeType":null,"messageId":"4159","endLine":186,"endColumn":33,"fix":"4669"},{"ruleId":"4157","severity":2,"message":"4158","line":195,"column":33,"nodeType":null,"messageId":"4159","endLine":195,"endColumn":33,"fix":"4670"},{"ruleId":"4157","severity":2,"message":"4158","line":202,"column":35,"nodeType":null,"messageId":"4159","endLine":202,"endColumn":35,"fix":"4671"},{"ruleId":"4157","severity":2,"message":"4158","line":9,"column":4,"nodeType":null,"messageId":"4159","endLine":9,"endColumn":4,"fix":"4672"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":30,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":30,"fix":"4673"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":4,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":4,"fix":"4674"},{"ruleId":"4157","severity":2,"message":"4158","line":18,"column":12,"nodeType":null,"messageId":"4159","endLine":18,"endColumn":12,"fix":"4675"},{"ruleId":"4157","severity":2,"message":"4158","line":17,"column":31,"nodeType":null,"messageId":"4159","endLine":17,"endColumn":31,"fix":"4676"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":18,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":18,"fix":"4677"},{"ruleId":"4157","severity":2,"message":"4158","line":13,"column":28,"nodeType":null,"messageId":"4159","endLine":13,"endColumn":28,"fix":"4678"},{"ruleId":"4157","severity":2,"message":"4158","line":43,"column":12,"nodeType":null,"messageId":"4159","endLine":43,"endColumn":12,"fix":"4679"},{"ruleId":"4157","severity":2,"message":"4158","line":9,"column":62,"nodeType":null,"messageId":"4159","endLine":9,"endColumn":62,"fix":"4680"},{"ruleId":"4157","severity":2,"message":"4158","line":75,"column":26,"nodeType":null,"messageId":"4159","endLine":75,"endColumn":26,"fix":"4681"},{"ruleId":"4157","severity":2,"message":"4158","line":78,"column":12,"nodeType":null,"messageId":"4159","endLine":78,"endColumn":12,"fix":"4682"},{"ruleId":"4157","severity":2,"message":"4158","line":115,"column":28,"nodeType":null,"messageId":"4159","endLine":115,"endColumn":28,"fix":"4683"},{"ruleId":"4157","severity":2,"message":"4158","line":64,"column":51,"nodeType":null,"messageId":"4159","endLine":64,"endColumn":51,"fix":"4684"},{"ruleId":"4157","severity":2,"message":"4158","line":13,"column":32,"nodeType":null,"messageId":"4159","endLine":13,"endColumn":32,"fix":"4685"},{"ruleId":"4157","severity":2,"message":"4158","line":29,"column":12,"nodeType":null,"messageId":"4159","endLine":29,"endColumn":12,"fix":"4686"},{"ruleId":"4157","severity":2,"message":"4158","line":40,"column":28,"nodeType":null,"messageId":"4159","endLine":40,"endColumn":28,"fix":"4687"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":96,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":96,"fix":"4688"},{"ruleId":"4157","severity":2,"message":"4158","line":10,"column":54,"nodeType":null,"messageId":"4159","endLine":10,"endColumn":54,"fix":"4689"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":67,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":67,"fix":"4690"},{"ruleId":"4157","severity":2,"message":"4158","line":128,"column":66,"nodeType":null,"messageId":"4159","endLine":128,"endColumn":66,"fix":"4691"},{"ruleId":"4157","severity":2,"message":"4158","line":158,"column":67,"nodeType":null,"messageId":"4159","endLine":158,"endColumn":67,"fix":"4692"},{"ruleId":"4157","severity":2,"message":"4158","line":186,"column":26,"nodeType":null,"messageId":"4159","endLine":186,"endColumn":26,"fix":"4693"},{"ruleId":"4157","severity":2,"message":"4158","line":195,"column":75,"nodeType":null,"messageId":"4159","endLine":195,"endColumn":75,"fix":"4694"},{"ruleId":"4157","severity":2,"message":"4158","line":120,"column":6,"nodeType":null,"messageId":"4159","endLine":120,"endColumn":6,"fix":"4695"},{"ruleId":"4157","severity":2,"message":"4158","line":156,"column":34,"nodeType":null,"messageId":"4159","endLine":156,"endColumn":34,"fix":"4696"},{"ruleId":"4157","severity":2,"message":"4158","line":189,"column":69,"nodeType":null,"messageId":"4159","endLine":189,"endColumn":69,"fix":"4697"},{"ruleId":"4157","severity":2,"message":"4158","line":201,"column":18,"nodeType":null,"messageId":"4159","endLine":201,"endColumn":18,"fix":"4698"},{"ruleId":"4157","severity":2,"message":"4158","line":262,"column":32,"nodeType":null,"messageId":"4159","endLine":262,"endColumn":32,"fix":"4699"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":28,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":28,"fix":"4700"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":8,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":8,"fix":"4701"},{"ruleId":"4157","severity":2,"message":"4158","line":53,"column":34,"nodeType":null,"messageId":"4159","endLine":53,"endColumn":34,"fix":"4702"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":10,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":10,"fix":"4703"},{"ruleId":"4157","severity":2,"message":"4158","line":66,"column":54,"nodeType":null,"messageId":"4159","endLine":66,"endColumn":54,"fix":"4704"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":25,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":25,"fix":"4705"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":27,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":27,"fix":"4706"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":8,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":8,"fix":"4707"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":70,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":70,"fix":"4708"},{"ruleId":"4157","severity":2,"message":"4158","line":64,"column":53,"nodeType":null,"messageId":"4159","endLine":64,"endColumn":53,"fix":"4709"},{"ruleId":"4157","severity":2,"message":"4158","line":73,"column":59,"nodeType":null,"messageId":"4159","endLine":73,"endColumn":59,"fix":"4710"},{"ruleId":"4157","severity":2,"message":"4158","line":13,"column":33,"nodeType":null,"messageId":"4159","endLine":13,"endColumn":33,"fix":"4711"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":33,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":33,"fix":"4712"},{"ruleId":"4157","severity":2,"message":"4158","line":59,"column":31,"nodeType":null,"messageId":"4159","endLine":59,"endColumn":31,"fix":"4713"},{"ruleId":"4157","severity":2,"message":"4158","line":76,"column":67,"nodeType":null,"messageId":"4159","endLine":76,"endColumn":67,"fix":"4714"},{"ruleId":"4157","severity":2,"message":"4158","line":12,"column":19,"nodeType":null,"messageId":"4159","endLine":12,"endColumn":19,"fix":"4715"},{"ruleId":"4157","severity":2,"message":"4158","line":31,"column":23,"nodeType":null,"messageId":"4159","endLine":31,"endColumn":23,"fix":"4716"},{"ruleId":"4157","severity":2,"message":"4158","line":40,"column":18,"nodeType":null,"messageId":"4159","endLine":40,"endColumn":18,"fix":"4717"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":109,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":109,"fix":"4718"},{"ruleId":"4157","severity":2,"message":"4158","line":39,"column":98,"nodeType":null,"messageId":"4159","endLine":39,"endColumn":98,"fix":"4719"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":97,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":97,"fix":"4720"},{"ruleId":"4157","severity":2,"message":"4158","line":117,"column":11,"nodeType":null,"messageId":"4159","endLine":117,"endColumn":11,"fix":"4721"},{"ruleId":"4157","severity":2,"message":"4158","line":33,"column":23,"nodeType":null,"messageId":"4159","endLine":33,"endColumn":23,"fix":"4722"},{"ruleId":"4157","severity":2,"message":"4158","line":39,"column":51,"nodeType":null,"messageId":"4159","endLine":39,"endColumn":51,"fix":"4723"},{"ruleId":"4157","severity":2,"message":"4158","line":55,"column":58,"nodeType":null,"messageId":"4159","endLine":55,"endColumn":58,"fix":"4724"},{"ruleId":"4157","severity":2,"message":"4158","line":53,"column":28,"nodeType":null,"messageId":"4159","endLine":53,"endColumn":28,"fix":"4725"},{"ruleId":"4157","severity":2,"message":"4158","line":52,"column":8,"nodeType":null,"messageId":"4159","endLine":52,"endColumn":8,"fix":"4726"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":27,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":27,"fix":"4727"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":115,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":115,"fix":"4728"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":54,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":54,"fix":"4729"},{"ruleId":"4157","severity":2,"message":"4158","line":63,"column":30,"nodeType":null,"messageId":"4159","endLine":63,"endColumn":30,"fix":"4730"},{"ruleId":"4157","severity":2,"message":"4158","line":95,"column":10,"nodeType":null,"messageId":"4159","endLine":95,"endColumn":10,"fix":"4731"},{"ruleId":"4157","severity":2,"message":"4158","line":126,"column":8,"nodeType":null,"messageId":"4159","endLine":126,"endColumn":8,"fix":"4732"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":10,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":10,"fix":"4733"},{"ruleId":"4157","severity":2,"message":"4158","line":44,"column":73,"nodeType":null,"messageId":"4159","endLine":44,"endColumn":73,"fix":"4734"},{"ruleId":"4157","severity":2,"message":"4158","line":101,"column":15,"nodeType":null,"messageId":"4159","endLine":101,"endColumn":15,"fix":"4735"},{"ruleId":"4157","severity":2,"message":"4158","line":20,"column":10,"nodeType":null,"messageId":"4159","endLine":20,"endColumn":10,"fix":"4736"},{"ruleId":"4157","severity":2,"message":"4158","line":30,"column":66,"nodeType":null,"messageId":"4159","endLine":30,"endColumn":66,"fix":"4737"},{"ruleId":"4157","severity":2,"message":"4158","line":221,"column":102,"nodeType":null,"messageId":"4159","endLine":221,"endColumn":102,"fix":"4738"},{"ruleId":"4157","severity":2,"message":"4158","line":278,"column":36,"nodeType":null,"messageId":"4159","endLine":278,"endColumn":36,"fix":"4739"},{"ruleId":"4157","severity":2,"message":"4158","line":204,"column":34,"nodeType":null,"messageId":"4159","endLine":204,"endColumn":34,"fix":"4740"},{"ruleId":"4157","severity":2,"message":"4158","line":288,"column":117,"nodeType":null,"messageId":"4159","endLine":288,"endColumn":117,"fix":"4741"},{"ruleId":"4157","severity":2,"message":"4158","line":10,"column":25,"nodeType":null,"messageId":"4159","endLine":10,"endColumn":25,"fix":"4742"},{"ruleId":"4157","severity":2,"message":"4158","line":15,"column":14,"nodeType":null,"messageId":"4159","endLine":15,"endColumn":14,"fix":"4743"},{"ruleId":"4157","severity":2,"message":"4158","line":28,"column":14,"nodeType":null,"messageId":"4159","endLine":28,"endColumn":14,"fix":"4744"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":20,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":20,"fix":"4745"},{"ruleId":"4157","severity":2,"message":"4158","line":64,"column":25,"nodeType":null,"messageId":"4159","endLine":64,"endColumn":25,"fix":"4746"},{"ruleId":"4240","severity":2,"message":"4747","line":41,"column":1,"nodeType":"4242","endLine":44,"endColumn":2},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":23,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":23,"fix":"4748"},{"ruleId":"4157","severity":2,"message":"4158","line":30,"column":38,"nodeType":null,"messageId":"4159","endLine":30,"endColumn":38,"fix":"4749"},{"ruleId":"4157","severity":2,"message":"4158","line":65,"column":36,"nodeType":null,"messageId":"4159","endLine":65,"endColumn":36,"fix":"4750"},{"ruleId":"4157","severity":2,"message":"4158","line":76,"column":16,"nodeType":null,"messageId":"4159","endLine":76,"endColumn":16,"fix":"4751"},{"ruleId":"4157","severity":2,"message":"4158","line":17,"column":25,"nodeType":null,"messageId":"4159","endLine":17,"endColumn":25,"fix":"4752"},{"ruleId":"4157","severity":2,"message":"4158","line":42,"column":39,"nodeType":null,"messageId":"4159","endLine":42,"endColumn":39,"fix":"4753"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":38,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":38,"fix":"4754"},{"ruleId":"4157","severity":2,"message":"4158","line":176,"column":52,"nodeType":null,"messageId":"4159","endLine":176,"endColumn":52,"fix":"4755"},{"ruleId":"4157","severity":2,"message":"4158","line":200,"column":23,"nodeType":null,"messageId":"4159","endLine":200,"endColumn":23,"fix":"4756"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":41,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":41,"fix":"4757"},{"ruleId":"4157","severity":2,"message":"4758","line":23,"column":19,"nodeType":null,"messageId":"4250","endLine":29,"endColumn":10,"fix":"4759"},{"ruleId":"4157","severity":2,"message":"4758","line":33,"column":19,"nodeType":null,"messageId":"4250","endLine":39,"endColumn":10,"fix":"4760"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":12,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":12,"fix":"4761"},{"ruleId":"4157","severity":2,"message":"4158","line":70,"column":48,"nodeType":null,"messageId":"4159","endLine":70,"endColumn":48,"fix":"4762"},{"ruleId":"4157","severity":2,"message":"4158","line":56,"column":17,"nodeType":null,"messageId":"4159","endLine":56,"endColumn":17,"fix":"4763"},{"ruleId":"4157","severity":2,"message":"4158","line":69,"column":34,"nodeType":null,"messageId":"4159","endLine":69,"endColumn":34,"fix":"4764"},{"ruleId":"4157","severity":2,"message":"4158","line":87,"column":82,"nodeType":null,"messageId":"4159","endLine":87,"endColumn":82,"fix":"4765"},{"ruleId":"4157","severity":2,"message":"4158","line":147,"column":35,"nodeType":null,"messageId":"4159","endLine":147,"endColumn":35,"fix":"4766"},{"ruleId":"4157","severity":2,"message":"4158","line":151,"column":38,"nodeType":null,"messageId":"4159","endLine":151,"endColumn":38,"fix":"4767"},{"ruleId":"4288","severity":2,"message":"4289","line":1,"column":1,"nodeType":null,"messageId":"4290","endLine":6,"endColumn":43,"fix":"4768"},{"ruleId":"4168","severity":1,"message":"4769","line":4,"column":29,"nodeType":"4170","messageId":"4171","endLine":4,"endColumn":37},{"ruleId":"4293","severity":2,"message":"4769","line":4,"column":29,"nodeType":"4170","messageId":"4171","endLine":4,"endColumn":37,"fix":"4770"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":26,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":26,"fix":"4771"},{"ruleId":"4157","severity":2,"message":"4158","line":45,"column":82,"nodeType":null,"messageId":"4159","endLine":45,"endColumn":82,"fix":"4772"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":10,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":10,"fix":"4773"},{"ruleId":"4157","severity":2,"message":"4158","line":66,"column":61,"nodeType":null,"messageId":"4159","endLine":66,"endColumn":61,"fix":"4774"},{"ruleId":"4157","severity":2,"message":"4158","line":104,"column":55,"nodeType":null,"messageId":"4159","endLine":104,"endColumn":55,"fix":"4775"},{"ruleId":"4157","severity":2,"message":"4158","line":111,"column":28,"nodeType":null,"messageId":"4159","endLine":111,"endColumn":28,"fix":"4776"},{"ruleId":"4157","severity":2,"message":"4158","line":123,"column":86,"nodeType":null,"messageId":"4159","endLine":123,"endColumn":86,"fix":"4777"},{"ruleId":"4157","severity":2,"message":"4158","line":130,"column":28,"nodeType":null,"messageId":"4159","endLine":130,"endColumn":28,"fix":"4778"},{"ruleId":"4157","severity":2,"message":"4158","line":14,"column":15,"nodeType":null,"messageId":"4159","endLine":14,"endColumn":15,"fix":"4779"},{"ruleId":"4157","severity":2,"message":"4158","line":43,"column":58,"nodeType":null,"messageId":"4159","endLine":43,"endColumn":58,"fix":"4780"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":77,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":77,"fix":"4781"},{"ruleId":"4157","severity":2,"message":"4158","line":73,"column":12,"nodeType":null,"messageId":"4159","endLine":73,"endColumn":12,"fix":"4782"},{"ruleId":"4157","severity":2,"message":"4158","line":78,"column":114,"nodeType":null,"messageId":"4159","endLine":78,"endColumn":114,"fix":"4783"},{"ruleId":"4157","severity":2,"message":"4158","line":37,"column":16,"nodeType":null,"messageId":"4159","endLine":37,"endColumn":16,"fix":"4784"},{"ruleId":"4157","severity":2,"message":"4158","line":44,"column":54,"nodeType":null,"messageId":"4159","endLine":44,"endColumn":54,"fix":"4785"},{"ruleId":"4157","severity":2,"message":"4158","line":142,"column":96,"nodeType":null,"messageId":"4159","endLine":142,"endColumn":96,"fix":"4786"},{"ruleId":"4157","severity":2,"message":"4158","line":171,"column":48,"nodeType":null,"messageId":"4159","endLine":171,"endColumn":48,"fix":"4787"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":22,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":22,"fix":"4788"},{"ruleId":"4157","severity":2,"message":"4158","line":18,"column":10,"nodeType":null,"messageId":"4159","endLine":18,"endColumn":10,"fix":"4789"},{"ruleId":"4157","severity":2,"message":"4158","line":27,"column":77,"nodeType":null,"messageId":"4159","endLine":27,"endColumn":77,"fix":"4790"},{"ruleId":"4157","severity":2,"message":"4158","line":37,"column":21,"nodeType":null,"messageId":"4159","endLine":37,"endColumn":21,"fix":"4791"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":26,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":26,"fix":"4792"},{"ruleId":"4157","severity":2,"message":"4158","line":79,"column":26,"nodeType":null,"messageId":"4159","endLine":79,"endColumn":26,"fix":"4793"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":26,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":26,"fix":"4794"},{"ruleId":"4157","severity":2,"message":"4158","line":121,"column":26,"nodeType":null,"messageId":"4159","endLine":121,"endColumn":26,"fix":"4795"},{"ruleId":"4157","severity":2,"message":"4158","line":135,"column":26,"nodeType":null,"messageId":"4159","endLine":135,"endColumn":26,"fix":"4796"},{"ruleId":"4157","severity":2,"message":"4158","line":78,"column":82,"nodeType":null,"messageId":"4159","endLine":78,"endColumn":82,"fix":"4797"},{"ruleId":"4157","severity":2,"message":"4158","line":246,"column":103,"nodeType":null,"messageId":"4159","endLine":246,"endColumn":103,"fix":"4798"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":17,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":17,"fix":"4799"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":32,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":32,"fix":"4800"},{"ruleId":"4157","severity":2,"message":"4158","line":74,"column":19,"nodeType":null,"messageId":"4159","endLine":74,"endColumn":19,"fix":"4801"},{"ruleId":"4157","severity":2,"message":"4158","line":25,"column":16,"nodeType":null,"messageId":"4159","endLine":25,"endColumn":16,"fix":"4802"},{"ruleId":"4157","severity":2,"message":"4158","line":84,"column":11,"nodeType":null,"messageId":"4159","endLine":84,"endColumn":11,"fix":"4803"},{"ruleId":"4157","severity":2,"message":"4158","line":94,"column":14,"nodeType":null,"messageId":"4159","endLine":94,"endColumn":14,"fix":"4804"},{"ruleId":"4157","severity":2,"message":"4158","line":100,"column":77,"nodeType":null,"messageId":"4159","endLine":100,"endColumn":77,"fix":"4805"},{"ruleId":"4157","severity":2,"message":"4158","line":104,"column":14,"nodeType":null,"messageId":"4159","endLine":104,"endColumn":14,"fix":"4806"},{"ruleId":"4157","severity":2,"message":"4158","line":114,"column":41,"nodeType":null,"messageId":"4159","endLine":114,"endColumn":41,"fix":"4807"},{"ruleId":"4157","severity":2,"message":"4158","line":124,"column":16,"nodeType":null,"messageId":"4159","endLine":124,"endColumn":16,"fix":"4808"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":43,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":43,"fix":"4809"},{"ruleId":"4157","severity":2,"message":"4158","line":179,"column":109,"nodeType":null,"messageId":"4159","endLine":179,"endColumn":109,"fix":"4810"},{"ruleId":"4157","severity":2,"message":"4158","line":222,"column":34,"nodeType":null,"messageId":"4159","endLine":222,"endColumn":34,"fix":"4811"},{"ruleId":"4157","severity":2,"message":"4158","line":126,"column":15,"nodeType":null,"messageId":"4159","endLine":126,"endColumn":15,"fix":"4812"},{"ruleId":"4157","severity":2,"message":"4158","line":155,"column":56,"nodeType":null,"messageId":"4159","endLine":155,"endColumn":56,"fix":"4813"},{"ruleId":"4157","severity":2,"message":"4158","line":11,"column":109,"nodeType":null,"messageId":"4159","endLine":11,"endColumn":109,"fix":"4814"},{"ruleId":"4157","severity":2,"message":"4158","line":30,"column":34,"nodeType":null,"messageId":"4159","endLine":30,"endColumn":34,"fix":"4815"},{"ruleId":"4157","severity":2,"message":"4158","line":69,"column":53,"nodeType":null,"messageId":"4159","endLine":69,"endColumn":53,"fix":"4816"},{"ruleId":"4157","severity":2,"message":"4158","line":94,"column":39,"nodeType":null,"messageId":"4159","endLine":94,"endColumn":39,"fix":"4817"},{"ruleId":"4157","severity":2,"message":"4158","line":119,"column":115,"nodeType":null,"messageId":"4159","endLine":119,"endColumn":115,"fix":"4818"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":30,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":30,"fix":"4819"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":34,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":34,"fix":"4820"},{"ruleId":"4157","severity":2,"message":"4158","line":75,"column":12,"nodeType":null,"messageId":"4159","endLine":75,"endColumn":12,"fix":"4821"},{"ruleId":"4157","severity":2,"message":"4158","line":80,"column":18,"nodeType":null,"messageId":"4159","endLine":80,"endColumn":18,"fix":"4822"},{"ruleId":"4157","severity":2,"message":"4158","line":94,"column":12,"nodeType":null,"messageId":"4159","endLine":94,"endColumn":12,"fix":"4823"},{"ruleId":"4157","severity":2,"message":"4158","line":102,"column":15,"nodeType":null,"messageId":"4159","endLine":102,"endColumn":15,"fix":"4824"},{"ruleId":"4157","severity":2,"message":"4158","line":120,"column":37,"nodeType":null,"messageId":"4159","endLine":120,"endColumn":37,"fix":"4825"},{"ruleId":"4157","severity":2,"message":"4158","line":136,"column":47,"nodeType":null,"messageId":"4159","endLine":136,"endColumn":47,"fix":"4826"},{"ruleId":"4157","severity":2,"message":"4158","line":7,"column":25,"nodeType":null,"messageId":"4159","endLine":7,"endColumn":25,"fix":"4827"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":19,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":19,"fix":"4828"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":17,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":17,"fix":"4829"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":13,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":13,"fix":"4830"},{"ruleId":"4157","severity":2,"message":"4158","line":56,"column":68,"nodeType":null,"messageId":"4159","endLine":56,"endColumn":68,"fix":"4831"},{"ruleId":"4157","severity":2,"message":"4158","line":32,"column":28,"nodeType":null,"messageId":"4159","endLine":32,"endColumn":28,"fix":"4832"},{"ruleId":"4157","severity":2,"message":"4158","line":39,"column":28,"nodeType":null,"messageId":"4159","endLine":39,"endColumn":28,"fix":"4833"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":34,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":34,"fix":"4834"},{"ruleId":"4157","severity":2,"message":"4158","line":76,"column":27,"nodeType":null,"messageId":"4159","endLine":76,"endColumn":27,"fix":"4835"},{"ruleId":"4157","severity":2,"message":"4158","line":90,"column":49,"nodeType":null,"messageId":"4159","endLine":90,"endColumn":49,"fix":"4836"},{"ruleId":"4157","severity":2,"message":"4158","line":96,"column":94,"nodeType":null,"messageId":"4159","endLine":96,"endColumn":94,"fix":"4837"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":33,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":33,"fix":"4838"},{"ruleId":"4157","severity":2,"message":"4158","line":150,"column":42,"nodeType":null,"messageId":"4159","endLine":150,"endColumn":42,"fix":"4839"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":35,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":35,"fix":"4840"},{"ruleId":"4157","severity":2,"message":"4158","line":202,"column":21,"nodeType":null,"messageId":"4159","endLine":202,"endColumn":21,"fix":"4841"},{"ruleId":"4157","severity":2,"message":"4158","line":208,"column":21,"nodeType":null,"messageId":"4159","endLine":208,"endColumn":21,"fix":"4842"},{"ruleId":"4157","severity":2,"message":"4158","line":248,"column":39,"nodeType":null,"messageId":"4159","endLine":248,"endColumn":39,"fix":"4843"},{"ruleId":"4157","severity":2,"message":"4158","line":254,"column":103,"nodeType":null,"messageId":"4159","endLine":254,"endColumn":103,"fix":"4844"},{"ruleId":"4157","severity":2,"message":"4158","line":138,"column":39,"nodeType":null,"messageId":"4159","endLine":138,"endColumn":39,"fix":"4845"},{"ruleId":"4157","severity":2,"message":"4158","line":144,"column":103,"nodeType":null,"messageId":"4159","endLine":144,"endColumn":103,"fix":"4846"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":18,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":18,"fix":"4847"},{"ruleId":"4157","severity":2,"message":"4158","line":12,"column":31,"nodeType":null,"messageId":"4159","endLine":12,"endColumn":31,"fix":"4848"},{"ruleId":"4157","severity":2,"message":"4158","line":14,"column":9,"nodeType":null,"messageId":"4159","endLine":14,"endColumn":9,"fix":"4849"},{"ruleId":"4157","severity":2,"message":"4158","line":16,"column":28,"nodeType":null,"messageId":"4159","endLine":16,"endColumn":28,"fix":"4850"},{"ruleId":"4157","severity":2,"message":"4158","line":96,"column":18,"nodeType":null,"messageId":"4159","endLine":96,"endColumn":18,"fix":"4851"},{"ruleId":"4157","severity":2,"message":"4158","line":175,"column":83,"nodeType":null,"messageId":"4159","endLine":175,"endColumn":83,"fix":"4852"},{"ruleId":"4157","severity":2,"message":"4158","line":53,"column":58,"nodeType":null,"messageId":"4159","endLine":53,"endColumn":58,"fix":"4853"},{"ruleId":"4157","severity":2,"message":"4158","line":59,"column":42,"nodeType":null,"messageId":"4159","endLine":59,"endColumn":42,"fix":"4854"},{"ruleId":"4157","severity":2,"message":"4158","line":63,"column":48,"nodeType":null,"messageId":"4159","endLine":63,"endColumn":48,"fix":"4855"},{"ruleId":"4157","severity":2,"message":"4158","line":70,"column":12,"nodeType":null,"messageId":"4159","endLine":70,"endColumn":12,"fix":"4856"},{"ruleId":"4157","severity":2,"message":"4158","line":107,"column":38,"nodeType":null,"messageId":"4159","endLine":107,"endColumn":38,"fix":"4857"},{"ruleId":"4157","severity":2,"message":"4158","line":233,"column":118,"nodeType":null,"messageId":"4159","endLine":233,"endColumn":118,"fix":"4858"},{"ruleId":"4157","severity":2,"message":"4158","line":195,"column":12,"nodeType":null,"messageId":"4159","endLine":195,"endColumn":12,"fix":"4859"},{"ruleId":"4157","severity":2,"message":"4158","line":204,"column":12,"nodeType":null,"messageId":"4159","endLine":204,"endColumn":12,"fix":"4860"},{"ruleId":"4157","severity":2,"message":"4158","line":225,"column":45,"nodeType":null,"messageId":"4159","endLine":225,"endColumn":45,"fix":"4861"},{"ruleId":"4157","severity":2,"message":"4158","line":340,"column":95,"nodeType":null,"messageId":"4159","endLine":340,"endColumn":95,"fix":"4862"},{"ruleId":"4157","severity":2,"message":"4158","line":351,"column":59,"nodeType":null,"messageId":"4159","endLine":351,"endColumn":59,"fix":"4863"},{"ruleId":"4157","severity":2,"message":"4158","line":257,"column":87,"nodeType":null,"messageId":"4159","endLine":257,"endColumn":87,"fix":"4864"},{"ruleId":"4157","severity":2,"message":"4158","line":261,"column":19,"nodeType":null,"messageId":"4159","endLine":261,"endColumn":19,"fix":"4865"},{"ruleId":"4157","severity":2,"message":"4158","line":292,"column":12,"nodeType":null,"messageId":"4159","endLine":292,"endColumn":12,"fix":"4866"},{"ruleId":"4157","severity":2,"message":"4158","line":303,"column":6,"nodeType":null,"messageId":"4159","endLine":303,"endColumn":6,"fix":"4867"},{"ruleId":"4157","severity":2,"message":"4158","line":312,"column":15,"nodeType":null,"messageId":"4159","endLine":312,"endColumn":15,"fix":"4868"},{"ruleId":"4157","severity":2,"message":"4158","line":343,"column":20,"nodeType":null,"messageId":"4159","endLine":343,"endColumn":20,"fix":"4869"},{"ruleId":"4157","severity":2,"message":"4158","line":371,"column":18,"nodeType":null,"messageId":"4159","endLine":371,"endColumn":18,"fix":"4870"},{"ruleId":"4157","severity":2,"message":"4158","line":382,"column":6,"nodeType":null,"messageId":"4159","endLine":382,"endColumn":6,"fix":"4871"},{"ruleId":"4157","severity":2,"message":"4158","line":399,"column":7,"nodeType":null,"messageId":"4159","endLine":399,"endColumn":7,"fix":"4872"},{"ruleId":"4157","severity":2,"message":"4158","line":133,"column":19,"nodeType":null,"messageId":"4159","endLine":133,"endColumn":19,"fix":"4873"},{"ruleId":"4157","severity":2,"message":"4158","line":412,"column":62,"nodeType":null,"messageId":"4159","endLine":412,"endColumn":62,"fix":"4874"},{"ruleId":"4157","severity":2,"message":"4158","line":418,"column":25,"nodeType":null,"messageId":"4159","endLine":418,"endColumn":25,"fix":"4875"},{"ruleId":"4157","severity":2,"message":"4158","line":443,"column":65,"nodeType":null,"messageId":"4159","endLine":443,"endColumn":65,"fix":"4876"},{"ruleId":"4157","severity":2,"message":"4158","line":469,"column":65,"nodeType":null,"messageId":"4159","endLine":469,"endColumn":65,"fix":"4877"},{"ruleId":"4157","severity":2,"message":"4158","line":495,"column":65,"nodeType":null,"messageId":"4159","endLine":495,"endColumn":65,"fix":"4878"},{"ruleId":"4157","severity":2,"message":"4158","line":500,"column":53,"nodeType":null,"messageId":"4159","endLine":500,"endColumn":53,"fix":"4879"},{"ruleId":"4157","severity":2,"message":"4158","line":529,"column":65,"nodeType":null,"messageId":"4159","endLine":529,"endColumn":65,"fix":"4880"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":69,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":69,"fix":"4881"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":69,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":69,"fix":"4882"},{"ruleId":"4157","severity":2,"message":"4158","line":52,"column":109,"nodeType":null,"messageId":"4159","endLine":52,"endColumn":109,"fix":"4883"},{"ruleId":"4157","severity":2,"message":"4158","line":71,"column":45,"nodeType":null,"messageId":"4159","endLine":71,"endColumn":45,"fix":"4884"},{"ruleId":"4157","severity":2,"message":"4158","line":86,"column":31,"nodeType":null,"messageId":"4159","endLine":86,"endColumn":31,"fix":"4885"},{"ruleId":"4157","severity":2,"message":"4158","line":111,"column":17,"nodeType":null,"messageId":"4159","endLine":111,"endColumn":17,"fix":"4886"},{"ruleId":"4157","severity":2,"message":"4158","line":123,"column":21,"nodeType":null,"messageId":"4159","endLine":123,"endColumn":21,"fix":"4887"},{"ruleId":"4157","severity":2,"message":"4158","line":145,"column":83,"nodeType":null,"messageId":"4159","endLine":145,"endColumn":83,"fix":"4888"},{"ruleId":"4157","severity":2,"message":"4158","line":159,"column":13,"nodeType":null,"messageId":"4159","endLine":159,"endColumn":13,"fix":"4889"},{"ruleId":"4157","severity":2,"message":"4158","line":160,"column":10,"nodeType":null,"messageId":"4159","endLine":160,"endColumn":10,"fix":"4890"},{"ruleId":"4157","severity":2,"message":"4158","line":163,"column":22,"nodeType":null,"messageId":"4159","endLine":163,"endColumn":22,"fix":"4891"},{"ruleId":"4157","severity":2,"message":"4158","line":174,"column":26,"nodeType":null,"messageId":"4159","endLine":174,"endColumn":26,"fix":"4892"},{"ruleId":"4157","severity":2,"message":"4158","line":182,"column":36,"nodeType":null,"messageId":"4159","endLine":182,"endColumn":36,"fix":"4893"},{"ruleId":"4157","severity":2,"message":"4158","line":46,"column":18,"nodeType":null,"messageId":"4159","endLine":46,"endColumn":18,"fix":"4894"},{"ruleId":"4157","severity":2,"message":"4158","line":46,"column":91,"nodeType":null,"messageId":"4159","endLine":46,"endColumn":91,"fix":"4895"},{"ruleId":"4157","severity":2,"message":"4158","line":130,"column":66,"nodeType":null,"messageId":"4159","endLine":130,"endColumn":66,"fix":"4896"},{"ruleId":"4157","severity":2,"message":"4158","line":155,"column":36,"nodeType":null,"messageId":"4159","endLine":155,"endColumn":36,"fix":"4897"},{"ruleId":"4157","severity":2,"message":"4158","line":90,"column":10,"nodeType":null,"messageId":"4159","endLine":90,"endColumn":10,"fix":"4898"},{"ruleId":"4157","severity":2,"message":"4158","line":92,"column":12,"nodeType":null,"messageId":"4159","endLine":92,"endColumn":12,"fix":"4899"},{"ruleId":"4157","severity":2,"message":"4158","line":110,"column":26,"nodeType":null,"messageId":"4159","endLine":110,"endColumn":26,"fix":"4900"},{"ruleId":"4157","severity":2,"message":"4158","line":239,"column":35,"nodeType":null,"messageId":"4159","endLine":239,"endColumn":35,"fix":"4901"},{"ruleId":"4157","severity":2,"message":"4158","line":441,"column":54,"nodeType":null,"messageId":"4159","endLine":441,"endColumn":54,"fix":"4902"},{"ruleId":"4157","severity":2,"message":"4158","line":614,"column":28,"nodeType":null,"messageId":"4159","endLine":614,"endColumn":28,"fix":"4903"},{"ruleId":"4157","severity":2,"message":"4158","line":55,"column":28,"nodeType":null,"messageId":"4159","endLine":55,"endColumn":28,"fix":"4904"},{"ruleId":"4157","severity":2,"message":"4158","line":62,"column":28,"nodeType":null,"messageId":"4159","endLine":62,"endColumn":28,"fix":"4905"},{"ruleId":"4157","severity":2,"message":"4158","line":76,"column":46,"nodeType":null,"messageId":"4159","endLine":76,"endColumn":46,"fix":"4906"},{"ruleId":"4157","severity":2,"message":"4158","line":88,"column":46,"nodeType":null,"messageId":"4159","endLine":88,"endColumn":46,"fix":"4907"},{"ruleId":"4157","severity":2,"message":"4158","line":95,"column":15,"nodeType":null,"messageId":"4159","endLine":95,"endColumn":15,"fix":"4908"},{"ruleId":"4157","severity":2,"message":"4158","line":113,"column":30,"nodeType":null,"messageId":"4159","endLine":113,"endColumn":30,"fix":"4909"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":27,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":27,"fix":"4910"},{"ruleId":"4157","severity":2,"message":"4158","line":159,"column":41,"nodeType":null,"messageId":"4159","endLine":159,"endColumn":41,"fix":"4911"},{"ruleId":"4157","severity":2,"message":"4158","line":165,"column":21,"nodeType":null,"messageId":"4159","endLine":165,"endColumn":21,"fix":"4912"},{"ruleId":"4157","severity":2,"message":"4158","line":171,"column":94,"nodeType":null,"messageId":"4159","endLine":171,"endColumn":94,"fix":"4913"},{"ruleId":"4157","severity":2,"message":"4158","line":198,"column":43,"nodeType":null,"messageId":"4159","endLine":198,"endColumn":43,"fix":"4914"},{"ruleId":"4157","severity":2,"message":"4158","line":243,"column":16,"nodeType":null,"messageId":"4159","endLine":243,"endColumn":16,"fix":"4915"},{"ruleId":"4157","severity":2,"message":"4158","line":288,"column":55,"nodeType":null,"messageId":"4159","endLine":288,"endColumn":55,"fix":"4916"},{"ruleId":"4157","severity":2,"message":"4158","line":312,"column":120,"nodeType":null,"messageId":"4159","endLine":312,"endColumn":120,"fix":"4917"},{"ruleId":"4157","severity":2,"message":"4158","line":318,"column":33,"nodeType":null,"messageId":"4159","endLine":318,"endColumn":33,"fix":"4918"},{"ruleId":"4157","severity":2,"message":"4158","line":380,"column":97,"nodeType":null,"messageId":"4159","endLine":380,"endColumn":97,"fix":"4919"},{"ruleId":"4157","severity":2,"message":"4158","line":383,"column":97,"nodeType":null,"messageId":"4159","endLine":383,"endColumn":97,"fix":"4920"},{"ruleId":"4157","severity":2,"message":"4158","line":391,"column":97,"nodeType":null,"messageId":"4159","endLine":391,"endColumn":97,"fix":"4921"},{"ruleId":"4157","severity":2,"message":"4158","line":397,"column":97,"nodeType":null,"messageId":"4159","endLine":397,"endColumn":97,"fix":"4922"},{"ruleId":"4157","severity":2,"message":"4158","line":507,"column":33,"nodeType":null,"messageId":"4159","endLine":507,"endColumn":33,"fix":"4923"},{"ruleId":"4157","severity":2,"message":"4158","line":64,"column":93,"nodeType":null,"messageId":"4159","endLine":64,"endColumn":93,"fix":"4924"},{"ruleId":"4157","severity":2,"message":"4158","line":128,"column":24,"nodeType":null,"messageId":"4159","endLine":128,"endColumn":24,"fix":"4925"},{"ruleId":"4157","severity":2,"message":"4158","line":144,"column":24,"nodeType":null,"messageId":"4159","endLine":144,"endColumn":24,"fix":"4926"},{"ruleId":"4157","severity":2,"message":"4158","line":151,"column":23,"nodeType":null,"messageId":"4159","endLine":151,"endColumn":23,"fix":"4927"},{"ruleId":"4157","severity":2,"message":"4158","line":158,"column":21,"nodeType":null,"messageId":"4159","endLine":158,"endColumn":21,"fix":"4928"},{"ruleId":"4157","severity":2,"message":"4158","line":165,"column":20,"nodeType":null,"messageId":"4159","endLine":165,"endColumn":20,"fix":"4929"},{"ruleId":"4157","severity":2,"message":"4158","line":172,"column":19,"nodeType":null,"messageId":"4159","endLine":172,"endColumn":19,"fix":"4930"},{"ruleId":"4157","severity":2,"message":"4158","line":183,"column":27,"nodeType":null,"messageId":"4159","endLine":183,"endColumn":27,"fix":"4931"},{"ruleId":"4157","severity":2,"message":"4158","line":185,"column":88,"nodeType":null,"messageId":"4159","endLine":185,"endColumn":88,"fix":"4932"},{"ruleId":"4157","severity":2,"message":"4158","line":189,"column":120,"nodeType":null,"messageId":"4159","endLine":189,"endColumn":120,"fix":"4933"},{"ruleId":"4288","severity":2,"message":"4289","line":1,"column":1,"nodeType":null,"messageId":"4290","endLine":31,"endColumn":36,"fix":"4934"},{"ruleId":"4168","severity":1,"message":"4935","line":2,"column":10,"nodeType":"4170","messageId":"4171","endLine":2,"endColumn":30},{"ruleId":"4293","severity":2,"message":"4935","line":2,"column":10,"nodeType":"4170","messageId":"4171","endLine":2,"endColumn":30,"fix":"4936"},{"ruleId":"4168","severity":1,"message":"4937","line":3,"column":10,"nodeType":"4170","messageId":"4171","endLine":3,"endColumn":25},{"ruleId":"4293","severity":2,"message":"4937","line":3,"column":10,"nodeType":"4170","messageId":"4171","endLine":3,"endColumn":25,"fix":"4938"},{"ruleId":"4168","severity":1,"message":"4939","line":10,"column":3,"nodeType":"4170","messageId":"4171","endLine":10,"endColumn":15},{"ruleId":"4293","severity":2,"message":"4939","line":10,"column":3,"nodeType":"4170","messageId":"4171","endLine":10,"endColumn":15,"fix":"4940"},{"ruleId":"4168","severity":1,"message":"4941","line":14,"column":3,"nodeType":"4170","messageId":"4171","endLine":14,"endColumn":17},{"ruleId":"4293","severity":2,"message":"4941","line":14,"column":3,"nodeType":"4170","messageId":"4171","endLine":14,"endColumn":17,"fix":"4942"},{"ruleId":"4168","severity":1,"message":"4943","line":27,"column":28,"nodeType":"4170","messageId":"4171","endLine":27,"endColumn":37},{"ruleId":"4293","severity":2,"message":"4943","line":27,"column":28,"nodeType":"4170","messageId":"4171","endLine":27,"endColumn":37,"fix":"4944"},{"ruleId":"4157","severity":2,"message":"4158","line":70,"column":6,"nodeType":null,"messageId":"4159","endLine":70,"endColumn":6,"fix":"4945"},{"ruleId":"4157","severity":2,"message":"4158","line":142,"column":13,"nodeType":null,"messageId":"4159","endLine":142,"endColumn":13,"fix":"4946"},{"ruleId":"4157","severity":2,"message":"4158","line":174,"column":74,"nodeType":null,"messageId":"4159","endLine":174,"endColumn":74,"fix":"4947"},{"ruleId":"4157","severity":2,"message":"4158","line":31,"column":12,"nodeType":null,"messageId":"4159","endLine":31,"endColumn":12,"fix":"4948"},{"ruleId":"4288","severity":2,"message":"4289","line":1,"column":1,"nodeType":null,"messageId":"4290","endLine":22,"endColumn":44,"fix":"4949"},{"ruleId":"4157","severity":2,"message":"4950","line":24,"column":34,"nodeType":null,"messageId":"4250","endLine":26,"endColumn":1,"fix":"4951"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":29,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":29,"fix":"4952"},{"ruleId":"4157","severity":2,"message":"4953","line":105,"column":15,"nodeType":null,"messageId":"4250","endLine":105,"endColumn":144,"fix":"4954"},{"ruleId":"4157","severity":2,"message":"4158","line":63,"column":6,"nodeType":null,"messageId":"4159","endLine":63,"endColumn":6,"fix":"4955"},{"ruleId":"4157","severity":2,"message":"4158","line":30,"column":75,"nodeType":null,"messageId":"4159","endLine":30,"endColumn":75,"fix":"4956"},{"ruleId":"4157","severity":2,"message":"4158","line":38,"column":17,"nodeType":null,"messageId":"4159","endLine":38,"endColumn":17,"fix":"4957"},{"ruleId":"4157","severity":2,"message":"4158","line":97,"column":40,"nodeType":null,"messageId":"4159","endLine":97,"endColumn":40,"fix":"4958"},{"ruleId":"4157","severity":2,"message":"4158","line":81,"column":17,"nodeType":null,"messageId":"4159","endLine":81,"endColumn":17,"fix":"4959"},{"ruleId":"4157","severity":2,"message":"4158","line":38,"column":8,"nodeType":null,"messageId":"4159","endLine":38,"endColumn":8,"fix":"4960"},{"ruleId":"4157","severity":2,"message":"4158","line":75,"column":7,"nodeType":null,"messageId":"4159","endLine":75,"endColumn":7,"fix":"4961"},{"ruleId":"4157","severity":2,"message":"4158","line":6,"column":45,"nodeType":null,"messageId":"4159","endLine":6,"endColumn":45,"fix":"4962"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":11,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":11,"fix":"4963"},{"ruleId":"4157","severity":2,"message":"4158","line":38,"column":15,"nodeType":null,"messageId":"4159","endLine":38,"endColumn":15,"fix":"4964"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":15,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":15,"fix":"4965"},{"ruleId":"4157","severity":2,"message":"4158","line":56,"column":15,"nodeType":null,"messageId":"4159","endLine":56,"endColumn":15,"fix":"4966"},{"ruleId":"4157","severity":2,"message":"4158","line":102,"column":110,"nodeType":null,"messageId":"4159","endLine":102,"endColumn":110,"fix":"4967"},{"ruleId":"4157","severity":2,"message":"4158","line":108,"column":59,"nodeType":null,"messageId":"4159","endLine":108,"endColumn":59,"fix":"4968"},{"ruleId":"4157","severity":2,"message":"4158","line":114,"column":62,"nodeType":null,"messageId":"4159","endLine":114,"endColumn":62,"fix":"4969"},{"ruleId":"4157","severity":2,"message":"4158","line":122,"column":28,"nodeType":null,"messageId":"4159","endLine":122,"endColumn":28,"fix":"4970"},{"ruleId":"4157","severity":2,"message":"4158","line":130,"column":36,"nodeType":null,"messageId":"4159","endLine":130,"endColumn":36,"fix":"4971"},{"ruleId":"4157","severity":2,"message":"4158","line":180,"column":85,"nodeType":null,"messageId":"4159","endLine":180,"endColumn":85,"fix":"4972"},{"ruleId":"4157","severity":2,"message":"4158","line":265,"column":9,"nodeType":null,"messageId":"4159","endLine":265,"endColumn":9,"fix":"4973"},{"ruleId":"4157","severity":2,"message":"4158","line":98,"column":12,"nodeType":null,"messageId":"4159","endLine":98,"endColumn":12,"fix":"4974"},{"ruleId":"4157","severity":2,"message":"4158","line":158,"column":104,"nodeType":null,"messageId":"4159","endLine":158,"endColumn":104,"fix":"4975"},{"ruleId":"4157","severity":2,"message":"4158","line":186,"column":46,"nodeType":null,"messageId":"4159","endLine":186,"endColumn":46,"fix":"4976"},{"ruleId":"4157","severity":2,"message":"4158","line":79,"column":16,"nodeType":null,"messageId":"4159","endLine":79,"endColumn":16,"fix":"4977"},{"ruleId":"4157","severity":2,"message":"4158","line":92,"column":54,"nodeType":null,"messageId":"4159","endLine":92,"endColumn":54,"fix":"4978"},{"ruleId":"4157","severity":2,"message":"4158","line":98,"column":12,"nodeType":null,"messageId":"4159","endLine":98,"endColumn":12,"fix":"4979"},{"ruleId":"4157","severity":2,"message":"4158","line":126,"column":12,"nodeType":null,"messageId":"4159","endLine":126,"endColumn":12,"fix":"4980"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":30,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":30,"fix":"4981"},{"ruleId":"4157","severity":2,"message":"4158","line":24,"column":34,"nodeType":null,"messageId":"4159","endLine":24,"endColumn":34,"fix":"4982"},{"ruleId":"4157","severity":2,"message":"4158","line":112,"column":71,"nodeType":null,"messageId":"4159","endLine":112,"endColumn":71,"fix":"4983"},{"ruleId":"4157","severity":2,"message":"4158","line":122,"column":13,"nodeType":null,"messageId":"4159","endLine":122,"endColumn":13,"fix":"4984"},{"ruleId":"4157","severity":2,"message":"4158","line":134,"column":21,"nodeType":null,"messageId":"4159","endLine":134,"endColumn":21,"fix":"4985"},{"ruleId":"4157","severity":2,"message":"4158","line":141,"column":21,"nodeType":null,"messageId":"4159","endLine":141,"endColumn":21,"fix":"4986"},{"ruleId":"4157","severity":2,"message":"4158","line":147,"column":21,"nodeType":null,"messageId":"4159","endLine":147,"endColumn":21,"fix":"4987"},{"ruleId":"4157","severity":2,"message":"4158","line":31,"column":41,"nodeType":null,"messageId":"4159","endLine":31,"endColumn":41,"fix":"4988"},{"ruleId":"4157","severity":2,"message":"4158","line":33,"column":94,"nodeType":null,"messageId":"4159","endLine":33,"endColumn":94,"fix":"4989"},{"ruleId":"4157","severity":2,"message":"4158","line":38,"column":41,"nodeType":null,"messageId":"4159","endLine":38,"endColumn":41,"fix":"4990"},{"ruleId":"4157","severity":2,"message":"4158","line":78,"column":25,"nodeType":null,"messageId":"4159","endLine":78,"endColumn":25,"fix":"4991"},{"ruleId":"4157","severity":2,"message":"4158","line":140,"column":37,"nodeType":null,"messageId":"4159","endLine":140,"endColumn":37,"fix":"4992"},{"ruleId":"4157","severity":2,"message":"4158","line":155,"column":11,"nodeType":null,"messageId":"4159","endLine":155,"endColumn":11,"fix":"4993"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":16,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":16,"fix":"4994"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":64,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":64,"fix":"4995"},{"ruleId":"4157","severity":2,"message":"4158","line":37,"column":21,"nodeType":null,"messageId":"4159","endLine":37,"endColumn":21,"fix":"4996"},{"ruleId":"4157","severity":2,"message":"4158","line":59,"column":95,"nodeType":null,"messageId":"4159","endLine":59,"endColumn":95,"fix":"4997"},{"ruleId":"4157","severity":2,"message":"4158","line":15,"column":12,"nodeType":null,"messageId":"4159","endLine":15,"endColumn":12,"fix":"4998"},{"ruleId":"4157","severity":2,"message":"4158","line":16,"column":73,"nodeType":null,"messageId":"4159","endLine":16,"endColumn":73,"fix":"4999"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":10,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":10,"fix":"5000"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":75,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":75,"fix":"5001"},{"ruleId":"4157","severity":2,"message":"4158","line":43,"column":48,"nodeType":null,"messageId":"4159","endLine":43,"endColumn":48,"fix":"5002"},{"ruleId":"4157","severity":2,"message":"4158","line":63,"column":67,"nodeType":null,"messageId":"4159","endLine":63,"endColumn":67,"fix":"5003"},{"ruleId":"4157","severity":2,"message":"4158","line":72,"column":51,"nodeType":null,"messageId":"4159","endLine":72,"endColumn":51,"fix":"5004"},{"ruleId":"4157","severity":2,"message":"4158","line":78,"column":51,"nodeType":null,"messageId":"4159","endLine":78,"endColumn":51,"fix":"5005"},{"ruleId":"4157","severity":2,"message":"4158","line":89,"column":38,"nodeType":null,"messageId":"4159","endLine":89,"endColumn":38,"fix":"5006"},{"ruleId":"4157","severity":2,"message":"4158","line":97,"column":22,"nodeType":null,"messageId":"4159","endLine":97,"endColumn":22,"fix":"5007"},{"ruleId":"4157","severity":2,"message":"4158","line":119,"column":13,"nodeType":null,"messageId":"4159","endLine":119,"endColumn":13,"fix":"5008"},{"ruleId":"4157","severity":2,"message":"4158","line":121,"column":17,"nodeType":null,"messageId":"4159","endLine":121,"endColumn":17,"fix":"5009"},{"ruleId":"4157","severity":2,"message":"4158","line":138,"column":67,"nodeType":null,"messageId":"4159","endLine":138,"endColumn":67,"fix":"5010"},{"ruleId":"4157","severity":2,"message":"4158","line":146,"column":11,"nodeType":null,"messageId":"4159","endLine":146,"endColumn":11,"fix":"5011"},{"ruleId":"4157","severity":2,"message":"4158","line":156,"column":67,"nodeType":null,"messageId":"4159","endLine":156,"endColumn":67,"fix":"5012"},{"ruleId":"4157","severity":2,"message":"4158","line":173,"column":35,"nodeType":null,"messageId":"4159","endLine":173,"endColumn":35,"fix":"5013"},{"ruleId":"4157","severity":2,"message":"4158","line":212,"column":35,"nodeType":null,"messageId":"4159","endLine":212,"endColumn":35,"fix":"5014"},{"ruleId":"4157","severity":2,"message":"4158","line":39,"column":19,"nodeType":null,"messageId":"4159","endLine":39,"endColumn":19,"fix":"5015"},{"ruleId":"4157","severity":2,"message":"4158","line":60,"column":29,"nodeType":null,"messageId":"4159","endLine":60,"endColumn":29,"fix":"5016"},{"ruleId":"4157","severity":2,"message":"4158","line":98,"column":12,"nodeType":null,"messageId":"4159","endLine":98,"endColumn":12,"fix":"5017"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":51,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":51,"fix":"5018"},{"ruleId":"4157","severity":2,"message":"4158","line":175,"column":27,"nodeType":null,"messageId":"4159","endLine":175,"endColumn":27,"fix":"5019"},{"ruleId":"4157","severity":2,"message":"4158","line":179,"column":59,"nodeType":null,"messageId":"4159","endLine":179,"endColumn":59,"fix":"5020"},{"ruleId":"4157","severity":2,"message":"4158","line":35,"column":14,"nodeType":null,"messageId":"4159","endLine":35,"endColumn":14,"fix":"5021"},{"ruleId":"4157","severity":2,"message":"4158","line":53,"column":27,"nodeType":null,"messageId":"4159","endLine":53,"endColumn":27,"fix":"5022"},{"ruleId":"4157","severity":2,"message":"4158","line":121,"column":65,"nodeType":null,"messageId":"4159","endLine":121,"endColumn":65,"fix":"5023"},{"ruleId":"4157","severity":2,"message":"4158","line":61,"column":33,"nodeType":null,"messageId":"4159","endLine":61,"endColumn":33,"fix":"5024"},{"ruleId":"4157","severity":2,"message":"4158","line":69,"column":32,"nodeType":null,"messageId":"4159","endLine":69,"endColumn":32,"fix":"5025"},{"ruleId":"4168","severity":1,"message":"5026","line":9,"column":8,"nodeType":"4170","messageId":"4171","endLine":9,"endColumn":25},{"ruleId":"4293","severity":2,"message":"5026","line":9,"column":8,"nodeType":"4170","messageId":"4171","endLine":9,"endColumn":25,"fix":"5027"},{"ruleId":"4168","severity":1,"message":"5028","line":29,"column":9,"nodeType":"4170","messageId":"4171","endLine":29,"endColumn":32},{"ruleId":"4157","severity":2,"message":"4158","line":13,"column":4,"nodeType":null,"messageId":"4159","endLine":13,"endColumn":4,"fix":"5029"},{"ruleId":"4157","severity":2,"message":"4158","line":15,"column":39,"nodeType":null,"messageId":"4159","endLine":15,"endColumn":39,"fix":"5030"},{"ruleId":"4157","severity":2,"message":"4158","line":61,"column":17,"nodeType":null,"messageId":"4159","endLine":61,"endColumn":17,"fix":"5031"},{"ruleId":"4157","severity":2,"message":"4158","line":94,"column":97,"nodeType":null,"messageId":"4159","endLine":94,"endColumn":97,"fix":"5032"},{"ruleId":"4157","severity":2,"message":"4158","line":70,"column":95,"nodeType":null,"messageId":"4159","endLine":70,"endColumn":95,"fix":"5033"},{"ruleId":"4157","severity":2,"message":"4158","line":34,"column":29,"nodeType":null,"messageId":"4159","endLine":34,"endColumn":29,"fix":"5034"},{"ruleId":"4157","severity":2,"message":"4158","line":80,"column":20,"nodeType":null,"messageId":"4159","endLine":80,"endColumn":20,"fix":"5035"},{"ruleId":"4157","severity":2,"message":"4158","line":45,"column":55,"nodeType":null,"messageId":"4159","endLine":45,"endColumn":55,"fix":"5036"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":15,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":15,"fix":"5037"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":40,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":40,"fix":"5038"},{"ruleId":"4157","severity":2,"message":"4158","line":142,"column":15,"nodeType":null,"messageId":"4159","endLine":142,"endColumn":15,"fix":"5039"},{"ruleId":"4157","severity":2,"message":"4158","line":135,"column":87,"nodeType":null,"messageId":"4159","endLine":135,"endColumn":87,"fix":"5040"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":11,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":11,"fix":"5041"},{"ruleId":"4157","severity":2,"message":"4158","line":189,"column":24,"nodeType":null,"messageId":"4159","endLine":189,"endColumn":24,"fix":"5042"},{"ruleId":"4157","severity":2,"message":"4158","line":149,"column":22,"nodeType":null,"messageId":"4159","endLine":149,"endColumn":22,"fix":"5043"},{"ruleId":"4157","severity":2,"message":"4158","line":67,"column":14,"nodeType":null,"messageId":"4159","endLine":67,"endColumn":14,"fix":"5044"},{"ruleId":"4157","severity":2,"message":"4158","line":73,"column":20,"nodeType":null,"messageId":"4159","endLine":73,"endColumn":20,"fix":"5045"},{"ruleId":"4157","severity":2,"message":"4158","line":82,"column":35,"nodeType":null,"messageId":"4159","endLine":82,"endColumn":35,"fix":"5046"},{"ruleId":"4157","severity":2,"message":"4158","line":87,"column":15,"nodeType":null,"messageId":"4159","endLine":87,"endColumn":15,"fix":"5047"},{"ruleId":"4157","severity":2,"message":"4158","line":33,"column":27,"nodeType":null,"messageId":"4159","endLine":33,"endColumn":27,"fix":"5048"},{"ruleId":"4157","severity":2,"message":"4158","line":36,"column":111,"nodeType":null,"messageId":"4159","endLine":36,"endColumn":111,"fix":"5049"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":104,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":104,"fix":"5050"},{"ruleId":"4157","severity":2,"message":"4158","line":18,"column":47,"nodeType":null,"messageId":"4159","endLine":18,"endColumn":47,"fix":"5051"},{"ruleId":"4157","severity":2,"message":"4158","line":55,"column":16,"nodeType":null,"messageId":"4159","endLine":55,"endColumn":16,"fix":"5052"},{"ruleId":"4157","severity":2,"message":"4158","line":17,"column":17,"nodeType":null,"messageId":"4159","endLine":17,"endColumn":17,"fix":"5053"},{"ruleId":"4157","severity":2,"message":"4158","line":39,"column":26,"nodeType":null,"messageId":"4159","endLine":39,"endColumn":26,"fix":"5054"},{"ruleId":"4157","severity":2,"message":"4158","line":8,"column":32,"nodeType":null,"messageId":"4159","endLine":8,"endColumn":32,"fix":"5055"},{"ruleId":"4157","severity":2,"message":"4158","line":21,"column":38,"nodeType":null,"messageId":"4159","endLine":21,"endColumn":38,"fix":"5056"},{"ruleId":"4157","severity":2,"message":"4158","line":47,"column":40,"nodeType":null,"messageId":"4159","endLine":47,"endColumn":40,"fix":"5057"},{"ruleId":"4157","severity":2,"message":"4158","line":95,"column":97,"nodeType":null,"messageId":"4159","endLine":95,"endColumn":97,"fix":"5058"},{"ruleId":"4157","severity":2,"message":"4158","line":48,"column":45,"nodeType":null,"messageId":"4159","endLine":48,"endColumn":45,"fix":"5059"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":45,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":45,"fix":"5060"},{"ruleId":"4157","severity":2,"message":"4158","line":54,"column":35,"nodeType":null,"messageId":"4159","endLine":54,"endColumn":35,"fix":"5061"},{"ruleId":"4157","severity":2,"message":"4158","line":57,"column":35,"nodeType":null,"messageId":"4159","endLine":57,"endColumn":35,"fix":"5062"},{"ruleId":"4157","severity":2,"message":"5063","line":25,"column":8,"nodeType":null,"messageId":"4250","endLine":25,"endColumn":121,"fix":"5064"},{"ruleId":"4157","severity":2,"message":"4158","line":83,"column":18,"nodeType":null,"messageId":"4159","endLine":83,"endColumn":18,"fix":"5065"},{"ruleId":"4157","severity":2,"message":"4158","line":125,"column":20,"nodeType":null,"messageId":"4159","endLine":125,"endColumn":20,"fix":"5066"},{"ruleId":"4157","severity":2,"message":"4158","line":143,"column":4,"nodeType":null,"messageId":"4159","endLine":143,"endColumn":4,"fix":"5067"},{"ruleId":"4157","severity":2,"message":"4158","line":83,"column":25,"nodeType":null,"messageId":"4159","endLine":83,"endColumn":25,"fix":"5068"},{"ruleId":"4157","severity":2,"message":"4158","line":86,"column":94,"nodeType":null,"messageId":"4159","endLine":86,"endColumn":94,"fix":"5069"},{"ruleId":"4157","severity":2,"message":"4158","line":88,"column":10,"nodeType":null,"messageId":"4159","endLine":88,"endColumn":10,"fix":"5070"},{"ruleId":"4157","severity":2,"message":"4158","line":23,"column":33,"nodeType":null,"messageId":"4159","endLine":23,"endColumn":33,"fix":"5071"},{"ruleId":"4157","severity":2,"message":"4158","line":108,"column":42,"nodeType":null,"messageId":"4159","endLine":108,"endColumn":42,"fix":"5072"},{"ruleId":"4157","severity":2,"message":"4158","line":271,"column":6,"nodeType":null,"messageId":"4159","endLine":271,"endColumn":6,"fix":"5073"},{"ruleId":"4157","severity":2,"message":"4158","line":42,"column":34,"nodeType":null,"messageId":"4159","endLine":42,"endColumn":34,"fix":"5074"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":45,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":45,"fix":"5075"},{"ruleId":"4157","severity":2,"message":"4158","line":46,"column":51,"nodeType":null,"messageId":"4159","endLine":46,"endColumn":51,"fix":"5076"},{"ruleId":"4157","severity":2,"message":"4158","line":53,"column":7,"nodeType":null,"messageId":"4159","endLine":53,"endColumn":7,"fix":"5077"},{"ruleId":"4157","severity":2,"message":"4158","line":121,"column":20,"nodeType":null,"messageId":"4159","endLine":121,"endColumn":20,"fix":"5078"},{"ruleId":"4157","severity":2,"message":"4158","line":139,"column":7,"nodeType":null,"messageId":"4159","endLine":139,"endColumn":7,"fix":"5079"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":5,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":5,"fix":"5080"},{"ruleId":"4157","severity":2,"message":"4158","line":19,"column":5,"nodeType":null,"messageId":"4159","endLine":19,"endColumn":5,"fix":"5081"},{"ruleId":"4157","severity":2,"message":"4158","line":25,"column":35,"nodeType":null,"messageId":"4159","endLine":25,"endColumn":35,"fix":"5082"},{"ruleId":"4157","severity":2,"message":"4158","line":26,"column":12,"nodeType":null,"messageId":"4159","endLine":26,"endColumn":12,"fix":"5083"},{"ruleId":"4157","severity":2,"message":"4158","line":50,"column":18,"nodeType":null,"messageId":"4159","endLine":50,"endColumn":18,"fix":"5084"},{"ruleId":"4157","severity":2,"message":"4158","line":60,"column":116,"nodeType":null,"messageId":"4159","endLine":60,"endColumn":116,"fix":"5085"},{"ruleId":"4157","severity":2,"message":"4158","line":69,"column":62,"nodeType":null,"messageId":"4159","endLine":69,"endColumn":62,"fix":"5086"},{"ruleId":"4157","severity":2,"message":"4158","line":108,"column":64,"nodeType":null,"messageId":"4159","endLine":108,"endColumn":64,"fix":"5087"},{"ruleId":"4157","severity":2,"message":"4158","line":138,"column":12,"nodeType":null,"messageId":"4159","endLine":138,"endColumn":12,"fix":"5088"},{"ruleId":"4157","severity":2,"message":"4158","line":152,"column":23,"nodeType":null,"messageId":"4159","endLine":152,"endColumn":23,"fix":"5089"},{"ruleId":"4157","severity":2,"message":"4158","line":174,"column":37,"nodeType":null,"messageId":"4159","endLine":174,"endColumn":37,"fix":"5090"},{"ruleId":"4157","severity":2,"message":"4158","line":195,"column":21,"nodeType":null,"messageId":"4159","endLine":195,"endColumn":21,"fix":"5091"},{"ruleId":"4157","severity":2,"message":"4158","line":17,"column":21,"nodeType":null,"messageId":"4159","endLine":17,"endColumn":21,"fix":"5092"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":52,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":52,"fix":"5093"},{"ruleId":"4157","severity":2,"message":"4158","line":47,"column":43,"nodeType":null,"messageId":"4159","endLine":47,"endColumn":43,"fix":"5094"},{"ruleId":"4157","severity":2,"message":"4158","line":41,"column":12,"nodeType":null,"messageId":"4159","endLine":41,"endColumn":12,"fix":"5095"},{"ruleId":"4157","severity":2,"message":"4158","line":34,"column":129,"nodeType":null,"messageId":"4159","endLine":34,"endColumn":129,"fix":"5096"},{"ruleId":"4157","severity":2,"message":"4158","line":49,"column":23,"nodeType":null,"messageId":"4159","endLine":49,"endColumn":23,"fix":"5097"},{"ruleId":"4157","severity":2,"message":"4158","line":95,"column":103,"nodeType":null,"messageId":"4159","endLine":95,"endColumn":103,"fix":"5098"},{"ruleId":"4157","severity":2,"message":"4158","line":116,"column":37,"nodeType":null,"messageId":"4159","endLine":116,"endColumn":37,"fix":"5099"},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":44,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":44,"fix":"5100"},{"ruleId":"4157","severity":2,"message":"4158","line":175,"column":84,"nodeType":null,"messageId":"4159","endLine":175,"endColumn":84,"fix":"5101"},{"ruleId":"4157","severity":2,"message":"4158","line":199,"column":45,"nodeType":null,"messageId":"4159","endLine":199,"endColumn":45,"fix":"5102"},{"ruleId":"4157","severity":2,"message":"4158","line":218,"column":95,"nodeType":null,"messageId":"4159","endLine":218,"endColumn":95,"fix":"5103"},{"ruleId":"4157","severity":2,"message":"4158","line":307,"column":24,"nodeType":null,"messageId":"4159","endLine":307,"endColumn":24,"fix":"5104"},{"ruleId":"4157","severity":2,"message":"4158","line":11,"column":19,"nodeType":null,"messageId":"4159","endLine":11,"endColumn":19,"fix":"5105"},{"ruleId":"4157","severity":2,"message":"4158","line":141,"column":105,"nodeType":null,"messageId":"4159","endLine":141,"endColumn":105,"fix":"5106"},{"ruleId":"4157","severity":2,"message":"4158","line":142,"column":15,"nodeType":null,"messageId":"4159","endLine":142,"endColumn":15,"fix":"5107"},{"ruleId":"4157","severity":2,"message":"4158","line":153,"column":81,"nodeType":null,"messageId":"4159","endLine":153,"endColumn":81,"fix":"5108"},{"ruleId":"4157","severity":2,"message":"4158","line":181,"column":22,"nodeType":null,"messageId":"4159","endLine":181,"endColumn":22,"fix":"5109"},{"ruleId":"4157","severity":2,"message":"4301","line":139,"column":40,"nodeType":null,"messageId":"4250","endLine":139,"endColumn":41,"fix":"5110"},{"ruleId":"4157","severity":2,"message":"4303","line":140,"column":53,"nodeType":null,"messageId":"4181","endLine":140,"endColumn":54,"fix":"5111"},{"ruleId":"4157","severity":2,"message":"5112","line":149,"column":11,"nodeType":null,"messageId":"4250","endLine":149,"endColumn":14,"fix":"5113"},{"ruleId":"4157","severity":2,"message":"4158","line":14,"column":37,"nodeType":null,"messageId":"4159","endLine":14,"endColumn":37,"fix":"5114"},{"ruleId":"4157","severity":2,"message":"4158","line":277,"column":109,"nodeType":null,"messageId":"4159","endLine":277,"endColumn":109,"fix":"5115"},{"ruleId":"4157","severity":2,"message":"4158","line":102,"column":24,"nodeType":null,"messageId":"4159","endLine":102,"endColumn":24,"fix":"5116"},{"ruleId":"4157","severity":2,"message":"4158","line":106,"column":36,"nodeType":null,"messageId":"4159","endLine":106,"endColumn":36,"fix":"5117"},{"ruleId":"4157","severity":2,"message":"4158","line":110,"column":20,"nodeType":null,"messageId":"4159","endLine":110,"endColumn":20,"fix":"5118"},{"ruleId":"4157","severity":2,"message":"4158","line":117,"column":66,"nodeType":null,"messageId":"4159","endLine":117,"endColumn":66,"fix":"5119"},{"ruleId":"4157","severity":2,"message":"4158","line":119,"column":53,"nodeType":null,"messageId":"4159","endLine":119,"endColumn":53,"fix":"5120"},{"ruleId":"4157","severity":2,"message":"4158","line":131,"column":63,"nodeType":null,"messageId":"4159","endLine":131,"endColumn":63,"fix":"5121"},{"ruleId":"4157","severity":2,"message":"4158","line":254,"column":26,"nodeType":null,"messageId":"4159","endLine":254,"endColumn":26,"fix":"5122"},{"ruleId":"4157","severity":2,"message":"4158","line":109,"column":52,"nodeType":null,"messageId":"4159","endLine":109,"endColumn":52,"fix":"5123"},{"ruleId":"4157","severity":2,"message":"4158","line":9,"column":67,"nodeType":null,"messageId":"4159","endLine":9,"endColumn":67,"fix":"5124"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":109,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":109,"fix":"5125"},{"ruleId":"4157","severity":2,"message":"4158","line":33,"column":44,"nodeType":null,"messageId":"4159","endLine":33,"endColumn":44,"fix":"5126"},{"ruleId":"4157","severity":2,"message":"4158","line":212,"column":13,"nodeType":null,"messageId":"4159","endLine":212,"endColumn":13,"fix":"5127"},{"ruleId":"4157","severity":2,"message":"4158","line":217,"column":62,"nodeType":null,"messageId":"4159","endLine":217,"endColumn":62,"fix":"5128"},{"ruleId":"4157","severity":2,"message":"4158","line":113,"column":20,"nodeType":null,"messageId":"4159","endLine":113,"endColumn":20,"fix":"5129"},{"ruleId":"4157","severity":2,"message":"4158","line":141,"column":19,"nodeType":null,"messageId":"4159","endLine":141,"endColumn":19,"fix":"5130"},{"ruleId":"4157","severity":2,"message":"4158","line":146,"column":18,"nodeType":null,"messageId":"4159","endLine":146,"endColumn":18,"fix":"5131"},{"ruleId":"4157","severity":2,"message":"4158","line":150,"column":18,"nodeType":null,"messageId":"4159","endLine":150,"endColumn":18,"fix":"5132"},{"ruleId":"4157","severity":2,"message":"4158","line":154,"column":18,"nodeType":null,"messageId":"4159","endLine":154,"endColumn":18,"fix":"5133"},{"ruleId":"4157","severity":2,"message":"4158","line":256,"column":13,"nodeType":null,"messageId":"4159","endLine":256,"endColumn":13,"fix":"5134"},{"ruleId":"4157","severity":2,"message":"4158","line":257,"column":8,"nodeType":null,"messageId":"4159","endLine":257,"endColumn":8,"fix":"5135"},{"ruleId":"4157","severity":2,"message":"4158","line":261,"column":45,"nodeType":null,"messageId":"4159","endLine":261,"endColumn":45,"fix":"5136"},{"ruleId":"4157","severity":2,"message":"4158","line":395,"column":18,"nodeType":null,"messageId":"4159","endLine":395,"endColumn":18,"fix":"5137"},{"ruleId":"4157","severity":2,"message":"4158","line":404,"column":76,"nodeType":null,"messageId":"4159","endLine":404,"endColumn":76,"fix":"5138"},{"ruleId":"4157","severity":2,"message":"4158","line":415,"column":41,"nodeType":null,"messageId":"4159","endLine":415,"endColumn":41,"fix":"5139"},{"ruleId":"4157","severity":2,"message":"4158","line":425,"column":41,"nodeType":null,"messageId":"4159","endLine":425,"endColumn":41,"fix":"5140"},{"ruleId":"4157","severity":2,"message":"4158","line":439,"column":35,"nodeType":null,"messageId":"4159","endLine":439,"endColumn":35,"fix":"5141"},{"ruleId":"4157","severity":2,"message":"4158","line":66,"column":59,"nodeType":null,"messageId":"4159","endLine":66,"endColumn":59,"fix":"5142"},{"ruleId":"4157","severity":2,"message":"4158","line":80,"column":18,"nodeType":null,"messageId":"4159","endLine":80,"endColumn":18,"fix":"5143"},{"ruleId":"4157","severity":2,"message":"4158","line":68,"column":43,"nodeType":null,"messageId":"4159","endLine":68,"endColumn":43,"fix":"5144"},{"ruleId":"4157","severity":2,"message":"4158","line":88,"column":74,"nodeType":null,"messageId":"4159","endLine":88,"endColumn":74,"fix":"5145"},{"ruleId":"4157","severity":2,"message":"4158","line":91,"column":30,"nodeType":null,"messageId":"4159","endLine":91,"endColumn":30,"fix":"5146"},{"ruleId":"4157","severity":2,"message":"4158","line":111,"column":17,"nodeType":null,"messageId":"4159","endLine":111,"endColumn":17,"fix":"5147"},{"ruleId":"4157","severity":2,"message":"4158","line":118,"column":17,"nodeType":null,"messageId":"4159","endLine":118,"endColumn":17,"fix":"5148"},{"ruleId":"4157","severity":2,"message":"4158","line":161,"column":55,"nodeType":null,"messageId":"4159","endLine":161,"endColumn":55,"fix":"5149"},{"ruleId":"4157","severity":2,"message":"4158","line":168,"column":54,"nodeType":null,"messageId":"4159","endLine":168,"endColumn":54,"fix":"5150"},{"ruleId":"4157","severity":2,"message":"4158","line":172,"column":52,"nodeType":null,"messageId":"4159","endLine":172,"endColumn":52,"fix":"5151"},{"ruleId":"4157","severity":2,"message":"4158","line":179,"column":49,"nodeType":null,"messageId":"4159","endLine":179,"endColumn":49,"fix":"5152"},{"ruleId":"4157","severity":2,"message":"4158","line":185,"column":31,"nodeType":null,"messageId":"4159","endLine":185,"endColumn":31,"fix":"5153"},{"ruleId":"4157","severity":2,"message":"4158","line":12,"column":20,"nodeType":null,"messageId":"4159","endLine":12,"endColumn":20,"fix":"5154"},{"ruleId":"4157","severity":2,"message":"4158","line":28,"column":28,"nodeType":null,"messageId":"4159","endLine":28,"endColumn":28,"fix":"5155"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":34,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":34,"fix":"5156"},{"ruleId":"4157","severity":2,"message":"4158","line":112,"column":70,"nodeType":null,"messageId":"4159","endLine":112,"endColumn":70,"fix":"5157"},{"ruleId":"4157","severity":2,"message":"4158","line":146,"column":15,"nodeType":null,"messageId":"4159","endLine":146,"endColumn":15,"fix":"5158"},{"ruleId":"4157","severity":2,"message":"4158","line":22,"column":17,"nodeType":null,"messageId":"4159","endLine":22,"endColumn":17,"fix":"5159"},{"ruleId":"4157","severity":2,"message":"4158","line":51,"column":21,"nodeType":null,"messageId":"4159","endLine":51,"endColumn":21,"fix":"5160"},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":15,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":15,"fix":"5161"},{"ruleId":"4157","severity":2,"message":"4158","line":114,"column":16,"nodeType":null,"messageId":"4159","endLine":114,"endColumn":16,"fix":"5162"},{"ruleId":"4157","severity":2,"message":"4158","line":112,"column":15,"nodeType":null,"messageId":"4159","endLine":112,"endColumn":15,"fix":"5163"},{"ruleId":"4157","severity":2,"message":"4158","line":129,"column":14,"nodeType":null,"messageId":"4159","endLine":129,"endColumn":14,"fix":"5164"},{"ruleId":"4157","severity":2,"message":"4158","line":100,"column":110,"nodeType":null,"messageId":"4159","endLine":100,"endColumn":110,"fix":"5165"},{"ruleId":"4157","severity":2,"message":"4158","line":105,"column":106,"nodeType":null,"messageId":"4159","endLine":105,"endColumn":106,"fix":"5166"},{"ruleId":"4157","severity":2,"message":"4158","line":157,"column":25,"nodeType":null,"messageId":"4159","endLine":157,"endColumn":25,"fix":"5167"},{"ruleId":"4157","severity":2,"message":"4158","line":164,"column":116,"nodeType":null,"messageId":"4159","endLine":164,"endColumn":116,"fix":"5168"},{"ruleId":"4157","severity":2,"message":"4158","line":173,"column":25,"nodeType":null,"messageId":"4159","endLine":173,"endColumn":25,"fix":"5169"},{"ruleId":"4157","severity":2,"message":"4158","line":187,"column":19,"nodeType":null,"messageId":"4159","endLine":187,"endColumn":19,"fix":"5170"},{"ruleId":"4157","severity":2,"message":"4158","line":192,"column":63,"nodeType":null,"messageId":"4159","endLine":192,"endColumn":63,"fix":"5171"},"prettier/prettier","Insert `,`","insert",{"range":"5172","text":"5173"},{"range":"5174","text":"5173"},{"range":"5175","text":"5173"},{"range":"5176","text":"5173"},{"range":"5177","text":"5173"},{"range":"5178","text":"5173"},{"range":"5179","text":"5173"},{"range":"5180","text":"5173"},"@typescript-eslint/no-unused-vars","'theme' is defined but never used.","Identifier","unusedVar",{"range":"5181","text":"5173"},{"range":"5182","text":"5173"},"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","Insert `·`",{"range":"5183","text":"5184"},"Delete `⏎`","delete",{"range":"5185","text":"5186"},{"range":"5187","text":"5186"},{"range":"5188","text":"5186"},{"range":"5189","text":"5186"},{"range":"5190","text":"5186"},{"range":"5191","text":"5186"},{"range":"5192","text":"5186"},{"range":"5193","text":"5186"},{"range":"5194","text":"5186"},{"range":"5195","text":"5173"},{"range":"5196","text":"5173"},{"range":"5197","text":"5173"},{"range":"5198","text":"5173"},{"range":"5199","text":"5173"},{"range":"5200","text":"5173"},{"range":"5201","text":"5173"},{"range":"5202","text":"5173"},{"range":"5203","text":"5173"},{"range":"5204","text":"5173"},{"range":"5205","text":"5173"},{"range":"5206","text":"5173"},{"range":"5207","text":"5173"},{"range":"5208","text":"5173"},{"range":"5209","text":"5173"},{"range":"5210","text":"5173"},{"range":"5211","text":"5173"},{"range":"5212","text":"5173"},{"range":"5213","text":"5173"},{"range":"5214","text":"5173"},{"range":"5215","text":"5173"},{"range":"5216","text":"5173"},{"range":"5217","text":"5173"},{"range":"5218","text":"5173"},{"range":"5219","text":"5173"},{"range":"5220","text":"5173"},{"range":"5221","text":"5173"},{"range":"5222","text":"5173"},{"range":"5223","text":"5173"},{"range":"5224","text":"5173"},{"range":"5225","text":"5173"},{"range":"5226","text":"5173"},{"range":"5227","text":"5173"},{"range":"5228","text":"5173"},{"range":"5229","text":"5173"},{"range":"5230","text":"5173"},{"range":"5231","text":"5173"},{"range":"5232","text":"5173"},{"range":"5233","text":"5173"},{"range":"5234","text":"5173"},{"range":"5235","text":"5173"},{"range":"5236","text":"5173"},{"range":"5237","text":"5173"},{"range":"5238","text":"5173"},{"range":"5239","text":"5173"},{"range":"5240","text":"5173"},{"range":"5241","text":"5173"},{"range":"5242","text":"5173"},{"range":"5243","text":"5173"},"import/no-unused-modules","exported declaration 'useHideUniswapWalletBanner' not used within other modules","ExportNamedDeclaration",{"range":"5244","text":"5173"},{"range":"5245","text":"5173"},{"range":"5246","text":"5173"},{"range":"5247","text":"5173"},{"range":"5248","text":"5173"},{"range":"5249","text":"5173"},"Replace `·locale.toLowerCase()·===·lowerMaybeSupportedLocale·||·locale.split('-')[0]·===·lowerMaybeSupportedLocale` with `⏎······locale.toLowerCase()·===·lowerMaybeSupportedLocale·||·locale.split('-')[0]·===·lowerMaybeSupportedLocale,`","replace",{"range":"5250","text":"5251"},{"range":"5252","text":"5173"},{"range":"5253","text":"5173"},{"range":"5254","text":"5173"},"react/prop-types","'href' is missing in props validation","Property","missingPropType","'dataTestId' is missing in props validation","'id' is missing in props validation","'isActive' is missing in props validation","'children' is missing in props validation","'href.startsWith' is missing in props validation","'pathname' is assigned a value but never used.","'chainName' is assigned a value but never used.","'isPoolActive' is assigned a value but never used.","'isNftPage' is assigned a value but never used.","'shouldDisableNFTRoutes' is assigned a value but never used.","'navigate' is assigned a value but never used.",{"range":"5255","text":"5173"},{"range":"5256","text":"5173"},{"range":"5257","text":"5173"},{"range":"5258","text":"5173"},{"range":"5259","text":"5173"},{"range":"5260","text":"5173"},{"range":"5261","text":"5173"},{"range":"5262","text":"5173"},{"range":"5263","text":"5173"},{"range":"5264","text":"5173"},{"range":"5265","text":"5173"},{"range":"5266","text":"5173"},{"range":"5267","text":"5173"},{"range":"5268","text":"5173"},{"range":"5269","text":"5173"},{"range":"5270","text":"5173"},{"range":"5271","text":"5173"},{"range":"5272","text":"5173"},"simple-import-sort/imports","Run autofix to sort these imports!","sort",{"range":"5273","text":"5274"},"'MAIN_CARDS' is defined but never used.","unused-imports/no-unused-imports",{"range":"5275","text":"5186"},"Delete `·`",{"range":"5276","text":"5186"},"'GlowContainer' is assigned a value but never used.","'Glow' is assigned a value but never used.","Replace `⏎····isDarkMode⏎······?·'#FFF'⏎······:·'#AEF'` with `·(isDarkMode·?·'#FFF'·:·'#AEF')`",{"range":"5277","text":"5278"},"Replace `E` with `e`",{"range":"5279","text":"5280"},"Delete `0`",{"range":"5281","text":"5186"},{"range":"5282","text":"5186"},"'LearnMoreContainer' is assigned a value but never used.","'LearnMoreArrow' is assigned a value but never used.","'LandingSwap' is assigned a value but never used.","'WidgetLandingLink' is assigned a value but never used.","'cardsRef' is assigned a value but never used.","'swapWidgetEnabled' is assigned a value but never used.","Delete `··`",{"range":"5283","text":"5186"},"Insert `··`",{"range":"5284","text":"5285"},"Replace `··············` with `················`",{"range":"5286","text":"5287"},{"range":"5288","text":"5285"},"Replace `··················` with `····················`",{"range":"5289","text":"5290"},{"range":"5291","text":"5285"},{"range":"5292","text":"5285"},{"range":"5293","text":"5285"},{"range":"5294","text":"5285"},{"range":"5295","text":"5290"},{"range":"5296","text":"5285"},{"range":"5297","text":"5285"},{"range":"5298","text":"5285"},{"range":"5299","text":"5285"},{"range":"5300","text":"5285"},{"range":"5301","text":"5285"},{"range":"5302","text":"5290"},{"range":"5303","text":"5285"},{"range":"5304","text":"5285"},{"range":"5305","text":"5285"},{"range":"5306","text":"5285"},{"range":"5307","text":"5285"},{"range":"5308","text":"5285"},{"range":"5309","text":"5287"},{"range":"5310","text":"5285"},{"range":"5311","text":"5285"},{"range":"5312","text":"5285"},{"range":"5313","text":"5285"},{"range":"5314","text":"5285"},{"range":"5315","text":"5285"},"Replace `············` with `··············`",{"range":"5316","text":"5317"},{"range":"5318","text":"5285"},{"range":"5319","text":"5285"},{"range":"5320","text":"5285"},{"range":"5321","text":"5285"},{"range":"5322","text":"5285"},{"range":"5323","text":"5285"},"Replace `················` with `··················`",{"range":"5324","text":"5325"},{"range":"5326","text":"5285"},"Replace `····················` with `······················`",{"range":"5327","text":"5328"},{"range":"5329","text":"5285"},{"range":"5330","text":"5285"},{"range":"5331","text":"5285"},{"range":"5332","text":"5285"},{"range":"5333","text":"5173"},{"range":"5334","text":"5173"},{"range":"5335","text":"5173"},{"range":"5336","text":"5173"},{"range":"5337","text":"5173"},{"range":"5338","text":"5173"},{"range":"5339","text":"5173"},{"range":"5340","text":"5173"},{"range":"5341","text":"5173"},{"range":"5342","text":"5173"},"'PLANQ_SWAP_ROUTER_ADDRESSES' is assigned a value but never used.",{"range":"5343","text":"5173"},{"range":"5344","text":"5173"},{"range":"5345","text":"5173"},"Replace `·(currencyB·&&·currencyB.equals(wrappedNativeCurrency)))` with `⏎········(currencyB·&&·currencyB.equals(wrappedNativeCurrency))),`",{"range":"5346","text":"5347"},{"range":"5348","text":"5173"},{"range":"5349","text":"5173"},{"range":"5350","text":"5173"},{"range":"5351","text":"5173"},{"range":"5352","text":"5173"},{"range":"5353","text":"5173"},{"range":"5354","text":"5173"},{"range":"5355","text":"5173"},{"range":"5356","text":"5173"},{"range":"5357","text":"5173"},{"range":"5358","text":"5173"},{"range":"5359","text":"5173"},{"range":"5360","text":"5173"},{"range":"5361","text":"5173"},{"range":"5362","text":"5173"},{"range":"5363","text":"5173"},{"range":"5364","text":"5173"},{"range":"5365","text":"5173"},{"range":"5366","text":"5173"},{"range":"5367","text":"5173"},{"range":"5368","text":"5173"},{"range":"5369","text":"5173"},{"range":"5370","text":"5173"},{"range":"5371","text":"5173"},{"range":"5372","text":"5173"},{"range":"5373","text":"5173"},{"range":"5374","text":"5173"},{"range":"5375","text":"5173"},"exported declaration 'USDT_PLANQ' not used within other modules",{"range":"5376","text":"5173"},"exported declaration 'USDC_PLANQ' not used within other modules",{"range":"5377","text":"5173"},{"range":"5378","text":"5173"},{"range":"5379","text":"5173"},{"range":"5380","text":"5173"},{"range":"5381","text":"5173"},{"range":"5382","text":"5173"},{"range":"5383","text":"5173"},{"range":"5384","text":"5173"},{"range":"5385","text":"5173"},{"range":"5386","text":"5173"},{"range":"5387","text":"5173"},{"range":"5388","text":"5173"},{"range":"5389","text":"5173"},{"range":"5390","text":"5173"},{"range":"5391","text":"5173"},{"range":"5392","text":"5173"},{"range":"5393","text":"5173"},{"range":"5394","text":"5173"},{"range":"5395","text":"5173"},{"range":"5396","text":"5173"},{"range":"5397","text":"5173"},{"range":"5398","text":"5173"},{"range":"5399","text":"5173"},{"range":"5400","text":"5173"},{"range":"5401","text":"5173"},{"range":"5402","text":"5173"},{"range":"5403","text":"5173"},{"range":"5404","text":"5173"},{"range":"5405","text":"5173"},{"range":"5406","text":"5173"},{"range":"5407","text":"5173"},{"range":"5408","text":"5173"},{"range":"5409","text":"5173"},"'PLANQ_COIN' is assigned a value but never used.",{"range":"5410","text":"5173"},{"range":"5411","text":"5173"},{"range":"5412","text":"5173"},{"range":"5413","text":"5173"},{"range":"5414","text":"5173"},{"range":"5415","text":"5173"},{"range":"5416","text":"5173"},{"range":"5417","text":"5173"},{"range":"5418","text":"5173"},{"range":"5419","text":"5173"},{"range":"5420","text":"5173"},{"range":"5421","text":"5173"},{"range":"5422","text":"5173"},{"range":"5423","text":"5173"},{"range":"5424","text":"5173"},{"range":"5425","text":"5173"},{"range":"5426","text":"5173"},{"range":"5427","text":"5173"},{"range":"5428","text":"5173"},{"range":"5429","text":"5173"},{"range":"5430","text":"5173"},{"range":"5431","text":"5173"},{"range":"5432","text":"5173"},{"range":"5433","text":"5173"},{"range":"5434","text":"5173"},{"range":"5435","text":"5173"},{"range":"5436","text":"5173"},{"range":"5437","text":"5173"},{"range":"5438","text":"5173"},{"range":"5439","text":"5173"},{"range":"5440","text":"5173"},{"range":"5441","text":"5173"},{"range":"5442","text":"5173"},{"range":"5443","text":"5173"},{"range":"5444","text":"5173"},{"range":"5445","text":"5173"},{"range":"5446","text":"5173"},{"range":"5447","text":"5173"},{"range":"5448","text":"5173"},{"range":"5449","text":"5173"},{"range":"5450","text":"5173"},{"range":"5451","text":"5173"},{"range":"5452","text":"5173"},{"range":"5453","text":"5173"},{"range":"5454","text":"5184"},"Replace `<path·d=\"M43.791·29.8086L43.7851·17.1687L32.8418·23.4945L32.8485·36.134L43.791·29.8086Z\"·fill=\"#D5F6FF\"` with `····<path·d=\"M43.791·29.8086L43.7851·17.1687L32.8418·23.4945L32.8485·36.134L43.791·29.8086Z\"·fill=\"#D5F6FF\"·`",{"range":"5455","text":"5456"},"Replace `<path·d=\"M21.8928·17.1795L10.9434·10.8652L10.9494·23.5049L21.8928·17.1795Z\"·fill=\"#5A7B92\"` with `····<path·d=\"M21.8928·17.1795L10.9434·10.8652L10.9494·23.5049L21.8928·17.1795Z\"·fill=\"#5A7B92\"·`",{"range":"5457","text":"5458"},"Replace `<path·d=\"M32.8484·36.134L32.8413·23.4943L21.8989·29.8196L32.8484·36.134Z\"·fill=\"#5A7B92\"` with `····<path·d=\"M32.8484·36.134L32.8413·23.4943L21.8989·29.8196L32.8484·36.134Z\"·fill=\"#5A7B92\"·`",{"range":"5459","text":"5460"},"Replace `<path·d=\"M10.9493·23.505L10.9433·10.8653L0·17.1907L0.00604055·29.8303L10.9493·23.505Z\"·fill=\"#AAEEFF\"` with `····<path·d=\"M10.9493·23.505L10.9433·10.8653L0·17.1907L0.00604055·29.8303L10.9493·23.505Z\"·fill=\"#AAEEFF\"·`",{"range":"5461","text":"5462"},"Replace `<path·d=\"M60.581·33.5V13.1364H68.2174C69.7818·13.1364·71.0943·13.428·72.1549·14.0114C73.2221·14.5947·74.0275·15.3968·74.5711·16.4176C75.1213·17.4318·75.3964·18.5852·75.3964·19.8778C75.3964·21.1837·75.1213·22.3437·74.5711·23.358C74.0209·24.3722·73.2089·25.1709·72.135·25.7543C71.0611·26.331·69.7387·26.6193·68.1677·26.6193H63.1066V23.5866H67.6705C68.5853·23.5866·69.3343·23.4276·69.9177·23.1094C70.501·22.7912·70.9319·22.3537·71.2103·21.7969C71.4953·21.2401·71.6379·20.6004·71.6379·19.8778C71.6379·19.1553·71.4953·18.5189·71.2103·17.9688C70.9319·17.4186·70.4977·16.991·69.9077·16.6861C69.3244·16.3745·68.572·16.2188·67.6506·16.2188H64.27V33.5H60.581ZM82.0409·24.5511V33.5H78.4415V13.1364H81.9614V20.8224H82.1403C82.4983·19.9607·83.0518·19.2812·83.8008·18.7841C84.5565·18.2803·85.5177·18.0284·86.6844·18.0284C87.745·18.0284·88.6697·18.2505·89.4585·18.6946C90.2473·19.1387·90.8572·19.7884·91.2881·20.6435C91.7256·21.4986·91.9443·22.5426·91.9443·23.7756V33.5H88.3449V24.3324C88.3449·23.3049·88.0797·22.5062·87.5494·21.9361C87.0258·21.3594·86.29·21.071·85.342·21.071C84.7057·21.071·84.1356·21.2102·83.6318·21.4886C83.1347·21.7604·82.7436·22.1548·82.4585·22.6719C82.1801·23.1889·82.0409·23.8153·82.0409·24.5511ZM97.3037·39.2273C96.8132·39.2273·96.3591·39.1875·95.9415·39.108C95.5305·39.035·95.2024·38.9489·94.9571·38.8494L95.7923·36.0455C96.316·36.1979·96.7833·36.2708·97.1943·36.2642C97.6053·36.2576·97.9666·36.1283·98.2781·35.8764C98.5963·35.6312·98.8648·35.2202·99.0835·34.6435L99.3918·33.8182L93.8534·18.2273H97.6716L101.191·29.7614H101.351L104.88·18.2273H108.709L102.593·35.3494C102.308·36.1581·101.931·36.8509·101.46·37.4276C100.989·38.0109·100.413·38.455·99.7298·38.7599C99.0537·39.0715·98.245·39.2273·97.3037·39.2273ZM123.27·22.2642L119.989·22.6222C119.896·22.2907·119.734·21.9792·119.502·21.6875C119.276·21.3958·118.972·21.1605·118.587·20.9815C118.203·20.8026·117.732·20.7131·117.175·20.7131C116.426·20.7131·115.796·20.8755·115.286·21.2003C114.782·21.5251·114.534·21.946·114.54·22.4631C114.534·22.9072·114.696·23.2685·115.027·23.5469C115.365·23.8253·115.922·24.054·116.698·24.233L119.303·24.7898C120.748·25.1013·121.822·25.5952·122.525·26.2713C123.234·26.9474·123.592·27.8324·123.598·28.9261C123.592·29.8873·123.31·30.7358·122.753·31.4716C122.203·32.2008·121.437·32.7708·120.456·33.1818C119.475·33.5928·118.348·33.7983·117.076·33.7983C115.206·33.7983·113.702·33.4072·112.562·32.625C111.421·31.8362·110.742·30.7391·110.523·29.3338L114.033·28.9957C114.192·29.6851·114.53·30.2055·115.047·30.5568C115.564·30.9081·116.237·31.0838·117.066·31.0838C117.921·31.0838·118.607·30.9081·119.124·30.5568C119.648·30.2055·119.91·29.7713·119.91·29.2543C119.91·28.8168·119.74·28.4555·119.402·28.1705C119.071·27.8854·118.554·27.6667·117.851·27.5142L115.246·26.9673C113.781·26.6624·112.697·26.1487·111.995·25.4261C111.292·24.697·110.944·23.7756·110.951·22.6619C110.944·21.7206·111.199·20.9053·111.716·20.2159C112.24·19.5199·112.966·18.983·113.894·18.6051C114.829·18.2206·115.906·18.0284·117.125·18.0284C118.915·18.0284·120.324·18.4096·121.351·19.1719C122.385·19.9342·123.025·20.965·123.27·22.2642ZM126.566·33.5V18.2273H130.166V33.5H126.566ZM128.376·16.0597C127.806·16.0597·127.316·15.8707·126.905·15.4929C126.494·15.1084·126.288·14.6477·126.288·14.1108C126.288·13.5672·126.494·13.1065·126.905·12.7287C127.316·12.3442·127.806·12.152·128.376·12.152C128.953·12.152·129.443·12.3442·129.848·12.7287C130.259·13.1065·130.464·13.5672·130.464·14.1108C130.464·14.6477·130.259·15.1084·129.848·15.4929C129.443·15.8707·128.953·16.0597·128.376·16.0597ZM140.529·33.7983C139.005·33.7983·137.695·33.4635·136.602·32.794C135.515·32.1245·134.676·31.1998·134.086·30.0199C133.503·28.8333·133.211·27.4678·133.211·25.9233C133.211·24.3722·133.509·23.0033·134.106·21.8168C134.702·20.6236·135.544·19.6955·136.631·19.0327C137.725·18.3632·139.018·18.0284·140.509·18.0284C141.749·18.0284·142.846·18.2571·143.8·18.7145C144.762·19.1652·145.527·19.8049·146.097·20.6335C146.667·21.4555·146.992·22.4167·147.072·23.517H143.631C143.492·22.7812·143.161·22.1681·142.637·21.6776C142.12·21.1804·141.427·20.9318·140.559·20.9318C139.823·20.9318·139.177·21.1307·138.62·21.5284C138.063·21.9195·137.629·22.483·137.318·23.2188C137.013·23.9545·136.86·24.8362·136.86·25.8636C136.86·26.9044·137.013·27.7992·137.318·28.5483C137.622·29.2907·138.05·29.8641·138.6·30.2685C139.157·30.6662·139.81·30.8651·140.559·30.8651C141.089·30.8651·141.563·30.7656·141.981·30.5668C142.405·30.3613·142.76·30.0663·143.045·29.6818C143.33·29.2973·143.525·28.83·143.631·28.2798H147.072C146.986·29.3603·146.667·30.3182·146.117·31.1534C145.567·31.982·144.818·32.6316·143.87·33.1023C142.922·33.5663·141.809·33.7983·140.529·33.7983ZM154.422·33.8082C153.454·33.8082·152.583·33.6359·151.807·33.2912C151.038·32.9399·150.428·32.4228·149.978·31.7401C149.534·31.0573·149.312·30.2154·149.312·29.2145C149.312·28.3527·149.471·27.6402·149.789·27.0767C150.107·26.5133·150.541·26.0625·151.091·25.7244C151.642·25.3864·152.261·25.1312·152.951·24.9588C153.647·24.7798·154.366·24.6506·155.108·24.571C156.003·24.4782·156.729·24.3954·157.286·24.3224C157.843·24.2429·158.247·24.1236·158.499·23.9645C158.758·23.7988·158.887·23.5436·158.887·23.1989V23.1392C158.887·22.3902·158.665·21.8101·158.221·21.3991C157.776·20.9882·157.137·20.7827·156.302·20.7827C155.42·20.7827·154.721·20.9749·154.204·21.3594C153.693·21.7438·153.348·22.1979·153.169·22.7216L149.809·22.2443C150.074·21.3163·150.511·20.5407·151.121·19.9176C151.731·19.2879·152.477·18.8172·153.358·18.5057C154.24·18.1875·155.214·18.0284·156.282·18.0284C157.017·18.0284·157.75·18.1146·158.479·18.2869C159.208·18.4593·159.874·18.7443·160.478·19.142C161.081·19.5331·161.565·20.0668·161.929·20.7429C162.301·21.419·162.486·22.2642·162.486·23.2784V33.5H159.026V31.402H158.907C158.688·31.8262·158.38·32.224·157.982·32.5952C157.591·32.9598·157.097·33.2547·156.5·33.4801C155.91·33.6989·155.218·33.8082·154.422·33.8082ZM155.357·31.1634C156.079·31.1634·156.706·31.0208·157.236·30.7358C157.767·30.4441·158.174·30.0597·158.459·29.5824C158.751·29.1051·158.897·28.5848·158.897·28.0213V26.2216C158.784·26.3144·158.592·26.4006·158.32·26.4801C158.055·26.5597·157.757·26.6293·157.425·26.6889C157.094·26.7486·156.766·26.8016·156.441·26.848C156.116·26.8944·155.834·26.9342·155.596·26.9673C155.059·27.0402·154.578·27.1596·154.154·27.3253C153.73·27.491·153.395·27.723·153.15·28.0213C152.904·28.313·152.782·28.6908·152.782·29.1548C152.782·29.8177·153.024·30.3182·153.508·30.6562C153.991·30.9943·154.608·31.1634·155.357·31.1634ZM173.21·33.5V13.1364H186.255V16.2287H176.899V21.7571H185.361V24.8494H176.899V33.5H173.21ZM189.457·33.5V18.2273H193.057V33.5H189.457ZM191.267·16.0597C190.697·16.0597·190.206·15.8707·189.795·15.4929C189.384·15.1084·189.179·14.6477·189.179·14.1108C189.179·13.5672·189.384·13.1065·189.795·12.7287C190.206·12.3442·190.697·12.152·191.267·12.152C191.843·12.152·192.334·12.3442·192.738·12.7287C193.149·13.1065·193.355·13.5672·193.355·14.1108C193.355·14.6477·193.149·15.1084·192.738·15.4929C192.334·15.8707·191.843·16.0597·191.267·16.0597ZM200.357·24.5511V33.5H196.758V18.2273H200.198V20.8224H200.377C200.729·19.9673·201.289·19.2879·202.058·18.7841C202.833·18.2803·203.791·18.0284·204.931·18.0284C205.985·18.0284·206.903·18.2538·207.685·18.7045C208.474·19.1553·209.084·19.8082·209.515·20.6634C209.952·21.5185·210.168·22.5559·210.161·23.7756V33.5H206.562V24.3324C206.562·23.3116·206.297·22.5128·205.766·21.9361C205.243·21.3594·204.517·21.071·203.589·21.071C202.959·21.071·202.399·21.2102·201.908·21.4886C201.425·21.7604·201.043·22.1548·200.765·22.6719C200.493·23.1889·200.357·23.8153·200.357·24.5511ZM218.215·33.8082C217.247·33.8082·216.376·33.6359·215.6·33.2912C214.831·32.9399·214.221·32.4228·213.771·31.7401C213.327·31.0573·213.104·30.2154·213.104·29.2145C213.104·28.3527·213.264·27.6402·213.582·27.0767C213.9·26.5133·214.334·26.0625·214.884·25.7244C215.434·25.3864·216.054·25.1312·216.744·24.9588C217.44·24.7798·218.159·24.6506·218.901·24.571C219.796·24.4782·220.522·24.3954·221.079·24.3224C221.636·24.2429·222.04·24.1236·222.292·23.9645C222.55·23.7988·222.68·23.5436·222.68·23.1989V23.1392C222.68·22.3902·222.458·21.8101·222.014·21.3991C221.569·20.9882·220.93·20.7827·220.095·20.7827C219.213·20.7827·218.514·20.9749·217.997·21.3594C217.486·21.7438·217.141·22.1979·216.962·22.7216L213.602·22.2443C213.867·21.3163·214.304·20.5407·214.914·19.9176C215.524·19.2879·216.27·18.8172·217.151·18.5057C218.033·18.1875·219.007·18.0284·220.075·18.0284C220.81·18.0284·221.543·18.1146·222.272·18.2869C223.001·18.4593·223.667·18.7443·224.271·19.142C224.874·19.5331·225.358·20.0668·225.722·20.7429C226.094·21.419·226.279·22.2642·226.279·23.2784V33.5H222.819V31.402H222.7C222.481·31.8262·222.173·32.224·221.775·32.5952C221.384·32.9598·220.89·33.2547·220.293·33.4801C219.703·33.6989·219.011·33.8082·218.215·33.8082ZM219.15·31.1634C219.872·31.1634·220.499·31.0208·221.029·30.7358C221.559·30.4441·221.967·30.0597·222.252·29.5824C222.544·29.1051·222.69·28.5848·222.69·28.0213V26.2216C222.577·26.3144·222.385·26.4006·222.113·26.4801C221.848·26.5597·221.55·26.6293·221.218·26.6889C220.887·26.7486·220.559·26.8016·220.234·26.848C219.909·26.8944·219.627·26.9342·219.389·26.9673C218.852·27.0402·218.371·27.1596·217.947·27.3253C217.523·27.491·217.188·27.723·216.943·28.0213C216.697·28.313·216.575·28.6908·216.575·29.1548C216.575·29.8177·216.817·30.3182·217.3·30.6562C217.784·30.9943·218.401·31.1634·219.15·31.1634ZM233.498·24.5511V33.5H229.899V18.2273H233.339V20.8224H233.518C233.869·19.9673·234.429·19.2879·235.198·18.7841C235.974·18.2803·236.932·18.0284·238.072·18.0284C239.126·18.0284·240.044·18.2538·240.826·18.7045C241.615·19.1553·242.225·19.8082·242.656·20.6634C243.093·21.5185·243.309·22.5559·243.302·23.7756V33.5H239.702V24.3324C239.702·23.3116·239.437·22.5128·238.907·21.9361C238.383·21.3594·237.658·21.071·236.729·21.071C236.1·21.071·235.54·21.2102·235.049·21.4886C234.565·21.7604·234.184·22.1548·233.906·22.6719C233.634·23.1889·233.498·23.8153·233.498·24.5511ZM253.623·33.7983C252.098·33.7983·250.789·33.4635·249.695·32.794C248.608·32.1245·247.77·31.1998·247.18·30.0199C246.596·28.8333·246.305·27.4678·246.305·25.9233C246.305·24.3722·246.603·23.0033·247.2·21.8168C247.796·20.6236·248.638·19.6955·249.725·19.0327C250.819·18.3632·252.112·18.0284·253.603·18.0284C254.843·18.0284·255.94·18.2571·256.894·18.7145C257.855·19.1652·258.621·19.8049·259.191·20.6335C259.761·21.4555·260.086·22.4167·260.166·23.517H256.725C256.586·22.7812·256.255·22.1681·255.731·21.6776C255.214·21.1804·254.521·20.9318·253.653·20.9318C252.917·20.9318·252.271·21.1307·251.714·21.5284C251.157·21.9195·250.723·22.483·250.411·23.2188C250.106·23.9545·249.954·24.8362·249.954·25.8636C249.954·26.9044·250.106·27.7992·250.411·28.5483C250.716·29.2907·251.144·29.8641·251.694·30.2685C252.251·30.6662·252.904·30.8651·253.653·30.8651C254.183·30.8651·254.657·30.7656·255.075·30.5668C255.499·30.3613·255.854·30.0663·256.139·29.6818C256.424·29.2973·256.619·28.83·256.725·28.2798H260.166C260.079·29.3603·259.761·30.3182·259.211·31.1534C258.661·31.982·257.912·32.6316·256.964·33.1023C256.016·33.5663·254.902·33.7983·253.623·33.7983ZM269.883·33.7983C268.351·33.7983·267.029·33.4801·265.915·32.8438C264.808·32.2008·263.956·31.2926·263.36·30.1193C262.763·28.9394·262.465·27.5507·262.465·25.9531C262.465·24.3821·262.763·23.0033·263.36·21.8168C263.963·20.6236·264.805·19.6955·265.885·19.0327C266.966·18.3632·268.235·18.0284·269.694·18.0284C270.635·18.0284·271.523·18.1809·272.358·18.4858C273.2·18.7841·273.943·19.2481·274.586·19.8778C275.235·20.5076·275.746·21.3097·276.117·22.2841C276.488·23.2519·276.674·24.4053·276.674·25.7443V26.848H264.155V24.4219H273.223C273.217·23.7325·273.068·23.1193·272.776·22.5824C272.484·22.0388·272.077·21.6113·271.553·21.2997C271.036·20.9882·270.433·20.8324·269.743·20.8324C269.008·20.8324·268.361·21.0114·267.804·21.3693C267.248·21.7206·266.813·22.1847·266.502·22.7614C266.197·23.3314·266.041·23.9579·266.035·24.6406V26.7585C266.035·27.6468·266.197·28.4091·266.522·29.0455C266.847·29.6752·267.301·30.1591·267.884·30.4972C268.467·30.8286·269.15·30.9943·269.932·30.9943C270.456·30.9943·270.93·30.9214·271.354·30.7756C271.778·30.6231·272.146·30.401·272.458·30.1094C272.769·29.8177·273.005·29.4564·273.164·29.0256L276.525·29.4034C276.312·30.2917·275.908·31.0672·275.312·31.7301C274.722·32.3864·273.966·32.8968·273.044·33.2614C272.123·33.6193·271.069·33.7983·269.883·33.7983Z\"·fill=\"white\"` with `····<path⏎······d=\"M60.581·33.5V13.1364H68.2174C69.7818·13.1364·71.0943·13.428·72.1549·14.0114C73.2221·14.5947·74.0275·15.3968·74.5711·16.4176C75.1213·17.4318·75.3964·18.5852·75.3964·19.8778C75.3964·21.1837·75.1213·22.3437·74.5711·23.358C74.0209·24.3722·73.2089·25.1709·72.135·25.7543C71.0611·26.331·69.7387·26.6193·68.1677·26.6193H63.1066V23.5866H67.6705C68.5853·23.5866·69.3343·23.4276·69.9177·23.1094C70.501·22.7912·70.9319·22.3537·71.2103·21.7969C71.4953·21.2401·71.6379·20.6004·71.6379·19.8778C71.6379·19.1553·71.4953·18.5189·71.2103·17.9688C70.9319·17.4186·70.4977·16.991·69.9077·16.6861C69.3244·16.3745·68.572·16.2188·67.6506·16.2188H64.27V33.5H60.581ZM82.0409·24.5511V33.5H78.4415V13.1364H81.9614V20.8224H82.1403C82.4983·19.9607·83.0518·19.2812·83.8008·18.7841C84.5565·18.2803·85.5177·18.0284·86.6844·18.0284C87.745·18.0284·88.6697·18.2505·89.4585·18.6946C90.2473·19.1387·90.8572·19.7884·91.2881·20.6435C91.7256·21.4986·91.9443·22.5426·91.9443·23.7756V33.5H88.3449V24.3324C88.3449·23.3049·88.0797·22.5062·87.5494·21.9361C87.0258·21.3594·86.29·21.071·85.342·21.071C84.7057·21.071·84.1356·21.2102·83.6318·21.4886C83.1347·21.7604·82.7436·22.1548·82.4585·22.6719C82.1801·23.1889·82.0409·23.8153·82.0409·24.5511ZM97.3037·39.2273C96.8132·39.2273·96.3591·39.1875·95.9415·39.108C95.5305·39.035·95.2024·38.9489·94.9571·38.8494L95.7923·36.0455C96.316·36.1979·96.7833·36.2708·97.1943·36.2642C97.6053·36.2576·97.9666·36.1283·98.2781·35.8764C98.5963·35.6312·98.8648·35.2202·99.0835·34.6435L99.3918·33.8182L93.8534·18.2273H97.6716L101.191·29.7614H101.351L104.88·18.2273H108.709L102.593·35.3494C102.308·36.1581·101.931·36.8509·101.46·37.4276C100.989·38.0109·100.413·38.455·99.7298·38.7599C99.0537·39.0715·98.245·39.2273·97.3037·39.2273ZM123.27·22.2642L119.989·22.6222C119.896·22.2907·119.734·21.9792·119.502·21.6875C119.276·21.3958·118.972·21.1605·118.587·20.9815C118.203·20.8026·117.732·20.7131·117.175·20.7131C116.426·20.7131·115.796·20.8755·115.286·21.2003C114.782·21.5251·114.534·21.946·114.54·22.4631C114.534·22.9072·114.696·23.2685·115.027·23.5469C115.365·23.8253·115.922·24.054·116.698·24.233L119.303·24.7898C120.748·25.1013·121.822·25.5952·122.525·26.2713C123.234·26.9474·123.592·27.8324·123.598·28.9261C123.592·29.8873·123.31·30.7358·122.753·31.4716C122.203·32.2008·121.437·32.7708·120.456·33.1818C119.475·33.5928·118.348·33.7983·117.076·33.7983C115.206·33.7983·113.702·33.4072·112.562·32.625C111.421·31.8362·110.742·30.7391·110.523·29.3338L114.033·28.9957C114.192·29.6851·114.53·30.2055·115.047·30.5568C115.564·30.9081·116.237·31.0838·117.066·31.0838C117.921·31.0838·118.607·30.9081·119.124·30.5568C119.648·30.2055·119.91·29.7713·119.91·29.2543C119.91·28.8168·119.74·28.4555·119.402·28.1705C119.071·27.8854·118.554·27.6667·117.851·27.5142L115.246·26.9673C113.781·26.6624·112.697·26.1487·111.995·25.4261C111.292·24.697·110.944·23.7756·110.951·22.6619C110.944·21.7206·111.199·20.9053·111.716·20.2159C112.24·19.5199·112.966·18.983·113.894·18.6051C114.829·18.2206·115.906·18.0284·117.125·18.0284C118.915·18.0284·120.324·18.4096·121.351·19.1719C122.385·19.9342·123.025·20.965·123.27·22.2642ZM126.566·33.5V18.2273H130.166V33.5H126.566ZM128.376·16.0597C127.806·16.0597·127.316·15.8707·126.905·15.4929C126.494·15.1084·126.288·14.6477·126.288·14.1108C126.288·13.5672·126.494·13.1065·126.905·12.7287C127.316·12.3442·127.806·12.152·128.376·12.152C128.953·12.152·129.443·12.3442·129.848·12.7287C130.259·13.1065·130.464·13.5672·130.464·14.1108C130.464·14.6477·130.259·15.1084·129.848·15.4929C129.443·15.8707·128.953·16.0597·128.376·16.0597ZM140.529·33.7983C139.005·33.7983·137.695·33.4635·136.602·32.794C135.515·32.1245·134.676·31.1998·134.086·30.0199C133.503·28.8333·133.211·27.4678·133.211·25.9233C133.211·24.3722·133.509·23.0033·134.106·21.8168C134.702·20.6236·135.544·19.6955·136.631·19.0327C137.725·18.3632·139.018·18.0284·140.509·18.0284C141.749·18.0284·142.846·18.2571·143.8·18.7145C144.762·19.1652·145.527·19.8049·146.097·20.6335C146.667·21.4555·146.992·22.4167·147.072·23.517H143.631C143.492·22.7812·143.161·22.1681·142.637·21.6776C142.12·21.1804·141.427·20.9318·140.559·20.9318C139.823·20.9318·139.177·21.1307·138.62·21.5284C138.063·21.9195·137.629·22.483·137.318·23.2188C137.013·23.9545·136.86·24.8362·136.86·25.8636C136.86·26.9044·137.013·27.7992·137.318·28.5483C137.622·29.2907·138.05·29.8641·138.6·30.2685C139.157·30.6662·139.81·30.8651·140.559·30.8651C141.089·30.8651·141.563·30.7656·141.981·30.5668C142.405·30.3613·142.76·30.0663·143.045·29.6818C143.33·29.2973·143.525·28.83·143.631·28.2798H147.072C146.986·29.3603·146.667·30.3182·146.117·31.1534C145.567·31.982·144.818·32.6316·143.87·33.1023C142.922·33.5663·141.809·33.7983·140.529·33.7983ZM154.422·33.8082C153.454·33.8082·152.583·33.6359·151.807·33.2912C151.038·32.9399·150.428·32.4228·149.978·31.7401C149.534·31.0573·149.312·30.2154·149.312·29.2145C149.312·28.3527·149.471·27.6402·149.789·27.0767C150.107·26.5133·150.541·26.0625·151.091·25.7244C151.642·25.3864·152.261·25.1312·152.951·24.9588C153.647·24.7798·154.366·24.6506·155.108·24.571C156.003·24.4782·156.729·24.3954·157.286·24.3224C157.843·24.2429·158.247·24.1236·158.499·23.9645C158.758·23.7988·158.887·23.5436·158.887·23.1989V23.1392C158.887·22.3902·158.665·21.8101·158.221·21.3991C157.776·20.9882·157.137·20.7827·156.302·20.7827C155.42·20.7827·154.721·20.9749·154.204·21.3594C153.693·21.7438·153.348·22.1979·153.169·22.7216L149.809·22.2443C150.074·21.3163·150.511·20.5407·151.121·19.9176C151.731·19.2879·152.477·18.8172·153.358·18.5057C154.24·18.1875·155.214·18.0284·156.282·18.0284C157.017·18.0284·157.75·18.1146·158.479·18.2869C159.208·18.4593·159.874·18.7443·160.478·19.142C161.081·19.5331·161.565·20.0668·161.929·20.7429C162.301·21.419·162.486·22.2642·162.486·23.2784V33.5H159.026V31.402H158.907C158.688·31.8262·158.38·32.224·157.982·32.5952C157.591·32.9598·157.097·33.2547·156.5·33.4801C155.91·33.6989·155.218·33.8082·154.422·33.8082ZM155.357·31.1634C156.079·31.1634·156.706·31.0208·157.236·30.7358C157.767·30.4441·158.174·30.0597·158.459·29.5824C158.751·29.1051·158.897·28.5848·158.897·28.0213V26.2216C158.784·26.3144·158.592·26.4006·158.32·26.4801C158.055·26.5597·157.757·26.6293·157.425·26.6889C157.094·26.7486·156.766·26.8016·156.441·26.848C156.116·26.8944·155.834·26.9342·155.596·26.9673C155.059·27.0402·154.578·27.1596·154.154·27.3253C153.73·27.491·153.395·27.723·153.15·28.0213C152.904·28.313·152.782·28.6908·152.782·29.1548C152.782·29.8177·153.024·30.3182·153.508·30.6562C153.991·30.9943·154.608·31.1634·155.357·31.1634ZM173.21·33.5V13.1364H186.255V16.2287H176.899V21.7571H185.361V24.8494H176.899V33.5H173.21ZM189.457·33.5V18.2273H193.057V33.5H189.457ZM191.267·16.0597C190.697·16.0597·190.206·15.8707·189.795·15.4929C189.384·15.1084·189.179·14.6477·189.179·14.1108C189.179·13.5672·189.384·13.1065·189.795·12.7287C190.206·12.3442·190.697·12.152·191.267·12.152C191.843·12.152·192.334·12.3442·192.738·12.7287C193.149·13.1065·193.355·13.5672·193.355·14.1108C193.355·14.6477·193.149·15.1084·192.738·15.4929C192.334·15.8707·191.843·16.0597·191.267·16.0597ZM200.357·24.5511V33.5H196.758V18.2273H200.198V20.8224H200.377C200.729·19.9673·201.289·19.2879·202.058·18.7841C202.833·18.2803·203.791·18.0284·204.931·18.0284C205.985·18.0284·206.903·18.2538·207.685·18.7045C208.474·19.1553·209.084·19.8082·209.515·20.6634C209.952·21.5185·210.168·22.5559·210.161·23.7756V33.5H206.562V24.3324C206.562·23.3116·206.297·22.5128·205.766·21.9361C205.243·21.3594·204.517·21.071·203.589·21.071C202.959·21.071·202.399·21.2102·201.908·21.4886C201.425·21.7604·201.043·22.1548·200.765·22.6719C200.493·23.1889·200.357·23.8153·200.357·24.5511ZM218.215·33.8082C217.247·33.8082·216.376·33.6359·215.6·33.2912C214.831·32.9399·214.221·32.4228·213.771·31.7401C213.327·31.0573·213.104·30.2154·213.104·29.2145C213.104·28.3527·213.264·27.6402·213.582·27.0767C213.9·26.5133·214.334·26.0625·214.884·25.7244C215.434·25.3864·216.054·25.1312·216.744·24.9588C217.44·24.7798·218.159·24.6506·218.901·24.571C219.796·24.4782·220.522·24.3954·221.079·24.3224C221.636·24.2429·222.04·24.1236·222.292·23.9645C222.55·23.7988·222.68·23.5436·222.68·23.1989V23.1392C222.68·22.3902·222.458·21.8101·222.014·21.3991C221.569·20.9882·220.93·20.7827·220.095·20.7827C219.213·20.7827·218.514·20.9749·217.997·21.3594C217.486·21.7438·217.141·22.1979·216.962·22.7216L213.602·22.2443C213.867·21.3163·214.304·20.5407·214.914·19.9176C215.524·19.2879·216.27·18.8172·217.151·18.5057C218.033·18.1875·219.007·18.0284·220.075·18.0284C220.81·18.0284·221.543·18.1146·222.272·18.2869C223.001·18.4593·223.667·18.7443·224.271·19.142C224.874·19.5331·225.358·20.0668·225.722·20.7429C226.094·21.419·226.279·22.2642·226.279·23.2784V33.5H222.819V31.402H222.7C222.481·31.8262·222.173·32.224·221.775·32.5952C221.384·32.9598·220.89·33.2547·220.293·33.4801C219.703·33.6989·219.011·33.8082·218.215·33.8082ZM219.15·31.1634C219.872·31.1634·220.499·31.0208·221.029·30.7358C221.559·30.4441·221.967·30.0597·222.252·29.5824C222.544·29.1051·222.69·28.5848·222.69·28.0213V26.2216C222.577·26.3144·222.385·26.4006·222.113·26.4801C221.848·26.5597·221.55·26.6293·221.218·26.6889C220.887·26.7486·220.559·26.8016·220.234·26.848C219.909·26.8944·219.627·26.9342·219.389·26.9673C218.852·27.0402·218.371·27.1596·217.947·27.3253C217.523·27.491·217.188·27.723·216.943·28.0213C216.697·28.313·216.575·28.6908·216.575·29.1548C216.575·29.8177·216.817·30.3182·217.3·30.6562C217.784·30.9943·218.401·31.1634·219.15·31.1634ZM233.498·24.5511V33.5H229.899V18.2273H233.339V20.8224H233.518C233.869·19.9673·234.429·19.2879·235.198·18.7841C235.974·18.2803·236.932·18.0284·238.072·18.0284C239.126·18.0284·240.044·18.2538·240.826·18.7045C241.615·19.1553·242.225·19.8082·242.656·20.6634C243.093·21.5185·243.309·22.5559·243.302·23.7756V33.5H239.702V24.3324C239.702·23.3116·239.437·22.5128·238.907·21.9361C238.383·21.3594·237.658·21.071·236.729·21.071C236.1·21.071·235.54·21.2102·235.049·21.4886C234.565·21.7604·234.184·22.1548·233.906·22.6719C233.634·23.1889·233.498·23.8153·233.498·24.5511ZM253.623·33.7983C252.098·33.7983·250.789·33.4635·249.695·32.794C248.608·32.1245·247.77·31.1998·247.18·30.0199C246.596·28.8333·246.305·27.4678·246.305·25.9233C246.305·24.3722·246.603·23.0033·247.2·21.8168C247.796·20.6236·248.638·19.6955·249.725·19.0327C250.819·18.3632·252.112·18.0284·253.603·18.0284C254.843·18.0284·255.94·18.2571·256.894·18.7145C257.855·19.1652·258.621·19.8049·259.191·20.6335C259.761·21.4555·260.086·22.4167·260.166·23.517H256.725C256.586·22.7812·256.255·22.1681·255.731·21.6776C255.214·21.1804·254.521·20.9318·253.653·20.9318C252.917·20.9318·252.271·21.1307·251.714·21.5284C251.157·21.9195·250.723·22.483·250.411·23.2188C250.106·23.9545·249.954·24.8362·249.954·25.8636C249.954·26.9044·250.106·27.7992·250.411·28.5483C250.716·29.2907·251.144·29.8641·251.694·30.2685C252.251·30.6662·252.904·30.8651·253.653·30.8651C254.183·30.8651·254.657·30.7656·255.075·30.5668C255.499·30.3613·255.854·30.0663·256.139·29.6818C256.424·29.2973·256.619·28.83·256.725·28.2798H260.166C260.079·29.3603·259.761·30.3182·259.211·31.1534C258.661·31.982·257.912·32.6316·256.964·33.1023C256.016·33.5663·254.902·33.7983·253.623·33.7983ZM269.883·33.7983C268.351·33.7983·267.029·33.4801·265.915·32.8438C264.808·32.2008·263.956·31.2926·263.36·30.1193C262.763·28.9394·262.465·27.5507·262.465·25.9531C262.465·24.3821·262.763·23.0033·263.36·21.8168C263.963·20.6236·264.805·19.6955·265.885·19.0327C266.966·18.3632·268.235·18.0284·269.694·18.0284C270.635·18.0284·271.523·18.1809·272.358·18.4858C273.2·18.7841·273.943·19.2481·274.586·19.8778C275.235·20.5076·275.746·21.3097·276.117·22.2841C276.488·23.2519·276.674·24.4053·276.674·25.7443V26.848H264.155V24.4219H273.223C273.217·23.7325·273.068·23.1193·272.776·22.5824C272.484·22.0388·272.077·21.6113·271.553·21.2997C271.036·20.9882·270.433·20.8324·269.743·20.8324C269.008·20.8324·268.361·21.0114·267.804·21.3693C267.248·21.7206·266.813·22.1847·266.502·22.7614C266.197·23.3314·266.041·23.9579·266.035·24.6406V26.7585C266.035·27.6468·266.197·28.4091·266.522·29.0455C266.847·29.6752·267.301·30.1591·267.884·30.4972C268.467·30.8286·269.15·30.9943·269.932·30.9943C270.456·30.9943·270.93·30.9214·271.354·30.7756C271.778·30.6231·272.146·30.401·272.458·30.1094C272.769·29.8177·273.005·29.4564·273.164·29.0256L276.525·29.4034C276.312·30.2917·275.908·31.0672·275.312·31.7301C274.722·32.3864·273.966·32.8968·273.044·33.2614C272.123·33.6193·271.069·33.7983·269.883·33.7983Z\"⏎······fill=\"white\"⏎····`",{"range":"5463","text":"5464"},{"range":"5465","text":"5173"},{"range":"5466","text":"5173"},{"range":"5467","text":"5173"},{"range":"5468","text":"5173"},{"range":"5469","text":"5173"},{"range":"5470","text":"5173"},{"range":"5471","text":"5173"},{"range":"5472","text":"5173"},{"range":"5473","text":"5173"},{"range":"5474","text":"5173"},{"range":"5475","text":"5173"},{"range":"5476","text":"5173"},{"range":"5477","text":"5173"},{"range":"5478","text":"5173"},{"range":"5479","text":"5173"},{"range":"5480","text":"5173"},{"range":"5481","text":"5173"},{"range":"5482","text":"5173"},{"range":"5483","text":"5173"},{"range":"5484","text":"5173"},{"range":"5485","text":"5173"},{"range":"5486","text":"5173"},{"range":"5487","text":"5173"},{"range":"5488","text":"5173"},{"range":"5489","text":"5173"},{"range":"5490","text":"5173"},{"range":"5491","text":"5173"},{"range":"5492","text":"5173"},{"range":"5493","text":"5173"},{"range":"5494","text":"5173"},{"range":"5495","text":"5173"},{"range":"5496","text":"5173"},{"range":"5497","text":"5173"},{"range":"5498","text":"5173"},{"range":"5499","text":"5173"},{"range":"5500","text":"5173"},{"range":"5501","text":"5173"},{"range":"5502","text":"5173"},{"range":"5503","text":"5173"},{"range":"5504","text":"5173"},{"range":"5505","text":"5173"},{"range":"5506","text":"5173"},{"range":"5507","text":"5173"},{"range":"5508","text":"5173"},{"range":"5509","text":"5173"},{"range":"5510","text":"5173"},{"range":"5511","text":"5173"},{"range":"5512","text":"5173"},{"range":"5513","text":"5173"},{"range":"5514","text":"5173"},{"range":"5515","text":"5173"},{"range":"5516","text":"5173"},{"range":"5517","text":"5173"},{"range":"5518","text":"5173"},{"range":"5519","text":"5173"},{"range":"5520","text":"5173"},{"range":"5521","text":"5173"},{"range":"5522","text":"5173"},{"range":"5523","text":"5173"},{"range":"5524","text":"5173"},{"range":"5525","text":"5173"},{"range":"5526","text":"5173"},{"range":"5527","text":"5173"},{"range":"5528","text":"5173"},{"range":"5529","text":"5173"},{"range":"5530","text":"5173"},{"range":"5531","text":"5173"},{"range":"5532","text":"5173"},{"range":"5533","text":"5173"},{"range":"5534","text":"5173"},{"range":"5535","text":"5173"},{"range":"5536","text":"5173"},{"range":"5537","text":"5173"},{"range":"5538","text":"5173"},{"range":"5539","text":"5173"},{"range":"5540","text":"5173"},{"range":"5541","text":"5173"},{"range":"5542","text":"5173"},{"range":"5543","text":"5173"},{"range":"5544","text":"5173"},{"range":"5545","text":"5173"},{"range":"5546","text":"5173"},{"range":"5547","text":"5173"},{"range":"5548","text":"5173"},{"range":"5549","text":"5173"},{"range":"5550","text":"5173"},{"range":"5551","text":"5173"},{"range":"5552","text":"5173"},{"range":"5553","text":"5173"},{"range":"5554","text":"5173"},{"range":"5555","text":"5173"},{"range":"5556","text":"5173"},{"range":"5557","text":"5173"},{"range":"5558","text":"5173"},{"range":"5559","text":"5173"},{"range":"5560","text":"5173"},{"range":"5561","text":"5173"},{"range":"5562","text":"5173"},{"range":"5563","text":"5173"},{"range":"5564","text":"5173"},{"range":"5565","text":"5173"},{"range":"5566","text":"5173"},{"range":"5567","text":"5173"},{"range":"5568","text":"5173"},{"range":"5569","text":"5173"},{"range":"5570","text":"5173"},{"range":"5571","text":"5173"},{"range":"5572","text":"5173"},{"range":"5573","text":"5173"},{"range":"5574","text":"5173"},{"range":"5575","text":"5173"},{"range":"5576","text":"5173"},{"range":"5577","text":"5173"},{"range":"5578","text":"5173"},{"range":"5579","text":"5173"},{"range":"5580","text":"5173"},{"range":"5581","text":"5173"},{"range":"5582","text":"5173"},{"range":"5583","text":"5173"},{"range":"5584","text":"5173"},{"range":"5585","text":"5173"},{"range":"5586","text":"5173"},{"range":"5587","text":"5173"},{"range":"5588","text":"5173"},{"range":"5589","text":"5173"},{"range":"5590","text":"5173"},{"range":"5591","text":"5173"},{"range":"5592","text":"5173"},{"range":"5593","text":"5173"},{"range":"5594","text":"5173"},{"range":"5595","text":"5173"},{"range":"5596","text":"5173"},{"range":"5597","text":"5173"},{"range":"5598","text":"5173"},{"range":"5599","text":"5173"},{"range":"5600","text":"5173"},{"range":"5601","text":"5173"},{"range":"5602","text":"5173"},{"range":"5603","text":"5173"},{"range":"5604","text":"5173"},{"range":"5605","text":"5173"},{"range":"5606","text":"5173"},{"range":"5607","text":"5173"},{"range":"5608","text":"5173"},{"range":"5609","text":"5173"},{"range":"5610","text":"5173"},{"range":"5611","text":"5173"},{"range":"5612","text":"5173"},{"range":"5613","text":"5173"},{"range":"5614","text":"5173"},{"range":"5615","text":"5173"},{"range":"5616","text":"5173"},{"range":"5617","text":"5173"},{"range":"5618","text":"5173"},{"range":"5619","text":"5173"},{"range":"5620","text":"5173"},{"range":"5621","text":"5173"},{"range":"5622","text":"5173"},{"range":"5623","text":"5173"},{"range":"5624","text":"5173"},{"range":"5625","text":"5173"},{"range":"5626","text":"5173"},{"range":"5627","text":"5173"},{"range":"5628","text":"5173"},{"range":"5629","text":"5173"},{"range":"5630","text":"5173"},{"range":"5631","text":"5173"},{"range":"5632","text":"5173"},{"range":"5633","text":"5173"},{"range":"5634","text":"5173"},{"range":"5635","text":"5173"},{"range":"5636","text":"5173"},{"range":"5637","text":"5173"},{"range":"5638","text":"5173"},{"range":"5639","text":"5173"},{"range":"5640","text":"5173"},{"range":"5641","text":"5173"},{"range":"5642","text":"5173"},{"range":"5643","text":"5173"},{"range":"5644","text":"5173"},{"range":"5645","text":"5173"},{"range":"5646","text":"5173"},{"range":"5647","text":"5173"},{"range":"5648","text":"5173"},{"range":"5649","text":"5173"},{"range":"5650","text":"5173"},{"range":"5651","text":"5173"},{"range":"5652","text":"5173"},{"range":"5653","text":"5173"},{"range":"5654","text":"5173"},{"range":"5655","text":"5173"},{"range":"5656","text":"5173"},{"range":"5657","text":"5173"},{"range":"5658","text":"5173"},{"range":"5659","text":"5173"},{"range":"5660","text":"5173"},{"range":"5661","text":"5173"},{"range":"5662","text":"5173"},{"range":"5663","text":"5173"},{"range":"5664","text":"5173"},{"range":"5665","text":"5173"},{"range":"5666","text":"5173"},{"range":"5667","text":"5173"},{"range":"5668","text":"5173"},{"range":"5669","text":"5173"},{"range":"5670","text":"5173"},{"range":"5671","text":"5173"},{"range":"5672","text":"5173"},{"range":"5673","text":"5173"},{"range":"5674","text":"5173"},{"range":"5675","text":"5173"},{"range":"5676","text":"5173"},{"range":"5677","text":"5173"},{"range":"5678","text":"5173"},{"range":"5679","text":"5173"},{"range":"5680","text":"5173"},{"range":"5681","text":"5173"},{"range":"5682","text":"5173"},{"range":"5683","text":"5173"},{"range":"5684","text":"5173"},{"range":"5685","text":"5173"},{"range":"5686","text":"5173"},{"range":"5687","text":"5173"},{"range":"5688","text":"5173"},{"range":"5689","text":"5173"},{"range":"5690","text":"5173"},{"range":"5691","text":"5173"},{"range":"5692","text":"5173"},{"range":"5693","text":"5173"},{"range":"5694","text":"5173"},{"range":"5695","text":"5173"},{"range":"5696","text":"5173"},{"range":"5697","text":"5173"},{"range":"5698","text":"5173"},{"range":"5699","text":"5173"},{"range":"5700","text":"5173"},{"range":"5701","text":"5173"},{"range":"5702","text":"5173"},{"range":"5703","text":"5173"},{"range":"5704","text":"5173"},{"range":"5705","text":"5173"},{"range":"5706","text":"5173"},{"range":"5707","text":"5173"},{"range":"5708","text":"5173"},{"range":"5709","text":"5173"},{"range":"5710","text":"5173"},{"range":"5711","text":"5173"},{"range":"5712","text":"5173"},"exported declaration 'openWalletMicrosite' not used within other modules",{"range":"5713","text":"5173"},{"range":"5714","text":"5173"},{"range":"5715","text":"5173"},{"range":"5716","text":"5173"},{"range":"5717","text":"5173"},{"range":"5718","text":"5173"},{"range":"5719","text":"5173"},{"range":"5720","text":"5173"},{"range":"5721","text":"5173"},{"range":"5722","text":"5173"},"Replace `(⏎··········<Plural⏎············value={plural·?·2·:·1}⏎············_1=\"This·token·isn't·provide·Listing·by·us.\"⏎············other=\"Please·DYOR.\"⏎··········/>⏎········)` with `<Plural·value={plural·?·2·:·1}·_1=\"This·token·isn't·provide·Listing·by·us.\"·other=\"Please·DYOR.\"·/>`",{"range":"5723","text":"5724"},{"range":"5725","text":"5724"},{"range":"5726","text":"5173"},{"range":"5727","text":"5173"},{"range":"5728","text":"5173"},{"range":"5729","text":"5173"},{"range":"5730","text":"5173"},{"range":"5731","text":"5173"},{"range":"5732","text":"5173"},{"range":"5733","text":"5734"},"'UNI_LIST' is defined but never used.",{"range":"5735","text":"5186"},{"range":"5736","text":"5173"},{"range":"5737","text":"5173"},{"range":"5738","text":"5173"},{"range":"5739","text":"5173"},{"range":"5740","text":"5173"},{"range":"5741","text":"5173"},{"range":"5742","text":"5173"},{"range":"5743","text":"5173"},{"range":"5744","text":"5173"},{"range":"5745","text":"5173"},{"range":"5746","text":"5173"},{"range":"5747","text":"5173"},{"range":"5748","text":"5173"},{"range":"5749","text":"5173"},{"range":"5750","text":"5173"},{"range":"5751","text":"5173"},{"range":"5752","text":"5173"},{"range":"5753","text":"5173"},{"range":"5754","text":"5173"},{"range":"5755","text":"5173"},{"range":"5756","text":"5173"},{"range":"5757","text":"5173"},{"range":"5758","text":"5173"},{"range":"5759","text":"5173"},{"range":"5760","text":"5173"},{"range":"5761","text":"5173"},{"range":"5762","text":"5173"},{"range":"5763","text":"5173"},{"range":"5764","text":"5173"},{"range":"5765","text":"5173"},{"range":"5766","text":"5173"},{"range":"5767","text":"5173"},{"range":"5768","text":"5173"},{"range":"5769","text":"5173"},{"range":"5770","text":"5173"},{"range":"5771","text":"5173"},{"range":"5772","text":"5173"},{"range":"5773","text":"5173"},{"range":"5774","text":"5173"},{"range":"5775","text":"5173"},{"range":"5776","text":"5173"},{"range":"5777","text":"5173"},{"range":"5778","text":"5173"},{"range":"5779","text":"5173"},{"range":"5780","text":"5173"},{"range":"5781","text":"5173"},{"range":"5782","text":"5173"},{"range":"5783","text":"5173"},{"range":"5784","text":"5173"},{"range":"5785","text":"5173"},{"range":"5786","text":"5173"},{"range":"5787","text":"5173"},{"range":"5788","text":"5173"},{"range":"5789","text":"5173"},{"range":"5790","text":"5173"},{"range":"5791","text":"5173"},{"range":"5792","text":"5173"},{"range":"5793","text":"5173"},{"range":"5794","text":"5173"},{"range":"5795","text":"5173"},{"range":"5796","text":"5173"},{"range":"5797","text":"5173"},{"range":"5798","text":"5173"},{"range":"5799","text":"5173"},{"range":"5800","text":"5173"},{"range":"5801","text":"5173"},{"range":"5802","text":"5173"},{"range":"5803","text":"5173"},{"range":"5804","text":"5173"},{"range":"5805","text":"5173"},{"range":"5806","text":"5173"},{"range":"5807","text":"5173"},{"range":"5808","text":"5173"},{"range":"5809","text":"5173"},{"range":"5810","text":"5173"},{"range":"5811","text":"5173"},{"range":"5812","text":"5173"},{"range":"5813","text":"5173"},{"range":"5814","text":"5173"},{"range":"5815","text":"5173"},{"range":"5816","text":"5173"},{"range":"5817","text":"5173"},{"range":"5818","text":"5173"},{"range":"5819","text":"5173"},{"range":"5820","text":"5173"},{"range":"5821","text":"5173"},{"range":"5822","text":"5173"},{"range":"5823","text":"5173"},{"range":"5824","text":"5173"},{"range":"5825","text":"5173"},{"range":"5826","text":"5173"},{"range":"5827","text":"5173"},{"range":"5828","text":"5173"},{"range":"5829","text":"5173"},{"range":"5830","text":"5173"},{"range":"5831","text":"5173"},{"range":"5832","text":"5173"},{"range":"5833","text":"5173"},{"range":"5834","text":"5173"},{"range":"5835","text":"5173"},{"range":"5836","text":"5173"},{"range":"5837","text":"5173"},{"range":"5838","text":"5173"},{"range":"5839","text":"5173"},{"range":"5840","text":"5173"},{"range":"5841","text":"5173"},{"range":"5842","text":"5173"},{"range":"5843","text":"5173"},{"range":"5844","text":"5173"},{"range":"5845","text":"5173"},{"range":"5846","text":"5173"},{"range":"5847","text":"5173"},{"range":"5848","text":"5173"},{"range":"5849","text":"5173"},{"range":"5850","text":"5173"},{"range":"5851","text":"5173"},{"range":"5852","text":"5173"},{"range":"5853","text":"5173"},{"range":"5854","text":"5173"},{"range":"5855","text":"5173"},{"range":"5856","text":"5173"},{"range":"5857","text":"5173"},{"range":"5858","text":"5173"},{"range":"5859","text":"5173"},{"range":"5860","text":"5173"},{"range":"5861","text":"5173"},{"range":"5862","text":"5173"},{"range":"5863","text":"5173"},{"range":"5864","text":"5173"},{"range":"5865","text":"5173"},{"range":"5866","text":"5173"},{"range":"5867","text":"5173"},{"range":"5868","text":"5173"},{"range":"5869","text":"5173"},{"range":"5870","text":"5173"},{"range":"5871","text":"5173"},{"range":"5872","text":"5173"},{"range":"5873","text":"5173"},{"range":"5874","text":"5173"},{"range":"5875","text":"5173"},{"range":"5876","text":"5173"},{"range":"5877","text":"5173"},{"range":"5878","text":"5173"},{"range":"5879","text":"5173"},{"range":"5880","text":"5173"},{"range":"5881","text":"5173"},{"range":"5882","text":"5173"},{"range":"5883","text":"5173"},{"range":"5884","text":"5173"},{"range":"5885","text":"5173"},{"range":"5886","text":"5173"},{"range":"5887","text":"5173"},{"range":"5888","text":"5173"},{"range":"5889","text":"5173"},{"range":"5890","text":"5173"},{"range":"5891","text":"5173"},{"range":"5892","text":"5173"},{"range":"5893","text":"5173"},{"range":"5894","text":"5173"},{"range":"5895","text":"5173"},{"range":"5896","text":"5173"},{"range":"5897","text":"5173"},{"range":"5898","text":"5173"},{"range":"5899","text":"5900"},"'InterfaceElementName' is defined but never used.",{"range":"5901","text":"5186"},"'openDownloadApp' is defined but never used.",{"range":"5902","text":"5186"},"'BarChartIcon' is defined but never used.",{"range":"5903","text":"5186"},"'GovernanceIcon' is defined but never used.",{"range":"5904","text":"5186"},"'AppleLogo' is defined but never used.",{"range":"5905","text":"5186"},{"range":"5906","text":"5173"},{"range":"5907","text":"5173"},{"range":"5908","text":"5173"},{"range":"5909","text":"5173"},{"range":"5910","text":"5911"},"Replace `⏎··SupportedChainId.PLANQ,⏎` with `SupportedChainId.PLANQ`",{"range":"5912","text":"5913"},{"range":"5914","text":"5173"},"Replace `<img·src={info.logoUrl}·alt={info.label}·className={styles.Image}·data-testid=\"chain-selector-logo\"·/><Trans>{info.label}</Trans>` with `⏎··············<img·src={info.logoUrl}·alt={info.label}·className={styles.Image}·data-testid=\"chain-selector-logo\"·/>⏎··············<Trans>{info.label}</Trans>⏎············`",{"range":"5915","text":"5916"},{"range":"5917","text":"5173"},{"range":"5918","text":"5173"},{"range":"5919","text":"5173"},{"range":"5920","text":"5173"},{"range":"5921","text":"5173"},{"range":"5922","text":"5173"},{"range":"5923","text":"5173"},{"range":"5924","text":"5173"},{"range":"5925","text":"5173"},{"range":"5926","text":"5173"},{"range":"5927","text":"5173"},{"range":"5928","text":"5173"},{"range":"5929","text":"5173"},{"range":"5930","text":"5173"},{"range":"5931","text":"5173"},{"range":"5932","text":"5173"},{"range":"5933","text":"5173"},{"range":"5934","text":"5173"},{"range":"5935","text":"5173"},{"range":"5936","text":"5173"},{"range":"5937","text":"5173"},{"range":"5938","text":"5173"},{"range":"5939","text":"5173"},{"range":"5940","text":"5173"},{"range":"5941","text":"5173"},{"range":"5942","text":"5173"},{"range":"5943","text":"5173"},{"range":"5944","text":"5173"},{"range":"5945","text":"5173"},{"range":"5946","text":"5173"},{"range":"5947","text":"5173"},{"range":"5948","text":"5173"},{"range":"5949","text":"5173"},{"range":"5950","text":"5173"},{"range":"5951","text":"5173"},{"range":"5952","text":"5173"},{"range":"5953","text":"5173"},{"range":"5954","text":"5173"},{"range":"5955","text":"5173"},{"range":"5956","text":"5173"},{"range":"5957","text":"5173"},{"range":"5958","text":"5173"},{"range":"5959","text":"5173"},{"range":"5960","text":"5173"},{"range":"5961","text":"5173"},{"range":"5962","text":"5173"},{"range":"5963","text":"5173"},{"range":"5964","text":"5173"},{"range":"5965","text":"5173"},{"range":"5966","text":"5173"},{"range":"5967","text":"5173"},{"range":"5968","text":"5173"},{"range":"5969","text":"5173"},{"range":"5970","text":"5173"},{"range":"5971","text":"5173"},{"range":"5972","text":"5173"},{"range":"5973","text":"5173"},{"range":"5974","text":"5173"},{"range":"5975","text":"5173"},{"range":"5976","text":"5173"},{"range":"5977","text":"5173"},{"range":"5978","text":"5173"},{"range":"5979","text":"5173"},{"range":"5980","text":"5173"},{"range":"5981","text":"5173"},{"range":"5982","text":"5173"},{"range":"5983","text":"5173"},{"range":"5984","text":"5173"},{"range":"5985","text":"5173"},{"range":"5986","text":"5173"},{"range":"5987","text":"5173"},"'SwapBuyFiatButton' is defined but never used.",{"range":"5988","text":"5989"},"'fiatOnRampButtonEnabled' is assigned a value but never used.",{"range":"5990","text":"5173"},{"range":"5991","text":"5173"},{"range":"5992","text":"5173"},{"range":"5993","text":"5173"},{"range":"5994","text":"5173"},{"range":"5995","text":"5173"},{"range":"5996","text":"5173"},{"range":"5997","text":"5173"},{"range":"5998","text":"5173"},{"range":"5999","text":"5173"},{"range":"6000","text":"5173"},{"range":"6001","text":"5173"},{"range":"6002","text":"5173"},{"range":"6003","text":"5173"},{"range":"6004","text":"5173"},{"range":"6005","text":"5173"},{"range":"6006","text":"5173"},{"range":"6007","text":"5173"},{"range":"6008","text":"5173"},{"range":"6009","text":"5173"},{"range":"6010","text":"5173"},{"range":"6011","text":"5173"},{"range":"6012","text":"5173"},{"range":"6013","text":"5173"},{"range":"6014","text":"5173"},{"range":"6015","text":"5173"},{"range":"6016","text":"5173"},{"range":"6017","text":"5173"},{"range":"6018","text":"5173"},{"range":"6019","text":"5173"},{"range":"6020","text":"5173"},{"range":"6021","text":"5173"},{"range":"6022","text":"5173"},{"range":"6023","text":"5173"},"Replace `·payload:·{·connectionType,·error·}·}:·{·payload:·{·connectionType:·ConnectionType;·error:·string·|·undefined·}·}` with `⏎········payload:·{·connectionType,·error·},⏎······}:·{·payload:·{·connectionType:·ConnectionType;·error:·string·|·undefined·}·},`",{"range":"6024","text":"6025"},{"range":"6026","text":"5173"},{"range":"6027","text":"5173"},{"range":"6028","text":"5173"},{"range":"6029","text":"5173"},{"range":"6030","text":"5173"},{"range":"6031","text":"5173"},{"range":"6032","text":"5173"},{"range":"6033","text":"5173"},{"range":"6034","text":"5173"},{"range":"6035","text":"5173"},{"range":"6036","text":"5173"},{"range":"6037","text":"5173"},{"range":"6038","text":"5173"},{"range":"6039","text":"5173"},{"range":"6040","text":"5173"},{"range":"6041","text":"5173"},{"range":"6042","text":"5173"},{"range":"6043","text":"5173"},{"range":"6044","text":"5173"},{"range":"6045","text":"5173"},{"range":"6046","text":"5173"},{"range":"6047","text":"5173"},{"range":"6048","text":"5173"},{"range":"6049","text":"5173"},{"range":"6050","text":"5173"},{"range":"6051","text":"5173"},{"range":"6052","text":"5173"},{"range":"6053","text":"5173"},{"range":"6054","text":"5173"},{"range":"6055","text":"5173"},{"range":"6056","text":"5173"},{"range":"6057","text":"5173"},{"range":"6058","text":"5173"},{"range":"6059","text":"5173"},{"range":"6060","text":"5173"},{"range":"6061","text":"5173"},{"range":"6062","text":"5173"},{"range":"6063","text":"5173"},{"range":"6064","text":"5173"},{"range":"6065","text":"5173"},{"range":"6066","text":"5173"},{"range":"6067","text":"5173"},{"range":"6068","text":"5173"},{"range":"6069","text":"5173"},{"range":"6070","text":"5173"},{"range":"6071","text":"5280"},{"range":"6072","text":"5186"},"Replace `FFF` with `fff`",{"range":"6073","text":"6074"},{"range":"6075","text":"5173"},{"range":"6076","text":"5173"},{"range":"6077","text":"5173"},{"range":"6078","text":"5173"},{"range":"6079","text":"5173"},{"range":"6080","text":"5173"},{"range":"6081","text":"5173"},{"range":"6082","text":"5173"},{"range":"6083","text":"5173"},{"range":"6084","text":"5173"},{"range":"6085","text":"5173"},{"range":"6086","text":"5173"},{"range":"6087","text":"5173"},{"range":"6088","text":"5173"},{"range":"6089","text":"5173"},{"range":"6090","text":"5173"},{"range":"6091","text":"5173"},{"range":"6092","text":"5173"},{"range":"6093","text":"5173"},{"range":"6094","text":"5173"},{"range":"6095","text":"5173"},{"range":"6096","text":"5173"},{"range":"6097","text":"5173"},{"range":"6098","text":"5173"},{"range":"6099","text":"5173"},{"range":"6100","text":"5173"},{"range":"6101","text":"5173"},{"range":"6102","text":"5173"},{"range":"6103","text":"5173"},{"range":"6104","text":"5173"},{"range":"6105","text":"5173"},{"range":"6106","text":"5173"},{"range":"6107","text":"5173"},{"range":"6108","text":"5173"},{"range":"6109","text":"5173"},{"range":"6110","text":"5173"},{"range":"6111","text":"5173"},{"range":"6112","text":"5173"},{"range":"6113","text":"5173"},{"range":"6114","text":"5173"},{"range":"6115","text":"5173"},{"range":"6116","text":"5173"},{"range":"6117","text":"5173"},{"range":"6118","text":"5173"},{"range":"6119","text":"5173"},{"range":"6120","text":"5173"},{"range":"6121","text":"5173"},{"range":"6122","text":"5173"},{"range":"6123","text":"5173"},{"range":"6124","text":"5173"},{"range":"6125","text":"5173"},{"range":"6126","text":"5173"},{"range":"6127","text":"5173"},{"range":"6128","text":"5173"},{"range":"6129","text":"5173"},{"range":"6130","text":"5173"},{"range":"6131","text":"5173"},{"range":"6132","text":"5173"},[2452,2452],",",[943,943],[1945,1945],[4845,4845],[2328,2328],[2578,2578],[2284,2284],[713,713],[7234,7234],[8003,8003],[8813,8813]," ",[8874,8875],"",[9613,9614],[9885,9886],[10163,10164],[10795,10796],[11161,11162],[11347,11348],[11500,11501],[13143,13144],[1048,1048],[1673,1673],[1816,1816],[1862,1862],[1150,1150],[1582,1582],[2034,2034],[4972,4972],[5240,5240],[244,244],[641,641],[962,962],[1380,1380],[831,831],[733,733],[1976,1976],[1534,1534],[1036,1036],[1559,1559],[2715,2715],[5990,5990],[6048,6048],[6243,6243],[6301,6301],[6697,6697],[7475,7475],[7886,7886],[8968,8968],[9166,9166],[9363,9363],[11277,11277],[11586,11586],[12262,12262],[26888,26888],[27312,27312],[27469,27469],[1569,1569],[2023,2023],[2583,2583],[3401,3401],[3979,3979],[4457,4457],[4487,4487],[4625,4625],[5069,5069],[5579,5579],[6088,6088],[6376,6376],[7341,7341],[8579,8579],[9782,9782],[10418,10418],[3520,3520],[4540,4540],[1134,1134],[752,857],"\n      locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale,",[1129,1129],[889,889],[3797,3797],[2040,2040],[3239,3239],[3840,3840],[4647,4647],[5312,5312],[6557,6557],[7731,7731],[8018,8018],[8353,8353],[8563,8563],[8703,8703],[13172,13172],[13511,13511],[13850,13850],[14142,14142],[21027,21027],[21227,21227],[24254,24254],[0,1299],"import { Trans } from '@lingui/macro'\nimport { Trace, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, InterfacePageName, SharedEventName } from '@uniswap/analytics-events'\nimport { AboutFooter } from 'components/About/AboutFooter'\nimport Card, { CardType } from 'components/About/Card'\nimport { MAIN_CARDS, MORE_CARDS } from 'components/About/constants'\nimport ProtocolBanner from 'components/About/ProtocolBanner'\nimport { BaseButton } from 'components/Button'\nimport { useSwapWidgetEnabled } from 'featureFlags/flags/swapWidget'\nimport { useAtomValue } from 'jotai/utils'\nimport Swap from 'pages/Swap'\nimport { parse } from 'qs'\nimport { useEffect, useRef, useState } from 'react'\nimport { ArrowDownCircle } from 'react-feather'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { Link as NativeLink } from 'react-router-dom'\nimport { shouldDisableNFTRoutesAtom } from 'state/application/atoms'\nimport { useAppSelector } from 'state/hooks'\nimport styled, { css } from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\nimport { useIsDarkMode } from 'theme/components/ThemeToggle'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport darkImage from '../../assets/images/img-hero.svg'\nimport lightImage from '../../assets/images/img-hero.svg'",[330,342],[1390,1391],[4521,4566]," (isDarkMode ? '#FFF' : '#AEF')",[5372,5373],"e",[5428,5429],[5677,5678],[10236,10238],[10384,10384],"  ",[10420,10434],"                ",[10478,10478],[10481,10499],"                    ",[10532,10532],[10593,10593],[10606,10606],[10677,10677],[10700,10718],[10726,10726],[10760,10760],[10766,10766],[10803,10803],[10836,10836],[10897,10897],[10910,10928],[10961,10961],[11022,11022],[11030,11030],[11064,11064],[11067,11067],[11104,11104],[11123,11137],[11147,11147],[11191,11191],[11257,11257],[11297,11297],[11361,11361],[11364,11364],[11389,11401],"              ",[11421,11421],[11466,11466],[11478,11478],[11542,11542],[11581,11581],[11658,11658],[11660,11676],"                  ",[11727,11727],[11743,11763],"                      ",[11790,11790],[11841,11841],[11854,11854],[11882,11882],[3103,3103],[4401,4401],[4417,4417],[4858,4858],[5484,5484],[5488,5488],[2250,2250],[5775,5775],[1153,1153],[5924,5924],[5586,5586],[2644,2644],[2683,2683],[3596,3652],"\n        (currencyB && currencyB.equals(wrappedNativeCurrency))),",[5199,5199],[5486,5486],[8716,8716],[11449,11449],[11943,11943],[1517,1517],[2142,2142],[8734,8734],[10570,10570],[12298,12298],[757,757],[608,608],[848,848],[602,602],[736,736],[881,881],[1033,1033],[1182,1182],[1341,1341],[1484,1484],[1634,1634],[1801,1801],[1940,1940],[2082,2082],[2243,2243],[2396,2396],[2546,2546],[2693,2693],[2836,2836],[2979,2979],[3127,3127],[3266,3266],[3423,3423],[3572,3572],[3712,3712],[3870,3870],[4020,4020],[4155,4155],[4292,4292],[4426,4426],[4564,4564],[4703,4703],[4873,4873],[5026,5026],[5179,5179],[5320,5320],[5485,5485],[5637,5637],[5897,5897],[6049,6049],[6198,6198],[6355,6355],[6504,6504],[6667,6667],[6839,6839],[6974,6974],[7109,7109],[7246,7246],[7384,7384],[7519,7519],[7776,7776],[7911,7911],[8711,8711],[8893,8893],[9069,9069],[9251,9251],[9419,9419],[9601,9601],[9765,9765],[9949,9949],[10105,10105],[10269,10269],[249,249],[737,737],[1113,1113],[1459,1459],[3503,3503],[202,202],[1288,1288],[1958,1958],[2719,2719],[3125,3125],[9173,9173],[314,314],[1045,1045],[135,135],[1191,1191],[1701,1701],[2054,2054],[2393,2393],[2695,2695],[3381,3381],[3475,3475],[3856,3856],[4029,4029],[4215,4215],[4934,4934],[5027,5027],[5154,5154],[3630,3630],[5723,5723],[15708,15708],[3286,3286],[3605,3605],[5256,5256],[5409,5409],[580,580],[583,686],"    <path d=\"M43.791 29.8086L43.7851 17.1687L32.8418 23.4945L32.8485 36.134L43.791 29.8086Z\" fill=\"#D5F6FF\" ",[689,779],"    <path d=\"M21.8928 17.1795L10.9434 10.8652L10.9494 23.5049L21.8928 17.1795Z\" fill=\"#5A7B92\" ",[782,870],"    <path d=\"M32.8484 36.134L32.8413 23.4943L21.8989 29.8196L32.8484 36.134Z\" fill=\"#5A7B92\" ",[873,974],"    <path d=\"M10.9493 23.505L10.9433 10.8653L0 17.1907L0.00604055 29.8303L10.9493 23.505Z\" fill=\"#AAEEFF\" ",[977,13261],"    <path\n      d=\"M60.581 33.5V13.1364H68.2174C69.7818 13.1364 71.0943 13.428 72.1549 14.0114C73.2221 14.5947 74.0275 15.3968 74.5711 16.4176C75.1213 17.4318 75.3964 18.5852 75.3964 19.8778C75.3964 21.1837 75.1213 22.3437 74.5711 23.358C74.0209 24.3722 73.2089 25.1709 72.135 25.7543C71.0611 26.331 69.7387 26.6193 68.1677 26.6193H63.1066V23.5866H67.6705C68.5853 23.5866 69.3343 23.4276 69.9177 23.1094C70.501 22.7912 70.9319 22.3537 71.2103 21.7969C71.4953 21.2401 71.6379 20.6004 71.6379 19.8778C71.6379 19.1553 71.4953 18.5189 71.2103 17.9688C70.9319 17.4186 70.4977 16.991 69.9077 16.6861C69.3244 16.3745 68.572 16.2188 67.6506 16.2188H64.27V33.5H60.581ZM82.0409 24.5511V33.5H78.4415V13.1364H81.9614V20.8224H82.1403C82.4983 19.9607 83.0518 19.2812 83.8008 18.7841C84.5565 18.2803 85.5177 18.0284 86.6844 18.0284C87.745 18.0284 88.6697 18.2505 89.4585 18.6946C90.2473 19.1387 90.8572 19.7884 91.2881 20.6435C91.7256 21.4986 91.9443 22.5426 91.9443 23.7756V33.5H88.3449V24.3324C88.3449 23.3049 88.0797 22.5062 87.5494 21.9361C87.0258 21.3594 86.29 21.071 85.342 21.071C84.7057 21.071 84.1356 21.2102 83.6318 21.4886C83.1347 21.7604 82.7436 22.1548 82.4585 22.6719C82.1801 23.1889 82.0409 23.8153 82.0409 24.5511ZM97.3037 39.2273C96.8132 39.2273 96.3591 39.1875 95.9415 39.108C95.5305 39.035 95.2024 38.9489 94.9571 38.8494L95.7923 36.0455C96.316 36.1979 96.7833 36.2708 97.1943 36.2642C97.6053 36.2576 97.9666 36.1283 98.2781 35.8764C98.5963 35.6312 98.8648 35.2202 99.0835 34.6435L99.3918 33.8182L93.8534 18.2273H97.6716L101.191 29.7614H101.351L104.88 18.2273H108.709L102.593 35.3494C102.308 36.1581 101.931 36.8509 101.46 37.4276C100.989 38.0109 100.413 38.455 99.7298 38.7599C99.0537 39.0715 98.245 39.2273 97.3037 39.2273ZM123.27 22.2642L119.989 22.6222C119.896 22.2907 119.734 21.9792 119.502 21.6875C119.276 21.3958 118.972 21.1605 118.587 20.9815C118.203 20.8026 117.732 20.7131 117.175 20.7131C116.426 20.7131 115.796 20.8755 115.286 21.2003C114.782 21.5251 114.534 21.946 114.54 22.4631C114.534 22.9072 114.696 23.2685 115.027 23.5469C115.365 23.8253 115.922 24.054 116.698 24.233L119.303 24.7898C120.748 25.1013 121.822 25.5952 122.525 26.2713C123.234 26.9474 123.592 27.8324 123.598 28.9261C123.592 29.8873 123.31 30.7358 122.753 31.4716C122.203 32.2008 121.437 32.7708 120.456 33.1818C119.475 33.5928 118.348 33.7983 117.076 33.7983C115.206 33.7983 113.702 33.4072 112.562 32.625C111.421 31.8362 110.742 30.7391 110.523 29.3338L114.033 28.9957C114.192 29.6851 114.53 30.2055 115.047 30.5568C115.564 30.9081 116.237 31.0838 117.066 31.0838C117.921 31.0838 118.607 30.9081 119.124 30.5568C119.648 30.2055 119.91 29.7713 119.91 29.2543C119.91 28.8168 119.74 28.4555 119.402 28.1705C119.071 27.8854 118.554 27.6667 117.851 27.5142L115.246 26.9673C113.781 26.6624 112.697 26.1487 111.995 25.4261C111.292 24.697 110.944 23.7756 110.951 22.6619C110.944 21.7206 111.199 20.9053 111.716 20.2159C112.24 19.5199 112.966 18.983 113.894 18.6051C114.829 18.2206 115.906 18.0284 117.125 18.0284C118.915 18.0284 120.324 18.4096 121.351 19.1719C122.385 19.9342 123.025 20.965 123.27 22.2642ZM126.566 33.5V18.2273H130.166V33.5H126.566ZM128.376 16.0597C127.806 16.0597 127.316 15.8707 126.905 15.4929C126.494 15.1084 126.288 14.6477 126.288 14.1108C126.288 13.5672 126.494 13.1065 126.905 12.7287C127.316 12.3442 127.806 12.152 128.376 12.152C128.953 12.152 129.443 12.3442 129.848 12.7287C130.259 13.1065 130.464 13.5672 130.464 14.1108C130.464 14.6477 130.259 15.1084 129.848 15.4929C129.443 15.8707 128.953 16.0597 128.376 16.0597ZM140.529 33.7983C139.005 33.7983 137.695 33.4635 136.602 32.794C135.515 32.1245 134.676 31.1998 134.086 30.0199C133.503 28.8333 133.211 27.4678 133.211 25.9233C133.211 24.3722 133.509 23.0033 134.106 21.8168C134.702 20.6236 135.544 19.6955 136.631 19.0327C137.725 18.3632 139.018 18.0284 140.509 18.0284C141.749 18.0284 142.846 18.2571 143.8 18.7145C144.762 19.1652 145.527 19.8049 146.097 20.6335C146.667 21.4555 146.992 22.4167 147.072 23.517H143.631C143.492 22.7812 143.161 22.1681 142.637 21.6776C142.12 21.1804 141.427 20.9318 140.559 20.9318C139.823 20.9318 139.177 21.1307 138.62 21.5284C138.063 21.9195 137.629 22.483 137.318 23.2188C137.013 23.9545 136.86 24.8362 136.86 25.8636C136.86 26.9044 137.013 27.7992 137.318 28.5483C137.622 29.2907 138.05 29.8641 138.6 30.2685C139.157 30.6662 139.81 30.8651 140.559 30.8651C141.089 30.8651 141.563 30.7656 141.981 30.5668C142.405 30.3613 142.76 30.0663 143.045 29.6818C143.33 29.2973 143.525 28.83 143.631 28.2798H147.072C146.986 29.3603 146.667 30.3182 146.117 31.1534C145.567 31.982 144.818 32.6316 143.87 33.1023C142.922 33.5663 141.809 33.7983 140.529 33.7983ZM154.422 33.8082C153.454 33.8082 152.583 33.6359 151.807 33.2912C151.038 32.9399 150.428 32.4228 149.978 31.7401C149.534 31.0573 149.312 30.2154 149.312 29.2145C149.312 28.3527 149.471 27.6402 149.789 27.0767C150.107 26.5133 150.541 26.0625 151.091 25.7244C151.642 25.3864 152.261 25.1312 152.951 24.9588C153.647 24.7798 154.366 24.6506 155.108 24.571C156.003 24.4782 156.729 24.3954 157.286 24.3224C157.843 24.2429 158.247 24.1236 158.499 23.9645C158.758 23.7988 158.887 23.5436 158.887 23.1989V23.1392C158.887 22.3902 158.665 21.8101 158.221 21.3991C157.776 20.9882 157.137 20.7827 156.302 20.7827C155.42 20.7827 154.721 20.9749 154.204 21.3594C153.693 21.7438 153.348 22.1979 153.169 22.7216L149.809 22.2443C150.074 21.3163 150.511 20.5407 151.121 19.9176C151.731 19.2879 152.477 18.8172 153.358 18.5057C154.24 18.1875 155.214 18.0284 156.282 18.0284C157.017 18.0284 157.75 18.1146 158.479 18.2869C159.208 18.4593 159.874 18.7443 160.478 19.142C161.081 19.5331 161.565 20.0668 161.929 20.7429C162.301 21.419 162.486 22.2642 162.486 23.2784V33.5H159.026V31.402H158.907C158.688 31.8262 158.38 32.224 157.982 32.5952C157.591 32.9598 157.097 33.2547 156.5 33.4801C155.91 33.6989 155.218 33.8082 154.422 33.8082ZM155.357 31.1634C156.079 31.1634 156.706 31.0208 157.236 30.7358C157.767 30.4441 158.174 30.0597 158.459 29.5824C158.751 29.1051 158.897 28.5848 158.897 28.0213V26.2216C158.784 26.3144 158.592 26.4006 158.32 26.4801C158.055 26.5597 157.757 26.6293 157.425 26.6889C157.094 26.7486 156.766 26.8016 156.441 26.848C156.116 26.8944 155.834 26.9342 155.596 26.9673C155.059 27.0402 154.578 27.1596 154.154 27.3253C153.73 27.491 153.395 27.723 153.15 28.0213C152.904 28.313 152.782 28.6908 152.782 29.1548C152.782 29.8177 153.024 30.3182 153.508 30.6562C153.991 30.9943 154.608 31.1634 155.357 31.1634ZM173.21 33.5V13.1364H186.255V16.2287H176.899V21.7571H185.361V24.8494H176.899V33.5H173.21ZM189.457 33.5V18.2273H193.057V33.5H189.457ZM191.267 16.0597C190.697 16.0597 190.206 15.8707 189.795 15.4929C189.384 15.1084 189.179 14.6477 189.179 14.1108C189.179 13.5672 189.384 13.1065 189.795 12.7287C190.206 12.3442 190.697 12.152 191.267 12.152C191.843 12.152 192.334 12.3442 192.738 12.7287C193.149 13.1065 193.355 13.5672 193.355 14.1108C193.355 14.6477 193.149 15.1084 192.738 15.4929C192.334 15.8707 191.843 16.0597 191.267 16.0597ZM200.357 24.5511V33.5H196.758V18.2273H200.198V20.8224H200.377C200.729 19.9673 201.289 19.2879 202.058 18.7841C202.833 18.2803 203.791 18.0284 204.931 18.0284C205.985 18.0284 206.903 18.2538 207.685 18.7045C208.474 19.1553 209.084 19.8082 209.515 20.6634C209.952 21.5185 210.168 22.5559 210.161 23.7756V33.5H206.562V24.3324C206.562 23.3116 206.297 22.5128 205.766 21.9361C205.243 21.3594 204.517 21.071 203.589 21.071C202.959 21.071 202.399 21.2102 201.908 21.4886C201.425 21.7604 201.043 22.1548 200.765 22.6719C200.493 23.1889 200.357 23.8153 200.357 24.5511ZM218.215 33.8082C217.247 33.8082 216.376 33.6359 215.6 33.2912C214.831 32.9399 214.221 32.4228 213.771 31.7401C213.327 31.0573 213.104 30.2154 213.104 29.2145C213.104 28.3527 213.264 27.6402 213.582 27.0767C213.9 26.5133 214.334 26.0625 214.884 25.7244C215.434 25.3864 216.054 25.1312 216.744 24.9588C217.44 24.7798 218.159 24.6506 218.901 24.571C219.796 24.4782 220.522 24.3954 221.079 24.3224C221.636 24.2429 222.04 24.1236 222.292 23.9645C222.55 23.7988 222.68 23.5436 222.68 23.1989V23.1392C222.68 22.3902 222.458 21.8101 222.014 21.3991C221.569 20.9882 220.93 20.7827 220.095 20.7827C219.213 20.7827 218.514 20.9749 217.997 21.3594C217.486 21.7438 217.141 22.1979 216.962 22.7216L213.602 22.2443C213.867 21.3163 214.304 20.5407 214.914 19.9176C215.524 19.2879 216.27 18.8172 217.151 18.5057C218.033 18.1875 219.007 18.0284 220.075 18.0284C220.81 18.0284 221.543 18.1146 222.272 18.2869C223.001 18.4593 223.667 18.7443 224.271 19.142C224.874 19.5331 225.358 20.0668 225.722 20.7429C226.094 21.419 226.279 22.2642 226.279 23.2784V33.5H222.819V31.402H222.7C222.481 31.8262 222.173 32.224 221.775 32.5952C221.384 32.9598 220.89 33.2547 220.293 33.4801C219.703 33.6989 219.011 33.8082 218.215 33.8082ZM219.15 31.1634C219.872 31.1634 220.499 31.0208 221.029 30.7358C221.559 30.4441 221.967 30.0597 222.252 29.5824C222.544 29.1051 222.69 28.5848 222.69 28.0213V26.2216C222.577 26.3144 222.385 26.4006 222.113 26.4801C221.848 26.5597 221.55 26.6293 221.218 26.6889C220.887 26.7486 220.559 26.8016 220.234 26.848C219.909 26.8944 219.627 26.9342 219.389 26.9673C218.852 27.0402 218.371 27.1596 217.947 27.3253C217.523 27.491 217.188 27.723 216.943 28.0213C216.697 28.313 216.575 28.6908 216.575 29.1548C216.575 29.8177 216.817 30.3182 217.3 30.6562C217.784 30.9943 218.401 31.1634 219.15 31.1634ZM233.498 24.5511V33.5H229.899V18.2273H233.339V20.8224H233.518C233.869 19.9673 234.429 19.2879 235.198 18.7841C235.974 18.2803 236.932 18.0284 238.072 18.0284C239.126 18.0284 240.044 18.2538 240.826 18.7045C241.615 19.1553 242.225 19.8082 242.656 20.6634C243.093 21.5185 243.309 22.5559 243.302 23.7756V33.5H239.702V24.3324C239.702 23.3116 239.437 22.5128 238.907 21.9361C238.383 21.3594 237.658 21.071 236.729 21.071C236.1 21.071 235.54 21.2102 235.049 21.4886C234.565 21.7604 234.184 22.1548 233.906 22.6719C233.634 23.1889 233.498 23.8153 233.498 24.5511ZM253.623 33.7983C252.098 33.7983 250.789 33.4635 249.695 32.794C248.608 32.1245 247.77 31.1998 247.18 30.0199C246.596 28.8333 246.305 27.4678 246.305 25.9233C246.305 24.3722 246.603 23.0033 247.2 21.8168C247.796 20.6236 248.638 19.6955 249.725 19.0327C250.819 18.3632 252.112 18.0284 253.603 18.0284C254.843 18.0284 255.94 18.2571 256.894 18.7145C257.855 19.1652 258.621 19.8049 259.191 20.6335C259.761 21.4555 260.086 22.4167 260.166 23.517H256.725C256.586 22.7812 256.255 22.1681 255.731 21.6776C255.214 21.1804 254.521 20.9318 253.653 20.9318C252.917 20.9318 252.271 21.1307 251.714 21.5284C251.157 21.9195 250.723 22.483 250.411 23.2188C250.106 23.9545 249.954 24.8362 249.954 25.8636C249.954 26.9044 250.106 27.7992 250.411 28.5483C250.716 29.2907 251.144 29.8641 251.694 30.2685C252.251 30.6662 252.904 30.8651 253.653 30.8651C254.183 30.8651 254.657 30.7656 255.075 30.5668C255.499 30.3613 255.854 30.0663 256.139 29.6818C256.424 29.2973 256.619 28.83 256.725 28.2798H260.166C260.079 29.3603 259.761 30.3182 259.211 31.1534C258.661 31.982 257.912 32.6316 256.964 33.1023C256.016 33.5663 254.902 33.7983 253.623 33.7983ZM269.883 33.7983C268.351 33.7983 267.029 33.4801 265.915 32.8438C264.808 32.2008 263.956 31.2926 263.36 30.1193C262.763 28.9394 262.465 27.5507 262.465 25.9531C262.465 24.3821 262.763 23.0033 263.36 21.8168C263.963 20.6236 264.805 19.6955 265.885 19.0327C266.966 18.3632 268.235 18.0284 269.694 18.0284C270.635 18.0284 271.523 18.1809 272.358 18.4858C273.2 18.7841 273.943 19.2481 274.586 19.8778C275.235 20.5076 275.746 21.3097 276.117 22.2841C276.488 23.2519 276.674 24.4053 276.674 25.7443V26.848H264.155V24.4219H273.223C273.217 23.7325 273.068 23.1193 272.776 22.5824C272.484 22.0388 272.077 21.6113 271.553 21.2997C271.036 20.9882 270.433 20.8324 269.743 20.8324C269.008 20.8324 268.361 21.0114 267.804 21.3693C267.248 21.7206 266.813 22.1847 266.502 22.7614C266.197 23.3314 266.041 23.9579 266.035 24.6406V26.7585C266.035 27.6468 266.197 28.4091 266.522 29.0455C266.847 29.6752 267.301 30.1591 267.884 30.4972C268.467 30.8286 269.15 30.9943 269.932 30.9943C270.456 30.9943 270.93 30.9214 271.354 30.7756C271.778 30.6231 272.146 30.401 272.458 30.1094C272.769 29.8177 273.005 29.4564 273.164 29.0256L276.525 29.4034C276.312 30.2917 275.908 31.0672 275.312 31.7301C274.722 32.3864 273.966 32.8968 273.044 33.2614C272.123 33.6193 271.069 33.7983 269.883 33.7983Z\"\n      fill=\"white\"\n    ",[10287,10287],[10978,10978],[11137,11137],[11555,11555],[13114,13114],[3683,3683],[3823,3823],[4403,4403],[3168,3168],[735,735],[1903,1903],[3983,3983],[4426,4426],[5099,5099],[2124,2124],[2128,2128],[2696,2696],[3893,3893],[5739,5739],[3377,3377],[3391,3391],[5621,5621],[7946,7946],[1857,1857],[2801,2801],[3101,3101],[6441,6441],[6837,6837],[7631,7631],[7842,7842],[7850,7850],[8056,8056],[8503,8503],[14359,14359],[14753,14753],[570,570],[1515,1515],[5613,5613],[788,788],[1363,1363],[1515,1515],[3259,3259],[3547,3547],[3848,3848],[5561,5561],[8116,8116],[808,808],[824,824],[881,881],[2671,2671],[3232,3232],[4539,4539],[4444,4444],[4766,4766],[4940,4940],[2929,2929],[6016,6016],[8286,8286],[1938,1938],[4809,4809],[5266,5266],[6350,6350],[6565,6565],[7139,7139],[1435,1435],[3717,3717],[3721,3721],[357,357],[2121,2121],[3593,3593],[3733,3733],[198,198],[386,386],[673,673],[65,65],[142,142],[864,864],[809,809],[813,813],[1235,1235],[1630,1630],[2434,2434],[4422,4422],[5710,5710],[5916,5916],[5991,5991],[7889,7889],[8340,8340],[627,627],[631,631],[646,646],[2883,2883],[3652,3652],[4293,4293],[4538,4538],[1732,1732],[1497,1497],[2620,2620],[1639,1639],[932,932],[936,936],[1942,1942],[5138,5138],[5377,5377],[7099,7099],[7944,7944],[1839,1839],[3105,3105],[4089,4089],[4982,4982],[5589,5589],[8050,8050],[223,223],[235,235],[235,235],[660,660],[642,642],[646,646],[1135,1135],[3423,3423],[3427,3427],[3561,3561],[4107,4107],[4477,4477],[4907,4907],[5455,5455],[5900,5900],[1138,1138],[1270,1270],[939,939],[1103,1103],[1107,1107],[1382,1382],[1614,1614],[1643,1643],[2392,2392],[2957,2957],[3509,3509],[5008,5008],[5012,5012],[571,571],[575,575],[1652,1652],[1656,1656],[643,643],[647,647],[717,717],[1540,1540],[2829,2829],[4144,4144],[4910,4910],[5346,5346],[447,447],[489,489],[493,493],[3170,3170],[465,465],[469,469],[1876,1876],[9011,9011],[9280,9280],[10318,10318],[1054,1054],[1314,1314],[1649,1649],[2110,2110],[2436,2436],[3024,3024],[3254,3254],[3448,3448],[6306,6306],[6546,6546],[6922,6922],[260,260],[912,912],[916,916],[714,714],[820,820],[1198,1198],[602,602],[1281,1281],[470,470],[3018,3018],[2317,2317],[3571,3571],[1914,1914],[479,479],[930,930],[1247,1247],[1540,1540],[376,376],[1726,1726],[3743,3743],[4577,4577],[5541,5541],[5871,5871],[4341,4341],[5602,5602],[6671,6671],[7116,7116],[9324,9324],[1445,1445],[1453,1453],[2213,2213],[2223,2223],[2502,2502],[1366,1366],[1036,1036],[1432,1432],[2202,2202],[2631,2631],[2917,2917],[577,577],[1133,1133],[1582,1582],[3463,3463],[538,538],[1471,1471],[1763,1763],[957,957],[1489,1489],[2067,2067],[4269,4269],[1659,1659],[1920,1920],[2253,2253],[1873,1873],[1865,1865],[1362,1362],[2148,2148],[2228,2228],[2588,2588],[3337,3337],[4408,4408],[1273,1273],[2050,2050],[2828,2828],[1001,1001],[1358,1358],[7442,7442],[10216,10216],[6090,6090],[8562,8562],[399,399],[534,534],[790,790],[1543,1543],[1826,1826],[848,848],[1362,1362],[2886,2886],[2392,2392],[652,652],[1537,1537],[1939,1939],[6757,6757],[7728,7728],[1052,1052],[712,879],"<Plural value={plural ? 2 : 1} _1=\"This token isn't provide Listing by us.\" other=\"Please DYOR.\" />",[1032,1199],[1204,1204],[3101,3101],[2140,2140],[2547,2547],[2893,2893],[5389,5389],[5603,5603],[0,275],"import { TokenInfo } from '@uniswap/token-lists'\n\nimport store from '../state'\nimport { PLANQ_LIST,UNI_EXTENDED_LIST, UNI_LIST, UNSUPPORTED_LIST_URLS } from './lists'\nimport brokenTokenList from './tokenLists/broken.tokenlist.json'\nimport { NATIVE_CHAIN_ID } from './tokens'",[106,116],[838,838],[1848,1848],[2422,2422],[2696,2696],[4106,4106],[4229,4229],[4807,4807],[4931,4931],[501,501],[2164,2164],[2435,2435],[3161,3161],[3447,3447],[1871,1871],[2262,2262],[5710,5710],[6671,6671],[822,822],[892,892],[1226,1226],[1444,1444],[1999,1999],[3229,3229],[4339,4339],[4894,4894],[5425,5425],[2877,2877],[10129,10129],[579,579],[1486,1486],[3514,3514],[1265,1265],[3613,3613],[4002,4002],[4268,4268],[4392,4392],[4864,4864],[5334,5334],[6728,6728],[7658,7658],[9497,9497],[2686,2686],[3335,3335],[500,500],[1484,1484],[3332,3332],[4122,4122],[5123,5123],[2325,2325],[2374,2374],[3107,3107],[3317,3317],[3833,3833],[4027,4027],[4763,4763],[5398,5398],[318,318],[1036,1036],[802,802],[1216,1216],[2036,2036],[1224,1224],[1433,1433],[1599,1599],[2448,2448],[2934,2934],[3115,3115],[3428,3428],[4478,4478],[4794,4794],[6426,6426],[6625,6625],[8361,8361],[8628,8628],[4404,4404],[4691,4691],[645,645],[475,475],[542,542],[784,784],[2082,2082],[5018,5018],[2602,2602],[2889,2889],[3076,3076],[2542,2542],[3735,3735],[7684,7684],[5365,5365],[5726,5726],[5575,5575],[9798,9798],[10117,10117],[7027,7027],[7087,7087],[7830,7830],[8118,8118],[8315,8315],[9434,9434],[10058,10058],[10346,10346],[10683,10683],[4325,4325],[15155,15155],[15258,15258],[16422,16422],[17490,17490],[18566,18566],[18673,18673],[19776,19776],[960,960],[2046,2046],[2177,2177],[3150,3150],[3878,3878],[4513,4513],[4880,4880],[5947,5947],[6487,6487],[6497,6497],[6534,6534],[7126,7126],[7305,7305],[1556,1556],[1345,1345],[3706,3706],[4677,4677],[2784,2784],[2805,2805],[3234,3234],[7825,7825],[13903,13903],[20526,20526],[1764,1764],[1973,1973],[2444,2444],[2856,2856],[3006,3006],[3339,3339],[4594,4594],[4789,4789],[4979,4979],[5158,5158],[6285,6285],[7995,7995],[9708,9708],[10687,10687],[10844,10844],[13104,13104],[13241,13241],[13529,13529],[13790,13790],[16681,16681],[2320,2320],[4472,4472],[4859,4859],[5001,5001],[5130,5130],[5254,5254],[5373,5373],[5630,5630],[5727,5727],[5885,5885],[0,1340],"import { t, Trans } from '@lingui/macro'\nimport { InterfaceElementName } from '@uniswap/analytics-events'\nimport { openDownloadApp } from 'components/AccountDrawer/DownloadButton'\nimport FeatureFlagModal from 'components/FeatureFlagModal/FeatureFlagModal'\nimport { PrivacyPolicyModal } from 'components/PrivacyPolicy'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  BarChartIcon,\n  DiscordIconMenu,\n  EllipsisIcon,\n  GithubIconMenu,\n  GovernanceIcon,\n  PoolIcon,\n  TwitterIconMenu,\n} from 'nft/components/icons'\nimport { body, bodySmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { ReactNode, useReducer, useRef } from 'react'\nimport { NavLink, NavLinkProps } from 'react-router-dom'\nimport { useToggleModal } from 'state/application/hooks'\nimport styled, { useTheme } from 'styled-components/macro'\nimport ThemeToggle from 'theme/components/ThemeToggle'\nimport { isDevelopmentEnv, isStagingEnv } from 'utils/env'\n\nimport { ReactComponent as AppleLogo } from '../../assets/svg/apple_logo.svg'\nimport { ApplicationModal } from '../../state/application/reducer'\nimport * as styles from './MenuDropdown.css'\nimport { NavDropdown } from './NavDropdown'\nimport { NavIcon } from './NavIcon'",[41,106],[106,180],[477,493],[546,564],[1071,1149],[2907,2907],[5135,5135],[6124,6124],[1033,1033],[0,1033],"import { t } from '@lingui/macro'\nimport { Trans } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { ConnectionType } from 'connection'\nimport { useGetConnection } from 'connection'\nimport { getChainInfo } from 'constants/chainInfo'\nimport { SupportedChainId } from 'constants/chains'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport useSelectChain from 'hooks/useSelectChain'\nimport useSyncChainQuery from 'hooks/useSyncChainQuery'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column, Row } from 'nft/components/Flex'\nimport { useIsMobile } from 'nft/hooks'\nimport { useCallback, useRef, useState } from 'react'\nimport { AlertTriangle, ChevronDown, ChevronUp } from 'react-feather'\nimport { useTheme } from 'styled-components/macro'\n\nimport * as styles from './ChainSelector.css'\nimport ChainSelectorRow from './ChainSelectorRow'\nimport { NavDropdown } from './NavDropdown'",[1068,1095],"SupportedChainId.PLANQ",[2018,2018],[3392,3521],"\n              <img src={info.logoUrl} alt={info.label} className={styles.Image} data-testid=\"chain-selector-logo\" />\n              <Trans>{info.label}</Trans>\n            ",[1475,1475],[808,808],[930,930],[2493,2493],[2302,2302],[1256,1256],[2520,2520],[203,203],[1671,1671],[1701,1701],[1952,1952],[2100,2100],[3613,3613],[3876,3876],[4055,4055],[4240,4240],[4446,4446],[6064,6064],[9002,9002],[3960,3960],[5705,5705],[7037,7037],[2635,2635],[3158,3158],[3291,3291],[4474,4474],[5892,5892],[783,783],[4214,4214],[4488,4488],[5027,5027],[5318,5318],[5482,5482],[1183,1183],[1425,1425],[1551,1551],[3138,3138],[5712,5712],[6242,6242],[1014,1014],[1226,1226],[1578,1578],[2427,2427],[603,603],[676,676],[901,901],[976,976],[1767,1767],[2504,2504],[2895,2895],[3109,3109],[3467,3467],[3680,3680],[4487,4487],[4515,4515],[5112,5112],[5267,5267],[5564,5564],[5985,5985],[7285,7285],[956,956],[1395,1395],[3471,3471],[5139,5139],[5942,5942],[6127,6127],[901,901],[1891,1891],[3919,3919],[2210,2210],[2710,2710],[338,391],"\n",[532,532],[742,742],[1740,1740],[3083,3083],[1750,1750],[1073,1073],[2338,2338],[1418,1418],[1589,1589],[1133,1133],[3821,3821],[3951,3951],[4598,4598],[4749,4749],[4506,4506],[2521,2521],[2761,2761],[3224,3224],[3365,3365],[1851,1851],[1445,1445],[2050,2050],[1013,1013],[2722,2722],[632,632],[1638,1638],[309,309],[744,744],[1819,1819],[3458,3458],[1852,1852],[1989,1989],[2130,2130],[2272,2272],[671,784],"\n        payload: { connectionType, error },\n      }: { payload: { connectionType: ConnectionType; error: string | undefined } },",[2108,2108],[3076,3076],[3474,3474],[2786,2786],[2952,2952],[2142,2142],[524,524],[3214,3214],[8858,8858],[971,971],[1128,1128],[1230,1230],[1541,1541],[4042,4042],[4606,4606],[520,520],[395,395],[1136,1136],[1148,1148],[2190,2190],[2509,2509],[3000,3000],[4713,4713],[5701,5701],[6158,6158],[6750,6750],[7503,7503],[509,509],[1690,1690],[2042,2042],[1569,1569],[1621,1621],[1975,1975],[3950,3950],[4796,4796],[3163,3163],[5317,5317],[6262,6262],[6947,6947],[9550,9550],[298,298],[3749,3749],[3764,3764],[4290,4290],[5105,5105],[4380,4381],[4437,4438],[4700,4703],"fff",[458,458],[10627,10627],[3410,3410],[3563,3563],[3703,3703],[3971,3971],[4033,4033],[4615,4615],[10385,10385],[3144,3144],[351,351],[739,739],[1388,1388],[5884,5884],[6089,6089],[5659,5659],[6588,6588],[6727,6727],[6866,6866],[7005,7005],[10824,10824],[10832,10832],[10972,10972],[15731,15731],[16054,16054],[16410,16410],[16765,16765],[17229,17229],[2538,2538],[2982,2982],[2713,2713],[3422,3422],[3484,3484],[4324,4324],[4489,4489],[5867,5867],[6081,6081],[6243,6243],[6554,6554],[6880,6880],[497,497],[951,951],[858,858],[4438,4438],[5561,5561],[834,834],[1757,1757],[3268,3268],[3245,3245],[2895,2895],[3567,3567],[2347,2347],[2562,2562],[4511,4511],[4837,4837],[5069,5069],[5491,5491],[5715,5715]]