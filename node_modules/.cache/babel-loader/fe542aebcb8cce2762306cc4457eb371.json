{"ast":null,"code":"/*\n * SupportedChainId must be defined inline, without using @uniswap/sdk-core, so that its members are their own types\n * {@see https://www.typescriptlang.org/docs/handbook/enums.html#union-enums-and-enum-member-types}. This allows the\n * derived const arrays and their types (eg {@link L1_CHAIN_IDS}, {@link SupportedL1ChainId}) to be narrowed and used\n * to enforce chain typing.\n *\n * Because this is not explicitly derived from @uniswap/sdk-core, there is a unit test to enforce conformance.\n */\nexport let SupportedChainId;\n(function (SupportedChainId) {\n  SupportedChainId[SupportedChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  SupportedChainId[SupportedChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_ONE\"] = 42161] = \"ARBITRUM_ONE\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_GOERLI\"] = 421613] = \"ARBITRUM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM_GOERLI\"] = 420] = \"OPTIMISM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  SupportedChainId[SupportedChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  SupportedChainId[SupportedChainId[\"CELO\"] = 42220] = \"CELO\";\n  SupportedChainId[SupportedChainId[\"CELO_ALFAJORES\"] = 44787] = \"CELO_ALFAJORES\";\n  SupportedChainId[SupportedChainId[\"BNB\"] = 56] = \"BNB\";\n  SupportedChainId[SupportedChainId[\"PLANQ\"] = 7070] = \"PLANQ\";\n})(SupportedChainId || (SupportedChainId = {}));\nexport const CHAIN_IDS_TO_NAMES = {\n  [SupportedChainId.PLANQ]: 'PLANQ',\n  [SupportedChainId.MAINNET]: 'mainnet',\n  [SupportedChainId.GOERLI]: 'goerli',\n  [SupportedChainId.POLYGON]: 'polygon',\n  [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai',\n  [SupportedChainId.CELO]: 'celo',\n  [SupportedChainId.CELO_ALFAJORES]: 'celo_alfajores',\n  [SupportedChainId.ARBITRUM_ONE]: 'arbitrum',\n  [SupportedChainId.ARBITRUM_GOERLI]: 'arbitrum_goerli',\n  [SupportedChainId.OPTIMISM]: 'optimism',\n  [SupportedChainId.OPTIMISM_GOERLI]: 'optimism_goerli',\n  [SupportedChainId.BNB]: 'bnb'\n};\n\n/**\n * Array of all the supported chain IDs\n */\nexport const ALL_SUPPORTED_CHAIN_IDS = Object.values(SupportedChainId).filter(id => typeof id === 'number');\nexport function isSupportedChain(chainId) {\n  return !!chainId && !!SupportedChainId[chainId];\n}\nexport const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [SupportedChainId.MAINNET, SupportedChainId.POLYGON, SupportedChainId.CELO, SupportedChainId.OPTIMISM, SupportedChainId.ARBITRUM_ONE, SupportedChainId.BNB, SupportedChainId.PLANQ];\n\n/**\n * Unsupported networks for V2 pool behavior.\n */\nexport const UNSUPPORTED_V2POOL_CHAIN_IDS = [SupportedChainId.POLYGON, SupportedChainId.OPTIMISM, SupportedChainId.ARBITRUM_ONE, SupportedChainId.BNB, SupportedChainId.ARBITRUM_GOERLI];\nexport const TESTNET_CHAIN_IDS = [SupportedChainId.GOERLI, SupportedChainId.POLYGON_MUMBAI, SupportedChainId.ARBITRUM_GOERLI, SupportedChainId.OPTIMISM_GOERLI];\n/**\n * All the chain IDs that are running the Ethereum protocol.\n */\nexport const L1_CHAIN_IDS = [SupportedChainId.MAINNET, SupportedChainId.GOERLI, SupportedChainId.POLYGON, SupportedChainId.POLYGON_MUMBAI, SupportedChainId.CELO, SupportedChainId.CELO_ALFAJORES, SupportedChainId.BNB, SupportedChainId.PLANQ];\n/**\n * Controls some L2 specific behavior, e.g. slippage tolerance, special UI behavior.\n * The expectation is that all of these networks have immediate transaction confirmation.\n */\nexport const L2_CHAIN_IDS = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.ARBITRUM_GOERLI, SupportedChainId.OPTIMISM, SupportedChainId.OPTIMISM_GOERLI];","map":{"version":3,"names":["SupportedChainId","CHAIN_IDS_TO_NAMES","PLANQ","MAINNET","GOERLI","POLYGON","POLYGON_MUMBAI","CELO","CELO_ALFAJORES","ARBITRUM_ONE","ARBITRUM_GOERLI","OPTIMISM","OPTIMISM_GOERLI","BNB","ALL_SUPPORTED_CHAIN_IDS","Object","values","filter","id","isSupportedChain","chainId","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","UNSUPPORTED_V2POOL_CHAIN_IDS","TESTNET_CHAIN_IDS","L1_CHAIN_IDS","L2_CHAIN_IDS"],"sources":["/workspace/Planq-Dapps/Physica-Interfae/src/constants/chains.ts"],"sourcesContent":["/*\n * SupportedChainId must be defined inline, without using @uniswap/sdk-core, so that its members are their own types\n * {@see https://www.typescriptlang.org/docs/handbook/enums.html#union-enums-and-enum-member-types}. This allows the\n * derived const arrays and their types (eg {@link L1_CHAIN_IDS}, {@link SupportedL1ChainId}) to be narrowed and used\n * to enforce chain typing.\n *\n * Because this is not explicitly derived from @uniswap/sdk-core, there is a unit test to enforce conformance.\n */\nexport enum SupportedChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n\n  BNB = 56,\n  PLANQ = 7070,\n}\n\nexport const CHAIN_IDS_TO_NAMES = {\n  [SupportedChainId.PLANQ]: 'PLANQ',\n  [SupportedChainId.MAINNET]: 'mainnet',\n  [SupportedChainId.GOERLI]: 'goerli',\n  [SupportedChainId.POLYGON]: 'polygon',\n  [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai',\n  [SupportedChainId.CELO]: 'celo',\n  [SupportedChainId.CELO_ALFAJORES]: 'celo_alfajores',\n  [SupportedChainId.ARBITRUM_ONE]: 'arbitrum',\n  [SupportedChainId.ARBITRUM_GOERLI]: 'arbitrum_goerli',\n  [SupportedChainId.OPTIMISM]: 'optimism',\n  [SupportedChainId.OPTIMISM_GOERLI]: 'optimism_goerli',\n  [SupportedChainId.BNB]: 'bnb',\n}\n\n/**\n * Array of all the supported chain IDs\n */\nexport const ALL_SUPPORTED_CHAIN_IDS: SupportedChainId[] = Object.values(SupportedChainId).filter(\n  (id) => typeof id === 'number'\n) as SupportedChainId[]\n\nexport function isSupportedChain(chainId: number | null | undefined): chainId is SupportedChainId {\n  return !!chainId && !!SupportedChainId[chainId]\n}\n\nexport const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [\n  SupportedChainId.MAINNET,\n  SupportedChainId.POLYGON,\n  SupportedChainId.CELO,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.BNB,\n  SupportedChainId.PLANQ,\n] as const\n\n/**\n * Unsupported networks for V2 pool behavior.\n */\nexport const UNSUPPORTED_V2POOL_CHAIN_IDS = [\n  SupportedChainId.POLYGON,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.BNB,\n  SupportedChainId.ARBITRUM_GOERLI,\n] as const\n\nexport const TESTNET_CHAIN_IDS = [\n  SupportedChainId.GOERLI,\n  SupportedChainId.POLYGON_MUMBAI,\n  SupportedChainId.ARBITRUM_GOERLI,\n  SupportedChainId.OPTIMISM_GOERLI,\n] as const\n\nexport type SupportedTestnetChainId = typeof TESTNET_CHAIN_IDS[number]\n\n/**\n * All the chain IDs that are running the Ethereum protocol.\n */\nexport const L1_CHAIN_IDS = [\n  SupportedChainId.MAINNET,\n  SupportedChainId.GOERLI,\n  SupportedChainId.POLYGON,\n  SupportedChainId.POLYGON_MUMBAI,\n  SupportedChainId.CELO,\n  SupportedChainId.CELO_ALFAJORES,\n  SupportedChainId.BNB,\n  SupportedChainId.PLANQ,\n] as const\n\nexport type SupportedL1ChainId = typeof L1_CHAIN_IDS[number]\n\n/**\n * Controls some L2 specific behavior, e.g. slippage tolerance, special UI behavior.\n * The expectation is that all of these networks have immediate transaction confirmation.\n */\nexport const L2_CHAIN_IDS = [\n  SupportedChainId.ARBITRUM_ONE,\n  SupportedChainId.ARBITRUM_GOERLI,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.OPTIMISM_GOERLI,\n] as const\n\nexport type SupportedL2ChainId = typeof L2_CHAIN_IDS[number]\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}